// Package portonev2client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package portonev2client

import (
	"bytes"
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
)

const (
	BearerJwtScopes = "bearerJwt.Scopes"
	PortOneScopes   = "portOne.Scopes"
)

// Defines values for AmountExceededType.
const (
	DISCOUNTTAXFREETHANDISCOUNT     AmountExceededType = "DISCOUNT_TAX_FREE_THAN_DISCOUNT"
	DISCOUNTTAXFREETHANORDERTAXFREE AmountExceededType = "DISCOUNT_TAX_FREE_THAN_ORDER_TAX_FREE"
	DISCOUNTTHANORDER               AmountExceededType = "DISCOUNT_THAN_ORDER"
	PAYMENTTAXFREETHANPAYMENT       AmountExceededType = "PAYMENT_TAX_FREE_THAN_PAYMENT"
)

// Defines values for Bank.
const (
	BankBANKOFAMERICA          Bank = "BANK_OF_AMERICA"
	BankBANKOFCHINA            Bank = "BANK_OF_CHINA"
	BankBANKOFKOREA            Bank = "BANK_OF_KOREA"
	BankBNKSECURITIES          Bank = "BNK_SECURITIES"
	BankBNPPARIBAS             Bank = "BNP_PARIBAS"
	BankBOCOM                  Bank = "BOCOM"
	BankBOOKOOKSECURITIES      Bank = "BOOKOOK_SECURITIES"
	BankBUSAN                  Bank = "BUSAN"
	BankCAPESECURITIES         Bank = "CAPE_SECURITIES"
	BankCCB                    Bank = "CCB"
	BankCITI                   Bank = "CITI"
	BankDAEGU                  Bank = "DAEGU"
	BankDAISHINSECURITIES      Bank = "DAISHIN_SECURITIES"
	BankDAOLSECURITIES         Bank = "DAOL_SECURITIES"
	BankDBSECURITIES           Bank = "DB_SECURITIES"
	BankDEUTSCHE               Bank = "DEUTSCHE"
	BankEBESTSECURITIES        Bank = "EBEST_SECURITIES"
	BankEUGENESECURITIES       Bank = "EUGENE_SECURITIES"
	BankHANA                   Bank = "HANA"
	BankHANASECURITIES         Bank = "HANA_SECURITIES"
	BankHANHWASECURITIES       Bank = "HANHWA_SECURITIES"
	BankHANYANGSECURITIES      Bank = "HANYANG_SECURITIES"
	BankHISECURITIES           Bank = "HI_SECURITIES"
	BankHSBC                   Bank = "HSBC"
	BankHYUNDAIMOTORSECURITIES Bank = "HYUNDAI_MOTOR_SECURITIES"
	BankIBK                    Bank = "IBK"
	BankIBKSECURITIES          Bank = "IBK_SECURITIES"
	BankICBC                   Bank = "ICBC"
	BankJEJU                   Bank = "JEJU"
	BankJEONBUK                Bank = "JEONBUK"
	BankJPMC                   Bank = "JPMC"
	BankKAKAO                  Bank = "KAKAO"
	BankKAKAOPAYSECURITIES     Bank = "KAKAO_PAY_SECURITIES"
	BankKBANK                  Bank = "K_BANK"
	BankKBSECURITIES           Bank = "KB_SECURITIES"
	BankKCIS                   Bank = "KCIS"
	BankKDB                    Bank = "KDB"
	BankKEXIM                  Bank = "KEXIM"
	BankKFCC                   Bank = "KFCC"
	BankKIBO                   Bank = "KIBO"
	BankKIWOOMSECURITIES       Bank = "KIWOOM_SECURITIES"
	BankKODIT                  Bank = "KODIT"
	BankKOOKMIN                Bank = "KOOKMIN"
	BankKOREAFOSSSECURITIES    Bank = "KOREA_FOSS_SECURITIES"
	BankKOREASECURITIES        Bank = "KOREA_SECURITIES"
	BankKOREASECURITIESFINANCE Bank = "KOREA_SECURITIES_FINANCE"
	BankKWANGJU                Bank = "KWANGJU"
	BankKYOBOSECURITIES        Bank = "KYOBO_SECURITIES"
	BankKYONGNAM               Bank = "KYONGNAM"
	BankLEADINGSECURITIES      Bank = "LEADING_SECURITIES"
	BankLOCALNONGHYUP          Bank = "LOCAL_NONGHYUP"
	BankMERITZSECURITIES       Bank = "MERITZ_SECURITIES"
	BankMIRAEASSETSECURITIES   Bank = "MIRAE_ASSET_SECURITIES"
	BankMISCFOREIGN            Bank = "MISC_FOREIGN"
	BankMIZUHO                 Bank = "MIZUHO"
	BankMORGANSTANLEY          Bank = "MORGAN_STANLEY"
	BankMUFG                   Bank = "MUFG"
	BankNFCF                   Bank = "NFCF"
	BankNHSECURITIES           Bank = "NH_SECURITIES"
	BankNONGHYUP               Bank = "NONGHYUP"
	BankPOST                   Bank = "POST"
	BankSAMSUNGSECURITIES      Bank = "SAMSUNG_SECURITIES"
	BankSANGSANGINSECURITIES   Bank = "SANGSANGIN_SECURITIES"
	BankSAVINGSBANK            Bank = "SAVINGS_BANK"
	BankSGI                    Bank = "SGI"
	BankSHINHAN                Bank = "SHINHAN"
	BankSHINHANSECURITIES      Bank = "SHINHAN_SECURITIES"
	BankSHINHYUP               Bank = "SHINHYUP"
	BankSHINYOUNGSECURITIES    Bank = "SHINYOUNG_SECURITIES"
	BankSKSECURITIES           Bank = "SK_SECURITIES"
	BankSTANDARDCHARTERED      Bank = "STANDARD_CHARTERED"
	BankSUHYUP                 Bank = "SUHYUP"
	BankTOSS                   Bank = "TOSS"
	BankTOSSSECURITIES         Bank = "TOSS_SECURITIES"
	BankUOB                    Bank = "UOB"
	BankWOORI                  Bank = "WOORI"
	BankWOORIINVESTMENTBANK    Bank = "WOORI_INVESTMENT_BANK"
	BankYUANTASECURITIES       Bank = "YUANTA_SECURITIES"
)

// Defines values for BillingKeyPaymentMethodType.
const (
	BillingKeyPaymentMethodTypeCARD     BillingKeyPaymentMethodType = "CARD"
	BillingKeyPaymentMethodTypeEASYPAY  BillingKeyPaymentMethodType = "EASY_PAY"
	BillingKeyPaymentMethodTypeMOBILE   BillingKeyPaymentMethodType = "MOBILE"
	BillingKeyPaymentMethodTypeTRANSFER BillingKeyPaymentMethodType = "TRANSFER"
)

// Defines values for BillingKeySortBy.
const (
	BillingKeySortByDELETEDAT       BillingKeySortBy = "DELETED_AT"
	BillingKeySortByISSUEDAT        BillingKeySortBy = "ISSUED_AT"
	BillingKeySortByREQUESTEDAT     BillingKeySortBy = "REQUESTED_AT"
	BillingKeySortBySTATUSTIMESTAMP BillingKeySortBy = "STATUS_TIMESTAMP"
)

// Defines values for BillingKeyStatus.
const (
	BillingKeyStatusDELETED BillingKeyStatus = "DELETED"
	BillingKeyStatusISSUED  BillingKeyStatus = "ISSUED"
)

// Defines values for BillingKeyTextSearchField.
const (
	BillingKeyTextSearchFieldBILLINGKEY          BillingKeyTextSearchField = "BILLING_KEY"
	BillingKeyTextSearchFieldCARDBIN             BillingKeyTextSearchField = "CARD_BIN"
	BillingKeyTextSearchFieldCARDNUMBER          BillingKeyTextSearchField = "CARD_NUMBER"
	BillingKeyTextSearchFieldCHANNELGROUPNAME    BillingKeyTextSearchField = "CHANNEL_GROUP_NAME"
	BillingKeyTextSearchFieldCUSTOMERADDRESS     BillingKeyTextSearchField = "CUSTOMER_ADDRESS"
	BillingKeyTextSearchFieldCUSTOMEREMAIL       BillingKeyTextSearchField = "CUSTOMER_EMAIL"
	BillingKeyTextSearchFieldCUSTOMERNAME        BillingKeyTextSearchField = "CUSTOMER_NAME"
	BillingKeyTextSearchFieldCUSTOMERPHONENUMBER BillingKeyTextSearchField = "CUSTOMER_PHONE_NUMBER"
	BillingKeyTextSearchFieldCUSTOMERZIPCODE     BillingKeyTextSearchField = "CUSTOMER_ZIPCODE"
	BillingKeyTextSearchFieldPGMERCHANTID        BillingKeyTextSearchField = "PG_MERCHANT_ID"
	BillingKeyTextSearchFieldUSERAGENT           BillingKeyTextSearchField = "USER_AGENT"
)

// Defines values for BillingKeyTimeRangeField.
const (
	BillingKeyTimeRangeFieldDELETEDAT       BillingKeyTimeRangeField = "DELETED_AT"
	BillingKeyTimeRangeFieldISSUEDAT        BillingKeyTimeRangeField = "ISSUED_AT"
	BillingKeyTimeRangeFieldREQUESTEDAT     BillingKeyTimeRangeField = "REQUESTED_AT"
	BillingKeyTimeRangeFieldSTATUSTIMESTAMP BillingKeyTimeRangeField = "STATUS_TIMESTAMP"
)

// Defines values for CancelRequester.
const (
	ADMIN    CancelRequester = "ADMIN"
	CUSTOMER CancelRequester = "CUSTOMER"
)

// Defines values for CardBrand.
const (
	AMEX     CardBrand = "AMEX"
	DINERS   CardBrand = "DINERS"
	JCB      CardBrand = "JCB"
	LOCAL    CardBrand = "LOCAL"
	MASTER   CardBrand = "MASTER"
	UNIONPAY CardBrand = "UNIONPAY"
	VISA     CardBrand = "VISA"
)

// Defines values for CardOwnerType.
const (
	CardOwnerTypeCORPORATE CardOwnerType = "CORPORATE"
	CardOwnerTypePERSONAL  CardOwnerType = "PERSONAL"
)

// Defines values for CardType.
const (
	CREDIT CardType = "CREDIT"
	DEBIT  CardType = "DEBIT"
	GIFT   CardType = "GIFT"
)

// Defines values for CashReceiptInputType.
const (
	CashReceiptInputTypeCORPORATE CashReceiptInputType = "CORPORATE"
	CashReceiptInputTypeNORECEIPT CashReceiptInputType = "NO_RECEIPT"
	CashReceiptInputTypePERSONAL  CashReceiptInputType = "PERSONAL"
)

// Defines values for CashReceiptType.
const (
	CORPORATE CashReceiptType = "CORPORATE"
	PERSONAL  CashReceiptType = "PERSONAL"
)

// Defines values for Country.
const (
	AD Country = "AD"
	AE Country = "AE"
	AF Country = "AF"
	AG Country = "AG"
	AI Country = "AI"
	AL Country = "AL"
	AM Country = "AM"
	AO Country = "AO"
	AQ Country = "AQ"
	AR Country = "AR"
	AS Country = "AS"
	AT Country = "AT"
	AU Country = "AU"
	AW Country = "AW"
	AX Country = "AX"
	AZ Country = "AZ"
	BA Country = "BA"
	BB Country = "BB"
	BD Country = "BD"
	BE Country = "BE"
	BF Country = "BF"
	BG Country = "BG"
	BH Country = "BH"
	BI Country = "BI"
	BJ Country = "BJ"
	BL Country = "BL"
	BM Country = "BM"
	BN Country = "BN"
	BO Country = "BO"
	BQ Country = "BQ"
	BR Country = "BR"
	BS Country = "BS"
	BT Country = "BT"
	BV Country = "BV"
	BW Country = "BW"
	BY Country = "BY"
	BZ Country = "BZ"
	CA Country = "CA"
	CC Country = "CC"
	CD Country = "CD"
	CF Country = "CF"
	CG Country = "CG"
	CH Country = "CH"
	CI Country = "CI"
	CK Country = "CK"
	CL Country = "CL"
	CM Country = "CM"
	CN Country = "CN"
	CO Country = "CO"
	CR Country = "CR"
	CU Country = "CU"
	CV Country = "CV"
	CW Country = "CW"
	CX Country = "CX"
	CY Country = "CY"
	CZ Country = "CZ"
	DE Country = "DE"
	DJ Country = "DJ"
	DK Country = "DK"
	DM Country = "DM"
	DO Country = "DO"
	DZ Country = "DZ"
	EC Country = "EC"
	EE Country = "EE"
	EG Country = "EG"
	EH Country = "EH"
	ER Country = "ER"
	ES Country = "ES"
	ET Country = "ET"
	FI Country = "FI"
	FJ Country = "FJ"
	FK Country = "FK"
	FM Country = "FM"
	FO Country = "FO"
	FR Country = "FR"
	GA Country = "GA"
	GB Country = "GB"
	GD Country = "GD"
	GE Country = "GE"
	GF Country = "GF"
	GG Country = "GG"
	GH Country = "GH"
	GI Country = "GI"
	GL Country = "GL"
	GM Country = "GM"
	GN Country = "GN"
	GP Country = "GP"
	GQ Country = "GQ"
	GR Country = "GR"
	GS Country = "GS"
	GT Country = "GT"
	GU Country = "GU"
	GW Country = "GW"
	GY Country = "GY"
	HK Country = "HK"
	HM Country = "HM"
	HN Country = "HN"
	HR Country = "HR"
	HT Country = "HT"
	HU Country = "HU"
	ID Country = "ID"
	IE Country = "IE"
	IL Country = "IL"
	IM Country = "IM"
	IN Country = "IN"
	IO Country = "IO"
	IQ Country = "IQ"
	IR Country = "IR"
	IS Country = "IS"
	IT Country = "IT"
	JE Country = "JE"
	JM Country = "JM"
	JO Country = "JO"
	JP Country = "JP"
	KE Country = "KE"
	KG Country = "KG"
	KH Country = "KH"
	KI Country = "KI"
	KM Country = "KM"
	KN Country = "KN"
	KP Country = "KP"
	KR Country = "KR"
	KW Country = "KW"
	KY Country = "KY"
	KZ Country = "KZ"
	LA Country = "LA"
	LB Country = "LB"
	LC Country = "LC"
	LI Country = "LI"
	LK Country = "LK"
	LR Country = "LR"
	LS Country = "LS"
	LT Country = "LT"
	LU Country = "LU"
	LV Country = "LV"
	LY Country = "LY"
	MA Country = "MA"
	MC Country = "MC"
	MD Country = "MD"
	ME Country = "ME"
	MF Country = "MF"
	MG Country = "MG"
	MH Country = "MH"
	MK Country = "MK"
	ML Country = "ML"
	MM Country = "MM"
	MN Country = "MN"
	MO Country = "MO"
	MP Country = "MP"
	MQ Country = "MQ"
	MR Country = "MR"
	MS Country = "MS"
	MT Country = "MT"
	MU Country = "MU"
	MV Country = "MV"
	MW Country = "MW"
	MX Country = "MX"
	MY Country = "MY"
	MZ Country = "MZ"
	NA Country = "NA"
	NC Country = "NC"
	NE Country = "NE"
	NF Country = "NF"
	NG Country = "NG"
	NI Country = "NI"
	NL Country = "NL"
	NO Country = "NO"
	NP Country = "NP"
	NR Country = "NR"
	NU Country = "NU"
	NZ Country = "NZ"
	OM Country = "OM"
	PA Country = "PA"
	PE Country = "PE"
	PF Country = "PF"
	PG Country = "PG"
	PH Country = "PH"
	PK Country = "PK"
	PL Country = "PL"
	PM Country = "PM"
	PN Country = "PN"
	PR Country = "PR"
	PS Country = "PS"
	PT Country = "PT"
	PW Country = "PW"
	PY Country = "PY"
	QA Country = "QA"
	RE Country = "RE"
	RO Country = "RO"
	RS Country = "RS"
	RU Country = "RU"
	RW Country = "RW"
	SA Country = "SA"
	SB Country = "SB"
	SC Country = "SC"
	SD Country = "SD"
	SE Country = "SE"
	SG Country = "SG"
	SH Country = "SH"
	SI Country = "SI"
	SJ Country = "SJ"
	SK Country = "SK"
	SL Country = "SL"
	SM Country = "SM"
	SN Country = "SN"
	SO Country = "SO"
	SR Country = "SR"
	SS Country = "SS"
	ST Country = "ST"
	SV Country = "SV"
	SX Country = "SX"
	SY Country = "SY"
	SZ Country = "SZ"
	TC Country = "TC"
	TD Country = "TD"
	TF Country = "TF"
	TG Country = "TG"
	TH Country = "TH"
	TJ Country = "TJ"
	TK Country = "TK"
	TL Country = "TL"
	TM Country = "TM"
	TN Country = "TN"
	TO Country = "TO"
	TR Country = "TR"
	TT Country = "TT"
	TV Country = "TV"
	TW Country = "TW"
	TZ Country = "TZ"
	UA Country = "UA"
	UG Country = "UG"
	UM Country = "UM"
	US Country = "US"
	UY Country = "UY"
	UZ Country = "UZ"
	VA Country = "VA"
	VC Country = "VC"
	VE Country = "VE"
	VG Country = "VG"
	VI Country = "VI"
	VN Country = "VN"
	VU Country = "VU"
	WF Country = "WF"
	WS Country = "WS"
	YE Country = "YE"
	YT Country = "YT"
	ZA Country = "ZA"
	ZM Country = "ZM"
	ZW Country = "ZW"
)

// Defines values for Currency.
const (
	AED Currency = "AED"
	AFN Currency = "AFN"
	ALL Currency = "ALL"
	AMD Currency = "AMD"
	ANG Currency = "ANG"
	AOA Currency = "AOA"
	ARS Currency = "ARS"
	AUD Currency = "AUD"
	AWG Currency = "AWG"
	AZN Currency = "AZN"
	BAM Currency = "BAM"
	BBD Currency = "BBD"
	BDT Currency = "BDT"
	BGN Currency = "BGN"
	BHD Currency = "BHD"
	BIF Currency = "BIF"
	BMD Currency = "BMD"
	BND Currency = "BND"
	BOB Currency = "BOB"
	BOV Currency = "BOV"
	BRL Currency = "BRL"
	BSD Currency = "BSD"
	BTN Currency = "BTN"
	BWP Currency = "BWP"
	BYN Currency = "BYN"
	BZD Currency = "BZD"
	CAD Currency = "CAD"
	CDF Currency = "CDF"
	CHE Currency = "CHE"
	CHF Currency = "CHF"
	CHW Currency = "CHW"
	CLF Currency = "CLF"
	CLP Currency = "CLP"
	CNY Currency = "CNY"
	COP Currency = "COP"
	COU Currency = "COU"
	CRC Currency = "CRC"
	CUC Currency = "CUC"
	CUP Currency = "CUP"
	CVE Currency = "CVE"
	CZK Currency = "CZK"
	DJF Currency = "DJF"
	DKK Currency = "DKK"
	DOP Currency = "DOP"
	DZD Currency = "DZD"
	EGP Currency = "EGP"
	ERN Currency = "ERN"
	ETB Currency = "ETB"
	EUR Currency = "EUR"
	FJD Currency = "FJD"
	FKP Currency = "FKP"
	GBP Currency = "GBP"
	GEL Currency = "GEL"
	GHS Currency = "GHS"
	GIP Currency = "GIP"
	GMD Currency = "GMD"
	GNF Currency = "GNF"
	GTQ Currency = "GTQ"
	GYD Currency = "GYD"
	HKD Currency = "HKD"
	HNL Currency = "HNL"
	HRK Currency = "HRK"
	HTG Currency = "HTG"
	HUF Currency = "HUF"
	IDR Currency = "IDR"
	ILS Currency = "ILS"
	INR Currency = "INR"
	IQD Currency = "IQD"
	IRR Currency = "IRR"
	ISK Currency = "ISK"
	JMD Currency = "JMD"
	JOD Currency = "JOD"
	JPY Currency = "JPY"
	KES Currency = "KES"
	KGS Currency = "KGS"
	KHR Currency = "KHR"
	KMF Currency = "KMF"
	KPW Currency = "KPW"
	KRW Currency = "KRW"
	KWD Currency = "KWD"
	KYD Currency = "KYD"
	KZT Currency = "KZT"
	LAK Currency = "LAK"
	LBP Currency = "LBP"
	LKR Currency = "LKR"
	LRD Currency = "LRD"
	LSL Currency = "LSL"
	LYD Currency = "LYD"
	MAD Currency = "MAD"
	MDL Currency = "MDL"
	MGA Currency = "MGA"
	MKD Currency = "MKD"
	MMK Currency = "MMK"
	MNT Currency = "MNT"
	MOP Currency = "MOP"
	MRU Currency = "MRU"
	MUR Currency = "MUR"
	MVR Currency = "MVR"
	MWK Currency = "MWK"
	MXN Currency = "MXN"
	MXV Currency = "MXV"
	MYR Currency = "MYR"
	MZN Currency = "MZN"
	NAD Currency = "NAD"
	NGN Currency = "NGN"
	NIO Currency = "NIO"
	NOK Currency = "NOK"
	NPR Currency = "NPR"
	NZD Currency = "NZD"
	OMR Currency = "OMR"
	PAB Currency = "PAB"
	PEN Currency = "PEN"
	PGK Currency = "PGK"
	PHP Currency = "PHP"
	PKR Currency = "PKR"
	PLN Currency = "PLN"
	PYG Currency = "PYG"
	QAR Currency = "QAR"
	RON Currency = "RON"
	RSD Currency = "RSD"
	RUB Currency = "RUB"
	RWF Currency = "RWF"
	SAR Currency = "SAR"
	SBD Currency = "SBD"
	SCR Currency = "SCR"
	SDG Currency = "SDG"
	SEK Currency = "SEK"
	SGD Currency = "SGD"
	SHP Currency = "SHP"
	SLE Currency = "SLE"
	SLL Currency = "SLL"
	SOS Currency = "SOS"
	SRD Currency = "SRD"
	SSP Currency = "SSP"
	STN Currency = "STN"
	SVC Currency = "SVC"
	SYP Currency = "SYP"
	SZL Currency = "SZL"
	THB Currency = "THB"
	TJS Currency = "TJS"
	TMT Currency = "TMT"
	TND Currency = "TND"
	TOP Currency = "TOP"
	TRY Currency = "TRY"
	TTD Currency = "TTD"
	TWD Currency = "TWD"
	TZS Currency = "TZS"
	UAH Currency = "UAH"
	UGX Currency = "UGX"
	USD Currency = "USD"
	USN Currency = "USN"
	UYI Currency = "UYI"
	UYU Currency = "UYU"
	UYW Currency = "UYW"
	UZS Currency = "UZS"
	VED Currency = "VED"
	VES Currency = "VES"
	VND Currency = "VND"
	VUV Currency = "VUV"
	WST Currency = "WST"
	XAF Currency = "XAF"
	XAG Currency = "XAG"
	XAU Currency = "XAU"
	XBA Currency = "XBA"
	XBB Currency = "XBB"
	XBC Currency = "XBC"
	XBD Currency = "XBD"
	XCD Currency = "XCD"
	XDR Currency = "XDR"
	XOF Currency = "XOF"
	XPD Currency = "XPD"
	XPF Currency = "XPF"
	XPT Currency = "XPT"
	XSU Currency = "XSU"
	XTS Currency = "XTS"
	XUA Currency = "XUA"
	XXX Currency = "XXX"
	YER Currency = "YER"
	ZAR Currency = "ZAR"
	ZMW Currency = "ZMW"
	ZWL Currency = "ZWL"
)

// Defines values for DayOfWeek.
const (
	FRI DayOfWeek = "FRI"
	MON DayOfWeek = "MON"
	SAT DayOfWeek = "SAT"
	SUN DayOfWeek = "SUN"
	THU DayOfWeek = "THU"
	TUE DayOfWeek = "TUE"
	WED DayOfWeek = "WED"
)

// Defines values for EasyPayMethodType.
const (
	EasyPayMethodTypeCARD     EasyPayMethodType = "CARD"
	EasyPayMethodTypeCHARGE   EasyPayMethodType = "CHARGE"
	EasyPayMethodTypeTRANSFER EasyPayMethodType = "TRANSFER"
)

// Defines values for EasyPayProvider.
const (
	EasyPayProviderALIPAY       EasyPayProvider = "ALIPAY"
	EasyPayProviderAPPLEPAY     EasyPayProvider = "APPLEPAY"
	EasyPayProviderCHAI         EasyPayProvider = "CHAI"
	EasyPayProviderHYPHEN       EasyPayProvider = "HYPHEN"
	EasyPayProviderKAKAOPAY     EasyPayProvider = "KAKAOPAY"
	EasyPayProviderKBAPP        EasyPayProvider = "KB_APP"
	EasyPayProviderKPAY         EasyPayProvider = "KPAY"
	EasyPayProviderLGPAY        EasyPayProvider = "LGPAY"
	EasyPayProviderLPAY         EasyPayProvider = "LPAY"
	EasyPayProviderNAVERPAY     EasyPayProvider = "NAVERPAY"
	EasyPayProviderPAYCO        EasyPayProvider = "PAYCO"
	EasyPayProviderPINPAY       EasyPayProvider = "PINPAY"
	EasyPayProviderSAMSUNGPAY   EasyPayProvider = "SAMSUNGPAY"
	EasyPayProviderSKPAY        EasyPayProvider = "SKPAY"
	EasyPayProviderSSGPAY       EasyPayProvider = "SSGPAY"
	EasyPayProviderTMONEY       EasyPayProvider = "TMONEY"
	EasyPayProviderTOSSBRANDPAY EasyPayProvider = "TOSS_BRANDPAY"
	EasyPayProviderTOSSPAY      EasyPayProvider = "TOSSPAY"
)

// Defines values for Gender.
const (
	FEMALE Gender = "FEMALE"
	MALE   Gender = "MALE"
	OTHER  Gender = "OTHER"
)

// Defines values for IdentityVerificationMethod.
const (
	APP IdentityVerificationMethod = "APP"
	SMS IdentityVerificationMethod = "SMS"
)

// Defines values for IdentityVerificationOperator.
const (
	KT      IdentityVerificationOperator = "KT"
	KTMVNO  IdentityVerificationOperator = "KT_MVNO"
	LGU     IdentityVerificationOperator = "LGU"
	LGUMVNO IdentityVerificationOperator = "LGU_MVNO"
	SKT     IdentityVerificationOperator = "SKT"
	SKTMVNO IdentityVerificationOperator = "SKT_MVNO"
)

// Defines values for InstantPaymentMethodInputVirtualAccountOptionType.
const (
	InstantPaymentMethodInputVirtualAccountOptionTypeFIXED  InstantPaymentMethodInputVirtualAccountOptionType = "FIXED"
	InstantPaymentMethodInputVirtualAccountOptionTypeNORMAL InstantPaymentMethodInputVirtualAccountOptionType = "NORMAL"
)

// Defines values for PaymentCashReceiptStatus.
const (
	PaymentCashReceiptStatusCANCELLED PaymentCashReceiptStatus = "CANCELLED"
	PaymentCashReceiptStatusISSUED    PaymentCashReceiptStatus = "ISSUED"
)

// Defines values for PaymentClientType.
const (
	PaymentClientTypeAPI       PaymentClientType = "API"
	PaymentClientTypeSDKMOBILE PaymentClientType = "SDK_MOBILE"
	PaymentClientTypeSDKPC     PaymentClientType = "SDK_PC"
)

// Defines values for PaymentFilterInputEscrowStatus.
const (
	PaymentFilterInputEscrowStatusCANCELLED       PaymentFilterInputEscrowStatus = "CANCELLED"
	PaymentFilterInputEscrowStatusCONFIRMED       PaymentFilterInputEscrowStatus = "CONFIRMED"
	PaymentFilterInputEscrowStatusDELIVERED       PaymentFilterInputEscrowStatus = "DELIVERED"
	PaymentFilterInputEscrowStatusREGISTERED      PaymentFilterInputEscrowStatus = "REGISTERED"
	PaymentFilterInputEscrowStatusREJECTCONFIRMED PaymentFilterInputEscrowStatus = "REJECT_CONFIRMED"
	PaymentFilterInputEscrowStatusREJECTED        PaymentFilterInputEscrowStatus = "REJECTED"
)

// Defines values for PaymentLogisticsCompany.
const (
	PaymentLogisticsCompanyACI            PaymentLogisticsCompany = "ACI"
	PaymentLogisticsCompanyCHUNIL         PaymentLogisticsCompany = "CHUNIL"
	PaymentLogisticsCompanyCJ             PaymentLogisticsCompany = "CJ"
	PaymentLogisticsCompanyCJINTL         PaymentLogisticsCompany = "CJ_INTL"
	PaymentLogisticsCompanyDAESIN         PaymentLogisticsCompany = "DAESIN"
	PaymentLogisticsCompanyDHL            PaymentLogisticsCompany = "DHL"
	PaymentLogisticsCompanyDONGWON        PaymentLogisticsCompany = "DONGWON"
	PaymentLogisticsCompanyEMS            PaymentLogisticsCompany = "EMS"
	PaymentLogisticsCompanyETC            PaymentLogisticsCompany = "ETC"
	PaymentLogisticsCompanyFEDEX          PaymentLogisticsCompany = "FEDEX"
	PaymentLogisticsCompanyGOODSTOLUCK    PaymentLogisticsCompany = "GOODSTOLUCK"
	PaymentLogisticsCompanyGS             PaymentLogisticsCompany = "GS"
	PaymentLogisticsCompanyGSMNTON        PaymentLogisticsCompany = "GSM_NTON"
	PaymentLogisticsCompanyHANJIN         PaymentLogisticsCompany = "HANJIN"
	PaymentLogisticsCompanyHAPDONG        PaymentLogisticsCompany = "HAPDONG"
	PaymentLogisticsCompanyILYANG         PaymentLogisticsCompany = "ILYANG"
	PaymentLogisticsCompanyKGL            PaymentLogisticsCompany = "KGL"
	PaymentLogisticsCompanyKUNYOUNG       PaymentLogisticsCompany = "KUNYOUNG"
	PaymentLogisticsCompanyKYUNGDONG      PaymentLogisticsCompany = "KYUNGDONG"
	PaymentLogisticsCompanyLOGEN          PaymentLogisticsCompany = "LOGEN"
	PaymentLogisticsCompanyLOTTE          PaymentLogisticsCompany = "LOTTE"
	PaymentLogisticsCompanyLXPANTOS       PaymentLogisticsCompany = "LX_PANTOS"
	PaymentLogisticsCompanyPOST           PaymentLogisticsCompany = "POST"
	PaymentLogisticsCompanyPOSTREGISTERED PaymentLogisticsCompany = "POST_REGISTERED"
	PaymentLogisticsCompanySF             PaymentLogisticsCompany = "SF"
	PaymentLogisticsCompanySLX            PaymentLogisticsCompany = "SLX"
	PaymentLogisticsCompanySUNGWON        PaymentLogisticsCompany = "SUNGWON"
	PaymentLogisticsCompanyUPS            PaymentLogisticsCompany = "UPS"
	PaymentLogisticsCompanyUSPS           PaymentLogisticsCompany = "USPS"
	PaymentLogisticsCompanyWOORI          PaymentLogisticsCompany = "WOORI"
)

// Defines values for PaymentMethodGiftCertificateType.
const (
	BOOKNLIFE    PaymentMethodGiftCertificateType = "BOOKNLIFE"
	CULTUREGIFT  PaymentMethodGiftCertificateType = "CULTUREGIFT"
	CULTURELAND  PaymentMethodGiftCertificateType = "CULTURELAND"
	HAPPYMONEY   PaymentMethodGiftCertificateType = "HAPPYMONEY"
	SMARTMUNSANG PaymentMethodGiftCertificateType = "SMART_MUNSANG"
)

// Defines values for PaymentMethodType.
const (
	CARD            PaymentMethodType = "CARD"
	EASYPAY         PaymentMethodType = "EASY_PAY"
	GIFTCERTIFICATE PaymentMethodType = "GIFT_CERTIFICATE"
	MOBILE          PaymentMethodType = "MOBILE"
	TRANSFER        PaymentMethodType = "TRANSFER"
	VIRTUALACCOUNT  PaymentMethodType = "VIRTUAL_ACCOUNT"
)

// Defines values for PaymentMethodVirtualAccountRefundStatus.
const (
	PaymentMethodVirtualAccountRefundStatusCOMPLETED           PaymentMethodVirtualAccountRefundStatus = "COMPLETED"
	PaymentMethodVirtualAccountRefundStatusFAILED              PaymentMethodVirtualAccountRefundStatus = "FAILED"
	PaymentMethodVirtualAccountRefundStatusPARTIALREFUNDFAILED PaymentMethodVirtualAccountRefundStatus = "PARTIAL_REFUND_FAILED"
	PaymentMethodVirtualAccountRefundStatusPENDING             PaymentMethodVirtualAccountRefundStatus = "PENDING"
)

// Defines values for PaymentMethodVirtualAccountType.
const (
	PaymentMethodVirtualAccountTypeFIXED  PaymentMethodVirtualAccountType = "FIXED"
	PaymentMethodVirtualAccountTypeNORMAL PaymentMethodVirtualAccountType = "NORMAL"
)

// Defines values for PaymentProductType.
const (
	DIGITAL  PaymentProductType = "DIGITAL"
	PHYSICAL PaymentProductType = "PHYSICAL"
)

// Defines values for PaymentScheduleSortBy.
const (
	PaymentScheduleSortByCOMPLETEDAT PaymentScheduleSortBy = "COMPLETED_AT"
	PaymentScheduleSortByCREATEDAT   PaymentScheduleSortBy = "CREATED_AT"
	PaymentScheduleSortByTIMETOPAY   PaymentScheduleSortBy = "TIME_TO_PAY"
)

// Defines values for PaymentScheduleStatus.
const (
	PaymentScheduleStatusFAILED    PaymentScheduleStatus = "FAILED"
	PaymentScheduleStatusPENDING   PaymentScheduleStatus = "PENDING"
	PaymentScheduleStatusREVOKED   PaymentScheduleStatus = "REVOKED"
	PaymentScheduleStatusSCHEDULED PaymentScheduleStatus = "SCHEDULED"
	PaymentScheduleStatusSTARTED   PaymentScheduleStatus = "STARTED"
	PaymentScheduleStatusSUCCEEDED PaymentScheduleStatus = "SUCCEEDED"
)

// Defines values for PaymentSortBy.
const (
	REQUESTEDAT     PaymentSortBy = "REQUESTED_AT"
	STATUSCHANGEDAT PaymentSortBy = "STATUS_CHANGED_AT"
)

// Defines values for PaymentStatus.
const (
	PaymentStatusCANCELLED            PaymentStatus = "CANCELLED"
	PaymentStatusFAILED               PaymentStatus = "FAILED"
	PaymentStatusPAID                 PaymentStatus = "PAID"
	PaymentStatusPARTIALCANCELLED     PaymentStatus = "PARTIAL_CANCELLED"
	PaymentStatusPENDING              PaymentStatus = "PENDING"
	PaymentStatusREADY                PaymentStatus = "READY"
	PaymentStatusVIRTUALACCOUNTISSUED PaymentStatus = "VIRTUAL_ACCOUNT_ISSUED"
)

// Defines values for PaymentTextSearchField.
const (
	PaymentTextSearchFieldALL                             PaymentTextSearchField = "ALL"
	PaymentTextSearchFieldBILLINGKEY                      PaymentTextSearchField = "BILLING_KEY"
	PaymentTextSearchFieldCANCELREASON                    PaymentTextSearchField = "CANCEL_REASON"
	PaymentTextSearchFieldCARDACQUIRER                    PaymentTextSearchField = "CARD_ACQUIRER"
	PaymentTextSearchFieldCARDAPPROVALNUMBER              PaymentTextSearchField = "CARD_APPROVAL_NUMBER"
	PaymentTextSearchFieldCARDBIN                         PaymentTextSearchField = "CARD_BIN"
	PaymentTextSearchFieldCARDINSTALLMENT                 PaymentTextSearchField = "CARD_INSTALLMENT"
	PaymentTextSearchFieldCARDISSUER                      PaymentTextSearchField = "CARD_ISSUER"
	PaymentTextSearchFieldCARDNUMBER                      PaymentTextSearchField = "CARD_NUMBER"
	PaymentTextSearchFieldCARDRECEIPTNAME                 PaymentTextSearchField = "CARD_RECEIPT_NAME"
	PaymentTextSearchFieldCUSTOMERADDRESS                 PaymentTextSearchField = "CUSTOMER_ADDRESS"
	PaymentTextSearchFieldCUSTOMEREMAIL                   PaymentTextSearchField = "CUSTOMER_EMAIL"
	PaymentTextSearchFieldCUSTOMERNAME                    PaymentTextSearchField = "CUSTOMER_NAME"
	PaymentTextSearchFieldCUSTOMERPHONENUMBER             PaymentTextSearchField = "CUSTOMER_PHONE_NUMBER"
	PaymentTextSearchFieldCUSTOMERZIPCODE                 PaymentTextSearchField = "CUSTOMER_ZIPCODE"
	PaymentTextSearchFieldFAILREASON                      PaymentTextSearchField = "FAIL_REASON"
	PaymentTextSearchFieldGIFTCERTIFICATIONAPPROVALNUMBER PaymentTextSearchField = "GIFT_CERTIFICATION_APPROVAL_NUMBER"
	PaymentTextSearchFieldORDERNAME                       PaymentTextSearchField = "ORDER_NAME"
	PaymentTextSearchFieldPAYMENTID                       PaymentTextSearchField = "PAYMENT_ID"
	PaymentTextSearchFieldPGCANCELLATIONID                PaymentTextSearchField = "PG_CANCELLATION_ID"
	PaymentTextSearchFieldPGMERCHANTID                    PaymentTextSearchField = "PG_MERCHANT_ID"
	PaymentTextSearchFieldPGRECEIPTID                     PaymentTextSearchField = "PG_RECEIPT_ID"
	PaymentTextSearchFieldPGTXID                          PaymentTextSearchField = "PG_TX_ID"
	PaymentTextSearchFieldPROMOTIONID                     PaymentTextSearchField = "PROMOTION_ID"
	PaymentTextSearchFieldRECEIPTAPPROVALNUMBER           PaymentTextSearchField = "RECEIPT_APPROVAL_NUMBER"
	PaymentTextSearchFieldSCHEDULEID                      PaymentTextSearchField = "SCHEDULE_ID"
	PaymentTextSearchFieldTRANSBANK                       PaymentTextSearchField = "TRANS_BANK"
	PaymentTextSearchFieldTXID                            PaymentTextSearchField = "TX_ID"
	PaymentTextSearchFieldUSERAGENT                       PaymentTextSearchField = "USER_AGENT"
	PaymentTextSearchFieldVIRTUALACCOUNTBANK              PaymentTextSearchField = "VIRTUAL_ACCOUNT_BANK"
	PaymentTextSearchFieldVIRTUALACCOUNTHOLDERNAME        PaymentTextSearchField = "VIRTUAL_ACCOUNT_HOLDER_NAME"
	PaymentTextSearchFieldVIRTUALACCOUNTNUMBER            PaymentTextSearchField = "VIRTUAL_ACCOUNT_NUMBER"
)

// Defines values for PaymentTimestampType.
const (
	PaymentTimestampTypeCREATEDAT       PaymentTimestampType = "CREATED_AT"
	PaymentTimestampTypeSTATUSCHANGEDAT PaymentTimestampType = "STATUS_CHANGED_AT"
)

// Defines values for PaymentWebhookPaymentStatus.
const (
	PaymentWebhookPaymentStatusCANCELLED            PaymentWebhookPaymentStatus = "CANCELLED"
	PaymentWebhookPaymentStatusFAILED               PaymentWebhookPaymentStatus = "FAILED"
	PaymentWebhookPaymentStatusPAID                 PaymentWebhookPaymentStatus = "PAID"
	PaymentWebhookPaymentStatusPARTIALCANCELLED     PaymentWebhookPaymentStatus = "PARTIAL_CANCELLED"
	PaymentWebhookPaymentStatusPAYPENDING           PaymentWebhookPaymentStatus = "PAY_PENDING"
	PaymentWebhookPaymentStatusREADY                PaymentWebhookPaymentStatus = "READY"
	PaymentWebhookPaymentStatusVIRTUALACCOUNTISSUED PaymentWebhookPaymentStatus = "VIRTUAL_ACCOUNT_ISSUED"
)

// Defines values for PaymentWebhookStatus.
const (
	PaymentWebhookStatusFAILEDNOTOKRESPONSE   PaymentWebhookStatus = "FAILED_NOT_OK_RESPONSE"
	PaymentWebhookStatusFAILEDUNEXPECTEDERROR PaymentWebhookStatus = "FAILED_UNEXPECTED_ERROR"
	PaymentWebhookStatusSUCCEEDED             PaymentWebhookStatus = "SUCCEEDED"
)

// Defines values for PaymentWebhookTrigger.
const (
	PaymentWebhookTriggerASYNCCANCELAPPROVED   PaymentWebhookTrigger = "ASYNC_CANCEL_APPROVED"
	PaymentWebhookTriggerASYNCCANCELFAILED     PaymentWebhookTrigger = "ASYNC_CANCEL_FAILED"
	PaymentWebhookTriggerASYNCPAYAPPROVED      PaymentWebhookTrigger = "ASYNC_PAY_APPROVED"
	PaymentWebhookTriggerASYNCPAYFAILED        PaymentWebhookTrigger = "ASYNC_PAY_FAILED"
	PaymentWebhookTriggerMANUAL                PaymentWebhookTrigger = "MANUAL"
	PaymentWebhookTriggerVIRTUALACCOUNTDEPOSIT PaymentWebhookTrigger = "VIRTUAL_ACCOUNT_DEPOSIT"
)

// Defines values for PgCompany.
const (
	PgCompanyALIPAY       PgCompany = "ALIPAY"
	PgCompanyBLUEWALNUT   PgCompany = "BLUEWALNUT"
	PgCompanyCHAI         PgCompany = "CHAI"
	PgCompanyDANAL        PgCompany = "DANAL"
	PgCompanyDAOU         PgCompany = "DAOU"
	PgCompanyEXIMBAY      PgCompany = "EXIMBAY"
	PgCompanyGALAXIA      PgCompany = "GALAXIA"
	PgCompanyHYPHEN       PgCompany = "HYPHEN"
	PgCompanyINICIS       PgCompany = "INICIS"
	PgCompanyJTNET        PgCompany = "JTNET"
	PgCompanyKAKAO        PgCompany = "KAKAO"
	PgCompanyKAKAOPAY     PgCompany = "KAKAOPAY"
	PgCompanyKCP          PgCompany = "KCP"
	PgCompanyKICC         PgCompany = "KICC"
	PgCompanyKPN          PgCompany = "KPN"
	PgCompanyKSNET        PgCompany = "KSNET"
	PgCompanyMOBILIANS    PgCompany = "MOBILIANS"
	PgCompanyNAVERPAY     PgCompany = "NAVERPAY"
	PgCompanyNICE         PgCompany = "NICE"
	PgCompanyPAYCO        PgCompany = "PAYCO"
	PgCompanyPAYMENTWALL  PgCompany = "PAYMENTWALL"
	PgCompanyPAYPAL       PgCompany = "PAYPAL"
	PgCompanyPAYPLE       PgCompany = "PAYPLE"
	PgCompanySETTLE       PgCompany = "SETTLE"
	PgCompanySMARTRO      PgCompany = "SMARTRO"
	PgCompanySMILEPAY     PgCompany = "SMILEPAY"
	PgCompanySYRUP        PgCompany = "SYRUP"
	PgCompanyTOSSPAY      PgCompany = "TOSSPAY"
	PgCompanyTOSSPAYMENTS PgCompany = "TOSSPAYMENTS"
	PgCompanyWELCOME      PgCompany = "WELCOME"
)

// Defines values for PgProvider.
const (
	ALIPAY        PgProvider = "ALIPAY"
	BLUEWALNUT    PgProvider = "BLUEWALNUT"
	CHAI          PgProvider = "CHAI"
	DANAL         PgProvider = "DANAL"
	DANALTPAY     PgProvider = "DANAL_TPAY"
	DAOU          PgProvider = "DAOU"
	EXIMBAY       PgProvider = "EXIMBAY"
	GALAXIA       PgProvider = "GALAXIA"
	HTML5INICIS   PgProvider = "HTML5_INICIS"
	HYPHEN        PgProvider = "HYPHEN"
	INICIS        PgProvider = "INICIS"
	INICISUNIFIED PgProvider = "INICIS_UNIFIED"
	INICISV2      PgProvider = "INICIS_V2"
	JTNET         PgProvider = "JTNET"
	KAKAO         PgProvider = "KAKAO"
	KAKAOPAY      PgProvider = "KAKAOPAY"
	KCP           PgProvider = "KCP"
	KCPBILLING    PgProvider = "KCP_BILLING"
	KCPDIRECT     PgProvider = "KCP_DIRECT"
	KCPQUICK      PgProvider = "KCP_QUICK"
	KCPV2         PgProvider = "KCP_V2"
	KICC          PgProvider = "KICC"
	KPN           PgProvider = "KPN"
	KSNET         PgProvider = "KSNET"
	MOBILIANS     PgProvider = "MOBILIANS"
	NAVERCO       PgProvider = "NAVERCO"
	NAVERPAY      PgProvider = "NAVERPAY"
	NICE          PgProvider = "NICE"
	NICEV2        PgProvider = "NICE_V2"
	PAYCO         PgProvider = "PAYCO"
	PAYMENTWALL   PgProvider = "PAYMENTWALL"
	PAYPAL        PgProvider = "PAYPAL"
	PAYPALV2      PgProvider = "PAYPAL_V2"
	PAYPLE        PgProvider = "PAYPLE"
	PINPAY        PgProvider = "PINPAY"
	SETTLE        PgProvider = "SETTLE"
	SETTLEACC     PgProvider = "SETTLE_ACC"
	SETTLEFIRM    PgProvider = "SETTLE_FIRM"
	SMARTRO       PgProvider = "SMARTRO"
	SMARTROV2     PgProvider = "SMARTRO_V2"
	SMILEPAY      PgProvider = "SMILEPAY"
	SYRUP         PgProvider = "SYRUP"
	TOSSBRANDPAY  PgProvider = "TOSS_BRANDPAY"
	TOSSPAY       PgProvider = "TOSSPAY"
	TOSSPAYMENTS  PgProvider = "TOSSPAYMENTS"
	TOSSPAYV2     PgProvider = "TOSSPAY_V2"
	UPLUS         PgProvider = "UPLUS"
	WELCOME       PgProvider = "WELCOME"
)

// Defines values for PlatformAccountStatus.
const (
	PlatformAccountStatusNOTVERIFIED  PlatformAccountStatus = "NOT_VERIFIED"
	PlatformAccountStatusUNKNOWN      PlatformAccountStatus = "UNKNOWN"
	PlatformAccountStatusVERIFIED     PlatformAccountStatus = "VERIFIED"
	PlatformAccountStatusVERIFYERROR  PlatformAccountStatus = "VERIFY_ERROR"
	PlatformAccountStatusVERIFYFAILED PlatformAccountStatus = "VERIFY_FAILED"
)

// Defines values for PlatformAccountTransferType.
const (
	DEPOSIT                 PlatformAccountTransferType = "DEPOSIT"
	WITHDRAWALPARTNERPAYOUT PlatformAccountTransferType = "WITHDRAWAL_PARTNER_PAYOUT"
	WITHDRAWALREMIT         PlatformAccountTransferType = "WITHDRAWAL_REMIT"
)

// Defines values for PlatformBulkPayoutStatus.
const (
	PlatformBulkPayoutStatusCANCELLED PlatformBulkPayoutStatus = "CANCELLED"
	PlatformBulkPayoutStatusCOMPLETED PlatformBulkPayoutStatus = "COMPLETED"
	PlatformBulkPayoutStatusONGOING   PlatformBulkPayoutStatus = "ONGOING"
	PlatformBulkPayoutStatusPREPARED  PlatformBulkPayoutStatus = "PREPARED"
	PlatformBulkPayoutStatusPREPARING PlatformBulkPayoutStatus = "PREPARING"
	PlatformBulkPayoutStatusSCHEDULED PlatformBulkPayoutStatus = "SCHEDULED"
	PlatformBulkPayoutStatusSTOPPED   PlatformBulkPayoutStatus = "STOPPED"
)

// Defines values for PlatformBusinessStatus.
const (
	CLOSED     PlatformBusinessStatus = "CLOSED"
	INBUSINESS PlatformBusinessStatus = "IN_BUSINESS"
	SUSPENDED  PlatformBusinessStatus = "SUSPENDED"
)

// Defines values for PlatformCancellableAmountType.
const (
	PlatformCancellableAmountTypeSUPPLYWITHVAT PlatformCancellableAmountType = "SUPPLY_WITH_VAT"
	PlatformCancellableAmountTypeTAXFREE       PlatformCancellableAmountType = "TAX_FREE"
)

// Defines values for PlatformPartnerBusinessStatus.
const (
	PlatformPartnerBusinessStatusCLOSED      PlatformPartnerBusinessStatus = "CLOSED"
	PlatformPartnerBusinessStatusINBUSINESS  PlatformPartnerBusinessStatus = "IN_BUSINESS"
	PlatformPartnerBusinessStatusNOTFOUND    PlatformPartnerBusinessStatus = "NOT_FOUND"
	PlatformPartnerBusinessStatusNOTVERIFIED PlatformPartnerBusinessStatus = "NOT_VERIFIED"
	PlatformPartnerBusinessStatusSUSPENDED   PlatformPartnerBusinessStatus = "SUSPENDED"
	PlatformPartnerBusinessStatusVERIFYERROR PlatformPartnerBusinessStatus = "VERIFY_ERROR"
)

// Defines values for PlatformPartnerMemberCompanyConnectionStatus.
const (
	CONNECTED         PlatformPartnerMemberCompanyConnectionStatus = "CONNECTED"
	CONNECTFAILED     PlatformPartnerMemberCompanyConnectionStatus = "CONNECT_FAILED"
	CONNECTPENDING    PlatformPartnerMemberCompanyConnectionStatus = "CONNECT_PENDING"
	DISCONNECTPENDING PlatformPartnerMemberCompanyConnectionStatus = "DISCONNECT_PENDING"
	NOTCONNECTED      PlatformPartnerMemberCompanyConnectionStatus = "NOT_CONNECTED"
)

// Defines values for PlatformPartnerSettlementStatus.
const (
	PlatformPartnerSettlementStatusINPAYOUT        PlatformPartnerSettlementStatus = "IN_PAYOUT"
	PlatformPartnerSettlementStatusPAIDOUT         PlatformPartnerSettlementStatus = "PAID_OUT"
	PlatformPartnerSettlementStatusPAYOUTFAILED    PlatformPartnerSettlementStatus = "PAYOUT_FAILED"
	PlatformPartnerSettlementStatusPAYOUTPREPARED  PlatformPartnerSettlementStatus = "PAYOUT_PREPARED"
	PlatformPartnerSettlementStatusPAYOUTSCHEDULED PlatformPartnerSettlementStatus = "PAYOUT_SCHEDULED"
	PlatformPartnerSettlementStatusPAYOUTWITHHELD  PlatformPartnerSettlementStatus = "PAYOUT_WITHHELD"
)

// Defines values for PlatformPartnerSettlementType.
const (
	PlatformPartnerSettlementTypeMANUAL      PlatformPartnerSettlementType = "MANUAL"
	PlatformPartnerSettlementTypeORDER       PlatformPartnerSettlementType = "ORDER"
	PlatformPartnerSettlementTypeORDERCANCEL PlatformPartnerSettlementType = "ORDER_CANCEL"
)

// Defines values for PlatformPartnerStatus.
const (
	APPROVED PlatformPartnerStatus = "APPROVED"
	PENDING  PlatformPartnerStatus = "PENDING"
	REJECTED PlatformPartnerStatus = "REJECTED"
)

// Defines values for PlatformPartnerTaxationType.
const (
	PlatformPartnerTaxationTypeNORMAL                 PlatformPartnerTaxationType = "NORMAL"
	PlatformPartnerTaxationTypeSIMPLE                 PlatformPartnerTaxationType = "SIMPLE"
	PlatformPartnerTaxationTypeSIMPLETAXINVOICEISSUER PlatformPartnerTaxationType = "SIMPLE_TAX_INVOICE_ISSUER"
	PlatformPartnerTaxationTypeTAXFREE                PlatformPartnerTaxationType = "TAX_FREE"
)

// Defines values for PlatformPartnerTypeName.
const (
	PlatformPartnerTypeNameBUSINESS    PlatformPartnerTypeName = "BUSINESS"
	PlatformPartnerTypeNameNONWHTPAYER PlatformPartnerTypeName = "NON_WHT_PAYER"
	PlatformPartnerTypeNameWHTPAYER    PlatformPartnerTypeName = "WHT_PAYER"
)

// Defines values for PlatformPayer.
const (
	MERCHANT PlatformPayer = "MERCHANT"
	PARTNER  PlatformPayer = "PARTNER"
)

// Defines values for PlatformPayoutMethod.
const (
	AGENCY PlatformPayoutMethod = "AGENCY"
	DIRECT PlatformPayoutMethod = "DIRECT"
)

// Defines values for PlatformPayoutStatus.
const (
	PlatformPayoutStatusCANCELLED  PlatformPayoutStatus = "CANCELLED"
	PlatformPayoutStatusFAILED     PlatformPayoutStatus = "FAILED"
	PlatformPayoutStatusPREPARED   PlatformPayoutStatus = "PREPARED"
	PlatformPayoutStatusPROCESSING PlatformPayoutStatus = "PROCESSING"
	PlatformPayoutStatusSCHEDULED  PlatformPayoutStatus = "SCHEDULED"
	PlatformPayoutStatusSTOPPED    PlatformPayoutStatus = "STOPPED"
	PlatformPayoutStatusSUCCEEDED  PlatformPayoutStatus = "SUCCEEDED"
)

// Defines values for PlatformPortOnePaymentCancelAmountType.
const (
	PlatformPortOnePaymentCancelAmountTypeSUPPLYWITHVAT PlatformPortOnePaymentCancelAmountType = "SUPPLY_WITH_VAT"
	PlatformPortOnePaymentCancelAmountTypeTAXFREE       PlatformPortOnePaymentCancelAmountType = "TAX_FREE"
)

// Defines values for PlatformRoundType.
const (
	DOWN PlatformRoundType = "DOWN"
	OFF  PlatformRoundType = "OFF"
	UP   PlatformRoundType = "UP"
)

// Defines values for PlatformSettlementCycleDatePolicy.
const (
	CALENDARDAY   PlatformSettlementCycleDatePolicy = "CALENDAR_DAY"
	HOLIDAYAFTER  PlatformSettlementCycleDatePolicy = "HOLIDAY_AFTER"
	HOLIDAYBEFORE PlatformSettlementCycleDatePolicy = "HOLIDAY_BEFORE"
)

// Defines values for PlatformSettlementCycleType.
const (
	DAILY       PlatformSettlementCycleType = "DAILY"
	MANUALDATES PlatformSettlementCycleType = "MANUAL_DATES"
	MONTHLY     PlatformSettlementCycleType = "MONTHLY"
	WEEKLY      PlatformSettlementCycleType = "WEEKLY"
)

// Defines values for PlatformTaxationType.
const (
	PlatformTaxationTypeASSIGNEDIDNUMBER       PlatformTaxationType = "ASSIGNED_ID_NUMBER"
	PlatformTaxationTypeNORMAL                 PlatformTaxationType = "NORMAL"
	PlatformTaxationTypeSIMPLE                 PlatformTaxationType = "SIMPLE"
	PlatformTaxationTypeSIMPLETAXINVOICEISSUER PlatformTaxationType = "SIMPLE_TAX_INVOICE_ISSUER"
	PlatformTaxationTypeSPECIAL                PlatformTaxationType = "SPECIAL"
	PlatformTaxationTypeTAXFREE                PlatformTaxationType = "TAX_FREE"
)

// Defines values for PlatformTransferSheetField.
const (
	MEMO                                 PlatformTransferSheetField = "MEMO"
	ORDERNAME                            PlatformTransferSheetField = "ORDER_NAME"
	PARTNERID                            PlatformTransferSheetField = "PARTNER_ID"
	PARTNERINCOMETYPE                    PlatformTransferSheetField = "PARTNER_INCOME_TYPE"
	PARTNERNAME                          PlatformTransferSheetField = "PARTNER_NAME"
	PARTNERTAXATIONTYPE                  PlatformTransferSheetField = "PARTNER_TAXATION_TYPE"
	PARTNERTAXATIONTYPEORINCOMETYPE      PlatformTransferSheetField = "PARTNER_TAXATION_TYPE_OR_INCOME_TYPE"
	PARTNERTYPE                          PlatformTransferSheetField = "PARTNER_TYPE"
	PAYMENTID                            PlatformTransferSheetField = "PAYMENT_ID"
	PAYMENTMETHOD                        PlatformTransferSheetField = "PAYMENT_METHOD"
	SETTLEMENTADDITIONALFEEAMOUNT        PlatformTransferSheetField = "SETTLEMENT_ADDITIONAL_FEE_AMOUNT"
	SETTLEMENTADDITIONALFEEVATAMOUNT     PlatformTransferSheetField = "SETTLEMENT_ADDITIONAL_FEE_VAT_AMOUNT"
	SETTLEMENTAMOUNT                     PlatformTransferSheetField = "SETTLEMENT_AMOUNT"
	SETTLEMENTCURRENCY                   PlatformTransferSheetField = "SETTLEMENT_CURRENCY"
	SETTLEMENTDATE                       PlatformTransferSheetField = "SETTLEMENT_DATE"
	SETTLEMENTDISCOUNTAMOUNT             PlatformTransferSheetField = "SETTLEMENT_DISCOUNT_AMOUNT"
	SETTLEMENTDISCOUNTSHAREAMOUNT        PlatformTransferSheetField = "SETTLEMENT_DISCOUNT_SHARE_AMOUNT"
	SETTLEMENTDISCOUNTSHARETAXFREEAMOUNT PlatformTransferSheetField = "SETTLEMENT_DISCOUNT_SHARE_TAX_FREE_AMOUNT"
	SETTLEMENTDISCOUNTTAXFREEAMOUNT      PlatformTransferSheetField = "SETTLEMENT_DISCOUNT_TAX_FREE_AMOUNT"
	SETTLEMENTORDERAMOUNT                PlatformTransferSheetField = "SETTLEMENT_ORDER_AMOUNT"
	SETTLEMENTORDERTAXFREEAMOUNT         PlatformTransferSheetField = "SETTLEMENT_ORDER_TAX_FREE_AMOUNT"
	SETTLEMENTPAYMENTAMOUNT              PlatformTransferSheetField = "SETTLEMENT_PAYMENT_AMOUNT"
	SETTLEMENTPAYMENTSUPPLYAMOUNT        PlatformTransferSheetField = "SETTLEMENT_PAYMENT_SUPPLY_AMOUNT"
	SETTLEMENTPAYMENTTAXFREEAMOUNT       PlatformTransferSheetField = "SETTLEMENT_PAYMENT_TAX_FREE_AMOUNT"
	SETTLEMENTPAYMENTVATAMOUNT           PlatformTransferSheetField = "SETTLEMENT_PAYMENT_VAT_AMOUNT"
	SETTLEMENTPAYMENTVATBURDENAMOUNT     PlatformTransferSheetField = "SETTLEMENT_PAYMENT_VAT_BURDEN_AMOUNT"
	SETTLEMENTPLATFORMFEEAMOUNT          PlatformTransferSheetField = "SETTLEMENT_PLATFORM_FEE_AMOUNT"
	SETTLEMENTPLATFORMFEEVATAMOUNT       PlatformTransferSheetField = "SETTLEMENT_PLATFORM_FEE_VAT_AMOUNT"
	SETTLEMENTSTARTDATE                  PlatformTransferSheetField = "SETTLEMENT_START_DATE"
	STATUS                               PlatformTransferSheetField = "STATUS"
	TRANSFERID                           PlatformTransferSheetField = "TRANSFER_ID"
	TYPE                                 PlatformTransferSheetField = "TYPE"
)

// Defines values for PlatformTransferStatus.
const (
	PlatformTransferStatusINPAYOUT  PlatformTransferStatus = "IN_PAYOUT"
	PlatformTransferStatusINPROCESS PlatformTransferStatus = "IN_PROCESS"
	PlatformTransferStatusPAIDOUT   PlatformTransferStatus = "PAID_OUT"
	PlatformTransferStatusSCHEDULED PlatformTransferStatus = "SCHEDULED"
	PlatformTransferStatusSETTLED   PlatformTransferStatus = "SETTLED"
)

// Defines values for PlatformTransferSummaryPartnerType.
const (
	PlatformTransferSummaryPartnerTypeBUSINESS    PlatformTransferSummaryPartnerType = "BUSINESS"
	PlatformTransferSummaryPartnerTypeNONWHTPAYER PlatformTransferSummaryPartnerType = "NON_WHT_PAYER"
	PlatformTransferSummaryPartnerTypeWHTPAYER    PlatformTransferSummaryPartnerType = "WHT_PAYER"
)

// Defines values for PlatformTransferType.
const (
	MANUAL      PlatformTransferType = "MANUAL"
	ORDER       PlatformTransferType = "ORDER"
	ORDERCANCEL PlatformTransferType = "ORDER_CANCEL"
)

// Defines values for PortOneVersion.
const (
	V1 PortOneVersion = "V1"
	V2 PortOneVersion = "V2"
)

// Defines values for PromotionCardCompany.
const (
	BCCARD      PromotionCardCompany = "BC_CARD"
	HANACARD    PromotionCardCompany = "HANA_CARD"
	HYUNDAICARD PromotionCardCompany = "HYUNDAI_CARD"
	KOOKMINCARD PromotionCardCompany = "KOOKMIN_CARD"
	LOTTECARD   PromotionCardCompany = "LOTTE_CARD"
	NHCARD      PromotionCardCompany = "NH_CARD"
	SAMSUNGCARD PromotionCardCompany = "SAMSUNG_CARD"
	SHINHANCARD PromotionCardCompany = "SHINHAN_CARD"
	WOORICARD   PromotionCardCompany = "WOORI_CARD"
)

// Defines values for PromotionDiscountRetainOption.
const (
	RELEASE PromotionDiscountRetainOption = "RELEASE"
	RETAIN  PromotionDiscountRetainOption = "RETAIN"
)

// Defines values for PromotionStatus.
const (
	BUDGETEXHAUSTED PromotionStatus = "BUDGET_EXHAUSTED"
	COMPLETED       PromotionStatus = "COMPLETED"
	INPROGRESS      PromotionStatus = "IN_PROGRESS"
	PAUSED          PromotionStatus = "PAUSED"
	SCHEDULED       PromotionStatus = "SCHEDULED"
	TERMINATED      PromotionStatus = "TERMINATED"
)

// Defines values for SelectedChannelType.
const (
	LIVE SelectedChannelType = "LIVE"
	TEST SelectedChannelType = "TEST"
)

// Defines values for SortOrder.
const (
	ASC  SortOrder = "ASC"
	DESC SortOrder = "DESC"
)

// Defines values for Trigger.
const (
	TriggerAPI          Trigger = "API"
	TriggerCONSOLE      Trigger = "CONSOLE"
	TriggerPORTONEADMIN Trigger = "PORTONE_ADMIN"
)

// Address 분리 형식 주소
//
// oneLine(한 줄 형식 주소) 필드는 항상 존재합니다.
type Address struct {
	union json.RawMessage
}

// AlreadyPaidError 결제가 이미 완료된 경우
type AlreadyPaidError struct {
	Message *string `json:"message,omitempty"`
	Type    string  `json:"type"`
}

// AlreadyPaidOrWaitingError 결제가 이미 완료되었거나 대기중인 경우
type AlreadyPaidOrWaitingError struct {
	Message *string `json:"message,omitempty"`
	Type    string  `json:"type"`
}

// AmountExceededType defines model for AmountExceededType.
type AmountExceededType string

// ApplyEscrowLogisticsError defines model for ApplyEscrowLogisticsError.
type ApplyEscrowLogisticsError struct {
	union json.RawMessage
}

// ApplyEscrowLogisticsResponse 에스크로 배송 정보 등록 성공 응답
type ApplyEscrowLogisticsResponse struct {
	AppliedAt     time.Time `json:"appliedAt"`
	InvoiceNumber string    `json:"invoiceNumber"`
	SentAt        time.Time `json:"sentAt"`
}

// ArchivePlatformAdditionalFeePolicyError defines model for ArchivePlatformAdditionalFeePolicyError.
type ArchivePlatformAdditionalFeePolicyError struct {
	union json.RawMessage
}

// ArchivePlatformAdditionalFeePolicyResponse 추가 수수료 정책 보관 성공 응답
type ArchivePlatformAdditionalFeePolicyResponse struct {
	// AdditionalFeePolicy 추가 수수료 정책
	//
	// 추가 수수료 정책는 고객사의 주문건에 대한 중개수수료에 별도로 추가로 부여되는 수수료입니다. 대표적인 사용 예시로 풀필먼트 수수료, 로켓배송 수수료, 마케팅 채널 수수료등이 있습니다.
	AdditionalFeePolicy PlatformAdditionalFeePolicy `json:"additionalFeePolicy"`
}

// ArchivePlatformContractError defines model for ArchivePlatformContractError.
type ArchivePlatformContractError struct {
	union json.RawMessage
}

// ArchivePlatformContractResponse 계약 보관 성공 응답
type ArchivePlatformContractResponse struct {
	// Contract 계약
	//
	// 계약은 플랫폼 고객사가 파트너에게 정산해줄 대금과 정산일을 계산하는 데 적용되는 정보입니다.
	// 고객사의 플랫폼에서 재화 및 서비스를 판매하기 위한 중개수수료와 판매금에 대한 정산일로 구성되어 있습니다.
	Contract PlatformContract `json:"contract"`
}

// ArchivePlatformDiscountSharePolicyError defines model for ArchivePlatformDiscountSharePolicyError.
type ArchivePlatformDiscountSharePolicyError struct {
	union json.RawMessage
}

// ArchivePlatformDiscountSharePolicyResponse 할인 분담 보관 성공 응답
type ArchivePlatformDiscountSharePolicyResponse struct {
	// DiscountSharePolicy 할인 분담 정책
	//
	// 할인 분담은 고객사의 주문건에 쿠폰 및 포인트와 같은 할인금액이 적용될 때, 파트너 정산 시 할인금액에 대한 분담 정책을 가지는 객체입니다.
	// 할인 유형에 대한 아이디와 메모, 그리고 파트너 분담율을 가집니다.
	DiscountSharePolicy PlatformDiscountSharePolicy `json:"discountSharePolicy"`
}

// ArchivePlatformPartnerError defines model for ArchivePlatformPartnerError.
type ArchivePlatformPartnerError struct {
	union json.RawMessage
}

// ArchivePlatformPartnerResponse 파트너 보관 성공 응답
type ArchivePlatformPartnerResponse struct {
	// Partner 파트너
	//
	// 파트너는 고객사가 정산해주어야 할 대상입니다.
	// 기본 사업자 정보와 정산정보, 그리고 적용될 계약의 정보를 등록 및 관리할 수 있습니다.
	Partner PlatformPartner `json:"partner"`
}

// Bank 은행
type Bank string

// BankInfo 은행 정보
type BankInfo struct {
	// Bank 은행
	Bank Bank `json:"bank"`

	// Name 은행 명칭
	Name BankInfoName `json:"name"`
}

// BankInfoName 은행 명칭
type BankInfoName struct {
	Ko string `json:"ko"`
}

// BeforeRegisteredPaymentEscrow 배송 정보 등록 전
type BeforeRegisteredPaymentEscrow struct {
	Status string `json:"status"`
}

// BillingKeyAlreadyDeletedError 빌링키가 이미 삭제된 경우
type BillingKeyAlreadyDeletedError struct {
	Message *string `json:"message,omitempty"`
	Type    string  `json:"type"`
}

// BillingKeyFailure 발급 실패 상세 정보
type BillingKeyFailure struct {
	FailedAt  time.Time `json:"failedAt"`
	Message   *string   `json:"message,omitempty"`
	PgCode    *string   `json:"pgCode,omitempty"`
	PgMessage *string   `json:"pgMessage,omitempty"`
}

// BillingKeyFilterInput 빌링키 다건 조회를 위한 입력 정보
type BillingKeyFilterInput struct {
	// ChannelGroupIds 값을 입력하지 않으면 스마트 라우팅 그룹 아이디 필터링이 적용되지 않습니다.
	ChannelGroupIds *[]string `json:"channelGroupIds,omitempty"`
	CustomerId      *string   `json:"customerId,omitempty"`

	// From 값을 입력하지 않으면 end의 90일 전으로 설정됩니다.
	From *time.Time `json:"from,omitempty"`

	// Methods 값을 입력하지 않으면 결제수단 필터링이 적용되지 않습니다.
	Methods *[]BillingKeyPaymentMethodType `json:"methods,omitempty"`

	// PgCompanies 값을 입력하지 않으면 PG사 필터링이 적용되지 않습니다.
	PgCompanies *[]PgCompany `json:"pgCompanies,omitempty"`

	// PgProviders 값을 입력하지 않으면 PG사 결제 모듈 필터링이 적용되지 않습니다.
	PgProviders *[]PgProvider `json:"pgProviders,omitempty"`

	// PlatformType 결제가 발생한 클라이언트 환경
	PlatformType *PaymentClientType `json:"platformType,omitempty"`

	// Status 값을 입력하지 않으면 빌링키 상태 필터링이 적용되지 않습니다.
	Status *[]BillingKeyStatus `json:"status,omitempty"`

	// StoreId Merchant 사용자만 사용가능하며, 지정되지 않은 경우 고객사 전체 빌링키를 조회합니다.
	StoreId *string `json:"storeId,omitempty"`

	// TextSearch 통합검색 입력 정보
	TextSearch *BillingKeyTextSearch `json:"textSearch,omitempty"`

	// TimeRangeField 빌링키 다건 조회 시, 시각 범위를 적용할 필드
	TimeRangeField *BillingKeyTimeRangeField `json:"timeRangeField,omitempty"`

	// Until 값을 입력하지 않으면 현재 시점으로 설정됩니다.
	Until *time.Time `json:"until,omitempty"`

	// Version 포트원 버전
	Version *PortOneVersion `json:"version,omitempty"`
}

// BillingKeyInfo 빌링키 정보
type BillingKeyInfo struct {
	union json.RawMessage
}

// BillingKeyInfoSummary defines model for BillingKeyInfoSummary.
type BillingKeyInfoSummary struct {
	BillingKey string             `json:"billingKey"`
	Channels   *[]SelectedChannel `json:"channels,omitempty"`
	IssuedAt   time.Time          `json:"issuedAt"`
}

// BillingKeyNotFoundError 빌링키가 존재하지 않는 경우
type BillingKeyNotFoundError struct {
	Message *string `json:"message,omitempty"`
	Type    string  `json:"type"`
}

// BillingKeyNotIssuedError defines model for BillingKeyNotIssuedError.
type BillingKeyNotIssuedError struct {
	Message *string `json:"message,omitempty"`
	Type    string  `json:"type"`
}

// BillingKeyPaymentInput 빌링키 결제 요청 입력 정보
type BillingKeyPaymentInput struct {
	// Amount 금액 세부 입력 정보
	Amount     PaymentAmountInput      `json:"amount"`
	BillingKey string                  `json:"billingKey"`
	Bypass     *map[string]interface{} `json:"bypass,omitempty"`

	// CashReceipt 현금영수증 입력 정보
	CashReceipt *CashReceiptInput `json:"cashReceipt,omitempty"`

	// ChannelKey 다수 채널에 대해 발급된 빌링키에 대해, 결제 채널을 특정하고 싶을 때 명시
	ChannelKey *string `json:"channelKey,omitempty"`

	// Country 국가
	Country *Country `json:"country,omitempty"`

	// Currency 통화 단위
	Currency   Currency `json:"currency"`
	CustomData *string  `json:"customData,omitempty"`

	// Customer 고객 정보 입력 정보
	Customer         *CustomerInput `json:"customer,omitempty"`
	InstallmentMonth *int32         `json:"installmentMonth,omitempty"`

	// NoticeUrls 결제 승인/실패 시 요청을 받을 웹훅 주소입니다.
	// 상점에 설정되어 있는 값보다 우선적으로 적용됩니다.
	// 입력된 값이 없을 경우에는 빈 배열로 해석됩니다.
	NoticeUrls   *[]string `json:"noticeUrls,omitempty"`
	OrderName    string    `json:"orderName"`
	ProductCount *int32    `json:"productCount,omitempty"`

	// ProductType 상품 유형
	ProductType *PaymentProductType `json:"productType,omitempty"`

	// Products 입력된 값이 없을 경우에는 빈 배열로 해석됩니다.
	Products    *[]PaymentProduct `json:"products,omitempty"`
	PromotionId *string           `json:"promotionId,omitempty"`

	// ShippingAddress 분리 형식 주소 입력 정보
	ShippingAddress *SeparatedAddressInput `json:"shippingAddress,omitempty"`

	// StoreId 접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.
	StoreId                     *string `json:"storeId,omitempty"`
	UseCardPoint                *bool   `json:"useCardPoint,omitempty"`
	UseFreeInterestFromMerchant *bool   `json:"useFreeInterestFromMerchant,omitempty"`
}

// BillingKeyPaymentMethod 빌링키 발급 수단 정보
type BillingKeyPaymentMethod struct {
	union json.RawMessage
}

// BillingKeyPaymentMethodCard 카드 정보
type BillingKeyPaymentMethodCard struct {
	// Card 카드 상세 정보
	Card *Card  `json:"card,omitempty"`
	Type string `json:"type"`
}

// BillingKeyPaymentMethodEasyPay 간편 결제 정보
type BillingKeyPaymentMethodEasyPay struct {
	// Method 간편 결제 수단
	Method *BillingKeyPaymentMethodEasyPayMethod `json:"method,omitempty"`

	// Provider 간편 결제사
	Provider *EasyPayProvider `json:"provider,omitempty"`
	Type     string           `json:"type"`
}

// BillingKeyPaymentMethodEasyPayCharge 충전식 포인트 결제 정보
type BillingKeyPaymentMethodEasyPayCharge struct {
	Type string `json:"type"`
}

// BillingKeyPaymentMethodEasyPayMethod 간편 결제 수단
type BillingKeyPaymentMethodEasyPayMethod struct {
	union json.RawMessage
}

// BillingKeyPaymentMethodMobile 모바일 정보
type BillingKeyPaymentMethodMobile struct {
	PhoneNumber *string `json:"phoneNumber,omitempty"`
	Type        string  `json:"type"`
}

// BillingKeyPaymentMethodPaypal 페이팔 정보
type BillingKeyPaymentMethodPaypal struct {
	Type string `json:"type"`
}

// BillingKeyPaymentMethodTransfer 계좌이체 정보
type BillingKeyPaymentMethodTransfer struct {
	AccountNumber *string `json:"accountNumber,omitempty"`

	// Bank 은행
	Bank *Bank  `json:"bank,omitempty"`
	Type string `json:"type"`
}

// BillingKeyPaymentMethodType 빌링키 결제 수단
type BillingKeyPaymentMethodType string

// BillingKeyPaymentSummary 빌링키 결제 완료된 결제 건 요약 정보
type BillingKeyPaymentSummary struct {
	PaidAt time.Time `json:"paidAt"`
	PgTxId string    `json:"pgTxId"`
}

// BillingKeySortBy 빌링키 정렬 기준
type BillingKeySortBy string

// BillingKeySortInput 빌링키 다건 조회 시 정렬 조건
type BillingKeySortInput struct {
	// By 빌링키 정렬 기준
	By *BillingKeySortBy `json:"by,omitempty"`

	// Order 정렬 방식
	Order *SortOrder `json:"order,omitempty"`
}

// BillingKeyStatus 빌링키 상태
type BillingKeyStatus string

// BillingKeyTextSearch 통합검색 입력 정보
type BillingKeyTextSearch struct {
	// Field 통합검색 항목
	Field BillingKeyTextSearchField `json:"field"`
	Value string                    `json:"value"`
}

// BillingKeyTextSearchField 통합검색 항목
type BillingKeyTextSearchField string

// BillingKeyTimeRangeField 빌링키 다건 조회 시, 시각 범위를 적용할 필드
type BillingKeyTimeRangeField string

// CancelAmountExceedsCancellableAmountError 결제 취소 금액이 취소 가능 금액을 초과한 경우
type CancelAmountExceedsCancellableAmountError struct {
	Message *string `json:"message,omitempty"`
	Type    string  `json:"type"`
}

// CancelCashReceiptError defines model for CancelCashReceiptError.
type CancelCashReceiptError struct {
	union json.RawMessage
}

// CancelCashReceiptResponse 현금 영수증 취소 성공 응답
type CancelCashReceiptResponse struct {
	CancelledAmount int64     `json:"cancelledAmount"`
	CancelledAt     time.Time `json:"cancelledAt"`
}

// CancelPaymentBody 결제 취소 요청 입력 정보
type CancelPaymentBody struct {
	// Amount 값을 입력하지 않으면 전액 취소됩니다.
	Amount *int64 `json:"amount,omitempty"`

	// CurrentCancellableAmount 본 취소 요청 이전의 취소 가능 잔액으로써, 값을 입력하면 잔액이 일치하는 경우에만 취소가 진행됩니다. 값을 입력하지 않으면 별도의 검증 처리를 수행하지 않습니다.
	CurrentCancellableAmount      *int64                         `json:"currentCancellableAmount,omitempty"`
	PromotionDiscountRetainOption *PromotionDiscountRetainOption `json:"promotionDiscountRetainOption,omitempty"`
	Reason                        string                         `json:"reason"`

	// RefundAccount 고객 정보 입력 형식
	RefundAccount *CancelPaymentBodyRefundAccount `json:"refundAccount,omitempty"`
	Requester     *CancelRequester                `json:"requester,omitempty"`

	// StoreId 접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.
	StoreId *string `json:"storeId,omitempty"`

	// TaxFreeAmount 값을 입력하지 않으면 전액 과세 취소됩니다.
	TaxFreeAmount *int64 `json:"taxFreeAmount,omitempty"`

	// VatAmount 값을 입력하지 않으면 자동 계산됩니다.
	VatAmount *int64 `json:"vatAmount,omitempty"`
}

// CancelPaymentBodyRefundAccount 고객 정보 입력 형식
type CancelPaymentBodyRefundAccount struct {
	// Bank 은행
	Bank              Bank    `json:"bank"`
	HolderName        string  `json:"holderName"`
	HolderPhoneNumber *string `json:"holderPhoneNumber,omitempty"`
	Number            string  `json:"number"`
}

// CancelPaymentError defines model for CancelPaymentError.
type CancelPaymentError struct {
	union json.RawMessage
}

// CancelPaymentResponse 결제 취소 성공 응답
type CancelPaymentResponse struct {
	// Cancellation 결제 취소 내역
	Cancellation PaymentCancellation `json:"cancellation"`
}

// CancelPlatformAdditionalFeePolicyScheduleError defines model for CancelPlatformAdditionalFeePolicyScheduleError.
type CancelPlatformAdditionalFeePolicyScheduleError struct {
	union json.RawMessage
}

// CancelPlatformAdditionalFeePolicyScheduleResponse 추가 수수료 정책 예약 업데이트 취소 성공 응답
type CancelPlatformAdditionalFeePolicyScheduleResponse = map[string]interface{}

// CancelPlatformContractScheduleError defines model for CancelPlatformContractScheduleError.
type CancelPlatformContractScheduleError struct {
	union json.RawMessage
}

// CancelPlatformContractScheduleResponse 계약 예약 업데이트 취소 성공 응답
type CancelPlatformContractScheduleResponse = map[string]interface{}

// CancelPlatformDiscountSharePolicyScheduleError defines model for CancelPlatformDiscountSharePolicyScheduleError.
type CancelPlatformDiscountSharePolicyScheduleError struct {
	union json.RawMessage
}

// CancelPlatformDiscountSharePolicyScheduleResponse 할인 분담 정책 예약 업데이트 취소 성공 응답
type CancelPlatformDiscountSharePolicyScheduleResponse = map[string]interface{}

// CancelPlatformPartnerScheduleError defines model for CancelPlatformPartnerScheduleError.
type CancelPlatformPartnerScheduleError struct {
	union json.RawMessage
}

// CancelPlatformPartnerScheduleResponse 파트너 예약 업데이트 취소 성공 응답
type CancelPlatformPartnerScheduleResponse = map[string]interface{}

// CancelRequester defines model for CancelRequester.
type CancelRequester string

// CancelTaxAmountExceedsCancellableTaxAmountError 취소 과세 금액이 취소 가능한 과세 금액을 초과한 경우
type CancelTaxAmountExceedsCancellableTaxAmountError struct {
	Message *string `json:"message,omitempty"`
	Type    string  `json:"type"`
}

// CancelTaxFreeAmountExceedsCancellableTaxFreeAmountError 취소 면세 금액이 취소 가능한 면세 금액을 초과한 경우
type CancelTaxFreeAmountExceedsCancellableTaxFreeAmountError struct {
	Message *string `json:"message,omitempty"`
	Type    string  `json:"type"`
}

// CancellableAmountConsistencyBrokenError 취소 가능 잔액 검증에 실패한 경우
type CancellableAmountConsistencyBrokenError struct {
	Message *string `json:"message,omitempty"`
	Type    string  `json:"type"`
}

// CancelledCashReceipt 발급 취소
type CancelledCashReceipt struct {
	Amount      int64     `json:"amount"`
	CancelledAt time.Time `json:"cancelledAt"`

	// Channel (결제, 본인인증 등에) 선택된 채널 정보
	Channel SelectedChannel `json:"channel"`

	// Currency 통화 단위
	Currency      Currency  `json:"currency"`
	IsManual      bool      `json:"isManual"`
	IssueNumber   string    `json:"issueNumber"`
	IssuedAt      time.Time `json:"issuedAt"`
	MerchantId    string    `json:"merchantId"`
	OrderName     string    `json:"orderName"`
	PaymentId     string    `json:"paymentId"`
	PgReceiptId   *string   `json:"pgReceiptId,omitempty"`
	Status        string    `json:"status"`
	StoreId       string    `json:"storeId"`
	TaxFreeAmount *int64    `json:"taxFreeAmount,omitempty"`

	// Type 발급 유형
	Type      *CashReceiptType `json:"type,omitempty"`
	Url       *string          `json:"url,omitempty"`
	VatAmount *int64           `json:"vatAmount,omitempty"`
}

// CancelledPayment 결제 취소 상태 건
type CancelledPayment struct {
	// Amount 결제 금액 세부 정보
	Amount PaymentAmount `json:"amount"`

	// BillingKey 빌링키 결제인 경우에만 존재
	BillingKey    *string               `json:"billingKey,omitempty"`
	Cancellations []PaymentCancellation `json:"cancellations"`
	CancelledAt   time.Time             `json:"cancelledAt"`

	// CashReceipt 결제 건 내 현금영수증 정보
	CashReceipt *PaymentCashReceipt `json:"cashReceipt,omitempty"`

	// Channel (결제, 본인인증 등에) 선택된 채널 정보
	Channel SelectedChannel `json:"channel"`

	// ChannelGroup 채널 그룹 정보
	ChannelGroup *ChannelGroupSummary `json:"channelGroup,omitempty"`

	// Country 국가
	Country *Country `json:"country,omitempty"`

	// Currency 통화 단위
	Currency   Currency `json:"currency"`
	CustomData *string  `json:"customData,omitempty"`

	// Customer 고객 정보
	Customer Customer `json:"customer"`

	// Escrow 에스크로 정보
	//
	// V1 결제 건의 경우 타입이 REGISTERED 로 고정됩니다.
	Escrow            *PaymentEscrow `json:"escrow,omitempty"`
	Id                string         `json:"id"`
	IsCulturalExpense *bool          `json:"isCulturalExpense,omitempty"`
	MerchantId        string         `json:"merchantId"`

	// Method 결제수단 정보
	Method       *PaymentMethod    `json:"method,omitempty"`
	OrderName    string            `json:"orderName"`
	PaidAt       *time.Time        `json:"paidAt,omitempty"`
	PgTxId       *string           `json:"pgTxId,omitempty"`
	ProductCount *int32            `json:"productCount,omitempty"`
	Products     *[]PaymentProduct `json:"products,omitempty"`
	PromotionId  *string           `json:"promotionId,omitempty"`
	ReceiptUrl   *string           `json:"receiptUrl,omitempty"`
	RequestedAt  time.Time         `json:"requestedAt"`

	// ScheduleId 결제 예약을 이용한 경우에만 존재
	ScheduleId      *string   `json:"scheduleId,omitempty"`
	Status          string    `json:"status"`
	StatusChangedAt time.Time `json:"statusChangedAt"`
	StoreId         string    `json:"storeId"`

	// TransactionId V1 결제 건의 경우 imp_uid에 해당합니다.
	TransactionId string    `json:"transactionId"`
	UpdatedAt     time.Time `json:"updatedAt"`

	// Version 포트원 버전
	Version  PortOneVersion    `json:"version"`
	Webhooks *[]PaymentWebhook `json:"webhooks,omitempty"`
}

// CancelledPaymentCashReceipt 취소된 현금영수증
type CancelledPaymentCashReceipt struct {
	CancelledAt time.Time `json:"cancelledAt"`

	// Currency 통화 단위
	Currency      Currency  `json:"currency"`
	IssueNumber   string    `json:"issueNumber"`
	IssuedAt      time.Time `json:"issuedAt"`
	PgReceiptId   *string   `json:"pgReceiptId,omitempty"`
	Status        string    `json:"status"`
	TaxFreeAmount *int64    `json:"taxFreeAmount,omitempty"`
	TotalAmount   int64     `json:"totalAmount"`

	// Type 발급 유형
	Type *CashReceiptType `json:"type,omitempty"`
	Url  *string          `json:"url,omitempty"`
}

// CancelledPaymentEscrow 거래 취소
type CancelledPaymentEscrow struct {
	AppliedAt     *time.Time `json:"appliedAt,omitempty"`
	Company       string     `json:"company"`
	InvoiceNumber string     `json:"invoiceNumber"`
	SentAt        *time.Time `json:"sentAt,omitempty"`
	Status        string     `json:"status"`
}

// CancelledPaymentTransaction 결제 취소 상태 건
type CancelledPaymentTransaction struct {
	// Amount 결제 금액 세부 정보
	Amount PaymentAmount `json:"amount"`

	// BillingKey 빌링키 결제인 경우에만 존재
	BillingKey    *string               `json:"billingKey,omitempty"`
	Cancellations []PaymentCancellation `json:"cancellations"`
	CancelledAt   time.Time             `json:"cancelledAt"`

	// CashReceipt 결제 건 내 현금영수증 정보
	CashReceipt *PaymentCashReceipt `json:"cashReceipt,omitempty"`

	// Channel (결제, 본인인증 등에) 선택된 채널 정보
	Channel SelectedChannel `json:"channel"`

	// ChannelGroup 채널 그룹 정보
	ChannelGroup *ChannelGroupSummary `json:"channelGroup,omitempty"`

	// Country 국가
	Country *Country `json:"country,omitempty"`

	// Currency 통화 단위
	Currency   Currency `json:"currency"`
	CustomData *string  `json:"customData,omitempty"`

	// Customer 고객 정보
	Customer Customer `json:"customer"`

	// Escrow 에스크로 정보
	//
	// V1 결제 건의 경우 타입이 REGISTERED 로 고정됩니다.
	Escrow *PaymentEscrow `json:"escrow,omitempty"`

	// Id V1 결제 건의 경우 imp_uid에 해당합니다.
	Id                string `json:"id"`
	IsCulturalExpense *bool  `json:"isCulturalExpense,omitempty"`
	MerchantId        string `json:"merchantId"`

	// Method 결제수단 정보
	Method       *PaymentMethod    `json:"method,omitempty"`
	OrderName    string            `json:"orderName"`
	PaidAt       *time.Time        `json:"paidAt,omitempty"`
	PaymentId    string            `json:"paymentId"`
	PgTxId       *string           `json:"pgTxId,omitempty"`
	ProductCount *int32            `json:"productCount,omitempty"`
	Products     *[]PaymentProduct `json:"products,omitempty"`
	PromotionId  *string           `json:"promotionId,omitempty"`
	ReceiptUrl   *string           `json:"receiptUrl,omitempty"`
	RequestedAt  time.Time         `json:"requestedAt"`

	// ScheduleId 결제 예약을 이용한 경우에만 존재
	ScheduleId      *string   `json:"scheduleId,omitempty"`
	Status          string    `json:"status"`
	StatusChangedAt time.Time `json:"statusChangedAt"`
	StoreId         string    `json:"storeId"`
	UpdatedAt       time.Time `json:"updatedAt"`

	// Version 포트원 버전
	Version  PortOneVersion    `json:"version"`
	Webhooks *[]PaymentWebhook `json:"webhooks,omitempty"`
}

// Card 카드 상세 정보
type Card struct {
	Bin *string `json:"bin,omitempty"`

	// Brand 카드 브랜드
	Brand  *CardBrand `json:"brand,omitempty"`
	Issuer *string    `json:"issuer,omitempty"`
	Name   *string    `json:"name,omitempty"`
	Number *string    `json:"number,omitempty"`

	// OwnerType 카드 소유주 유형
	OwnerType *CardOwnerType `json:"ownerType,omitempty"`
	Publisher *string        `json:"publisher,omitempty"`

	// Type 카드 유형
	Type *CardType `json:"type,omitempty"`
}

// CardBrand 카드 브랜드
type CardBrand string

// CardCredential 카드 인증 관련 정보
type CardCredential struct {
	BirthOrBusinessRegistrationNumber *string `json:"birthOrBusinessRegistrationNumber,omitempty"`
	ExpiryMonth                       string  `json:"expiryMonth"`
	ExpiryYear                        string  `json:"expiryYear"`
	Number                            string  `json:"number"`
	PasswordTwoDigits                 *string `json:"passwordTwoDigits,omitempty"`
}

// CardOwnerType 카드 소유주 유형
type CardOwnerType string

// CardPromotion 카드 프로모션
type CardPromotion struct {
	// CardCompany 프로모션 적용 가능한 카드사
	CardCompany PromotionCardCompany `json:"cardCompany"`
	CreatedAt   time.Time            `json:"createdAt"`

	// Currency 통화 단위
	Currency Currency `json:"currency"`

	// DiscountPolicy 프로모션 할인 정책
	DiscountPolicy    PromotionDiscountPolicy `json:"discountPolicy"`
	EndAt             time.Time               `json:"endAt"`
	Id                string                  `json:"id"`
	MaxDiscountAmount *int64                  `json:"maxDiscountAmount,omitempty"`
	Name              string                  `json:"name"`
	RecoverOption     PromotionRecoverOption  `json:"recoverOption"`
	SpentAmount       int64                   `json:"spentAmount"`
	StartAt           time.Time               `json:"startAt"`
	Status            PromotionStatus         `json:"status"`
	StoreId           string                  `json:"storeId"`
	TerminatedAt      *time.Time              `json:"terminatedAt,omitempty"`
	TotalBudget       int64                   `json:"totalBudget"`
	Type              string                  `json:"type"`
}

// CardType 카드 유형
type CardType string

// CashReceipt 현금영수증 내역
type CashReceipt struct {
	union json.RawMessage
}

// CashReceiptAlreadyIssuedError 현금영수증이 이미 발급된 경우
type CashReceiptAlreadyIssuedError struct {
	Message *string `json:"message,omitempty"`
	Type    string  `json:"type"`
}

// CashReceiptInput 현금영수증 입력 정보
type CashReceiptInput struct {
	// CustomerIdentityNumber 미발행 유형 선택 시 입력하지 않습니다.
	CustomerIdentityNumber *string `json:"customerIdentityNumber,omitempty"`

	// Type 입력 시 발급 유형
	Type CashReceiptInputType `json:"type"`
}

// CashReceiptInputType 입력 시 발급 유형
type CashReceiptInputType string

// CashReceiptNotFoundError 현금영수증이 존재하지 않는 경우
type CashReceiptNotFoundError struct {
	Message *string `json:"message,omitempty"`
	Type    string  `json:"type"`
}

// CashReceiptNotIssuedError 현금영수증이 발급되지 않은 경우
type CashReceiptNotIssuedError struct {
	Message *string `json:"message,omitempty"`
	Type    string  `json:"type"`
}

// CashReceiptSummary 현금영수증 내역
type CashReceiptSummary struct {
	IssueNumber string `json:"issueNumber"`
	PgReceiptId string `json:"pgReceiptId"`
	Url         string `json:"url"`
}

// CashReceiptType 발급 유형
type CashReceiptType string

// ChannelGroupSummary 채널 그룹 정보
type ChannelGroupSummary struct {
	Id        string `json:"id"`
	IsForTest bool   `json:"isForTest"`
	Name      string `json:"name"`
}

// ChannelNotFoundError 요청된 채널이 존재하지 않는 경우
type ChannelNotFoundError struct {
	Message *string `json:"message,omitempty"`
	Type    string  `json:"type"`
}

// ChannelSpecificError 여러 채널을 지정한 요청에서, 채널 각각에서 오류가 발생한 경우
type ChannelSpecificError struct {
	Failures          []ChannelSpecificFailure `json:"failures"`
	Message           *string                  `json:"message,omitempty"`
	SucceededChannels []SelectedChannel        `json:"succeededChannels"`
	Type              string                   `json:"type"`
}

// ChannelSpecificFailure defines model for ChannelSpecificFailure.
type ChannelSpecificFailure struct {
	union json.RawMessage
}

// ChannelSpecificFailureInvalidRequest 요청된 입력 정보가 유효하지 않은 경우
//
// 허가되지 않은 값, 올바르지 않은 형식의 요청 등이 모두 해당됩니다.
type ChannelSpecificFailureInvalidRequest struct {
	// Channel (결제, 본인인증 등에) 선택된 채널 정보
	Channel SelectedChannel `json:"channel"`
	Message *string         `json:"message,omitempty"`
	Type    string          `json:"type"`
}

// ChannelSpecificFailurePgProvider PG사에서 오류를 전달한 경우
type ChannelSpecificFailurePgProvider struct {
	// Channel (결제, 본인인증 등에) 선택된 채널 정보
	Channel   SelectedChannel `json:"channel"`
	Message   *string         `json:"message,omitempty"`
	PgCode    string          `json:"pgCode"`
	PgMessage string          `json:"pgMessage"`
	Type      string          `json:"type"`
}

// CloseVirtualAccountError defines model for CloseVirtualAccountError.
type CloseVirtualAccountError struct {
	union json.RawMessage
}

// CloseVirtualAccountResponse 가상계좌 말소 성공 응답
type CloseVirtualAccountResponse struct {
	ClosedAt time.Time `json:"closedAt"`
}

// ConfirmEscrowBody 에스크로 구매 확정 입력 정보
type ConfirmEscrowBody struct {
	// FromStore 구매확정요청 주체가 고객사 관리자인지 구매자인지 구분하기 위한 필드입니다.
	// 네이버페이 전용 파라미터이며, 구분이 모호한 경우 고객사 관리자(true)로 입력합니다.
	FromStore *bool `json:"fromStore,omitempty"`

	// StoreId 접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.
	StoreId *string `json:"storeId,omitempty"`
}

// ConfirmEscrowError defines model for ConfirmEscrowError.
type ConfirmEscrowError struct {
	union json.RawMessage
}

// ConfirmEscrowResponse 에스크로 구매 확정 성공 응답
type ConfirmEscrowResponse struct {
	CompletedAt time.Time `json:"completedAt"`
}

// ConfirmIdentityVerificationBody 본인인증 확인을 위한 입력 정보
type ConfirmIdentityVerificationBody struct {
	// Otp SMS 방식에서만 사용됩니다.
	Otp *string `json:"otp,omitempty"`

	// StoreId 접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.
	StoreId *string `json:"storeId,omitempty"`
}

// ConfirmIdentityVerificationError defines model for ConfirmIdentityVerificationError.
type ConfirmIdentityVerificationError struct {
	union json.RawMessage
}

// ConfirmIdentityVerificationResponse 본인인증 확인 성공 응답
type ConfirmIdentityVerificationResponse struct {
	// IdentityVerification 완료된 본인인증 내역
	IdentityVerification VerifiedIdentityVerification `json:"identityVerification"`
}

// ConfirmedPaymentEscrow 구매 확정
type ConfirmedPaymentEscrow struct {
	AppliedAt                *time.Time `json:"appliedAt,omitempty"`
	Company                  string     `json:"company"`
	InvoiceNumber            string     `json:"invoiceNumber"`
	IsAutomaticallyConfirmed bool       `json:"isAutomaticallyConfirmed"`
	SentAt                   *time.Time `json:"sentAt,omitempty"`
	Status                   string     `json:"status"`
}

// Country 국가
type Country string

// CreateManualTransferResponse defines model for CreateManualTransferResponse.
type CreateManualTransferResponse struct {
	// Transfer 수기 정산건
	Transfer PlatformManualTransfer `json:"transfer"`
}

// CreateOrderCancelTransferResponse defines model for CreateOrderCancelTransferResponse.
type CreateOrderCancelTransferResponse struct {
	// Transfer 주문 취소 정산건
	Transfer PlatformOrderCancelTransfer `json:"transfer"`
}

// CreateOrderTransferResponse defines model for CreateOrderTransferResponse.
type CreateOrderTransferResponse struct {
	// Transfer 주문 정산건
	Transfer PlatformOrderTransfer `json:"transfer"`
}

// CreatePaymentScheduleBody 결제 예약 요청 입력 정보
type CreatePaymentScheduleBody struct {
	// Payment 빌링키 결제 요청 입력 정보
	Payment   BillingKeyPaymentInput `json:"payment"`
	TimeToPay time.Time              `json:"timeToPay"`
}

// CreatePaymentScheduleError defines model for CreatePaymentScheduleError.
type CreatePaymentScheduleError struct {
	union json.RawMessage
}

// CreatePaymentScheduleResponse 결제 예약 성공 응답
type CreatePaymentScheduleResponse struct {
	// Schedule 결제 예약 건
	Schedule PaymentScheduleSummary `json:"schedule"`
}

// CreatePlatformAdditionalFeePolicyBody 추가 수수료 정책 생성을 위한 입력 정보
type CreatePlatformAdditionalFeePolicyBody struct {
	// Fee 수수료 계산 방식을 특정하기 위한 입력 정보
	//
	// 정률 수수료를 설정하고 싶은 경우 `fixedRate` 필드에, 정액 수수료를 설정하고 싶은 경우 `fixedAmount` 필드에 값을 명시해 요청합니다.
	// 두 필드 모두 값이 들어있지 않은 경우 요청이 거절됩니다.
	Fee PlatformFeeInput `json:"fee"`

	// Id 명시하지 않으면 id 가 임의로 생성됩니다.
	Id   *string `json:"id,omitempty"`
	Memo *string `json:"memo,omitempty"`
	Name string  `json:"name"`

	// VatPayer 금액 부담 주체
	//
	// 플랫폼에서 발생한 결제 수수료, 부가세 등 금액을 부담하는 주체를 나타냅니다.
	VatPayer PlatformPayer `json:"vatPayer"`
}

// CreatePlatformAdditionalFeePolicyError defines model for CreatePlatformAdditionalFeePolicyError.
type CreatePlatformAdditionalFeePolicyError struct {
	union json.RawMessage
}

// CreatePlatformAdditionalFeePolicyResponse 플랫폼 생성 성공 응답 정보
type CreatePlatformAdditionalFeePolicyResponse struct {
	// AdditionalFeePolicy 추가 수수료 정책
	//
	// 추가 수수료 정책는 고객사의 주문건에 대한 중개수수료에 별도로 추가로 부여되는 수수료입니다. 대표적인 사용 예시로 풀필먼트 수수료, 로켓배송 수수료, 마케팅 채널 수수료등이 있습니다.
	AdditionalFeePolicy PlatformAdditionalFeePolicy `json:"additionalFeePolicy"`
}

// CreatePlatformContractBody 계약 객체 생성을 위한 입력 정보
type CreatePlatformContractBody struct {
	// Id 명시하지 않는 경우 포트원이 임의의 아이디를 발급해드립니다.
	Id   *string `json:"id,omitempty"`
	Memo *string `json:"memo,omitempty"`
	Name string  `json:"name"`

	// PlatformFee 수수료 계산 방식을 특정하기 위한 입력 정보
	//
	// 정률 수수료를 설정하고 싶은 경우 `fixedRate` 필드에, 정액 수수료를 설정하고 싶은 경우 `fixedAmount` 필드에 값을 명시해 요청합니다.
	// 두 필드 모두 값이 들어있지 않은 경우 요청이 거절됩니다.
	PlatformFee PlatformFeeInput `json:"platformFee"`

	// PlatformFeeVatPayer 금액 부담 주체
	//
	// 플랫폼에서 발생한 결제 수수료, 부가세 등 금액을 부담하는 주체를 나타냅니다.
	PlatformFeeVatPayer PlatformPayer `json:"platformFeeVatPayer"`

	// SettlementCycle 플랫폼 정산 주기 입력 정보
	SettlementCycle          PlatformSettlementCycleInput `json:"settlementCycle"`
	SubtractPaymentVatAmount bool                         `json:"subtractPaymentVatAmount"`
}

// CreatePlatformContractError defines model for CreatePlatformContractError.
type CreatePlatformContractError struct {
	union json.RawMessage
}

// CreatePlatformContractResponse 계약 객체 생성 성공 응답
type CreatePlatformContractResponse struct {
	// Contract 계약
	//
	// 계약은 플랫폼 고객사가 파트너에게 정산해줄 대금과 정산일을 계산하는 데 적용되는 정보입니다.
	// 고객사의 플랫폼에서 재화 및 서비스를 판매하기 위한 중개수수료와 판매금에 대한 정산일로 구성되어 있습니다.
	Contract PlatformContract `json:"contract"`
}

// CreatePlatformDiscountSharePolicyBody 할인 분담 정책 생성을 위한 입력 정보
type CreatePlatformDiscountSharePolicyBody struct {
	// Id 명시하지 않는 경우 포트원이 임의의 아이디를 발급해드립니다.
	Id               *string `json:"id,omitempty"`
	Memo             *string `json:"memo,omitempty"`
	Name             string  `json:"name"`
	PartnerShareRate int32   `json:"partnerShareRate"`
}

// CreatePlatformDiscountSharePolicyError defines model for CreatePlatformDiscountSharePolicyError.
type CreatePlatformDiscountSharePolicyError struct {
	union json.RawMessage
}

// CreatePlatformDiscountSharePolicyResponse 할인 분담 정책 생성 성공 응답
type CreatePlatformDiscountSharePolicyResponse struct {
	// DiscountSharePolicy 할인 분담 정책
	//
	// 할인 분담은 고객사의 주문건에 쿠폰 및 포인트와 같은 할인금액이 적용될 때, 파트너 정산 시 할인금액에 대한 분담 정책을 가지는 객체입니다.
	// 할인 유형에 대한 아이디와 메모, 그리고 파트너 분담율을 가집니다.
	DiscountSharePolicy PlatformDiscountSharePolicy `json:"discountSharePolicy"`
}

// CreatePlatformManualTransferBody 수기 정산건 생성을 위한 입력 정보
type CreatePlatformManualTransferBody struct {
	// IsForTest 기본값은 false 입니다.
	IsForTest        *bool   `json:"isForTest,omitempty"`
	Memo             *string `json:"memo,omitempty"`
	PartnerId        string  `json:"partnerId"`
	SettlementAmount int64   `json:"settlementAmount"`

	// SettlementDate 날짜를 나타내는 문자열로, `yyyy-MM-dd` 형식을 따릅니다.
	SettlementDate        string                                 `json:"settlementDate"`
	UserDefinedProperties *[]PlatformUserDefinedPropertyKeyValue `json:"userDefinedProperties,omitempty"`
}

// CreatePlatformManualTransferError defines model for CreatePlatformManualTransferError.
type CreatePlatformManualTransferError struct {
	union json.RawMessage
}

// CreatePlatformOrderCancelTransferBody 주문 취소 정산 등록을 위한 입력 정보
//
// 하나의 payment에 하나의 정산 건만 존재하는 경우에는 (partnerId, paymentId)로 취소 정산을 등록하실 수 있습니다.
// 하나의 payment에 여러 개의 정산 건이 존재하는 경우에는 transferId를 필수로 입력해야 합니다.
// transferId를 입력한 경우 (partnerId, paymentId)는 생략 가능합니다.
type CreatePlatformOrderCancelTransferBody struct {
	CancellationId string                                          `json:"cancellationId"`
	Discounts      []CreatePlatformOrderCancelTransferBodyDiscount `json:"discounts"`

	// ExternalCancellationDetail 외부 결제 상세 정보
	ExternalCancellationDetail *CreatePlatformOrderCancelTransferBodyExternalCancellationDetail `json:"externalCancellationDetail,omitempty"`

	// IsForTest 기본값은 false 입니다.
	IsForTest *bool   `json:"isForTest,omitempty"`
	Memo      *string `json:"memo,omitempty"`

	// OrderDetail 주문 취소 정보
	//
	// orderAmount, orderLines, all 중에서 하나만 입력하여야 합니다.
	OrderDetail *CreatePlatformOrderCancelTransferBodyOrderDetail `json:"orderDetail,omitempty"`
	PartnerId   *string                                           `json:"partnerId,omitempty"`
	PaymentId   *string                                           `json:"paymentId,omitempty"`

	// SettlementStartDate 날짜를 나타내는 문자열로, `yyyy-MM-dd` 형식을 따릅니다.
	SettlementStartDate *string `json:"settlementStartDate,omitempty"`

	// TaxFreeAmount 주문 취소 항목과 취소 면세 금액을 같이 전달하시면 최종 취소 면세 금액은 주문 취소 항목의 면세 금액이 아닌 전달해주신 취소 면세 금액으로 적용됩니다.
	TaxFreeAmount         *int64                                 `json:"taxFreeAmount,omitempty"`
	TransferId            *string                                `json:"transferId,omitempty"`
	UserDefinedProperties *[]PlatformUserDefinedPropertyKeyValue `json:"userDefinedProperties,omitempty"`
}

// CreatePlatformOrderCancelTransferBodyDiscount 할인 정보
type CreatePlatformOrderCancelTransferBodyDiscount struct {
	Amount        int64  `json:"amount"`
	SharePolicyId string `json:"sharePolicyId"`
	TaxFreeAmount *int64 `json:"taxFreeAmount,omitempty"`
}

// CreatePlatformOrderCancelTransferBodyExternalCancellationDetail 외부 결제 상세 정보
type CreatePlatformOrderCancelTransferBodyExternalCancellationDetail struct {
	CancelledAt *time.Time `json:"cancelledAt,omitempty"`
}

// CreatePlatformOrderCancelTransferBodyOrderDetail 주문 취소 정보
//
// orderAmount, orderLines, all 중에서 하나만 입력하여야 합니다.
type CreatePlatformOrderCancelTransferBodyOrderDetail struct {
	// All 전체 금액 취소
	All         *CreatePlatformOrderCancelTransferBodyOrderDetailAll `json:"all,omitempty"`
	OrderAmount *int64                                               `json:"orderAmount,omitempty"`
	OrderLines  *[]CreatePlatformOrderCancelTransferBodyOrderLine    `json:"orderLines,omitempty"`
}

// CreatePlatformOrderCancelTransferBodyOrderDetailAll 전체 금액 취소
type CreatePlatformOrderCancelTransferBodyOrderDetailAll = map[string]interface{}

// CreatePlatformOrderCancelTransferBodyOrderLine 주문 취소 항목 리스트
type CreatePlatformOrderCancelTransferBodyOrderLine struct {
	Discounts []CreatePlatformOrderCancelTransferBodyDiscount `json:"discounts"`
	ProductId string                                          `json:"productId"`
	Quantity  int32                                           `json:"quantity"`
}

// CreatePlatformOrderCancelTransferError defines model for CreatePlatformOrderCancelTransferError.
type CreatePlatformOrderCancelTransferError struct {
	union json.RawMessage
}

// CreatePlatformOrderTransferBody 주문 정산건 생성을 위한 입력 정보
type CreatePlatformOrderTransferBody struct {
	AdditionalFees []CreatePlatformOrderTransferBodyAdditionalFee `json:"additionalFees"`

	// ContractId 기본값은 파트너의 기본 계약 아이디 입니다.
	ContractId *string                                   `json:"contractId,omitempty"`
	Discounts  []CreatePlatformOrderTransferBodyDiscount `json:"discounts"`

	// ExternalPaymentDetail 외부 결제 상세 정보
	ExternalPaymentDetail *CreatePlatformOrderTransferBodyExternalPaymentDetail `json:"externalPaymentDetail,omitempty"`

	// IsForTest 기본값은 false 입니다.
	IsForTest *bool   `json:"isForTest,omitempty"`
	Memo      *string `json:"memo,omitempty"`

	// OrderDetail 주문 정보
	//
	// 주문 금액 또는 주문 항목 하나만 입력 가능합니다.
	OrderDetail CreatePlatformOrderTransferBodyOrderDetail `json:"orderDetail"`
	Parameters  *TransferParameters                        `json:"parameters,omitempty"`
	PartnerId   string                                     `json:"partnerId"`
	PaymentId   string                                     `json:"paymentId"`

	// SettlementStartDate 기본값은 결제 일시 입니다.
	SettlementStartDate *string `json:"settlementStartDate,omitempty"`

	// TaxFreeAmount 주문 항목과 면세 금액을 같이 전달하시면 최종 면세 금액은 주문 항목의 면세 금액이 아닌 전달해주신 면세 금액으로 적용됩니다.
	TaxFreeAmount         *int64                                 `json:"taxFreeAmount,omitempty"`
	UserDefinedProperties *[]PlatformUserDefinedPropertyKeyValue `json:"userDefinedProperties,omitempty"`
}

// CreatePlatformOrderTransferBodyAdditionalFee 추가 수수료 정보
type CreatePlatformOrderTransferBodyAdditionalFee struct {
	PolicyId string `json:"policyId"`
}

// CreatePlatformOrderTransferBodyDiscount 할인 정보
type CreatePlatformOrderTransferBodyDiscount struct {
	Amount        int64  `json:"amount"`
	SharePolicyId string `json:"sharePolicyId"`
	TaxFreeAmount *int64 `json:"taxFreeAmount,omitempty"`
}

// CreatePlatformOrderTransferBodyExternalPaymentDetail 외부 결제 상세 정보
type CreatePlatformOrderTransferBodyExternalPaymentDetail struct {
	// Currency 통화 단위
	Currency Currency `json:"currency"`

	// Method 결제 수단 입력 정보
	Method    *PlatformPaymentMethodInput `json:"method,omitempty"`
	OrderName *string                     `json:"orderName,omitempty"`
	PaidAt    *time.Time                  `json:"paidAt,omitempty"`
}

// CreatePlatformOrderTransferBodyOrderDetail 주문 정보
//
// 주문 금액 또는 주문 항목 하나만 입력 가능합니다.
type CreatePlatformOrderTransferBodyOrderDetail struct {
	OrderAmount *int64                                      `json:"orderAmount,omitempty"`
	OrderLines  *[]CreatePlatformOrderTransferBodyOrderLine `json:"orderLines,omitempty"`
}

// CreatePlatformOrderTransferBodyOrderLine 주문 항목
type CreatePlatformOrderTransferBodyOrderLine struct {
	AdditionalFees []CreatePlatformOrderTransferBodyAdditionalFee `json:"additionalFees"`
	Discounts      []CreatePlatformOrderTransferBodyDiscount      `json:"discounts"`

	// Product 상품
	Product  CreatePlatformOrderTransferBodyProduct `json:"product"`
	Quantity int32                                  `json:"quantity"`
}

// CreatePlatformOrderTransferBodyProduct 상품
type CreatePlatformOrderTransferBodyProduct struct {
	Amount        int64   `json:"amount"`
	Id            string  `json:"id"`
	Name          string  `json:"name"`
	Tag           *string `json:"tag,omitempty"`
	TaxFreeAmount *int64  `json:"taxFreeAmount,omitempty"`
}

// CreatePlatformOrderTransferError defines model for CreatePlatformOrderTransferError.
type CreatePlatformOrderTransferError struct {
	union json.RawMessage
}

// CreatePlatformPartnerBody 파트너 생성을 위한 입력 정보
type CreatePlatformPartnerBody struct {
	// Account 파트너 계좌 등록을 위한 정보
	Account CreatePlatformPartnerBodyAccount `json:"account"`

	// Contact 파트너 담당자 정보
	Contact CreatePlatformPartnerBodyContact `json:"contact"`

	// DefaultContractId 이미 존재하는 계약 아이디를 등록해야 합니다.
	DefaultContractId string `json:"defaultContractId"`

	// Id 고객사 서버에 등록된 파트너 지칭 아이디와 동일하게 설정하는 것을 권장합니다. 명시하지 않는 경우 포트원이 임의의 아이디를 발급해드립니다.
	Id *string `json:"id,omitempty"`

	// Memo 총 256자까지 입력할 수 있습니다.
	Memo *string `json:"memo,omitempty"`
	Name string  `json:"name"`

	// Tags 최대 10개까지 입력할 수 있습니다.
	Tags []string `json:"tags"`

	// Type 파트너 생성을 위한 유형별 추가 정보
	Type                  CreatePlatformPartnerBodyType `json:"type"`
	UserDefinedProperties *PlatformProperties           `json:"userDefinedProperties,omitempty"`
}

// CreatePlatformPartnerBodyAccount 파트너 계좌 등록을 위한 정보
type CreatePlatformPartnerBodyAccount struct {
	AccountVerificationId *string `json:"accountVerificationId,omitempty"`

	// Bank 은행
	Bank Bank `json:"bank"`

	// Currency 통화 단위
	Currency Currency `json:"currency"`
	Holder   string   `json:"holder"`
	Number   string   `json:"number"`
}

// CreatePlatformPartnerBodyContact 파트너 담당자 정보
type CreatePlatformPartnerBodyContact struct {
	Email       string  `json:"email"`
	Name        string  `json:"name"`
	PhoneNumber *string `json:"phoneNumber,omitempty"`
}

// CreatePlatformPartnerBodyType 파트너 생성을 위한 유형별 추가 정보
type CreatePlatformPartnerBodyType struct {
	Business    *CreatePlatformPartnerBodyTypeBusiness    `json:"business,omitempty"`
	NonWhtPayer *CreatePlatformPartnerBodyTypeNonWhtPayer `json:"nonWhtPayer,omitempty"`
	WhtPayer    *CreatePlatformPartnerBodyTypeWhtPayer    `json:"whtPayer,omitempty"`
}

// CreatePlatformPartnerBodyTypeBusiness defines model for CreatePlatformPartnerBodyTypeBusiness.
type CreatePlatformPartnerBodyTypeBusiness struct {
	BusinessClass              *string `json:"businessClass,omitempty"`
	BusinessRegistrationNumber string  `json:"businessRegistrationNumber"`
	BusinessType               *string `json:"businessType,omitempty"`
	CompanyAddress             *string `json:"companyAddress,omitempty"`
	CompanyName                string  `json:"companyName"`
	CompanyVerificationId      *string `json:"companyVerificationId,omitempty"`
	RepresentativeName         string  `json:"representativeName"`

	// TaxationType 플랫폼 파트너 과세 유형
	TaxationType *PlatformPartnerTaxationType `json:"taxationType,omitempty"`
}

// CreatePlatformPartnerBodyTypeNonWhtPayer defines model for CreatePlatformPartnerBodyTypeNonWhtPayer.
type CreatePlatformPartnerBodyTypeNonWhtPayer struct {
	// Birthdate 날짜를 나타내는 문자열로, `yyyy-MM-dd` 형식을 따릅니다.
	Birthdate *string `json:"birthdate,omitempty"`
}

// CreatePlatformPartnerBodyTypeWhtPayer defines model for CreatePlatformPartnerBodyTypeWhtPayer.
type CreatePlatformPartnerBodyTypeWhtPayer struct {
	// Birthdate 날짜를 나타내는 문자열로, `yyyy-MM-dd` 형식을 따릅니다.
	Birthdate *string `json:"birthdate,omitempty"`
}

// CreatePlatformPartnerError defines model for CreatePlatformPartnerError.
type CreatePlatformPartnerError struct {
	union json.RawMessage
}

// CreatePlatformPartnerResponse 파트너 생성 성공 응답
type CreatePlatformPartnerResponse struct {
	// Partner 파트너
	//
	// 파트너는 고객사가 정산해주어야 할 대상입니다.
	// 기본 사업자 정보와 정산정보, 그리고 적용될 계약의 정보를 등록 및 관리할 수 있습니다.
	Partner PlatformPartner `json:"partner"`
}

// CreatePlatformPartnersBody 파트너 다건 생성을 위한 입력 정보
type CreatePlatformPartnersBody struct {
	Partners []CreatePlatformPartnerBody `json:"partners"`
}

// CreatePlatformPartnersError defines model for CreatePlatformPartnersError.
type CreatePlatformPartnersError struct {
	union json.RawMessage
}

// CreatePlatformPartnersResponse 파트너 다건 생성 성공 응답
type CreatePlatformPartnersResponse struct {
	Partners []PlatformPartner `json:"partners"`
}

// Currency 통화 단위
type Currency string

// Customer 고객 정보
type Customer struct {
	// Address 분리 형식 주소
	//
	// oneLine(한 줄 형식 주소) 필드는 항상 존재합니다.
	Address   *Address `json:"address,omitempty"`
	BirthYear *string  `json:"birthYear,omitempty"`
	Email     *string  `json:"email,omitempty"`

	// Gender 성별
	Gender *Gender `json:"gender,omitempty"`

	// Id 고객사가 지정한 고객의 고유 식별자입니다.
	Id          *string `json:"id,omitempty"`
	Name        *string `json:"name,omitempty"`
	PhoneNumber *string `json:"phoneNumber,omitempty"`
	Zipcode     *string `json:"zipcode,omitempty"`
}

// CustomerInput 고객 정보 입력 정보
type CustomerInput struct {
	// Address 분리 형식 주소 입력 정보
	Address                    *SeparatedAddressInput `json:"address,omitempty"`
	BirthDay                   *string                `json:"birthDay,omitempty"`
	BirthMonth                 *string                `json:"birthMonth,omitempty"`
	BirthYear                  *string                `json:"birthYear,omitempty"`
	BusinessRegistrationNumber *string                `json:"businessRegistrationNumber,omitempty"`

	// Country 국가
	Country *Country `json:"country,omitempty"`
	Email   *string  `json:"email,omitempty"`

	// Gender 성별
	Gender *Gender `json:"gender,omitempty"`

	// Id 고객사가 지정한 고객의 고유 식별자입니다.
	Id *string `json:"id,omitempty"`

	// Name 고객 이름 입력 정보
	//
	// 두 개의 이름 형식 중 한 가지만 선택하여 입력해주세요.
	Name        *CustomerNameInput `json:"name,omitempty"`
	PhoneNumber *string            `json:"phoneNumber,omitempty"`
	Zipcode     *string            `json:"zipcode,omitempty"`
}

// CustomerNameInput 고객 이름 입력 정보
//
// 두 개의 이름 형식 중 한 가지만 선택하여 입력해주세요.
type CustomerNameInput struct {
	Full *string `json:"full,omitempty"`

	// Separated 고객 분리형 이름
	Separated *CustomerSeparatedName `json:"separated,omitempty"`
}

// CustomerSeparatedName 고객 분리형 이름
type CustomerSeparatedName struct {
	First string `json:"first"`
	Last  string `json:"last"`
}

// DateRange defines model for DateRange.
type DateRange struct {
	// From 날짜를 나타내는 문자열로, `yyyy-MM-dd` 형식을 따릅니다.
	From string `json:"from"`

	// Until 날짜를 나타내는 문자열로, `yyyy-MM-dd` 형식을 따릅니다.
	Until string `json:"until"`
}

// DateTimeRange 시간 범위
type DateTimeRange struct {
	From  time.Time `json:"from"`
	Until time.Time `json:"until"`
}

// DayOfWeek 요일
type DayOfWeek string

// DeleteBillingKeyError defines model for DeleteBillingKeyError.
type DeleteBillingKeyError struct {
	union json.RawMessage
}

// DeleteBillingKeyResponse 빌링키 삭제 성공 응답
type DeleteBillingKeyResponse struct {
	DeletedAt time.Time `json:"deletedAt"`
}

// DeletePlatformTransferError defines model for DeletePlatformTransferError.
type DeletePlatformTransferError struct {
	union json.RawMessage
}

// DeletePlatformTransferResponse defines model for DeletePlatformTransferResponse.
type DeletePlatformTransferResponse = map[string]interface{}

// DeletedBillingKeyInfo 빌링키 삭제 완료 상태 건
type DeletedBillingKeyInfo struct {
	BillingKey string `json:"billingKey"`

	// ChannelGroup 채널 그룹 정보
	ChannelGroup *ChannelGroupSummary `json:"channelGroup,omitempty"`

	// Channels 추후 슈퍼빌링키 기능 제공 시 여러 채널 정보가 담길 수 있습니다.
	Channels   []SelectedChannel `json:"channels"`
	CustomData *string           `json:"customData,omitempty"`

	// Customer 고객 정보
	Customer   Customer  `json:"customer"`
	DeletedAt  time.Time `json:"deletedAt"`
	IssueId    *string   `json:"issueId,omitempty"`
	IssueName  *string   `json:"issueName,omitempty"`
	IssuedAt   time.Time `json:"issuedAt"`
	MerchantId string    `json:"merchantId"`

	// Methods 추후 슈퍼빌링키 기능 제공 시 여러 결제수단 정보가 담길 수 있습니다.
	Methods *[]BillingKeyPaymentMethod `json:"methods,omitempty"`

	// PgBillingKeyIssueResponses 슈퍼빌링키의 경우, 빌링키 발급이 성공하더라도 일부 채널에 대한 발급은 실패할 수 있습니다.
	PgBillingKeyIssueResponses *[]PgBillingKeyIssueResponse `json:"pgBillingKeyIssueResponses,omitempty"`
	RequestedAt                *time.Time                   `json:"requestedAt,omitempty"`
	Status                     string                       `json:"status"`
	StoreId                    string                       `json:"storeId"`
}

// DeliveredPaymentEscrow 배송 완료
type DeliveredPaymentEscrow struct {
	AppliedAt     *time.Time `json:"appliedAt,omitempty"`
	Company       string     `json:"company"`
	InvoiceNumber string     `json:"invoiceNumber"`
	SentAt        *time.Time `json:"sentAt,omitempty"`
	Status        string     `json:"status"`
}

// DiscountAmountExceedsTotalAmountError 프로모션 할인 금액이 결제 시도 금액 이상인 경우
type DiscountAmountExceedsTotalAmountError struct {
	Message *string `json:"message,omitempty"`
	Type    string  `json:"type"`
}

// DownloadPlatformTransferSheetBody defines model for DownloadPlatformTransferSheetBody.
type DownloadPlatformTransferSheetBody struct {
	Fields *[]PlatformTransferSheetField `json:"fields,omitempty"`

	// Filter 정산건 필터 입력 정보
	//
	// 정산 시작일 범위와 정산 일 범위는 둘 중 하나만 입력 가능합니다.
	Filter                          *PlatformTransferFilterInput `json:"filter,omitempty"`
	PartnerUserDefinedPropertyKeys  *[]string                    `json:"partnerUserDefinedPropertyKeys,omitempty"`
	TransferUserDefinedPropertyKeys *[]string                    `json:"transferUserDefinedPropertyKeys,omitempty"`
}

// DownloadPlatformTransferSheetError defines model for DownloadPlatformTransferSheetError.
type DownloadPlatformTransferSheetError struct {
	union json.RawMessage
}

// EasyPayMethodType 간편 결제 수단
type EasyPayMethodType string

// EasyPayProvider 간편 결제사
type EasyPayProvider string

// FailedIdentityVerification 실패한 본인인증 내역
type FailedIdentityVerification struct {
	// Channel (결제, 본인인증 등에) 선택된 채널 정보
	Channel    *SelectedChannel `json:"channel,omitempty"`
	CustomData *string          `json:"customData,omitempty"`

	// Failure 본인인증 실패 정보
	Failure     IdentityVerificationFailure `json:"failure"`
	Id          string                      `json:"id"`
	RequestedAt time.Time                   `json:"requestedAt"`

	// RequestedCustomer 요청 시 고객 정보
	RequestedCustomer IdentityVerificationRequestedCustomer `json:"requestedCustomer"`
	Status            string                                `json:"status"`
	StatusChangedAt   time.Time                             `json:"statusChangedAt"`
	UpdatedAt         time.Time                             `json:"updatedAt"`
}

// FailedPayment 결제 실패 상태 건
type FailedPayment struct {
	// Amount 결제 금액 세부 정보
	Amount PaymentAmount `json:"amount"`

	// BillingKey 빌링키 결제인 경우에만 존재
	BillingKey *string `json:"billingKey,omitempty"`

	// Channel (결제, 본인인증 등에) 선택된 채널 정보
	Channel *SelectedChannel `json:"channel,omitempty"`

	// ChannelGroup 채널 그룹 정보
	ChannelGroup *ChannelGroupSummary `json:"channelGroup,omitempty"`

	// Country 국가
	Country *Country `json:"country,omitempty"`

	// Currency 통화 단위
	Currency   Currency `json:"currency"`
	CustomData *string  `json:"customData,omitempty"`

	// Customer 고객 정보
	Customer Customer `json:"customer"`

	// Escrow 에스크로 정보
	//
	// V1 결제 건의 경우 타입이 REGISTERED 로 고정됩니다.
	Escrow   *PaymentEscrow `json:"escrow,omitempty"`
	FailedAt time.Time      `json:"failedAt"`

	// Failure 결제 실패 정보
	Failure           PaymentFailure `json:"failure"`
	Id                string         `json:"id"`
	IsCulturalExpense *bool          `json:"isCulturalExpense,omitempty"`
	MerchantId        string         `json:"merchantId"`

	// Method 결제수단 정보
	Method       *PaymentMethod    `json:"method,omitempty"`
	OrderName    string            `json:"orderName"`
	ProductCount *int32            `json:"productCount,omitempty"`
	Products     *[]PaymentProduct `json:"products,omitempty"`
	PromotionId  *string           `json:"promotionId,omitempty"`
	RequestedAt  time.Time         `json:"requestedAt"`

	// ScheduleId 결제 예약을 이용한 경우에만 존재
	ScheduleId      *string   `json:"scheduleId,omitempty"`
	Status          string    `json:"status"`
	StatusChangedAt time.Time `json:"statusChangedAt"`
	StoreId         string    `json:"storeId"`

	// TransactionId V1 결제 건의 경우 imp_uid에 해당합니다.
	TransactionId string    `json:"transactionId"`
	UpdatedAt     time.Time `json:"updatedAt"`

	// Version 포트원 버전
	Version  PortOneVersion    `json:"version"`
	Webhooks *[]PaymentWebhook `json:"webhooks,omitempty"`
}

// FailedPaymentCancellation 취소 실패 상태
type FailedPaymentCancellation struct {
	CancelledAt           *time.Time `json:"cancelledAt,omitempty"`
	EasyPayDiscountAmount *int64     `json:"easyPayDiscountAmount,omitempty"`
	Id                    string     `json:"id"`
	PgCancellationId      *string    `json:"pgCancellationId,omitempty"`
	Reason                string     `json:"reason"`
	RequestedAt           time.Time  `json:"requestedAt"`
	Status                string     `json:"status"`
	TaxFreeAmount         int64      `json:"taxFreeAmount"`
	TotalAmount           int64      `json:"totalAmount"`
	Trigger               *Trigger   `json:"trigger,omitempty"`
	VatAmount             int64      `json:"vatAmount"`
}

// FailedPaymentSchedule 결제 실패 상태
type FailedPaymentSchedule struct {
	BillingKey  string    `json:"billingKey"`
	CompletedAt time.Time `json:"completedAt"`
	CreatedAt   time.Time `json:"createdAt"`

	// Currency 통화 단위
	Currency   Currency `json:"currency"`
	CustomData string   `json:"customData"`

	// Customer 고객 정보
	Customer          Customer          `json:"customer"`
	Id                string            `json:"id"`
	InstallmentMonth  *int32            `json:"installmentMonth,omitempty"`
	IsCulturalExpense bool              `json:"isCulturalExpense"`
	IsEscrow          bool              `json:"isEscrow"`
	MerchantId        string            `json:"merchantId"`
	NoticeUrls        *[]string         `json:"noticeUrls,omitempty"`
	OrderName         string            `json:"orderName"`
	PaymentId         string            `json:"paymentId"`
	Products          *[]PaymentProduct `json:"products,omitempty"`
	StartedAt         time.Time         `json:"startedAt"`
	Status            string            `json:"status"`
	StoreId           string            `json:"storeId"`
	TaxFreeAmount     *int64            `json:"taxFreeAmount,omitempty"`
	TimeToPay         time.Time         `json:"timeToPay"`
	TotalAmount       int64             `json:"totalAmount"`
	VatAmount         *int64            `json:"vatAmount,omitempty"`
}

// FailedPaymentTransaction 결제 실패 상태 건
type FailedPaymentTransaction struct {
	// Amount 결제 금액 세부 정보
	Amount PaymentAmount `json:"amount"`

	// BillingKey 빌링키 결제인 경우에만 존재
	BillingKey *string `json:"billingKey,omitempty"`

	// Channel (결제, 본인인증 등에) 선택된 채널 정보
	Channel *SelectedChannel `json:"channel,omitempty"`

	// ChannelGroup 채널 그룹 정보
	ChannelGroup *ChannelGroupSummary `json:"channelGroup,omitempty"`

	// Country 국가
	Country *Country `json:"country,omitempty"`

	// Currency 통화 단위
	Currency   Currency `json:"currency"`
	CustomData *string  `json:"customData,omitempty"`

	// Customer 고객 정보
	Customer Customer `json:"customer"`

	// Escrow 에스크로 정보
	//
	// V1 결제 건의 경우 타입이 REGISTERED 로 고정됩니다.
	Escrow   *PaymentEscrow `json:"escrow,omitempty"`
	FailedAt time.Time      `json:"failedAt"`

	// Failure 결제 실패 정보
	Failure PaymentFailure `json:"failure"`

	// Id V1 결제 건의 경우 imp_uid에 해당합니다.
	Id                string `json:"id"`
	IsCulturalExpense *bool  `json:"isCulturalExpense,omitempty"`
	MerchantId        string `json:"merchantId"`

	// Method 결제수단 정보
	Method       *PaymentMethod    `json:"method,omitempty"`
	OrderName    string            `json:"orderName"`
	PaymentId    string            `json:"paymentId"`
	ProductCount *int32            `json:"productCount,omitempty"`
	Products     *[]PaymentProduct `json:"products,omitempty"`
	PromotionId  *string           `json:"promotionId,omitempty"`
	RequestedAt  time.Time         `json:"requestedAt"`

	// ScheduleId 결제 예약을 이용한 경우에만 존재
	ScheduleId      *string   `json:"scheduleId,omitempty"`
	Status          string    `json:"status"`
	StatusChangedAt time.Time `json:"statusChangedAt"`
	StoreId         string    `json:"storeId"`
	UpdatedAt       time.Time `json:"updatedAt"`

	// Version 포트원 버전
	Version  PortOneVersion    `json:"version"`
	Webhooks *[]PaymentWebhook `json:"webhooks,omitempty"`
}

// FailedPgBillingKeyIssueResponse 빌링키 발급 실패 채널 응답
type FailedPgBillingKeyIssueResponse struct {
	// Channel (결제, 본인인증 등에) 선택된 채널 정보
	Channel SelectedChannel `json:"channel"`

	// Failure 발급 실패 상세 정보
	Failure BillingKeyFailure `json:"failure"`
	Type    string            `json:"type"`
}

// ForbiddenError 요청이 거절된 경우
type ForbiddenError struct {
	Message *string `json:"message,omitempty"`
	Type    string  `json:"type"`
}

// Gender 성별
type Gender string

// GetAccountTransfersBody defines model for GetAccountTransfersBody.
type GetAccountTransfersBody struct {
	Filter    *PlatformAccountTransferFilter `json:"filter,omitempty"`
	IsForTest *bool                          `json:"isForTest,omitempty"`

	// Page 다건 조회 API 에 사용되는 페이지 입력 정보
	Page *PageInput `json:"page,omitempty"`
}

// GetAllPaymentsByCursorBody 결제 건 커서 기반 대용량 다건 조회를 위한 입력 정보
type GetAllPaymentsByCursorBody struct {
	// Cursor 결제 건 리스트 중 어디서부터 읽어야 할지 가리키는 값입니다. 최초 요청일 경우 값을 입력하지 마시되, 두번째 요청 부터는 이전 요청 응답값의 cursor를 입력해주시면 됩니다.
	Cursor *string `json:"cursor,omitempty"`

	// From 값을 입력하지 않으면 end의 90일 전으로 설정됩니다.
	From *time.Time `json:"from,omitempty"`

	// Size 미입력 시 기본값은 10 이며 최대 1000까지 허용
	Size *int32 `json:"size,omitempty"`

	// StoreId 접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.
	StoreId *string `json:"storeId,omitempty"`

	// Until 값을 입력하지 않으면 현재 시점으로 설정됩니다.
	Until *time.Time `json:"until,omitempty"`
}

// GetAllPaymentsByCursorResponse 결제 건 커서 기반 대용량 다건 조회 성공 응답 정보
type GetAllPaymentsByCursorResponse struct {
	Items []PaymentWithCursor `json:"items"`
}

// GetAllPaymentsError defines model for GetAllPaymentsError.
type GetAllPaymentsError struct {
	union json.RawMessage
}

// GetBankInfosError defines model for GetBankInfosError.
type GetBankInfosError struct {
	union json.RawMessage
}

// GetBankInfosResponse 은행 정보 조회 성공 응답 정보
type GetBankInfosResponse struct {
	Items []BankInfo `json:"items"`
}

// GetBillingKeyInfoError defines model for GetBillingKeyInfoError.
type GetBillingKeyInfoError struct {
	union json.RawMessage
}

// GetBillingKeyInfosBody 빌링키 다건 조회를 위한 입력 정보
type GetBillingKeyInfosBody struct {
	// Filter 빌링키 다건 조회를 위한 입력 정보
	Filter *BillingKeyFilterInput `json:"filter,omitempty"`

	// Page 다건 조회 API 에 사용되는 페이지 입력 정보
	Page *PageInput `json:"page,omitempty"`

	// Sort 빌링키 다건 조회 시 정렬 조건
	Sort *BillingKeySortInput `json:"sort,omitempty"`
}

// GetBillingKeyInfosError defines model for GetBillingKeyInfosError.
type GetBillingKeyInfosError struct {
	union json.RawMessage
}

// GetBillingKeyInfosResponse 빌링키 다건 조회 성공 응답 정보
type GetBillingKeyInfosResponse struct {
	Items []BillingKeyInfo `json:"items"`

	// Page 반환된 페이지 결과 정보
	Page PageInfo `json:"page"`
}

// GetCashReceiptError defines model for GetCashReceiptError.
type GetCashReceiptError struct {
	union json.RawMessage
}

// GetIdentityVerificationError defines model for GetIdentityVerificationError.
type GetIdentityVerificationError struct {
	union json.RawMessage
}

// GetKakaopayPaymentOrderError defines model for GetKakaopayPaymentOrderError.
type GetKakaopayPaymentOrderError struct {
	union json.RawMessage
}

// GetKakaopayPaymentOrderResponse 카카오페이 주문 조회 응답
type GetKakaopayPaymentOrderResponse struct {
	Body       string `json:"body"`
	StatusCode int32  `json:"statusCode"`
}

// GetPaymentError defines model for GetPaymentError.
type GetPaymentError struct {
	union json.RawMessage
}

// GetPaymentScheduleError defines model for GetPaymentScheduleError.
type GetPaymentScheduleError struct {
	union json.RawMessage
}

// GetPaymentSchedulesBody 결제 예약 다건 조회를 위한 입력 정보
//
// 조회 결과는 결제 예정 시점(timeToPay) 기준 최신 순으로 정렬됩니다.
type GetPaymentSchedulesBody struct {
	// Filter 결제 예약 건 다건 조회를 위한 입력 정보
	Filter *PaymentScheduleFilterInput `json:"filter,omitempty"`

	// Page 다건 조회 API 에 사용되는 페이지 입력 정보
	Page *PageInput `json:"page,omitempty"`

	// Sort 결제 예약 건 다건 조회 시 정렬 조건
	Sort *PaymentScheduleSortInput `json:"sort,omitempty"`
}

// GetPaymentSchedulesError defines model for GetPaymentSchedulesError.
type GetPaymentSchedulesError struct {
	union json.RawMessage
}

// GetPaymentSchedulesResponse 결제 예약 다건 조회 성공 응답 정보
type GetPaymentSchedulesResponse struct {
	Items []PaymentSchedule `json:"items"`

	// Page 반환된 페이지 결과 정보
	Page PageInfo `json:"page"`
}

// GetPaymentTransactionsError defines model for GetPaymentTransactionsError.
type GetPaymentTransactionsError struct {
	union json.RawMessage
}

// GetPaymentTransactionsResponse 결제 시도 내역 조회 응답 정보
type GetPaymentTransactionsResponse struct {
	Items []PaymentTransaction `json:"items"`
}

// GetPaymentsBody 결제 건 다건 조회를 위한 입력 정보
type GetPaymentsBody struct {
	// Filter 결제 건 다건 조회를 위한 입력 정보
	Filter *PaymentFilterInput `json:"filter,omitempty"`

	// Page 다건 조회 API 에 사용되는 페이지 입력 정보
	Page *PageInput `json:"page,omitempty"`
}

// GetPaymentsError defines model for GetPaymentsError.
type GetPaymentsError struct {
	union json.RawMessage
}

// GetPaymentsResponse 결제 건 다건 조회 성공 응답 정보
type GetPaymentsResponse struct {
	Items []Payment `json:"items"`

	// Page 반환된 페이지 결과 정보
	Page PageInfo `json:"page"`
}

// GetPlatformAccountHolderError defines model for GetPlatformAccountHolderError.
type GetPlatformAccountHolderError struct {
	union json.RawMessage
}

// GetPlatformAccountTransfersError defines model for GetPlatformAccountTransfersError.
type GetPlatformAccountTransfersError struct {
	union json.RawMessage
}

// GetPlatformAccountTransfersResponse 이체내역 다건 조회 성공 응답 정보
type GetPlatformAccountTransfersResponse struct {
	Items []PlatformAccountTransfer `json:"items"`

	// Page 반환된 페이지 결과 정보
	Page PageInfo `json:"page"`
}

// GetPlatformAdditionalFeePoliciesBody 추가 수수료 정책 다건 조회를 위한 입력 정보
type GetPlatformAdditionalFeePoliciesBody struct {
	// Filter 추가 수수료 정책 다건 조회를 위한 필터 조건
	Filter *PlatformAdditionalFeePolicyFilterInput `json:"filter,omitempty"`

	// Page 다건 조회 API 에 사용되는 페이지 입력 정보
	Page *PageInput `json:"page,omitempty"`
}

// GetPlatformAdditionalFeePoliciesError defines model for GetPlatformAdditionalFeePoliciesError.
type GetPlatformAdditionalFeePoliciesError struct {
	union json.RawMessage
}

// GetPlatformAdditionalFeePoliciesResponse 추가 수수료 정책 다건 조회 성공 응답 정보
type GetPlatformAdditionalFeePoliciesResponse struct {
	Items []PlatformAdditionalFeePolicy `json:"items"`

	// Page 반환된 페이지 결과 정보
	Page PageInfo `json:"page"`
}

// GetPlatformAdditionalFeePolicyError defines model for GetPlatformAdditionalFeePolicyError.
type GetPlatformAdditionalFeePolicyError struct {
	union json.RawMessage
}

// GetPlatformAdditionalFeePolicyScheduleError defines model for GetPlatformAdditionalFeePolicyScheduleError.
type GetPlatformAdditionalFeePolicyScheduleError struct {
	union json.RawMessage
}

// GetPlatformBulkPayoutsBody defines model for GetPlatformBulkPayoutsBody.
type GetPlatformBulkPayoutsBody struct {
	Filter    *PlatformBulkPayoutFilterInput `json:"filter,omitempty"`
	IsForTest *bool                          `json:"isForTest,omitempty"`

	// Page 다건 조회 API 에 사용되는 페이지 입력 정보
	Page *PageInput `json:"page,omitempty"`
}

// GetPlatformBulkPayoutsError defines model for GetPlatformBulkPayoutsError.
type GetPlatformBulkPayoutsError struct {
	union json.RawMessage
}

// GetPlatformBulkPayoutsResponse defines model for GetPlatformBulkPayoutsResponse.
type GetPlatformBulkPayoutsResponse struct {
	Counts PlatformBulkPayoutStatusStats `json:"counts"`
	Items  []PlatformBulkPayout          `json:"items"`

	// Page 반환된 페이지 결과 정보
	Page PageInfo `json:"page"`
}

// GetPlatformCompanyStateError defines model for GetPlatformCompanyStateError.
type GetPlatformCompanyStateError struct {
	union json.RawMessage
}

// GetPlatformCompanyStatePayload 사업자 조회 성공 응답 정보
type GetPlatformCompanyStatePayload struct {
	CompanyState          PlatformCompanyState `json:"companyState"`
	CompanyVerificationId string               `json:"companyVerificationId"`
}

// GetPlatformContractError defines model for GetPlatformContractError.
type GetPlatformContractError struct {
	union json.RawMessage
}

// GetPlatformContractScheduleError defines model for GetPlatformContractScheduleError.
type GetPlatformContractScheduleError struct {
	union json.RawMessage
}

// GetPlatformContractsBody 계약 다건 조회를 위한 입력 정보
type GetPlatformContractsBody struct {
	// Filter 계약 다건 조회를 위한 필터 조건
	Filter *PlatformContractFilterInput `json:"filter,omitempty"`

	// Page 다건 조회 API 에 사용되는 페이지 입력 정보
	Page *PageInput `json:"page,omitempty"`
}

// GetPlatformContractsError defines model for GetPlatformContractsError.
type GetPlatformContractsError struct {
	union json.RawMessage
}

// GetPlatformContractsResponse 계약 다건 조회 성공 응답
type GetPlatformContractsResponse struct {
	Items []PlatformContract `json:"items"`

	// Page 반환된 페이지 결과 정보
	Page PageInfo `json:"page"`
}

// GetPlatformDiscountSharePoliciesBody 할인 분담 정책 다건 조회를 위한 입력 정보
type GetPlatformDiscountSharePoliciesBody struct {
	// Filter 할인 분담 정책 다건 조회를 위한 필터 조건
	Filter *PlatformDiscountSharePolicyFilterInput `json:"filter,omitempty"`

	// Page 다건 조회 API 에 사용되는 페이지 입력 정보
	Page *PageInput `json:"page,omitempty"`
}

// GetPlatformDiscountSharePoliciesError defines model for GetPlatformDiscountSharePoliciesError.
type GetPlatformDiscountSharePoliciesError struct {
	union json.RawMessage
}

// GetPlatformDiscountSharePoliciesResponse 할인 분담 정책 다건 조회 성공 응답 정보
type GetPlatformDiscountSharePoliciesResponse struct {
	Items []PlatformDiscountSharePolicy `json:"items"`

	// Page 반환된 페이지 결과 정보
	Page PageInfo `json:"page"`
}

// GetPlatformDiscountSharePolicyError defines model for GetPlatformDiscountSharePolicyError.
type GetPlatformDiscountSharePolicyError struct {
	union json.RawMessage
}

// GetPlatformDiscountSharePolicyFilterOptionsError defines model for GetPlatformDiscountSharePolicyFilterOptionsError.
type GetPlatformDiscountSharePolicyFilterOptionsError struct {
	union json.RawMessage
}

// GetPlatformDiscountSharePolicyScheduleError defines model for GetPlatformDiscountSharePolicyScheduleError.
type GetPlatformDiscountSharePolicyScheduleError struct {
	union json.RawMessage
}

// GetPlatformError defines model for GetPlatformError.
type GetPlatformError struct {
	union json.RawMessage
}

// GetPlatformPartnerError defines model for GetPlatformPartnerError.
type GetPlatformPartnerError struct {
	union json.RawMessage
}

// GetPlatformPartnerFilterOptionsError defines model for GetPlatformPartnerFilterOptionsError.
type GetPlatformPartnerFilterOptionsError struct {
	union json.RawMessage
}

// GetPlatformPartnerScheduleError defines model for GetPlatformPartnerScheduleError.
type GetPlatformPartnerScheduleError struct {
	union json.RawMessage
}

// GetPlatformPartnerSettlementsBody 정산내역 다건 조회를 위한 입력 정보
type GetPlatformPartnerSettlementsBody struct {
	Filter    PlatformPartnerSettlementFilterInput `json:"filter"`
	IsForTest bool                                 `json:"isForTest"`

	// Page 다건 조회 API 에 사용되는 페이지 입력 정보
	Page *PageInput `json:"page,omitempty"`
}

// GetPlatformPartnerSettlementsError defines model for GetPlatformPartnerSettlementsError.
type GetPlatformPartnerSettlementsError struct {
	union json.RawMessage
}

// GetPlatformPartnerSettlementsResponse 정산내역 다건 조회 성공 응답 정보
type GetPlatformPartnerSettlementsResponse struct {
	Counts PlatformPartnerSettlementStatusStats `json:"counts"`
	Items  []PlatformPartnerSettlement          `json:"items"`

	// Page 반환된 페이지 결과 정보
	Page PageInfo `json:"page"`
}

// GetPlatformPartnersBody 파트너 다건 조회를 위한 입력 정보
type GetPlatformPartnersBody struct {
	// Filter 파트너 필터 입력 정보
	Filter *PlatformPartnerFilterInput `json:"filter,omitempty"`

	// Page 다건 조회 API 에 사용되는 페이지 입력 정보
	Page *PageInput `json:"page,omitempty"`
}

// GetPlatformPartnersError defines model for GetPlatformPartnersError.
type GetPlatformPartnersError struct {
	union json.RawMessage
}

// GetPlatformPartnersResponse 파트너 다건 조회 성공 응답 정보
type GetPlatformPartnersResponse struct {
	Items []PlatformPartner `json:"items"`

	// Page 반환된 페이지 결과 정보
	Page PageInfo `json:"page"`
}

// GetPlatformPayoutsBody defines model for GetPlatformPayoutsBody.
type GetPlatformPayoutsBody struct {
	// Filter 지급 내역 필터 입력 정보
	Filter    *PlatformPayoutFilterInput `json:"filter,omitempty"`
	IsForTest *bool                      `json:"isForTest,omitempty"`

	// Page 다건 조회 API 에 사용되는 페이지 입력 정보
	Page *PageInput `json:"page,omitempty"`
}

// GetPlatformPayoutsError defines model for GetPlatformPayoutsError.
type GetPlatformPayoutsError struct {
	union json.RawMessage
}

// GetPlatformPayoutsResponse defines model for GetPlatformPayoutsResponse.
type GetPlatformPayoutsResponse struct {
	Counts PlatformPayoutStatusStats `json:"counts"`
	Items  []PlatformPayout          `json:"items"`

	// Page 반환된 페이지 결과 정보
	Page PageInfo `json:"page"`
}

// GetPlatformSettingError defines model for GetPlatformSettingError.
type GetPlatformSettingError struct {
	union json.RawMessage
}

// GetPlatformTransferError defines model for GetPlatformTransferError.
type GetPlatformTransferError struct {
	union json.RawMessage
}

// GetPlatformTransferSummariesBody 정산건 요약 다건 조회를 위한 입력 정보
type GetPlatformTransferSummariesBody struct {
	// Filter 정산건 필터 입력 정보
	//
	// 정산 시작일 범위와 정산 일 범위는 둘 중 하나만 입력 가능합니다.
	Filter *PlatformTransferFilterInput `json:"filter,omitempty"`

	// Page 다건 조회 API 에 사용되는 페이지 입력 정보
	Page *PageInput `json:"page,omitempty"`
}

// GetPlatformTransferSummariesError defines model for GetPlatformTransferSummariesError.
type GetPlatformTransferSummariesError struct {
	union json.RawMessage
}

// GetPlatformTransferSummariesResponse defines model for GetPlatformTransferSummariesResponse.
type GetPlatformTransferSummariesResponse struct {
	// Page 반환된 페이지 결과 정보
	Page              PageInfo                  `json:"page"`
	TransferSummaries []PlatformTransferSummary `json:"transferSummaries"`
}

// GetPromotionError defines model for GetPromotionError.
type GetPromotionError struct {
	union json.RawMessage
}

// IdentityVerification 본인인증 내역
type IdentityVerification struct {
	union json.RawMessage
}

// IdentityVerificationAlreadySentError 본인인증 건이 이미 API로 요청된 상태인 경우
type IdentityVerificationAlreadySentError struct {
	Message *string `json:"message,omitempty"`
	Type    string  `json:"type"`
}

// IdentityVerificationAlreadyVerifiedError 본인인증 건이 이미 인증 완료된 상태인 경우
type IdentityVerificationAlreadyVerifiedError struct {
	Message *string `json:"message,omitempty"`
	Type    string  `json:"type"`
}

// IdentityVerificationFailure 본인인증 실패 정보
type IdentityVerificationFailure struct {
	PgCode    *string `json:"pgCode,omitempty"`
	PgMessage *string `json:"pgMessage,omitempty"`
	Reason    *string `json:"reason,omitempty"`
}

// IdentityVerificationMethod 본인인증 방식
type IdentityVerificationMethod string

// IdentityVerificationNotFoundError 요청된 본인인증 건이 존재하지 않는 경우
type IdentityVerificationNotFoundError struct {
	Message *string `json:"message,omitempty"`
	Type    string  `json:"type"`
}

// IdentityVerificationNotSentError 본인인증 건이 API로 요청된 상태가 아닌 경우
type IdentityVerificationNotSentError struct {
	Message *string `json:"message,omitempty"`
	Type    string  `json:"type"`
}

// IdentityVerificationOperator 본인인증 통신사
type IdentityVerificationOperator string

// IdentityVerificationRequestedCustomer 요청 시 고객 정보
type IdentityVerificationRequestedCustomer struct {
	Id   *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`

	// PhoneNumber 특수 문자(-) 없이 숫자로만 이루어진 번호 형식입니다.
	PhoneNumber *string `json:"phoneNumber,omitempty"`
}

// IdentityVerificationVerifiedCustomer 인증된 고객 정보
type IdentityVerificationVerifiedCustomer struct {
	// BirthDate 날짜를 나타내는 문자열로, `yyyy-MM-dd` 형식을 따릅니다.
	BirthDate string `json:"birthDate"`

	// Ci 개인을 식별하기 위한 고유 정보입니다.
	// 다날: 항상 제공합니다.
	// KG이니시스: 카카오를 제외한 인증사에서 제공합니다.
	Ci *string `json:"ci,omitempty"`

	// Di 중복 가입을 방지하기 위해 개인을 식별하는 사이트별 고유 정보입니다.
	// 다날: 항상 제공합니다.
	// KG이니시스: 제공하지 않습니다.
	Di *string `json:"di,omitempty"`

	// Gender 성별
	Gender *Gender `json:"gender,omitempty"`
	Id     *string `json:"id,omitempty"`

	// IsForeigner 다날: 별도 계약이 필요합니다.
	// KG이니시스: 항상 제공합니다.
	IsForeigner *bool  `json:"isForeigner,omitempty"`
	Name        string `json:"name"`

	// Operator 본인인증 통신사
	Operator *IdentityVerificationOperator `json:"operator,omitempty"`

	// PhoneNumber 특수 문자(-) 없이 숫자로만 이루어진 번호 형식입니다.
	// 다날: 별도 계약이 필요합니다.
	// KG이니시스: 항상 제공합니다.
	PhoneNumber *string `json:"phoneNumber,omitempty"`
}

// InstantBillingKeyPaymentMethodInput 빌링키 발급 시 결제 수단 입력 양식
type InstantBillingKeyPaymentMethodInput struct {
	// Card 카드 수단 정보 입력 양식
	Card *InstantBillingKeyPaymentMethodInputCard `json:"card,omitempty"`
}

// InstantBillingKeyPaymentMethodInputCard 카드 수단 정보 입력 양식
type InstantBillingKeyPaymentMethodInputCard struct {
	// Credential 카드 인증 관련 정보
	Credential CardCredential `json:"credential"`
}

// InstantPaymentInput 수기 결제 요청 정보
type InstantPaymentInput struct {
	// Amount 금액 세부 입력 정보
	Amount PaymentAmountInput `json:"amount"`

	// ChannelGroupId 채널 키 또는 채널 그룹 ID 필수
	ChannelGroupId *string `json:"channelGroupId,omitempty"`

	// ChannelKey 채널 키 또는 채널 그룹 ID 필수
	ChannelKey *string `json:"channelKey,omitempty"`

	// Country 국가
	Country *Country `json:"country,omitempty"`

	// Currency 통화 단위
	Currency   Currency `json:"currency"`
	CustomData *string  `json:"customData,omitempty"`

	// Customer 고객 정보 입력 정보
	Customer *CustomerInput `json:"customer,omitempty"`

	// IsCulturalExpense 기본값은 false 입니다.
	IsCulturalExpense *bool `json:"isCulturalExpense,omitempty"`

	// IsEscrow 기본값은 false 입니다.
	IsEscrow *bool `json:"isEscrow,omitempty"`

	// Method 수기 결제 수단 입력 정보
	//
	// 하나의 필드만 입력합니다.
	Method InstantPaymentMethodInput `json:"method"`

	// NoticeUrls 결제 승인/실패 시 요청을 받을 웹훅 주소입니다.
	// 상점에 설정되어 있는 값보다 우선적으로 적용됩니다.
	// 입력된 값이 없을 경우에는 빈 배열로 해석됩니다.
	NoticeUrls   *[]string `json:"noticeUrls,omitempty"`
	OrderName    string    `json:"orderName"`
	ProductCount *int32    `json:"productCount,omitempty"`

	// ProductType 상품 유형
	ProductType *PaymentProductType `json:"productType,omitempty"`

	// Products 입력된 값이 없을 경우에는 빈 배열로 해석됩니다.
	Products    *[]PaymentProduct `json:"products,omitempty"`
	PromotionId *string           `json:"promotionId,omitempty"`

	// ShippingAddress 분리 형식 주소 입력 정보
	ShippingAddress *SeparatedAddressInput `json:"shippingAddress,omitempty"`

	// StoreId 접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.
	StoreId *string `json:"storeId,omitempty"`
}

// InstantPaymentMethodInput 수기 결제 수단 입력 정보
//
// 하나의 필드만 입력합니다.
type InstantPaymentMethodInput struct {
	// Card 카드 수단 정보 입력 정보
	Card *InstantPaymentMethodInputCard `json:"card,omitempty"`

	// VirtualAccount 가상계좌 수단 정보 입력 정보
	VirtualAccount *InstantPaymentMethodInputVirtualAccount `json:"virtualAccount,omitempty"`
}

// InstantPaymentMethodInputCard 카드 수단 정보 입력 정보
type InstantPaymentMethodInputCard struct {
	// Credential 카드 인증 관련 정보
	Credential                  CardCredential `json:"credential"`
	InstallmentMonth            *int32         `json:"installmentMonth,omitempty"`
	UseCardPoint                *bool          `json:"useCardPoint,omitempty"`
	UseFreeInstallmentPlan      *bool          `json:"useFreeInstallmentPlan,omitempty"`
	UseFreeInterestFromMerchant *bool          `json:"useFreeInterestFromMerchant,omitempty"`
}

// InstantPaymentMethodInputVirtualAccount 가상계좌 수단 정보 입력 정보
type InstantPaymentMethodInputVirtualAccount struct {
	// Bank 은행
	Bank Bank `json:"bank"`

	// CashReceipt 가상계좌 결제 시 현금영수증 정보
	CashReceipt InstantPaymentMethodInputVirtualAccountCashReceiptInfo `json:"cashReceipt"`

	// Expiry 입금 만료 기한
	//
	// validHours와 dueDate 둘 중 하나의 필드만 입력합니다.
	Expiry InstantPaymentMethodInputVirtualAccountExpiry `json:"expiry"`

	// Option 가상계좌 발급 방식
	Option       InstantPaymentMethodInputVirtualAccountOption `json:"option"`
	RemitteeName *string                                       `json:"remitteeName,omitempty"`
}

// InstantPaymentMethodInputVirtualAccountCashReceiptInfo 가상계좌 결제 시 현금영수증 정보
type InstantPaymentMethodInputVirtualAccountCashReceiptInfo struct {
	CustomerIdentityNumber string `json:"customerIdentityNumber"`

	// Type 입력 시 발급 유형
	Type CashReceiptInputType `json:"type"`
}

// InstantPaymentMethodInputVirtualAccountExpiry 입금 만료 기한
//
// validHours와 dueDate 둘 중 하나의 필드만 입력합니다.
type InstantPaymentMethodInputVirtualAccountExpiry struct {
	DueDate *time.Time `json:"dueDate,omitempty"`

	// ValidHours 시간 단위로 입력합니다.
	ValidHours *int32 `json:"validHours,omitempty"`
}

// InstantPaymentMethodInputVirtualAccountOption 가상계좌 발급 방식
type InstantPaymentMethodInputVirtualAccountOption struct {
	// Fixed 고정식 가상계좌 발급 유형
	//
	// pgAccountId, accountNumber 유형 중 한 개의 필드만 입력합니다.
	Fixed *InstantPaymentMethodInputVirtualAccountOptionFixed `json:"fixed,omitempty"`

	// Type 가상계좌 발급 유형
	Type InstantPaymentMethodInputVirtualAccountOptionType `json:"type"`
}

// InstantPaymentMethodInputVirtualAccountOptionFixed 고정식 가상계좌 발급 유형
//
// pgAccountId, accountNumber 유형 중 한 개의 필드만 입력합니다.
type InstantPaymentMethodInputVirtualAccountOptionFixed struct {
	// AccountNumber PG사가 일정 개수만큼의 가상계좌번호를 발급하여 고객사에게 미리 전달하고 고객사가 그 중 하나를 선택하여 사용하는 방식입니다.
	AccountNumber *string `json:"accountNumber,omitempty"`

	// PgAccountId 고객사가 가상계좌번호를 직접 관리하지 않고 PG사가 pgAccountId에 매핑되는 가상계좌번호를 내려주는 방식입니다.
	// 동일한 pgAccountId로 가상계좌 발급 요청시에는 항상 같은 가상계좌번호가 내려옵니다.
	PgAccountId *string `json:"pgAccountId,omitempty"`
}

// InstantPaymentMethodInputVirtualAccountOptionType 가상계좌 발급 유형
type InstantPaymentMethodInputVirtualAccountOptionType string

// InstantPaymentSummary 수기 결제가 완료된 결제 건 요약 정보
type InstantPaymentSummary struct {
	PaidAt time.Time `json:"paidAt"`
	PgTxId string    `json:"pgTxId"`
}

// InvalidRequestError 요청된 입력 정보가 유효하지 않은 경우
//
// 허가되지 않은 값, 올바르지 않은 형식의 요청 등이 모두 해당됩니다.
type InvalidRequestError struct {
	Message *string `json:"message,omitempty"`
	Type    string  `json:"type"`
}

// IssueBillingKeyBody 빌링키 발급 요청 양식
type IssueBillingKeyBody struct {
	Bypass *map[string]interface{} `json:"bypass,omitempty"`

	// ChannelGroupId 채널 키 또는 채널 그룹 ID 필수
	ChannelGroupId *string `json:"channelGroupId,omitempty"`

	// ChannelKey 채널 키 또는 채널 그룹 ID 필수
	ChannelKey *string `json:"channelKey,omitempty"`
	CustomData *string `json:"customData,omitempty"`

	// Customer 고객 정보 입력 정보
	Customer *CustomerInput `json:"customer,omitempty"`

	// Method 빌링키 발급 시 결제 수단 입력 양식
	Method InstantBillingKeyPaymentMethodInput `json:"method"`

	// NoticeUrls 빌링키 발급 시 요청을 받을 웹훅 주소입니다.
	// 상점에 설정되어 있는 값보다 우선적으로 적용됩니다.
	// 입력된 값이 없을 경우에는 빈 배열로 해석됩니다.
	NoticeUrls *[]string `json:"noticeUrls,omitempty"`

	// StoreId 접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.
	StoreId *string `json:"storeId,omitempty"`
}

// IssueBillingKeyError defines model for IssueBillingKeyError.
type IssueBillingKeyError struct {
	union json.RawMessage
}

// IssueBillingKeyResponse 빌링키 발급 성공 응답
type IssueBillingKeyResponse struct {
	BillingKeyInfo          BillingKeyInfoSummary     `json:"billingKeyInfo"`
	ChannelSpecificFailures *[]ChannelSpecificFailure `json:"channelSpecificFailures,omitempty"`
}

// IssueCashReceiptBody 현금영수증 발급 요청 양식
type IssueCashReceiptBody struct {
	// Amount 금액 세부 입력 정보
	Amount     PaymentAmountInput `json:"amount"`
	ChannelKey string             `json:"channelKey"`

	// Currency 통화 단위
	Currency Currency `json:"currency"`

	// Customer 현금영수증 발급 시 고객 관련 입력 정보
	Customer  IssueCashReceiptCustomerInput `json:"customer"`
	OrderName string                        `json:"orderName"`
	PaidAt    *time.Time                    `json:"paidAt,omitempty"`

	// PaymentId 외부 결제 건에 대한 수동 발급의 경우, 아이디를 직접 채번하여 입력합니다.
	PaymentId string `json:"paymentId"`

	// ProductType 상품 유형
	ProductType *PaymentProductType `json:"productType,omitempty"`

	// StoreId 접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.
	StoreId *string `json:"storeId,omitempty"`

	// Type 발급 유형
	Type CashReceiptType `json:"type"`
}

// IssueCashReceiptCustomerInput 현금영수증 발급 시 고객 관련 입력 정보
type IssueCashReceiptCustomerInput struct {
	Email          *string `json:"email,omitempty"`
	IdentityNumber string  `json:"identityNumber"`
	Name           *string `json:"name,omitempty"`
	PhoneNumber    *string `json:"phoneNumber,omitempty"`
}

// IssueCashReceiptError defines model for IssueCashReceiptError.
type IssueCashReceiptError struct {
	union json.RawMessage
}

// IssueCashReceiptResponse 현금 영수증 발급 성공 응답
type IssueCashReceiptResponse struct {
	// CashReceipt 현금영수증 내역
	CashReceipt CashReceiptSummary `json:"cashReceipt"`
}

// IssueFailedCashReceipt 발급 실패
type IssueFailedCashReceipt struct {
	// Channel (결제, 본인인증 등에) 선택된 채널 정보
	Channel    *SelectedChannel `json:"channel,omitempty"`
	IsManual   bool             `json:"isManual"`
	MerchantId string           `json:"merchantId"`
	OrderName  string           `json:"orderName"`
	PaymentId  string           `json:"paymentId"`
	Status     string           `json:"status"`
	StoreId    string           `json:"storeId"`
}

// IssuedBillingKeyInfo 빌링키 발급 완료 상태 건
type IssuedBillingKeyInfo struct {
	BillingKey string `json:"billingKey"`

	// ChannelGroup 채널 그룹 정보
	ChannelGroup *ChannelGroupSummary `json:"channelGroup,omitempty"`

	// Channels 추후 슈퍼빌링키 기능 제공 시 여러 채널 정보가 담길 수 있습니다.
	Channels   []SelectedChannel `json:"channels"`
	CustomData *string           `json:"customData,omitempty"`

	// Customer 고객 정보
	Customer   Customer  `json:"customer"`
	IssueId    *string   `json:"issueId,omitempty"`
	IssueName  *string   `json:"issueName,omitempty"`
	IssuedAt   time.Time `json:"issuedAt"`
	MerchantId string    `json:"merchantId"`

	// Methods 추후 슈퍼빌링키 기능 제공 시 여러 결제수단 정보가 담길 수 있습니다.
	Methods *[]BillingKeyPaymentMethod `json:"methods,omitempty"`

	// PgBillingKeyIssueResponses 슈퍼빌링키의 경우, 빌링키 발급이 성공하더라도 일부 채널에 대한 빌링키 발급은 실패할 수 있습니다.
	PgBillingKeyIssueResponses *[]PgBillingKeyIssueResponse `json:"pgBillingKeyIssueResponses,omitempty"`
	RequestedAt                *time.Time                   `json:"requestedAt,omitempty"`
	Status                     string                       `json:"status"`
	StoreId                    string                       `json:"storeId"`
}

// IssuedCashReceipt 발급 완료
type IssuedCashReceipt struct {
	Amount int64 `json:"amount"`

	// Channel (결제, 본인인증 등에) 선택된 채널 정보
	Channel SelectedChannel `json:"channel"`

	// Currency 통화 단위
	Currency      Currency  `json:"currency"`
	IsManual      bool      `json:"isManual"`
	IssueNumber   string    `json:"issueNumber"`
	IssuedAt      time.Time `json:"issuedAt"`
	MerchantId    string    `json:"merchantId"`
	OrderName     string    `json:"orderName"`
	PaymentId     string    `json:"paymentId"`
	PgReceiptId   *string   `json:"pgReceiptId,omitempty"`
	Status        string    `json:"status"`
	StoreId       string    `json:"storeId"`
	TaxFreeAmount *int64    `json:"taxFreeAmount,omitempty"`

	// Type 발급 유형
	Type      *CashReceiptType `json:"type,omitempty"`
	Url       *string          `json:"url,omitempty"`
	VatAmount *int64           `json:"vatAmount,omitempty"`
}

// IssuedPaymentCashReceipt 발급 완료된 현금영수증
type IssuedPaymentCashReceipt struct {
	// Currency 통화 단위
	Currency      Currency  `json:"currency"`
	IssueNumber   string    `json:"issueNumber"`
	IssuedAt      time.Time `json:"issuedAt"`
	PgReceiptId   *string   `json:"pgReceiptId,omitempty"`
	Status        string    `json:"status"`
	TaxFreeAmount *int64    `json:"taxFreeAmount,omitempty"`
	TotalAmount   int64     `json:"totalAmount"`

	// Type 발급 유형
	Type *CashReceiptType `json:"type,omitempty"`
	Url  *string          `json:"url,omitempty"`
}

// IssuedPgBillingKeyIssueResponse 빌링키 발급 성공 채널 응답
type IssuedPgBillingKeyIssueResponse struct {
	// Channel (결제, 본인인증 등에) 선택된 채널 정보
	Channel SelectedChannel `json:"channel"`

	// Method 빌링키 발급 수단 정보
	Method *BillingKeyPaymentMethod `json:"method,omitempty"`
	PgTxId *string                  `json:"pgTxId,omitempty"`
	Type   string                   `json:"type"`
}

// LoginViaApiSecretBody API Secret 로그인을 위한 입력 정보
type LoginViaApiSecretBody struct {
	ApiSecret string `json:"apiSecret"`
}

// LoginViaApiSecretError defines model for LoginViaApiSecretError.
type LoginViaApiSecretError struct {
	union json.RawMessage
}

// LoginViaApiSecretResponse API key 로그인 성공 응답
type LoginViaApiSecretResponse struct {
	// AccessToken 하루의 유효기간을 가지고 있습니다.
	AccessToken string `json:"accessToken"`

	// RefreshToken 일주일의 유효기간을 가지고 있으며, 리프레시 토큰을 통해 유효기간이 연장된 새로운 엑세스 토큰을 발급받을 수 있습니다.
	// 동일한 유저가 로그인 또는 토큰 재발급을 진행할 때마다 기존에 발급된 리프레시 토큰은 즉시 만료되므로 API 사용에 유의해주세요.
	RefreshToken string `json:"refreshToken"`
}

// MaxTransactionCountReachedError 결제 혹은 본인인증 시도 횟수가 최대에 도달한 경우
type MaxTransactionCountReachedError struct {
	Message *string `json:"message,omitempty"`
	Type    string  `json:"type"`
}

// MaxWebhookRetryCountReachedError 동일한 webhook id에 대한 수동 재시도 횟수가 최대에 도달한 경우
type MaxWebhookRetryCountReachedError struct {
	Message *string `json:"message,omitempty"`
	Type    string  `json:"type"`
}

// ModifyEscrowLogisticsBody 에스크로 배송 정보 수정 입력 정보
type ModifyEscrowLogisticsBody struct {
	// Logistics 배송정보
	Logistics PaymentLogistics  `json:"logistics"`
	Products  *[]PaymentProduct `json:"products,omitempty"`

	// Receiver 에스크로 수취인 정보
	Receiver *PaymentEscrowReceiverInput `json:"receiver,omitempty"`

	// SendEmail 에스크로 구매 확정 시 이메일로 알림을 보낼지 여부입니다.
	SendEmail *bool `json:"sendEmail,omitempty"`

	// Sender 에스크로 발송자 정보
	Sender *PaymentEscrowSenderInput `json:"sender,omitempty"`

	// StoreId 접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.
	StoreId *string `json:"storeId,omitempty"`
}

// ModifyEscrowLogisticsError defines model for ModifyEscrowLogisticsError.
type ModifyEscrowLogisticsError struct {
	union json.RawMessage
}

// ModifyEscrowLogisticsResponse 에스크로 배송 정보 수정 성공 응답
type ModifyEscrowLogisticsResponse struct {
	InvoiceNumber string    `json:"invoiceNumber"`
	ModifiedAt    time.Time `json:"modifiedAt"`
	SentAt        time.Time `json:"sentAt"`
}

// MonthDay 월 및 일자 정보
type MonthDay struct {
	Day   int32 `json:"day"`
	Month int32 `json:"month"`
}

// NegativePromotionAdjustedCancelAmountError 프로모션에 의해 조정된 취소 금액이 음수인 경우
type NegativePromotionAdjustedCancelAmountError struct {
	Message *string `json:"message,omitempty"`
	Type    string  `json:"type"`
}

// OneLineAddress 한 줄 형식 주소
//
// 한 줄 형식 주소만 존재합니다.
type OneLineAddress struct {
	OneLine string `json:"oneLine"`
	Type    string `json:"type"`
}

// PageInfo 반환된 페이지 결과 정보
type PageInfo struct {
	Number     int32 `json:"number"`
	Size       int32 `json:"size"`
	TotalCount int32 `json:"totalCount"`
}

// PageInput 다건 조회 API 에 사용되는 페이지 입력 정보
type PageInput struct {
	Number *int32 `json:"number,omitempty"`
	Size   *int32 `json:"size,omitempty"`
}

// PaidPayment 결제 완료 상태 건
type PaidPayment struct {
	// Amount 결제 금액 세부 정보
	Amount PaymentAmount `json:"amount"`

	// BillingKey 빌링키 결제인 경우에만 존재
	BillingKey *string `json:"billingKey,omitempty"`

	// CashReceipt 결제 건 내 현금영수증 정보
	CashReceipt *PaymentCashReceipt `json:"cashReceipt,omitempty"`

	// Channel (결제, 본인인증 등에) 선택된 채널 정보
	Channel SelectedChannel `json:"channel"`

	// ChannelGroup 채널 그룹 정보
	ChannelGroup *ChannelGroupSummary `json:"channelGroup,omitempty"`

	// Country 국가
	Country *Country `json:"country,omitempty"`

	// Currency 통화 단위
	Currency   Currency `json:"currency"`
	CustomData *string  `json:"customData,omitempty"`

	// Customer 고객 정보
	Customer Customer `json:"customer"`

	// Escrow 에스크로 정보
	//
	// V1 결제 건의 경우 타입이 REGISTERED 로 고정됩니다.
	Escrow            *PaymentEscrow `json:"escrow,omitempty"`
	Id                string         `json:"id"`
	IsCulturalExpense *bool          `json:"isCulturalExpense,omitempty"`
	MerchantId        string         `json:"merchantId"`

	// Method 결제수단 정보
	Method       *PaymentMethod    `json:"method,omitempty"`
	OrderName    string            `json:"orderName"`
	PaidAt       time.Time         `json:"paidAt"`
	PgResponse   *string           `json:"pgResponse,omitempty"`
	PgTxId       *string           `json:"pgTxId,omitempty"`
	ProductCount *int32            `json:"productCount,omitempty"`
	Products     *[]PaymentProduct `json:"products,omitempty"`
	PromotionId  *string           `json:"promotionId,omitempty"`
	ReceiptUrl   *string           `json:"receiptUrl,omitempty"`
	RequestedAt  time.Time         `json:"requestedAt"`

	// ScheduleId 결제 예약을 이용한 경우에만 존재
	ScheduleId      *string   `json:"scheduleId,omitempty"`
	Status          string    `json:"status"`
	StatusChangedAt time.Time `json:"statusChangedAt"`
	StoreId         string    `json:"storeId"`

	// TransactionId V1 결제 건의 경우 imp_uid에 해당합니다.
	TransactionId string    `json:"transactionId"`
	UpdatedAt     time.Time `json:"updatedAt"`

	// Version 포트원 버전
	Version  PortOneVersion    `json:"version"`
	Webhooks *[]PaymentWebhook `json:"webhooks,omitempty"`
}

// PaidPaymentTransaction 결제 완료 상태 건
type PaidPaymentTransaction struct {
	// Amount 결제 금액 세부 정보
	Amount PaymentAmount `json:"amount"`

	// BillingKey 빌링키 결제인 경우에만 존재
	BillingKey *string `json:"billingKey,omitempty"`

	// CashReceipt 결제 건 내 현금영수증 정보
	CashReceipt *PaymentCashReceipt `json:"cashReceipt,omitempty"`

	// Channel (결제, 본인인증 등에) 선택된 채널 정보
	Channel SelectedChannel `json:"channel"`

	// ChannelGroup 채널 그룹 정보
	ChannelGroup *ChannelGroupSummary `json:"channelGroup,omitempty"`

	// Country 국가
	Country *Country `json:"country,omitempty"`

	// Currency 통화 단위
	Currency   Currency `json:"currency"`
	CustomData *string  `json:"customData,omitempty"`

	// Customer 고객 정보
	Customer Customer `json:"customer"`

	// Escrow 에스크로 정보
	//
	// V1 결제 건의 경우 타입이 REGISTERED 로 고정됩니다.
	Escrow *PaymentEscrow `json:"escrow,omitempty"`

	// Id V1 결제 건의 경우 imp_uid에 해당합니다.
	Id                string `json:"id"`
	IsCulturalExpense *bool  `json:"isCulturalExpense,omitempty"`
	MerchantId        string `json:"merchantId"`

	// Method 결제수단 정보
	Method       *PaymentMethod    `json:"method,omitempty"`
	OrderName    string            `json:"orderName"`
	PaidAt       time.Time         `json:"paidAt"`
	PaymentId    string            `json:"paymentId"`
	PgResponse   *string           `json:"pgResponse,omitempty"`
	PgTxId       *string           `json:"pgTxId,omitempty"`
	ProductCount *int32            `json:"productCount,omitempty"`
	Products     *[]PaymentProduct `json:"products,omitempty"`
	PromotionId  *string           `json:"promotionId,omitempty"`
	ReceiptUrl   *string           `json:"receiptUrl,omitempty"`
	RequestedAt  time.Time         `json:"requestedAt"`

	// ScheduleId 결제 예약을 이용한 경우에만 존재
	ScheduleId      *string   `json:"scheduleId,omitempty"`
	Status          string    `json:"status"`
	StatusChangedAt time.Time `json:"statusChangedAt"`
	StoreId         string    `json:"storeId"`
	UpdatedAt       time.Time `json:"updatedAt"`

	// Version 포트원 버전
	Version  PortOneVersion    `json:"version"`
	Webhooks *[]PaymentWebhook `json:"webhooks,omitempty"`
}

// PartialCancelledPayment 결제 부분 취소 상태 건
type PartialCancelledPayment struct {
	// Amount 결제 금액 세부 정보
	Amount PaymentAmount `json:"amount"`

	// BillingKey 빌링키 결제인 경우에만 존재
	BillingKey    *string               `json:"billingKey,omitempty"`
	Cancellations []PaymentCancellation `json:"cancellations"`
	CancelledAt   time.Time             `json:"cancelledAt"`

	// CashReceipt 결제 건 내 현금영수증 정보
	CashReceipt *PaymentCashReceipt `json:"cashReceipt,omitempty"`

	// Channel (결제, 본인인증 등에) 선택된 채널 정보
	Channel SelectedChannel `json:"channel"`

	// ChannelGroup 채널 그룹 정보
	ChannelGroup *ChannelGroupSummary `json:"channelGroup,omitempty"`

	// Country 국가
	Country *Country `json:"country,omitempty"`

	// Currency 통화 단위
	Currency   Currency `json:"currency"`
	CustomData *string  `json:"customData,omitempty"`

	// Customer 고객 정보
	Customer Customer `json:"customer"`

	// Escrow 에스크로 정보
	//
	// V1 결제 건의 경우 타입이 REGISTERED 로 고정됩니다.
	Escrow            *PaymentEscrow `json:"escrow,omitempty"`
	Id                string         `json:"id"`
	IsCulturalExpense *bool          `json:"isCulturalExpense,omitempty"`
	MerchantId        string         `json:"merchantId"`

	// Method 결제수단 정보
	Method       *PaymentMethod    `json:"method,omitempty"`
	OrderName    string            `json:"orderName"`
	PaidAt       *time.Time        `json:"paidAt,omitempty"`
	PgTxId       *string           `json:"pgTxId,omitempty"`
	ProductCount *int32            `json:"productCount,omitempty"`
	Products     *[]PaymentProduct `json:"products,omitempty"`
	PromotionId  *string           `json:"promotionId,omitempty"`
	ReceiptUrl   *string           `json:"receiptUrl,omitempty"`
	RequestedAt  time.Time         `json:"requestedAt"`

	// ScheduleId 결제 예약을 이용한 경우에만 존재
	ScheduleId      *string   `json:"scheduleId,omitempty"`
	Status          string    `json:"status"`
	StatusChangedAt time.Time `json:"statusChangedAt"`
	StoreId         string    `json:"storeId"`

	// TransactionId V1 결제 건의 경우 imp_uid에 해당합니다.
	TransactionId string    `json:"transactionId"`
	UpdatedAt     time.Time `json:"updatedAt"`

	// Version 포트원 버전
	Version  PortOneVersion    `json:"version"`
	Webhooks *[]PaymentWebhook `json:"webhooks,omitempty"`
}

// PartialCancelledPaymentTransaction 결제 부분 취소 상태 건
type PartialCancelledPaymentTransaction struct {
	// Amount 결제 금액 세부 정보
	Amount PaymentAmount `json:"amount"`

	// BillingKey 빌링키 결제인 경우에만 존재
	BillingKey    *string               `json:"billingKey,omitempty"`
	Cancellations []PaymentCancellation `json:"cancellations"`
	CancelledAt   time.Time             `json:"cancelledAt"`

	// CashReceipt 결제 건 내 현금영수증 정보
	CashReceipt *PaymentCashReceipt `json:"cashReceipt,omitempty"`

	// Channel (결제, 본인인증 등에) 선택된 채널 정보
	Channel SelectedChannel `json:"channel"`

	// ChannelGroup 채널 그룹 정보
	ChannelGroup *ChannelGroupSummary `json:"channelGroup,omitempty"`

	// Country 국가
	Country *Country `json:"country,omitempty"`

	// Currency 통화 단위
	Currency   Currency `json:"currency"`
	CustomData *string  `json:"customData,omitempty"`

	// Customer 고객 정보
	Customer Customer `json:"customer"`

	// Escrow 에스크로 정보
	//
	// V1 결제 건의 경우 타입이 REGISTERED 로 고정됩니다.
	Escrow *PaymentEscrow `json:"escrow,omitempty"`

	// Id V1 결제 건의 경우 imp_uid에 해당합니다.
	Id                string `json:"id"`
	IsCulturalExpense *bool  `json:"isCulturalExpense,omitempty"`
	MerchantId        string `json:"merchantId"`

	// Method 결제수단 정보
	Method       *PaymentMethod    `json:"method,omitempty"`
	OrderName    string            `json:"orderName"`
	PaidAt       *time.Time        `json:"paidAt,omitempty"`
	PaymentId    string            `json:"paymentId"`
	PgTxId       *string           `json:"pgTxId,omitempty"`
	ProductCount *int32            `json:"productCount,omitempty"`
	Products     *[]PaymentProduct `json:"products,omitempty"`
	PromotionId  *string           `json:"promotionId,omitempty"`
	ReceiptUrl   *string           `json:"receiptUrl,omitempty"`
	RequestedAt  time.Time         `json:"requestedAt"`

	// ScheduleId 결제 예약을 이용한 경우에만 존재
	ScheduleId      *string   `json:"scheduleId,omitempty"`
	Status          string    `json:"status"`
	StatusChangedAt time.Time `json:"statusChangedAt"`
	StoreId         string    `json:"storeId"`
	UpdatedAt       time.Time `json:"updatedAt"`

	// Version 포트원 버전
	Version  PortOneVersion    `json:"version"`
	Webhooks *[]PaymentWebhook `json:"webhooks,omitempty"`
}

// PayInstantlyError defines model for PayInstantlyError.
type PayInstantlyError struct {
	union json.RawMessage
}

// PayInstantlyResponse 수기 결제 성공 응답
type PayInstantlyResponse struct {
	// Payment 수기 결제가 완료된 결제 건 요약 정보
	Payment InstantPaymentSummary `json:"payment"`
}

// PayPendingPayment 결제 완료 대기 상태 건
type PayPendingPayment struct {
	// Amount 결제 금액 세부 정보
	Amount PaymentAmount `json:"amount"`

	// BillingKey 빌링키 결제인 경우에만 존재
	BillingKey *string `json:"billingKey,omitempty"`

	// Channel (결제, 본인인증 등에) 선택된 채널 정보
	Channel SelectedChannel `json:"channel"`

	// ChannelGroup 채널 그룹 정보
	ChannelGroup *ChannelGroupSummary `json:"channelGroup,omitempty"`

	// Country 국가
	Country *Country `json:"country,omitempty"`

	// Currency 통화 단위
	Currency   Currency `json:"currency"`
	CustomData *string  `json:"customData,omitempty"`

	// Customer 고객 정보
	Customer Customer `json:"customer"`

	// Escrow 에스크로 정보
	//
	// V1 결제 건의 경우 타입이 REGISTERED 로 고정됩니다.
	Escrow            *PaymentEscrow `json:"escrow,omitempty"`
	Id                string         `json:"id"`
	IsCulturalExpense *bool          `json:"isCulturalExpense,omitempty"`
	MerchantId        string         `json:"merchantId"`

	// Method 결제수단 정보
	Method       *PaymentMethod    `json:"method,omitempty"`
	OrderName    string            `json:"orderName"`
	PgTxId       *string           `json:"pgTxId,omitempty"`
	ProductCount *int32            `json:"productCount,omitempty"`
	Products     *[]PaymentProduct `json:"products,omitempty"`
	PromotionId  *string           `json:"promotionId,omitempty"`
	RequestedAt  time.Time         `json:"requestedAt"`

	// ScheduleId 결제 예약을 이용한 경우에만 존재
	ScheduleId      *string   `json:"scheduleId,omitempty"`
	Status          string    `json:"status"`
	StatusChangedAt time.Time `json:"statusChangedAt"`
	StoreId         string    `json:"storeId"`

	// TransactionId V1 결제 건의 경우 imp_uid에 해당합니다.
	TransactionId string    `json:"transactionId"`
	UpdatedAt     time.Time `json:"updatedAt"`

	// Version 포트원 버전
	Version  PortOneVersion    `json:"version"`
	Webhooks *[]PaymentWebhook `json:"webhooks,omitempty"`
}

// PayPendingPaymentTransaction 결제 완료 대기 상태 건
type PayPendingPaymentTransaction struct {
	// Amount 결제 금액 세부 정보
	Amount PaymentAmount `json:"amount"`

	// BillingKey 빌링키 결제인 경우에만 존재
	BillingKey *string `json:"billingKey,omitempty"`

	// Channel (결제, 본인인증 등에) 선택된 채널 정보
	Channel SelectedChannel `json:"channel"`

	// ChannelGroup 채널 그룹 정보
	ChannelGroup *ChannelGroupSummary `json:"channelGroup,omitempty"`

	// Country 국가
	Country *Country `json:"country,omitempty"`

	// Currency 통화 단위
	Currency   Currency `json:"currency"`
	CustomData *string  `json:"customData,omitempty"`

	// Customer 고객 정보
	Customer Customer `json:"customer"`

	// Escrow 에스크로 정보
	//
	// V1 결제 건의 경우 타입이 REGISTERED 로 고정됩니다.
	Escrow *PaymentEscrow `json:"escrow,omitempty"`

	// Id V1 결제 건의 경우 imp_uid에 해당합니다.
	Id                string `json:"id"`
	IsCulturalExpense *bool  `json:"isCulturalExpense,omitempty"`
	MerchantId        string `json:"merchantId"`

	// Method 결제수단 정보
	Method       *PaymentMethod    `json:"method,omitempty"`
	OrderName    string            `json:"orderName"`
	PaymentId    string            `json:"paymentId"`
	PgTxId       *string           `json:"pgTxId,omitempty"`
	ProductCount *int32            `json:"productCount,omitempty"`
	Products     *[]PaymentProduct `json:"products,omitempty"`
	PromotionId  *string           `json:"promotionId,omitempty"`
	RequestedAt  time.Time         `json:"requestedAt"`

	// ScheduleId 결제 예약을 이용한 경우에만 존재
	ScheduleId      *string   `json:"scheduleId,omitempty"`
	Status          string    `json:"status"`
	StatusChangedAt time.Time `json:"statusChangedAt"`
	StoreId         string    `json:"storeId"`
	UpdatedAt       time.Time `json:"updatedAt"`

	// Version 포트원 버전
	Version  PortOneVersion    `json:"version"`
	Webhooks *[]PaymentWebhook `json:"webhooks,omitempty"`
}

// PayWithBillingKeyError defines model for PayWithBillingKeyError.
type PayWithBillingKeyError struct {
	union json.RawMessage
}

// PayWithBillingKeyResponse 빌링키 결제 성공 응답
type PayWithBillingKeyResponse struct {
	// Payment 빌링키 결제 완료된 결제 건 요약 정보
	Payment BillingKeyPaymentSummary `json:"payment"`
}

// Payment 결제 건
type Payment struct {
	union json.RawMessage
}

// PaymentAlreadyCancelledError 결제가 이미 취소된 경우
type PaymentAlreadyCancelledError struct {
	Message *string `json:"message,omitempty"`
	Type    string  `json:"type"`
}

// PaymentAmount 결제 금액 세부 정보
type PaymentAmount struct {
	Cancelled        int64 `json:"cancelled"`
	CancelledTaxFree int64 `json:"cancelledTaxFree"`

	// Discount 카드사 프로모션, 포트원 프로모션, 적립형 포인트 결제, 쿠폰 할인 등을 포함합니다.
	Discount int64  `json:"discount"`
	Paid     int64  `json:"paid"`
	Supply   *int64 `json:"supply,omitempty"`
	TaxFree  int64  `json:"taxFree"`
	Total    int64  `json:"total"`
	Vat      *int64 `json:"vat,omitempty"`
}

// PaymentAmountInput 금액 세부 입력 정보
type PaymentAmountInput struct {
	TaxFree *int64 `json:"taxFree,omitempty"`
	Total   int64  `json:"total"`

	// Vat 고객사에서 직접 계산이 필요한 경우 입력합니다.
	// 입력하지 않으면 면세 금액을 제외한 금액의 1/11 로 자동 계산됩니다.
	Vat *int64 `json:"vat,omitempty"`
}

// PaymentCancellation 결제 취소 내역
type PaymentCancellation struct {
	union json.RawMessage
}

// PaymentCashReceipt 결제 건 내 현금영수증 정보
type PaymentCashReceipt struct {
	union json.RawMessage
}

// PaymentCashReceiptStatus 결제건 내 현금영수증 상태
type PaymentCashReceiptStatus string

// PaymentClientType 결제가 발생한 클라이언트 환경
type PaymentClientType string

// PaymentEscrow 에스크로 정보
//
// V1 결제 건의 경우 타입이 REGISTERED 로 고정됩니다.
type PaymentEscrow struct {
	union json.RawMessage
}

// PaymentEscrowReceiverInput 에스크로 수취인 정보
type PaymentEscrowReceiverInput struct {
	// Address 분리 형식 주소 입력 정보
	Address     *SeparatedAddressInput `json:"address,omitempty"`
	Name        *string                `json:"name,omitempty"`
	PhoneNumber *string                `json:"phoneNumber,omitempty"`
	Zipcode     *string                `json:"zipcode,omitempty"`
}

// PaymentEscrowSenderInput 에스크로 발송자 정보
type PaymentEscrowSenderInput struct {
	// Address 분리 형식 주소 입력 정보
	Address      *SeparatedAddressInput `json:"address,omitempty"`
	Name         *string                `json:"name,omitempty"`
	PhoneNumber  *string                `json:"phoneNumber,omitempty"`
	Relationship *string                `json:"relationship,omitempty"`
	Zipcode      *string                `json:"zipcode,omitempty"`
}

// PaymentFailure 결제 실패 정보
type PaymentFailure struct {
	PgCode    *string `json:"pgCode,omitempty"`
	PgMessage *string `json:"pgMessage,omitempty"`
	Reason    *string `json:"reason,omitempty"`
}

// PaymentFilterInput 결제 건 다건 조회를 위한 입력 정보
type PaymentFilterInput struct {
	// CardBrand 카드 브랜드
	CardBrand *CardBrand `json:"cardBrand,omitempty"`

	// CardOwnerType 카드 소유주 유형
	CardOwnerType *CardOwnerType `json:"cardOwnerType,omitempty"`

	// CardType 카드 유형
	CardType *CardType `json:"cardType,omitempty"`

	// CashReceiptCancelledAtRange 시간 범위
	CashReceiptCancelledAtRange *DateTimeRange `json:"cashReceiptCancelledAtRange,omitempty"`

	// CashReceiptIssuedAtRange 시간 범위
	CashReceiptIssuedAtRange *DateTimeRange `json:"cashReceiptIssuedAtRange,omitempty"`

	// CashReceiptStatus 결제건 내 현금영수증 상태
	CashReceiptStatus *PaymentCashReceiptStatus `json:"cashReceiptStatus,omitempty"`

	// CashReceiptType 입력 시 발급 유형
	CashReceiptType *CashReceiptInputType `json:"cashReceiptType,omitempty"`

	// Currency 통화 단위
	Currency *Currency `json:"currency,omitempty"`

	// EscrowStatus 에스크로 상태
	EscrowStatus *PaymentFilterInputEscrowStatus `json:"escrowStatus,omitempty"`

	// From 값을 입력하지 않으면 end의 90일 전으로 설정됩니다.
	From *time.Time `json:"from,omitempty"`

	// GiftCertificateType 상품권 종류
	GiftCertificateType *PaymentMethodGiftCertificateType `json:"giftCertificateType,omitempty"`
	IsEscrow            *bool                             `json:"isEscrow,omitempty"`
	IsScheduled         *bool                             `json:"isScheduled,omitempty"`
	IsTest              *bool                             `json:"isTest,omitempty"`
	MerchantId          *string                           `json:"merchantId,omitempty"`

	// Methods 값을 입력하지 않으면 결제수단 필터링이 적용되지 않습니다.
	Methods *[]PaymentMethodType `json:"methods,omitempty"`

	// PgProvider 값을 입력하지 않으면 결제대행사 필터링이 적용되지 않습니다.
	PgProvider *[]PgProvider `json:"pgProvider,omitempty"`

	// PlatformType 결제가 발생한 클라이언트 환경
	PlatformType *PaymentClientType `json:"platformType,omitempty"`

	// SortBy 결제 건 정렬 기준
	SortBy *PaymentSortBy `json:"sortBy,omitempty"`

	// SortOrder 정렬 방식
	SortOrder *SortOrder `json:"sortOrder,omitempty"`

	// Status 값을 입력하지 않으면 결제상태 필터링이 적용되지 않습니다.
	Status *[]PaymentStatus `json:"status,omitempty"`

	// StoreId Merchant 사용자만 사용가능하며, 지정되지 않은 경우 고객사 전체 결제 건을 조회합니다.
	StoreId    *string              `json:"storeId,omitempty"`
	TextSearch *[]PaymentTextSearch `json:"textSearch,omitempty"`

	// TimestampType 조회 시점 기준
	//
	// 어떤 시점을 기준으로 조회를 할 것인지 선택합니다.
	// CREATED_AT: 결제 건 생성 시점을 기준으로 조회합니다.
	// STATUS_CHANGED_AT: 상태 승인 시점을 기준으로 조회합니다. 결제 건의 최종 상태에 따라 검색 기준이 다르게 적용됩니다.
	// ready -> 결제 요청 시점 기준
	// paid -> 결제 완료 시점 기준
	// cancelled -> 결제 취소 시점 기준
	// failed -> 결제 실패 시점 기준
	// 값을 입력하지 않으면 STATUS_CHANGED_AT 으로 자동 적용됩니다.
	TimestampType *PaymentTimestampType `json:"timestampType,omitempty"`

	// Until 값을 입력하지 않으면 현재 시점으로 설정됩니다.
	Until *time.Time `json:"until,omitempty"`

	// Version 포트원 버전
	Version *PortOneVersion `json:"version,omitempty"`

	// WebhookStatus 웹훅 전송 상태
	WebhookStatus *PaymentWebhookStatus `json:"webhookStatus,omitempty"`
}

// PaymentFilterInputEscrowStatus 에스크로 상태
type PaymentFilterInputEscrowStatus string

// PaymentInstallment 할부 정보
type PaymentInstallment struct {
	IsInterestFree bool  `json:"isInterestFree"`
	Month          int32 `json:"month"`
}

// PaymentLogistics 배송정보
type PaymentLogistics struct {
	// Address 분리 형식 주소 입력 정보
	Address *SeparatedAddressInput `json:"address,omitempty"`

	// Company 물류 회사
	Company       PaymentLogisticsCompany `json:"company"`
	InvoiceNumber string                  `json:"invoiceNumber"`
	ReceivedAt    *time.Time              `json:"receivedAt,omitempty"`
	SentAt        time.Time               `json:"sentAt"`
}

// PaymentLogisticsCompany 물류 회사
type PaymentLogisticsCompany string

// PaymentMethod 결제수단 정보
type PaymentMethod struct {
	union json.RawMessage
}

// PaymentMethodCard 결제수단 카드 정보
type PaymentMethodCard struct {
	ApprovalNumber *string `json:"approvalNumber,omitempty"`

	// Card 카드 상세 정보
	Card *Card `json:"card,omitempty"`

	// Installment 할부 정보
	Installment *PaymentInstallment `json:"installment,omitempty"`
	PointUsed   *bool               `json:"pointUsed,omitempty"`
	Type        string              `json:"type"`
}

// PaymentMethodEasyPay 간편 결제 상세 정보
type PaymentMethodEasyPay struct {
	// EasyPayMethod 간편 결제 수단
	EasyPayMethod *PaymentMethodEasyPayMethod `json:"easyPayMethod,omitempty"`

	// Provider 간편 결제사
	Provider *EasyPayProvider `json:"provider,omitempty"`
	Type     string           `json:"type"`
}

// PaymentMethodEasyPayMethod 간편 결제 수단
type PaymentMethodEasyPayMethod struct {
	union json.RawMessage
}

// PaymentMethodEasyPayMethodCharge 충전식 포인트 결제 정보
type PaymentMethodEasyPayMethodCharge struct {
	// Bank 은행
	Bank *Bank  `json:"bank,omitempty"`
	Type string `json:"type"`
}

// PaymentMethodGiftCertificate 상품권 상세 정보
type PaymentMethodGiftCertificate struct {
	ApprovalNumber string `json:"approvalNumber"`

	// GiftCertificateType 상품권 종류
	GiftCertificateType *PaymentMethodGiftCertificateType `json:"giftCertificateType,omitempty"`
	Type                string                            `json:"type"`
}

// PaymentMethodGiftCertificateType 상품권 종류
type PaymentMethodGiftCertificateType string

// PaymentMethodMobile 모바일 상세 정보
type PaymentMethodMobile struct {
	PhoneNumber *string `json:"phoneNumber,omitempty"`
	Type        string  `json:"type"`
}

// PaymentMethodTransfer 계좌 이체 상세 정보
type PaymentMethodTransfer struct {
	AccountNumber *string `json:"accountNumber,omitempty"`

	// Bank 은행
	Bank *Bank  `json:"bank,omitempty"`
	Type string `json:"type"`
}

// PaymentMethodType defines model for PaymentMethodType.
type PaymentMethodType string

// PaymentMethodVirtualAccount 가상계좌 상세 정보
type PaymentMethodVirtualAccount struct {
	AccountNumber string `json:"accountNumber"`

	// AccountType 가상계좌 유형
	AccountType *PaymentMethodVirtualAccountType `json:"accountType,omitempty"`

	// Bank 은행
	Bank      *Bank      `json:"bank,omitempty"`
	ExpiredAt *time.Time `json:"expiredAt,omitempty"`
	IssuedAt  *time.Time `json:"issuedAt,omitempty"`

	// RefundStatus 가상계좌 환불 상태
	RefundStatus *PaymentMethodVirtualAccountRefundStatus `json:"refundStatus,omitempty"`
	RemitteeName *string                                  `json:"remitteeName,omitempty"`
	RemitterName *string                                  `json:"remitterName,omitempty"`
	Type         string                                   `json:"type"`
}

// PaymentMethodVirtualAccountRefundStatus 가상계좌 환불 상태
type PaymentMethodVirtualAccountRefundStatus string

// PaymentMethodVirtualAccountType 가상계좌 유형
type PaymentMethodVirtualAccountType string

// PaymentNotFoundError 결제 건이 존재하지 않는 경우
type PaymentNotFoundError struct {
	Message *string `json:"message,omitempty"`
	Type    string  `json:"type"`
}

// PaymentNotPaidError 결제가 완료되지 않은 경우
type PaymentNotPaidError struct {
	Message *string `json:"message,omitempty"`
	Type    string  `json:"type"`
}

// PaymentNotWaitingForDepositError 결제 건이 입금 대기 상태가 아닌 경우
type PaymentNotWaitingForDepositError struct {
	Message *string `json:"message,omitempty"`
	Type    string  `json:"type"`
}

// PaymentProduct 상품 정보
type PaymentProduct struct {
	Amount int64   `json:"amount"`
	Code   *string `json:"code,omitempty"`

	// Id 고객사가 직접 부여한 식별자입니다.
	Id       string `json:"id"`
	Name     string `json:"name"`
	Quantity int32  `json:"quantity"`

	// Tag 카테고리 등으로 활용될 수 있습니다.
	Tag *string `json:"tag,omitempty"`
}

// PaymentProductType 상품 유형
type PaymentProductType string

// PaymentSchedule 결제 예약 건
type PaymentSchedule struct {
	union json.RawMessage
}

// PaymentScheduleAlreadyExistsError 결제 예약건이 이미 존재하는 경우
type PaymentScheduleAlreadyExistsError struct {
	Message *string `json:"message,omitempty"`
	Type    string  `json:"type"`
}

// PaymentScheduleAlreadyProcessedError 결제 예약건이 이미 처리된 경우
type PaymentScheduleAlreadyProcessedError struct {
	Message *string `json:"message,omitempty"`
	Type    string  `json:"type"`
}

// PaymentScheduleAlreadyRevokedError 결제 예약건이 이미 취소된 경우
type PaymentScheduleAlreadyRevokedError struct {
	Message *string `json:"message,omitempty"`
	Type    string  `json:"type"`
}

// PaymentScheduleFilterInput 결제 예약 건 다건 조회를 위한 입력 정보
type PaymentScheduleFilterInput struct {
	BillingKey *string `json:"billingKey,omitempty"`

	// From 값을 입력하지 않으면 파라미터 end의 90일 전으로 설정됩니다.
	From *time.Time `json:"from,omitempty"`

	// Status 값을 입력하지 않으면 상태 필터링이 적용되지 않습니다.
	Status *[]PaymentScheduleStatus `json:"status,omitempty"`

	// StoreId 접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.
	StoreId *string `json:"storeId,omitempty"`

	// Until 값을 입력하지 않으면 현재 시점으로 설정됩니다.
	Until *time.Time `json:"until,omitempty"`
}

// PaymentScheduleNotFoundError 결제 예약건이 존재하지 않는 경우
type PaymentScheduleNotFoundError struct {
	Message *string `json:"message,omitempty"`
	Type    string  `json:"type"`
}

// PaymentScheduleSortBy 결제 예약 건 정렬 기준
type PaymentScheduleSortBy string

// PaymentScheduleSortInput 결제 예약 건 다건 조회 시 정렬 조건
type PaymentScheduleSortInput struct {
	// By 결제 예약 건 정렬 기준
	By *PaymentScheduleSortBy `json:"by,omitempty"`

	// Order 정렬 방식
	Order *SortOrder `json:"order,omitempty"`
}

// PaymentScheduleStatus 결제 예약 건 상태
type PaymentScheduleStatus string

// PaymentScheduleSummary 결제 예약 건
type PaymentScheduleSummary struct {
	Id string `json:"id"`
}

// PaymentSortBy 결제 건 정렬 기준
type PaymentSortBy string

// PaymentStatus 결제 건 상태
type PaymentStatus string

// PaymentTextSearch 통합검색 입력 정보
type PaymentTextSearch struct {
	// Field 통합검색 항목
	Field PaymentTextSearchField `json:"field"`
	Value string                 `json:"value"`
}

// PaymentTextSearchField 통합검색 항목
type PaymentTextSearchField string

// PaymentTimestampType 조회 시점 기준
//
// 어떤 시점을 기준으로 조회를 할 것인지 선택합니다.
// CREATED_AT: 결제 건 생성 시점을 기준으로 조회합니다.
// STATUS_CHANGED_AT: 상태 승인 시점을 기준으로 조회합니다. 결제 건의 최종 상태에 따라 검색 기준이 다르게 적용됩니다.
// ready -> 결제 요청 시점 기준
// paid -> 결제 완료 시점 기준
// cancelled -> 결제 취소 시점 기준
// failed -> 결제 실패 시점 기준
// 값을 입력하지 않으면 STATUS_CHANGED_AT 으로 자동 적용됩니다.
type PaymentTimestampType string

// PaymentTransaction 결제 시도
type PaymentTransaction struct {
	union json.RawMessage
}

// PaymentWebhook 성공 웹훅 내역
type PaymentWebhook struct {
	CurrentExecutionCount *int32 `json:"currentExecutionCount,omitempty"`
	Id                    string `json:"id"`

	// IsAsync V1 결제 건인 경우, 값이 존재하지 않습니다.
	IsAsync           *bool  `json:"isAsync,omitempty"`
	MaxExecutionCount *int32 `json:"maxExecutionCount,omitempty"`

	// PaymentStatus 웹훅 발송 시 결제 건 상태
	PaymentStatus *PaymentWebhookPaymentStatus `json:"paymentStatus,omitempty"`

	// Request 웹훅 요청 정보
	Request *PaymentWebhookRequest `json:"request,omitempty"`

	// Response 웹훅 응답 정보
	Response *PaymentWebhookResponse `json:"response,omitempty"`

	// Status 웹훅 전송 상태
	Status *PaymentWebhookStatus `json:"status,omitempty"`

	// Trigger 웹훅 실행 트리거
	//
	// 수동 웹훅 재발송, 가상계좌 입금, 비동기 취소 승인 시 발생한 웹훅일 때 필드의 값이 존재합니다.
	Trigger     *PaymentWebhookTrigger `json:"trigger,omitempty"`
	TriggeredAt *time.Time             `json:"triggeredAt,omitempty"`

	// Url V1 결제 건인 경우, 값이 존재하지 않습니다.
	Url string `json:"url"`
}

// PaymentWebhookPaymentStatus 웹훅 발송 시 결제 건 상태
type PaymentWebhookPaymentStatus string

// PaymentWebhookRequest 웹훅 요청 정보
type PaymentWebhookRequest struct {
	Body        string     `json:"body"`
	Header      *string    `json:"header,omitempty"`
	RequestedAt *time.Time `json:"requestedAt,omitempty"`
}

// PaymentWebhookResponse 웹훅 응답 정보
type PaymentWebhookResponse struct {
	Body        string    `json:"body"`
	Code        string    `json:"code"`
	Header      string    `json:"header"`
	RespondedAt time.Time `json:"respondedAt"`
}

// PaymentWebhookStatus 웹훅 전송 상태
type PaymentWebhookStatus string

// PaymentWebhookTrigger 웹훅 실행 트리거
//
// 수동 웹훅 재발송, 가상계좌 입금, 비동기 취소 승인 시 발생한 웹훅일 때 필드의 값이 존재합니다.
type PaymentWebhookTrigger string

// PaymentWithCursor 결제 건 및 커서 정보
type PaymentWithCursor struct {
	Cursor string `json:"cursor"`

	// Payment 결제 건
	Payment Payment `json:"payment"`
}

// PendingPaymentSchedule 결제 완료 대기 상태
type PendingPaymentSchedule struct {
	BillingKey  string    `json:"billingKey"`
	CompletedAt time.Time `json:"completedAt"`
	CreatedAt   time.Time `json:"createdAt"`

	// Currency 통화 단위
	Currency   Currency `json:"currency"`
	CustomData string   `json:"customData"`

	// Customer 고객 정보
	Customer          Customer          `json:"customer"`
	Id                string            `json:"id"`
	InstallmentMonth  *int32            `json:"installmentMonth,omitempty"`
	IsCulturalExpense bool              `json:"isCulturalExpense"`
	IsEscrow          bool              `json:"isEscrow"`
	MerchantId        string            `json:"merchantId"`
	NoticeUrls        *[]string         `json:"noticeUrls,omitempty"`
	OrderName         string            `json:"orderName"`
	PaymentId         string            `json:"paymentId"`
	Products          *[]PaymentProduct `json:"products,omitempty"`
	StartedAt         time.Time         `json:"startedAt"`
	Status            string            `json:"status"`
	StoreId           string            `json:"storeId"`
	TaxFreeAmount     *int64            `json:"taxFreeAmount,omitempty"`
	TimeToPay         time.Time         `json:"timeToPay"`
	TotalAmount       int64             `json:"totalAmount"`
	VatAmount         *int64            `json:"vatAmount,omitempty"`
}

// PgBillingKeyIssueResponse 채널 별 빌링키 발급 응답
type PgBillingKeyIssueResponse struct {
	union json.RawMessage
}

// PgCompany PG사
type PgCompany string

// PgProvider PG사 결제 모듈
type PgProvider string

// PgProviderError PG사에서 오류를 전달한 경우
type PgProviderError struct {
	Message   *string `json:"message,omitempty"`
	PgCode    string  `json:"pgCode"`
	PgMessage string  `json:"pgMessage"`
	Type      string  `json:"type"`
}

// Platform 고객사의 플랫폼 기능 관련 정보
type Platform struct {
	GraphqlId  string `json:"graphqlId"`
	MerchantId string `json:"merchantId"`

	// RoundType 금액에 대한 소수점 처리 방식
	RoundType PlatformRoundType `json:"roundType"`

	// SettlementFormula 플랫폼 내 발생하는 여러 수수료 및 할인 분담에 관한 계산식 정보
	SettlementFormula PlatformSettlementFormula `json:"settlementFormula"`

	// SettlementRule 플랫폼 정산건 처리 방식에 관한 규칙
	SettlementRule PlatformSettlementRule `json:"settlementRule"`
}

// PlatformAccount 플랫폼 정산 계좌
//
// `currency` 가 KRW 일 경우 예금주 조회 API 를 통해 올바른 계좌인지 검증합니다. 그 외의 화폐일 경우 따로 검증하지는 않습니다.
type PlatformAccount struct {
	// Bank 은행
	Bank Bank `json:"bank"`

	// Currency 통화 단위
	Currency Currency `json:"currency"`
	Holder   string   `json:"holder"`
	Number   string   `json:"number"`

	// Status 플랫폼 계좌 상태
	Status PlatformAccountStatus `json:"status"`
}

// PlatformAccountHolder 예금주 조회 성공 응답 정보
type PlatformAccountHolder struct {
	AccountVerificationId string `json:"accountVerificationId"`
	HolderName            string `json:"holderName"`
}

// PlatformAccountStatus 플랫폼 계좌 상태
type PlatformAccountStatus string

// PlatformAccountTransfer 계좌 이체
//
// 송금 대행을 통해 일어난 정산 금액 지급, 인출 목적의 계좌 이체 결과 정보입니다.
type PlatformAccountTransfer struct {
	union json.RawMessage
}

// PlatformAccountTransferFilter defines model for PlatformAccountTransferFilter.
type PlatformAccountTransferFilter struct {
	Types *[]PlatformAccountTransferType `json:"types,omitempty"`
}

// PlatformAccountTransferType 계좌 이체 유형
type PlatformAccountTransferType string

// PlatformAccountVerificationAlreadyUsedError 파트너 계좌 검증 아이디를 이미 사용한 경우
type PlatformAccountVerificationAlreadyUsedError struct {
	Message *string `json:"message,omitempty"`
	Type    string  `json:"type"`
}

// PlatformAccountVerificationFailedError 파트너 계좌 인증이 실패한 경우
type PlatformAccountVerificationFailedError struct {
	Message *string `json:"message,omitempty"`
	Type    string  `json:"type"`
}

// PlatformAccountVerificationNotFoundError 파트너 계좌 검증 아이디를 찾을 수 없는 경우
type PlatformAccountVerificationNotFoundError struct {
	Message *string `json:"message,omitempty"`
	Type    string  `json:"type"`
}

// PlatformAdditionalFeePoliciesNotFoundError defines model for PlatformAdditionalFeePoliciesNotFoundError.
type PlatformAdditionalFeePoliciesNotFoundError struct {
	GraphqlIds []string `json:"graphqlIds"`
	Ids        []string `json:"ids"`
	Message    *string  `json:"message,omitempty"`
	Type       string   `json:"type"`
}

// PlatformAdditionalFeePolicy 추가 수수료 정책
//
// 추가 수수료 정책는 고객사의 주문건에 대한 중개수수료에 별도로 추가로 부여되는 수수료입니다. 대표적인 사용 예시로 풀필먼트 수수료, 로켓배송 수수료, 마케팅 채널 수수료등이 있습니다.
type PlatformAdditionalFeePolicy struct {
	AppliedAt time.Time `json:"appliedAt"`

	// Fee 플랫폼 중개수수료 정보
	Fee        PlatformFee `json:"fee"`
	GraphqlId  string      `json:"graphqlId"`
	Id         string      `json:"id"`
	IsArchived bool        `json:"isArchived"`
	Memo       *string     `json:"memo,omitempty"`
	Name       string      `json:"name"`

	// VatPayer 금액 부담 주체
	//
	// 플랫폼에서 발생한 결제 수수료, 부가세 등 금액을 부담하는 주체를 나타냅니다.
	VatPayer PlatformPayer `json:"vatPayer"`
}

// PlatformAdditionalFeePolicyAlreadyExistsError defines model for PlatformAdditionalFeePolicyAlreadyExistsError.
type PlatformAdditionalFeePolicyAlreadyExistsError struct {
	Message *string `json:"message,omitempty"`
	Type    string  `json:"type"`
}

// PlatformAdditionalFeePolicyFilterInput 추가 수수료 정책 다건 조회를 위한 필터 조건
type PlatformAdditionalFeePolicyFilterInput struct {
	// IsArchived true 이면 보관된 추가 수수료 정책의 필터 옵션을 조회하고, false 이면 보관되지 않은 추가 수수료 정책의 필터 옵션을 조회합니다. 기본값은 false 입니다.
	IsArchived *bool `json:"isArchived,omitempty"`

	// Keyword 검색 키워드 입력 정보
	//
	// 검색 키워드 적용을 위한 옵션으로, 명시된 키워드를 포함하는 추가 수수료 정책만 조회합니다. 하위 필드는 명시된 값 중 한 가지만 적용됩니다.
	Keyword *PlatformAdditionalFeePolicyFilterInputKeyword `json:"keyword,omitempty"`

	// VatPayers 하나 이상의 값이 존재하는 경우 해당 리스트에 포함되는 부가세 부담 주체에 해당하는 추가 수수료 정책만 조회합니다.
	VatPayers *[]PlatformPayer `json:"vatPayers,omitempty"`
}

// PlatformAdditionalFeePolicyFilterInputKeyword 검색 키워드 입력 정보
//
// 검색 키워드 적용을 위한 옵션으로, 명시된 키워드를 포함하는 추가 수수료 정책만 조회합니다. 하위 필드는 명시된 값 중 한 가지만 적용됩니다.
type PlatformAdditionalFeePolicyFilterInputKeyword struct {
	// Fee 해당 값과 같은 수수료 를 가진 추가 수수료 정책만 조회합니다.
	Fee *string `json:"fee,omitempty"`

	// Id 해당 값이 포함된 id 를 가진 추가 수수료 정책만 조회합니다.
	Id *string `json:"id,omitempty"`

	// Name 해당 값이 포함된 name 을 가진 추가 수수료 정책만 조회합니다.
	Name *string `json:"name,omitempty"`
}

// PlatformAdditionalFeePolicyNotFoundError defines model for PlatformAdditionalFeePolicyNotFoundError.
type PlatformAdditionalFeePolicyNotFoundError struct {
	Message *string `json:"message,omitempty"`
	Type    string  `json:"type"`
}

// PlatformAdditionalFeePolicyScheduleAlreadyExistsError defines model for PlatformAdditionalFeePolicyScheduleAlreadyExistsError.
type PlatformAdditionalFeePolicyScheduleAlreadyExistsError struct {
	Message *string `json:"message,omitempty"`
	Type    string  `json:"type"`
}

// PlatformAdditionalFixedAmountFeeCurrencyAndSettlementCurrencyMismatchedError defines model for PlatformAdditionalFixedAmountFeeCurrencyAndSettlementCurrencyMismatchedError.
type PlatformAdditionalFixedAmountFeeCurrencyAndSettlementCurrencyMismatchedError struct {
	// FeeCurrency 통화 단위
	FeeCurrency Currency `json:"feeCurrency"`
	GraphqlId   string   `json:"graphqlId"`
	Id          string   `json:"id"`
	Message     *string  `json:"message,omitempty"`

	// SettlementCurrency 통화 단위
	SettlementCurrency Currency `json:"settlementCurrency"`
	Type               string   `json:"type"`
}

// PlatformArchivedAdditionalFeePolicyError 보관된 추가 수수료 정책을 업데이트하려고 하는 경우
type PlatformArchivedAdditionalFeePolicyError struct {
	Message *string `json:"message,omitempty"`
	Type    string  `json:"type"`
}

// PlatformArchivedContractError 보관된 계약을 업데이트하려고 하는 경우
type PlatformArchivedContractError struct {
	Message *string `json:"message,omitempty"`
	Type    string  `json:"type"`
}

// PlatformArchivedDiscountSharePolicyError 보관된 할인 분담 정책을 업데이트하려고 하는 경우
type PlatformArchivedDiscountSharePolicyError struct {
	Message *string `json:"message,omitempty"`
	Type    string  `json:"type"`
}

// PlatformArchivedPartnerError 보관된 파트너를 업데이트하려고 하는 경우
type PlatformArchivedPartnerError struct {
	Message *string `json:"message,omitempty"`
	Type    string  `json:"type"`
}

// PlatformArchivedPartnersCannotBeScheduledError 보관된 파트너들을 예약 업데이트하려고 하는 경우
type PlatformArchivedPartnersCannotBeScheduledError struct {
	Message *string `json:"message,omitempty"`
	Type    string  `json:"type"`
}

// PlatformBulkPayout defines model for PlatformBulkPayout.
type PlatformBulkPayout struct {
	ArePayoutsGenerated bool                     `json:"arePayoutsGenerated"`
	CreatedAt           time.Time                `json:"createdAt"`
	CreatorId           string                   `json:"creatorId"`
	GraphqlId           string                   `json:"graphqlId"`
	Id                  string                   `json:"id"`
	Method              PlatformPayoutMethod     `json:"method"`
	Name                string                   `json:"name"`
	PayoutStats         PlatformBulkPayoutStats  `json:"payoutStats"`
	ScheduledAt         *time.Time               `json:"scheduledAt,omitempty"`
	Status              PlatformBulkPayoutStatus `json:"status"`
	StatusUpdatedAt     time.Time                `json:"statusUpdatedAt"`
	TotalPayoutAmount   int64                    `json:"totalPayoutAmount"`
	UpdatedAt           time.Time                `json:"updatedAt"`
}

// PlatformBulkPayoutFilterInput defines model for PlatformBulkPayoutFilterInput.
type PlatformBulkPayoutFilterInput struct {
	Criteria *PlatformBulkPayoutFilterInputCriteria `json:"criteria,omitempty"`
	Methods  *[]PlatformPayoutMethod                `json:"methods,omitempty"`
	Statuses *[]PlatformBulkPayoutStatus            `json:"statuses,omitempty"`
}

// PlatformBulkPayoutFilterInputCriteria defines model for PlatformBulkPayoutFilterInputCriteria.
type PlatformBulkPayoutFilterInputCriteria struct {
	BulkPayoutId *string `json:"bulkPayoutId,omitempty"`

	// TimestampRange 시간 범위
	TimestampRange *DateTimeRange `json:"timestampRange,omitempty"`
}

// PlatformBulkPayoutStats defines model for PlatformBulkPayoutStats.
type PlatformBulkPayoutStats struct {
	Amount PlatformPayoutStatusStats `json:"amount"`
	Count  PlatformPayoutStatusStats `json:"count"`
}

// PlatformBulkPayoutStatus defines model for PlatformBulkPayoutStatus.
type PlatformBulkPayoutStatus string

// PlatformBulkPayoutStatusStats defines model for PlatformBulkPayoutStatusStats.
type PlatformBulkPayoutStatusStats struct {
	Cancelled int64 `json:"cancelled"`
	Completed int64 `json:"completed"`
	Ongoing   int64 `json:"ongoing"`
	Prepared  int64 `json:"prepared"`
	Preparing int64 `json:"preparing"`
	Scheduled int64 `json:"scheduled"`
	Stopped   int64 `json:"stopped"`
}

// PlatformBusinessStatus 플랫폼 사업자 상태
type PlatformBusinessStatus string

// PlatformCancelOrderTransfersExistsError defines model for PlatformCancelOrderTransfersExistsError.
type PlatformCancelOrderTransfersExistsError struct {
	Message *string `json:"message,omitempty"`
	Type    string  `json:"type"`
}

// PlatformCancellableAmountExceededError 취소 가능한 금액이 초과한 경우
type PlatformCancellableAmountExceededError struct {
	// AmountType 금액 타입
	AmountType        PlatformCancellableAmountType `json:"amountType"`
	CancellableAmount int64                         `json:"cancellableAmount"`
	Message           *string                       `json:"message,omitempty"`
	RequestAmount     int64                         `json:"requestAmount"`
	Type              string                        `json:"type"`
}

// PlatformCancellableAmountType 금액 타입
type PlatformCancellableAmountType string

// PlatformCancellableDiscountAmountExceededError defines model for PlatformCancellableDiscountAmountExceededError.
type PlatformCancellableDiscountAmountExceededError struct {
	CancellableAmount            int64   `json:"cancellableAmount"`
	DiscountSharePolicyGraphqlId string  `json:"discountSharePolicyGraphqlId"`
	DiscountSharePolicyId        string  `json:"discountSharePolicyId"`
	Message                      *string `json:"message,omitempty"`
	ProductId                    *string `json:"productId,omitempty"`
	RequestAmount                int64   `json:"requestAmount"`
	Type                         string  `json:"type"`
}

// PlatformCancellableDiscountTaxFreeAmountExceededError defines model for PlatformCancellableDiscountTaxFreeAmountExceededError.
type PlatformCancellableDiscountTaxFreeAmountExceededError struct {
	CancellableAmount            int64   `json:"cancellableAmount"`
	DiscountSharePolicyGraphqlId string  `json:"discountSharePolicyGraphqlId"`
	DiscountSharePolicyId        string  `json:"discountSharePolicyId"`
	Message                      *string `json:"message,omitempty"`
	ProductId                    *string `json:"productId,omitempty"`
	RequestAmount                int64   `json:"requestAmount"`
	Type                         string  `json:"type"`
}

// PlatformCancellableProductQuantityExceededError defines model for PlatformCancellableProductQuantityExceededError.
type PlatformCancellableProductQuantityExceededError struct {
	CancellableQuantity int64   `json:"cancellableQuantity"`
	Message             *string `json:"message,omitempty"`
	ProductId           string  `json:"productId"`
	Type                string  `json:"type"`
}

// PlatformCancellationAndPaymentTypeMismatchedError defines model for PlatformCancellationAndPaymentTypeMismatchedError.
type PlatformCancellationAndPaymentTypeMismatchedError struct {
	Message *string `json:"message,omitempty"`
	Type    string  `json:"type"`
}

// PlatformCancellationNotFoundError defines model for PlatformCancellationNotFoundError.
type PlatformCancellationNotFoundError struct {
	Message *string `json:"message,omitempty"`
	Type    string  `json:"type"`
}

// PlatformCannotArchiveScheduledAdditionalFeePolicyError 예약된 업데이트가 있는 추가 수수료 정책을 보관하려고 하는 경우
type PlatformCannotArchiveScheduledAdditionalFeePolicyError struct {
	Message *string `json:"message,omitempty"`
	Type    string  `json:"type"`
}

// PlatformCannotArchiveScheduledContractError 예약된 업데이트가 있는 계약을 보관하려고 하는 경우
type PlatformCannotArchiveScheduledContractError struct {
	Message *string `json:"message,omitempty"`
	Type    string  `json:"type"`
}

// PlatformCannotArchiveScheduledDiscountSharePolicyError 예약된 업데이트가 있는 할인 분담 정책을 보관하려고 하는 경우
type PlatformCannotArchiveScheduledDiscountSharePolicyError struct {
	Message *string `json:"message,omitempty"`
	Type    string  `json:"type"`
}

// PlatformCannotArchiveScheduledPartnerError 예약된 업데이트가 있는 파트너를 보관하려고 하는 경우
type PlatformCannotArchiveScheduledPartnerError struct {
	Message *string `json:"message,omitempty"`
	Type    string  `json:"type"`
}

// PlatformCannotSpecifyTransferError 정산 건 식별에 실패한 경우
type PlatformCannotSpecifyTransferError struct {
	Message *string `json:"message,omitempty"`
	Type    string  `json:"type"`
}

// PlatformCompanyNotFoundError 사업자 정보를 찾을 수 없는 경우
type PlatformCompanyNotFoundError struct {
	Message *string `json:"message,omitempty"`
	Type    string  `json:"type"`
}

// PlatformCompanyState defines model for PlatformCompanyState.
type PlatformCompanyState struct {
	// BusinessStatus 플랫폼 사업자 상태
	BusinessStatus PlatformBusinessStatus `json:"businessStatus"`

	// ClosedSuspendedDate 날짜를 나타내는 문자열로, `yyyy-MM-dd` 형식을 따릅니다.
	ClosedSuspendedDate *string `json:"closedSuspendedDate,omitempty"`

	// TaxationType 플랫폼 과세 유형
	TaxationType PlatformTaxationType `json:"taxationType"`

	// TaxationTypeDate 날짜를 나타내는 문자열로, `yyyy-MM-dd` 형식을 따릅니다.
	TaxationTypeDate *string `json:"taxationTypeDate,omitempty"`
}

// PlatformCompanyVerificationAlreadyUsedError 파트너 사업자 검증 아이디를 이미 사용한 경우
type PlatformCompanyVerificationAlreadyUsedError struct {
	Message *string `json:"message,omitempty"`
	Type    string  `json:"type"`
}

// PlatformContact 플랫폼 파트너 담당자 연락 정보
//
// 파트너 담당자에게 연락하기 위한 정보들 입니다.
type PlatformContact struct {
	Email       string  `json:"email"`
	Name        string  `json:"name"`
	PhoneNumber *string `json:"phoneNumber,omitempty"`
}

// PlatformContract 계약
//
// 계약은 플랫폼 고객사가 파트너에게 정산해줄 대금과 정산일을 계산하는 데 적용되는 정보입니다.
// 고객사의 플랫폼에서 재화 및 서비스를 판매하기 위한 중개수수료와 판매금에 대한 정산일로 구성되어 있습니다.
type PlatformContract struct {
	AppliedAt  time.Time `json:"appliedAt"`
	GraphqlId  string    `json:"graphqlId"`
	Id         string    `json:"id"`
	IsArchived bool      `json:"isArchived"`
	Memo       *string   `json:"memo,omitempty"`
	Name       string    `json:"name"`

	// PlatformFee 플랫폼 중개수수료 정보
	PlatformFee PlatformFee `json:"platformFee"`

	// PlatformFeeVatPayer 금액 부담 주체
	//
	// 플랫폼에서 발생한 결제 수수료, 부가세 등 금액을 부담하는 주체를 나타냅니다.
	PlatformFeeVatPayer PlatformPayer `json:"platformFeeVatPayer"`

	// SettlementCycle 정산 주기
	//
	// 지체일, 정산일, 기준일로 구성되며, 해당 요소들의 조합으로 실제 정산일을 계산합니다.
	SettlementCycle PlatformSettlementCycle `json:"settlementCycle"`

	// SubtractPaymentVatAmount false인 경우 정산금에서 결제 금액 부가세를 감액하지 않고, true인 경우 정산금에서 결제 금액 부가세를 감액합니다.
	SubtractPaymentVatAmount bool `json:"subtractPaymentVatAmount"`
}

// PlatformContractAlreadyExistsError defines model for PlatformContractAlreadyExistsError.
type PlatformContractAlreadyExistsError struct {
	Message *string `json:"message,omitempty"`
	Type    string  `json:"type"`
}

// PlatformContractFilterInput 계약 다건 조회를 위한 필터 조건
type PlatformContractFilterInput struct {
	// CycleTypes 하나 이상의 값이 존재하는 경우 해당 리스트에 포함되는 정산 주기 계산 방식을 가진 계약만 조회합니다.
	CycleTypes *[]PlatformSettlementCycleType `json:"cycleTypes,omitempty"`

	// DatePolicies 하나 이상의 값이 존재하는 경우 해당 리스트에 포함되는 정산 기준일을 가진 계약만 조회합니다.
	DatePolicies *[]PlatformSettlementCycleDatePolicy `json:"datePolicies,omitempty"`

	// IsArchived true 이면 보관된 계약을 조회하고, false 이면 보관되지 않은 계약을 조회합니다. 기본값은 false 입니다.
	IsArchived *bool `json:"isArchived,omitempty"`

	// Keyword 검색 키워드 입력 정보
	//
	// 검색 키워드 적용을 위한 옵션으로, 명시된 키워드를 포함하는 계약만 조회합니다. 하나의 하위 필드에만 값을 명시하여 요청합니다.
	Keyword *PlatformContractFilterInputKeyword `json:"keyword,omitempty"`

	// PlatformFeePayers 하나 이상의 값이 존재하는 경우 해당 리스트에 포함되는 수수료 부담 주체를 가진 계약만 조회합니다.
	PlatformFeePayers *[]PlatformPayer `json:"platformFeePayers,omitempty"`
}

// PlatformContractFilterInputKeyword 검색 키워드 입력 정보
//
// 검색 키워드 적용을 위한 옵션으로, 명시된 키워드를 포함하는 계약만 조회합니다. 하나의 하위 필드에만 값을 명시하여 요청합니다.
type PlatformContractFilterInputKeyword struct {
	// Id 해당 값이 포함된 id 를 가진 계약만 조회합니다.
	Id *string `json:"id,omitempty"`

	// Name 해당 값이 포함된 name 을 가진 계약만 조회합니다.
	Name *string `json:"name,omitempty"`
}

// PlatformContractNotFoundError defines model for PlatformContractNotFoundError.
type PlatformContractNotFoundError struct {
	Message *string `json:"message,omitempty"`
	Type    string  `json:"type"`
}

// PlatformContractPlatformFixedAmountFeeCurrencyAndSettlementCurrencyMismatchedError defines model for PlatformContractPlatformFixedAmountFeeCurrencyAndSettlementCurrencyMismatchedError.
type PlatformContractPlatformFixedAmountFeeCurrencyAndSettlementCurrencyMismatchedError struct {
	// FeeCurrency 통화 단위
	FeeCurrency Currency `json:"feeCurrency"`
	GraphqlId   string   `json:"graphqlId"`
	Id          string   `json:"id"`
	Message     *string  `json:"message,omitempty"`

	// SettlementCurrency 통화 단위
	SettlementCurrency Currency `json:"settlementCurrency"`
	Type               string   `json:"type"`
}

// PlatformContractScheduleAlreadyExistsError defines model for PlatformContractScheduleAlreadyExistsError.
type PlatformContractScheduleAlreadyExistsError struct {
	Message *string `json:"message,omitempty"`
	Type    string  `json:"type"`
}

// PlatformContractsNotFoundError defines model for PlatformContractsNotFoundError.
type PlatformContractsNotFoundError struct {
	GraphqlIds []string `json:"graphqlIds"`
	Ids        []string `json:"ids"`
	Message    *string  `json:"message,omitempty"`
	Type       string   `json:"type"`
}

// PlatformCurrencyNotSupportedError 지원 되지 않는 통화를 선택한 경우
type PlatformCurrencyNotSupportedError struct {
	Message *string `json:"message,omitempty"`
	Type    string  `json:"type"`
}

// PlatformDepositAccountTransfer defines model for PlatformDepositAccountTransfer.
type PlatformDepositAccountTransfer struct {
	Amount    int64     `json:"amount"`
	CreatedAt time.Time `json:"createdAt"`

	// Currency 통화 단위
	Currency      Currency  `json:"currency"`
	DepositMemo   *string   `json:"depositMemo,omitempty"`
	DepositorName string    `json:"depositorName"`
	Id            string    `json:"id"`
	IsForTest     bool      `json:"isForTest"`
	Type          string    `json:"type"`
	UpdatedAt     time.Time `json:"updatedAt"`
}

// PlatformDiscountSharePoliciesNotFoundError defines model for PlatformDiscountSharePoliciesNotFoundError.
type PlatformDiscountSharePoliciesNotFoundError struct {
	GraphqlIds []string `json:"graphqlIds"`
	Ids        []string `json:"ids"`
	Message    *string  `json:"message,omitempty"`
	Type       string   `json:"type"`
}

// PlatformDiscountSharePolicy 할인 분담 정책
//
// 할인 분담은 고객사의 주문건에 쿠폰 및 포인트와 같은 할인금액이 적용될 때, 파트너 정산 시 할인금액에 대한 분담 정책을 가지는 객체입니다.
// 할인 유형에 대한 아이디와 메모, 그리고 파트너 분담율을 가집니다.
type PlatformDiscountSharePolicy struct {
	AppliedAt  time.Time `json:"appliedAt"`
	GraphqlId  string    `json:"graphqlId"`
	Id         string    `json:"id"`
	IsArchived bool      `json:"isArchived"`
	Memo       *string   `json:"memo,omitempty"`
	Name       string    `json:"name"`

	// PartnerShareRate 파트너가 분담할 할인금액의 비율을 의미하는 밀리 퍼센트 단위 (10^-5) 의 음이 아닌 정수이며, 파트너가 부담할 금액은 `할인금액 * partnerShareRate * 10^5` 로 책정합니다.
	PartnerShareRate int32 `json:"partnerShareRate"`
}

// PlatformDiscountSharePolicyAlreadyExistsError defines model for PlatformDiscountSharePolicyAlreadyExistsError.
type PlatformDiscountSharePolicyAlreadyExistsError struct {
	Message *string `json:"message,omitempty"`
	Type    string  `json:"type"`
}

// PlatformDiscountSharePolicyFilterInput 할인 분담 정책 다건 조회를 위한 필터 조건
type PlatformDiscountSharePolicyFilterInput struct {
	// IsArchived true 이면 보관된 할인 분담 정책을 조회하고, false 이면 보관되지 않은 할인 분담 정책을 조회합니다. 기본값은 false 입니다.
	IsArchived *bool `json:"isArchived,omitempty"`

	// Keyword 검색 키워드 입력 정보
	//
	// 검색 키워드 적용을 위한 옵션으로, 명시된 키워드를 포함하는 할인 분담 정책만 조회합니다. 하위 필드는 명시된 값 중 한 가지만 적용됩니다.
	Keyword *PlatformDiscountSharePolicyFilterInputKeyword `json:"keyword,omitempty"`

	// PartnerShareRates 하나 이상의 값이 존재하는 경우 해당 리스트에 포함되는 파트너 분담율을 가진 할인 분담 정책만 조회합니다.
	PartnerShareRates *[]int32 `json:"partnerShareRates,omitempty"`
}

// PlatformDiscountSharePolicyFilterInputKeyword 검색 키워드 입력 정보
//
// 검색 키워드 적용을 위한 옵션으로, 명시된 키워드를 포함하는 할인 분담 정책만 조회합니다. 하위 필드는 명시된 값 중 한 가지만 적용됩니다.
type PlatformDiscountSharePolicyFilterInputKeyword struct {
	// Id 해당 값이 포함된 id 를 가진 할인 분담 정책만 조회합니다.
	Id *string `json:"id,omitempty"`

	// Name 해당 값이 포함된 name 을 가진 할인 분담만 조회합니다.
	Name *string `json:"name,omitempty"`
}

// PlatformDiscountSharePolicyFilterOptions 할인 분담 정책 필터 옵션 조회 성공 응답 정보
type PlatformDiscountSharePolicyFilterOptions struct {
	PartnerShareRates []int32 `json:"partnerShareRates"`
}

// PlatformDiscountSharePolicyIdDuplicatedError defines model for PlatformDiscountSharePolicyIdDuplicatedError.
type PlatformDiscountSharePolicyIdDuplicatedError struct {
	GraphqlId string  `json:"graphqlId"`
	Id        string  `json:"id"`
	Message   *string `json:"message,omitempty"`
	Type      string  `json:"type"`
}

// PlatformDiscountSharePolicyNotFoundError defines model for PlatformDiscountSharePolicyNotFoundError.
type PlatformDiscountSharePolicyNotFoundError struct {
	Message *string `json:"message,omitempty"`
	Type    string  `json:"type"`
}

// PlatformDiscountSharePolicyScheduleAlreadyExistsError defines model for PlatformDiscountSharePolicyScheduleAlreadyExistsError.
type PlatformDiscountSharePolicyScheduleAlreadyExistsError struct {
	Message *string `json:"message,omitempty"`
	Type    string  `json:"type"`
}

// PlatformExternalApiFailedError 외부 api 오류
type PlatformExternalApiFailedError struct {
	Message *string `json:"message,omitempty"`
	Type    string  `json:"type"`
}

// PlatformExternalApiTemporarilyFailedError 외부 api의 일시적인 오류
type PlatformExternalApiTemporarilyFailedError struct {
	Message *string `json:"message,omitempty"`
	Type    string  `json:"type"`
}

// PlatformExternalPayment 외부 결제 정보
type PlatformExternalPayment struct {
	// Currency 통화 단위
	Currency Currency `json:"currency"`
	Id       string   `json:"id"`

	// Method 결제 수단
	Method    *PlatformPaymentMethod `json:"method,omitempty"`
	OrderName *string                `json:"orderName,omitempty"`
	PaidAt    *time.Time             `json:"paidAt,omitempty"`
	Type      string                 `json:"type"`
}

// PlatformFee 플랫폼 중개수수료 정보
type PlatformFee struct {
	union json.RawMessage
}

// PlatformFeeInput 수수료 계산 방식을 특정하기 위한 입력 정보
//
// 정률 수수료를 설정하고 싶은 경우 `fixedRate` 필드에, 정액 수수료를 설정하고 싶은 경우 `fixedAmount` 필드에 값을 명시해 요청합니다.
// 두 필드 모두 값이 들어있지 않은 경우 요청이 거절됩니다.
type PlatformFeeInput struct {
	FixedAmount *int64 `json:"fixedAmount,omitempty"`
	FixedRate   *int32 `json:"fixedRate,omitempty"`
}

// PlatformFixedAmountFee 정액 수수료
//
// 총 금액에 무관하게 정해진 수수료 금액을 책정합니다.
type PlatformFixedAmountFee struct {
	Amount int64  `json:"amount"`
	Type   string `json:"type"`
}

// PlatformFixedRateFee 정률 수수료
//
// 총 금액에 정해진 비율을 곱한 만큼의 수수료를 책정합니다.
type PlatformFixedRateFee struct {
	// Rate 총 금액 대비 수수료 비율을 의미하며, 밀리 퍼센트 단위 (10^-5) 의 음이 아닌 정수입니다. `총 금액 * rate * 10^5` (`rate * 10^3 %`) 만큼 수수료를 책정합니다.
	Rate int32  `json:"rate"`
	Type string `json:"type"`
}

// PlatformInsufficientDataToChangePartnerTypeError 파트너 타입 수정에 필요한 데이터가 부족한 경우
type PlatformInsufficientDataToChangePartnerTypeError struct {
	Message *string `json:"message,omitempty"`
	Type    string  `json:"type"`
}

// PlatformInvalidSettlementFormulaError defines model for PlatformInvalidSettlementFormulaError.
type PlatformInvalidSettlementFormulaError struct {
	AdditionalFee *PlatformSettlementFormulaError `json:"additionalFee,omitempty"`
	DiscountShare *PlatformSettlementFormulaError `json:"discountShare,omitempty"`
	Message       *string                         `json:"message,omitempty"`
	PlatformFee   *PlatformSettlementFormulaError `json:"platformFee,omitempty"`
	Type          string                          `json:"type"`
}

// PlatformManualTransfer 수기 정산건
type PlatformManualTransfer struct {
	GraphqlId string  `json:"graphqlId"`
	Id        string  `json:"id"`
	IsForTest bool    `json:"isForTest"`
	Memo      *string `json:"memo,omitempty"`

	// Partner 파트너
	//
	// 파트너는 고객사가 정산해주어야 할 대상입니다.
	// 기본 사업자 정보와 정산정보, 그리고 적용될 계약의 정보를 등록 및 관리할 수 있습니다.
	Partner          PlatformPartner `json:"partner"`
	PayoutGraphqlId  *string         `json:"payoutGraphqlId,omitempty"`
	PayoutId         *string         `json:"payoutId,omitempty"`
	SettlementAmount int64           `json:"settlementAmount"`

	// SettlementCurrency 통화 단위
	SettlementCurrency Currency `json:"settlementCurrency"`

	// SettlementDate 날짜를 나타내는 문자열로, `yyyy-MM-dd` 형식을 따릅니다.
	SettlementDate string `json:"settlementDate"`

	// Status 정산 상태
	Status                PlatformTransferStatus                `json:"status"`
	Type                  string                                `json:"type"`
	UserDefinedProperties []PlatformUserDefinedPropertyKeyValue `json:"userDefinedProperties"`
}

// PlatformManualTransferSummary defines model for PlatformManualTransferSummary.
type PlatformManualTransferSummary struct {
	GraphqlId                    string                                `json:"graphqlId"`
	Id                           string                                `json:"id"`
	IsForTest                    bool                                  `json:"isForTest"`
	Memo                         *string                               `json:"memo,omitempty"`
	Partner                      PlatformTransferSummaryPartner        `json:"partner"`
	PartnerUserDefinedProperties []PlatformUserDefinedPropertyKeyValue `json:"partnerUserDefinedProperties"`
	SettlementAmount             int64                                 `json:"settlementAmount"`

	// SettlementCurrency 통화 단위
	SettlementCurrency Currency `json:"settlementCurrency"`

	// SettlementDate 날짜를 나타내는 문자열로, `yyyy-MM-dd` 형식을 따릅니다.
	SettlementDate string `json:"settlementDate"`

	// Status 정산 상태
	Status                PlatformTransferStatus                `json:"status"`
	Type                  string                                `json:"type"`
	UserDefinedProperties []PlatformUserDefinedPropertyKeyValue `json:"userDefinedProperties"`
}

// PlatformMemberCompanyConnectedPartnerBrnUnchangeableError 연동 사업자로 연동된 파트너의 사업자등록번호를 변경하려고 시도한 경우
type PlatformMemberCompanyConnectedPartnerBrnUnchangeableError struct {
	Message *string `json:"message,omitempty"`
	Type    string  `json:"type"`
}

// PlatformMemberCompanyConnectedPartnerCannotBeScheduledError 연동 사업자로 연동된 파트너를 예약 수정하려고 시도한 경우
type PlatformMemberCompanyConnectedPartnerCannotBeScheduledError struct {
	Message *string `json:"message,omitempty"`
	Type    string  `json:"type"`
}

// PlatformMemberCompanyConnectedPartnerTypeUnchangeableError 연동 사업자로 연동된 파트너의 파트너 유형을 변경하려고 시도한 경우
type PlatformMemberCompanyConnectedPartnerTypeUnchangeableError struct {
	Message *string `json:"message,omitempty"`
	Type    string  `json:"type"`
}

// PlatformMemberCompanyConnectedPartnersCannotBeScheduledError 연동 사업자로 연동된 파트너들을 예약 수정하려고 시도한 경우
type PlatformMemberCompanyConnectedPartnersCannotBeScheduledError struct {
	GraphqlIds []string `json:"graphqlIds"`
	Ids        []string `json:"ids"`
	Message    *string  `json:"message,omitempty"`
	Type       string   `json:"type"`
}

// PlatformNotEnabledError 플랫폼 기능이 활성화되지 않아 요청을 처리할 수 없는 경우
type PlatformNotEnabledError struct {
	Message *string `json:"message,omitempty"`
	Type    string  `json:"type"`
}

// PlatformNotSupportedBankError 지원하지 않는 은행인 경우
type PlatformNotSupportedBankError struct {
	Message *string `json:"message,omitempty"`
	Type    string  `json:"type"`
}

// PlatformOrderCancelTransfer 주문 취소 정산건
type PlatformOrderCancelTransfer struct {
	AdditionalFees []PlatformOrderTransferAdditionalFee `json:"additionalFees"`

	// Amount 정산 금액 정보
	//
	// 정산 금액과 정산 금액 계산에 사용된 금액 정보들 입니다.
	Amount PlatformOrderSettlementAmount `json:"amount"`

	// Cancellation 주문 취소 정보
	Cancellation PlatformOrderTransferCancellation `json:"cancellation"`

	// Contract 계약
	//
	// 계약은 플랫폼 고객사가 파트너에게 정산해줄 대금과 정산일을 계산하는 데 적용되는 정보입니다.
	// 고객사의 플랫폼에서 재화 및 서비스를 판매하기 위한 중개수수료와 판매금에 대한 정산일로 구성되어 있습니다.
	Contract   PlatformContract                 `json:"contract"`
	Discounts  []PlatformOrderTransferDiscount  `json:"discounts"`
	GraphqlId  string                           `json:"graphqlId"`
	Id         string                           `json:"id"`
	IsForTest  bool                             `json:"isForTest"`
	Memo       *string                          `json:"memo,omitempty"`
	OrderLines []PlatformOrderTransferOrderLine `json:"orderLines"`
	Parameters TransferParameters               `json:"parameters"`

	// Partner 파트너
	//
	// 파트너는 고객사가 정산해주어야 할 대상입니다.
	// 기본 사업자 정보와 정산정보, 그리고 적용될 계약의 정보를 등록 및 관리할 수 있습니다.
	Partner PlatformPartner `json:"partner"`

	// Payment 결제 정보
	Payment         PlatformPayment `json:"payment"`
	PayoutGraphqlId *string         `json:"payoutGraphqlId,omitempty"`
	PayoutId        *string         `json:"payoutId,omitempty"`

	// SettlementCurrency 통화 단위
	SettlementCurrency Currency `json:"settlementCurrency"`

	// SettlementDate 날짜를 나타내는 문자열로, `yyyy-MM-dd` 형식을 따릅니다.
	SettlementDate string `json:"settlementDate"`

	// SettlementStartDate 날짜를 나타내는 문자열로, `yyyy-MM-dd` 형식을 따릅니다.
	SettlementStartDate string `json:"settlementStartDate"`

	// Status 정산 상태
	Status                PlatformTransferStatus                `json:"status"`
	Type                  string                                `json:"type"`
	UserDefinedProperties []PlatformUserDefinedPropertyKeyValue `json:"userDefinedProperties"`
}

// PlatformOrderCancelTransferSummary defines model for PlatformOrderCancelTransferSummary.
type PlatformOrderCancelTransferSummary struct {
	// Amount 정산 금액 정보
	//
	// 정산 금액과 정산 금액 계산에 사용된 금액 정보들 입니다.
	Amount                       PlatformOrderSettlementAmount         `json:"amount"`
	GraphqlId                    string                                `json:"graphqlId"`
	Id                           string                                `json:"id"`
	IsForTest                    bool                                  `json:"isForTest"`
	Memo                         *string                               `json:"memo,omitempty"`
	Partner                      PlatformTransferSummaryPartner        `json:"partner"`
	PartnerUserDefinedProperties []PlatformUserDefinedPropertyKeyValue `json:"partnerUserDefinedProperties"`
	Payment                      PlatformTransferSummaryPayment        `json:"payment"`

	// SettlementCurrency 통화 단위
	SettlementCurrency Currency `json:"settlementCurrency"`

	// SettlementDate 날짜를 나타내는 문자열로, `yyyy-MM-dd` 형식을 따릅니다.
	SettlementDate string `json:"settlementDate"`

	// SettlementStartDate 날짜를 나타내는 문자열로, `yyyy-MM-dd` 형식을 따릅니다.
	SettlementStartDate string `json:"settlementStartDate"`

	// Status 정산 상태
	Status                PlatformTransferStatus                `json:"status"`
	StoreId               string                                `json:"storeId"`
	Type                  string                                `json:"type"`
	UserDefinedProperties []PlatformUserDefinedPropertyKeyValue `json:"userDefinedProperties"`
}

// PlatformOrderDetailMismatchedError defines model for PlatformOrderDetailMismatchedError.
type PlatformOrderDetailMismatchedError struct {
	Message *string `json:"message,omitempty"`
	Type    string  `json:"type"`
}

// PlatformOrderSettlementAmount 정산 금액 정보
//
// 정산 금액과 정산 금액 계산에 사용된 금액 정보들 입니다.
type PlatformOrderSettlementAmount struct {
	AdditionalFee        int64 `json:"additionalFee"`
	AdditionalFeeVat     int64 `json:"additionalFeeVat"`
	Discount             int64 `json:"discount"`
	DiscountShare        int64 `json:"discountShare"`
	DiscountShareTaxFree int64 `json:"discountShareTaxFree"`
	DiscountTaxFree      int64 `json:"discountTaxFree"`
	Order                int64 `json:"order"`
	OrderTaxFree         int64 `json:"orderTaxFree"`
	Payment              int64 `json:"payment"`
	PaymentSupply        int64 `json:"paymentSupply"`
	PaymentTaxFree       int64 `json:"paymentTaxFree"`
	PaymentVat           int64 `json:"paymentVat"`

	// PaymentVatBurden 참조된 계약의 결제 금액 부가세 감액 여부에 따라 false인 경우 0원, true인 경우 결제 금액 부가세입니다.
	PaymentVatBurden int64 `json:"paymentVatBurden"`
	PlatformFee      int64 `json:"platformFee"`
	PlatformFeeVat   int64 `json:"platformFeeVat"`
	Settlement       int64 `json:"settlement"`

	// Supply 해당 필드는 deprecated되어 9월까지만 유지되고 이후 삭제될 예정입니다. 대신 paymentSupply 필드를 사용해주세요.
	Supply int64 `json:"supply"`

	// TaxFree 해당 필드는 deprecated되어 9월까지만 유지되고 이후 삭제될 예정입니다. 대신 paymentTaxFree 필드를 사용해주세요.
	TaxFree int64 `json:"taxFree"`
}

// PlatformOrderTransfer 주문 정산건
type PlatformOrderTransfer struct {
	AdditionalFees []PlatformOrderTransferAdditionalFee `json:"additionalFees"`

	// Amount 정산 금액 정보
	//
	// 정산 금액과 정산 금액 계산에 사용된 금액 정보들 입니다.
	Amount PlatformOrderSettlementAmount `json:"amount"`

	// Contract 계약
	//
	// 계약은 플랫폼 고객사가 파트너에게 정산해줄 대금과 정산일을 계산하는 데 적용되는 정보입니다.
	// 고객사의 플랫폼에서 재화 및 서비스를 판매하기 위한 중개수수료와 판매금에 대한 정산일로 구성되어 있습니다.
	Contract   PlatformContract                 `json:"contract"`
	Discounts  []PlatformOrderTransferDiscount  `json:"discounts"`
	GraphqlId  string                           `json:"graphqlId"`
	Id         string                           `json:"id"`
	IsForTest  bool                             `json:"isForTest"`
	Memo       *string                          `json:"memo,omitempty"`
	OrderLines []PlatformOrderTransferOrderLine `json:"orderLines"`
	Parameters TransferParameters               `json:"parameters"`

	// Partner 파트너
	//
	// 파트너는 고객사가 정산해주어야 할 대상입니다.
	// 기본 사업자 정보와 정산정보, 그리고 적용될 계약의 정보를 등록 및 관리할 수 있습니다.
	Partner PlatformPartner `json:"partner"`

	// Payment 결제 정보
	Payment         PlatformPayment `json:"payment"`
	PayoutGraphqlId *string         `json:"payoutGraphqlId,omitempty"`
	PayoutId        *string         `json:"payoutId,omitempty"`

	// SettlementCurrency 통화 단위
	SettlementCurrency Currency `json:"settlementCurrency"`

	// SettlementDate 날짜를 나타내는 문자열로, `yyyy-MM-dd` 형식을 따릅니다.
	SettlementDate string `json:"settlementDate"`

	// SettlementStartDate 날짜를 나타내는 문자열로, `yyyy-MM-dd` 형식을 따릅니다.
	SettlementStartDate string `json:"settlementStartDate"`

	// Status 정산 상태
	Status                PlatformTransferStatus                `json:"status"`
	Type                  string                                `json:"type"`
	UserDefinedProperties []PlatformUserDefinedPropertyKeyValue `json:"userDefinedProperties"`
}

// PlatformOrderTransferAdditionalFee 추가 수수료 정보
type PlatformOrderTransferAdditionalFee struct {
	Amount int64 `json:"amount"`

	// Policy 추가 수수료 정책
	//
	// 추가 수수료 정책는 고객사의 주문건에 대한 중개수수료에 별도로 추가로 부여되는 수수료입니다. 대표적인 사용 예시로 풀필먼트 수수료, 로켓배송 수수료, 마케팅 채널 수수료등이 있습니다.
	Policy PlatformAdditionalFeePolicy `json:"policy"`
	Vat    int64                       `json:"vat"`
}

// PlatformOrderTransferAlreadyCancelledError defines model for PlatformOrderTransferAlreadyCancelledError.
type PlatformOrderTransferAlreadyCancelledError struct {
	Message *string `json:"message,omitempty"`
	Type    string  `json:"type"`
}

// PlatformOrderTransferCancellation 주문 취소 정보
type PlatformOrderTransferCancellation struct {
	CancelledAt time.Time `json:"cancelledAt"`
	Id          string    `json:"id"`
}

// PlatformOrderTransferDiscount 할인 정보
type PlatformOrderTransferDiscount struct {
	Amount      int64 `json:"amount"`
	ShareAmount int64 `json:"shareAmount"`

	// SharePolicy 할인 분담 정책
	//
	// 할인 분담은 고객사의 주문건에 쿠폰 및 포인트와 같은 할인금액이 적용될 때, 파트너 정산 시 할인금액에 대한 분담 정책을 가지는 객체입니다.
	// 할인 유형에 대한 아이디와 메모, 그리고 파트너 분담율을 가집니다.
	SharePolicy        PlatformDiscountSharePolicy `json:"sharePolicy"`
	ShareTaxFreeAmount int64                       `json:"shareTaxFreeAmount"`
	TaxFreeAmount      int64                       `json:"taxFreeAmount"`
}

// PlatformOrderTransferOrderLine 주문 항목
type PlatformOrderTransferOrderLine struct {
	AdditionalFees []PlatformOrderTransferAdditionalFee `json:"additionalFees"`

	// Amount 정산 금액 정보
	//
	// 정산 금액과 정산 금액 계산에 사용된 금액 정보들 입니다.
	Amount    PlatformOrderSettlementAmount   `json:"amount"`
	Discounts []PlatformOrderTransferDiscount `json:"discounts"`

	// Product 상품
	Product  PlatformOrderTransferProduct `json:"product"`
	Quantity int32                        `json:"quantity"`
}

// PlatformOrderTransferProduct 상품
type PlatformOrderTransferProduct struct {
	Amount        int64   `json:"amount"`
	Id            string  `json:"id"`
	Name          string  `json:"name"`
	Tag           *string `json:"tag,omitempty"`
	TaxFreeAmount int64   `json:"taxFreeAmount"`
}

// PlatformOrderTransferSummary defines model for PlatformOrderTransferSummary.
type PlatformOrderTransferSummary struct {
	// Amount 정산 금액 정보
	//
	// 정산 금액과 정산 금액 계산에 사용된 금액 정보들 입니다.
	Amount                       PlatformOrderSettlementAmount         `json:"amount"`
	GraphqlId                    string                                `json:"graphqlId"`
	Id                           string                                `json:"id"`
	IsForTest                    bool                                  `json:"isForTest"`
	Memo                         *string                               `json:"memo,omitempty"`
	Partner                      PlatformTransferSummaryPartner        `json:"partner"`
	PartnerUserDefinedProperties []PlatformUserDefinedPropertyKeyValue `json:"partnerUserDefinedProperties"`
	Payment                      PlatformTransferSummaryPayment        `json:"payment"`

	// SettlementCurrency 통화 단위
	SettlementCurrency Currency `json:"settlementCurrency"`

	// SettlementDate 날짜를 나타내는 문자열로, `yyyy-MM-dd` 형식을 따릅니다.
	SettlementDate string `json:"settlementDate"`

	// SettlementStartDate 날짜를 나타내는 문자열로, `yyyy-MM-dd` 형식을 따릅니다.
	SettlementStartDate string `json:"settlementStartDate"`

	// Status 정산 상태
	Status                PlatformTransferStatus                `json:"status"`
	StoreId               string                                `json:"storeId"`
	Type                  string                                `json:"type"`
	UserDefinedProperties []PlatformUserDefinedPropertyKeyValue `json:"userDefinedProperties"`
}

// PlatformPartner 파트너
//
// 파트너는 고객사가 정산해주어야 할 대상입니다.
// 기본 사업자 정보와 정산정보, 그리고 적용될 계약의 정보를 등록 및 관리할 수 있습니다.
type PlatformPartner struct {
	// Account 플랫폼 정산 계좌
	//
	// `currency` 가 KRW 일 경우 예금주 조회 API 를 통해 올바른 계좌인지 검증합니다. 그 외의 화폐일 경우 따로 검증하지는 않습니다.
	Account   PlatformAccount `json:"account"`
	AppliedAt time.Time       `json:"appliedAt"`

	// Contact 플랫폼 파트너 담당자 연락 정보
	//
	// 파트너 담당자에게 연락하기 위한 정보들 입니다.
	Contact           PlatformContact `json:"contact"`
	DefaultContractId string          `json:"defaultContractId"`
	GraphqlId         string          `json:"graphqlId"`
	Id                string          `json:"id"`
	IsArchived        bool            `json:"isArchived"`
	Memo              *string         `json:"memo,omitempty"`
	Name              string          `json:"name"`

	// Status 플랫폼 파트너 상태
	Status PlatformPartnerStatus `json:"status"`
	Tags   []string              `json:"tags"`

	// Type 파트너 유형별 추가 정보
	Type                  PlatformPartnerType `json:"type"`
	UserDefinedProperties PlatformProperties  `json:"userDefinedProperties"`
}

// PlatformPartnerBusinessStatus 플랫폼 파트너 사업자 상태
type PlatformPartnerBusinessStatus string

// PlatformPartnerContractSummary 파트너 계약 요약 정보
type PlatformPartnerContractSummary struct {
	Id   string `json:"id"`
	Name string `json:"name"`
}

// PlatformPartnerFilterInput 파트너 필터 입력 정보
type PlatformPartnerFilterInput struct {
	// AccountCurrencies 하나 이상의 값이 존재하는 경우,  해당 리스트에 포함되는 계좌 통화를 가진 파트너만 조회합니다.
	AccountCurrencies *[]Currency `json:"accountCurrencies,omitempty"`

	// AccountStatuses 하나 이상의 값이 존재하는 경우 해당 리스트에 포함되는 계좌 상태를 가진 파트너만 조회합니다.
	AccountStatuses *[]PlatformAccountStatus `json:"accountStatuses,omitempty"`

	// Banks 하나 이상의 값이 존재하는 경우,  해당 리스트에 포함되는 계좌 은행을 가진 파트너만 조회합니다.
	Banks *[]Bank `json:"banks,omitempty"`

	// BusinessStatuses 하나 이상의 값이 존재하는 경우 해당 리스트에 포함되는 사업자 상태를 가진 파트너만 조회합니다.
	BusinessStatuses *[]PlatformPartnerBusinessStatus `json:"businessStatuses,omitempty"`

	// ContractIds 하나 이상의 값이 존재하는 경우,  해당 리스트에 포함되는 기본 계약 id를 가진 파트너만 조회합니다.
	ContractIds *[]string `json:"contractIds,omitempty"`

	// Ids 하나 이상의 값이 존재하는 경우,  해당 리스트에 포함되는 아이디를 가진 파트너만 조회합니다.
	Ids *[]string `json:"ids,omitempty"`

	// IsArchived true 이면 보관된 파트너를 조회하고, false 이면 보관되지 않은 파트너를 조회합니다. 기본값은 false 입니다.
	IsArchived *bool `json:"isArchived,omitempty"`

	// Keyword 파트너 검색 키워드 입력 정보
	//
	// 검색 키워드 적용을 위한 옵션으로, 명시된 키워드를 포함하는 파트너만 조회합니다. 하나의 하위 필드에만 값을 명시하여 요청합니다.
	Keyword *PlatformPartnerFilterInputKeyword `json:"keyword,omitempty"`

	// MemberCompanyConnectionStatuses 하나 이상의 값이 존재하는 경우 해당 리스트에 포함되는 연동 사업자 연결 상태를 가진 파트너만 조회합니다.
	MemberCompanyConnectionStatuses *[]PlatformPartnerMemberCompanyConnectionStatus `json:"memberCompanyConnectionStatuses,omitempty"`

	// Tags 하나 이상의 값이 존재하는 경우 해당 리스트에 포함되는 태그를 하나 이상 가지는 파트너만 조회합니다.
	Tags *[]string `json:"tags,omitempty"`

	// TaxationTypes 하나 이상의 값이 존재하는 경우 해당 리스트에 포함되는 과세 유형을 가진 파트너만 조회합니다.
	TaxationTypes *[]PlatformPartnerTaxationType `json:"taxationTypes,omitempty"`

	// Types 하나 이상의 값이 존재하는 경우 해당 리스트에 포함되는 사업자 유형을 가진 파트너만 조회합니다.
	Types *[]PlatformPartnerTypeName `json:"types,omitempty"`
}

// PlatformPartnerFilterInputKeyword 파트너 검색 키워드 입력 정보
//
// 검색 키워드 적용을 위한 옵션으로, 명시된 키워드를 포함하는 파트너만 조회합니다. 하나의 하위 필드에만 값을 명시하여 요청합니다.
type PlatformPartnerFilterInputKeyword struct {
	// AccountHolder 해당 값이 포함된 계좌 예금주명을 가진 파트너만 조회합니다.
	AccountHolder *string `json:"accountHolder,omitempty"`

	// AccountNumber 해당 값이 포함된 계좌번호를 가진 파트너만 조회합니다.
	AccountNumber *string `json:"accountNumber,omitempty"`

	// BusinessRegistrationNumber 해당 값이 포함된 사업자등록번호를 가진 파트너만 조회합니다.
	BusinessRegistrationNumber *string `json:"businessRegistrationNumber,omitempty"`

	// DefaultContractId 해당 값이 포함된 기본 계약 아이디를 가진 파트너만 조회합니다.
	DefaultContractId *string `json:"defaultContractId,omitempty"`

	// Email 해당 값이 포함된 이메일 주소를 가진 파트너만 조회합니다.
	Email *string `json:"email,omitempty"`

	// Id 해당 값이 포함된 id 를 가진 파트너만 조회합니다.
	Id *string `json:"id,omitempty"`

	// Memo 해당 값이 포함된 메모를 가진 파트너만 조회합니다.
	Memo *string `json:"memo,omitempty"`

	// Name 해당 값이 포함된 이름 을 가진 파트너만 조회합니다.
	Name *string `json:"name,omitempty"`
}

// PlatformPartnerFilterOptions 파트너 필터 옵션 조회 성공 응답 정보
type PlatformPartnerFilterOptions struct {
	ContractSummary []PlatformPartnerContractSummary `json:"contractSummary"`
	Tags            []string                         `json:"tags"`
}

// PlatformPartnerIdAlreadyExistsError defines model for PlatformPartnerIdAlreadyExistsError.
type PlatformPartnerIdAlreadyExistsError struct {
	Message *string `json:"message,omitempty"`
	Type    string  `json:"type"`
}

// PlatformPartnerIdsAlreadyExistError defines model for PlatformPartnerIdsAlreadyExistError.
type PlatformPartnerIdsAlreadyExistError struct {
	GraphqlIds []string `json:"graphqlIds"`
	Ids        []string `json:"ids"`
	Message    *string  `json:"message,omitempty"`
	Type       string   `json:"type"`
}

// PlatformPartnerIdsDuplicatedError defines model for PlatformPartnerIdsDuplicatedError.
type PlatformPartnerIdsDuplicatedError struct {
	GraphqlIds []string `json:"graphqlIds"`
	Ids        []string `json:"ids"`
	Message    *string  `json:"message,omitempty"`
	Type       string   `json:"type"`
}

// PlatformPartnerManualSettlement defines model for PlatformPartnerManualSettlement.
type PlatformPartnerManualSettlement struct {
	Amount    int64   `json:"amount"`
	GraphqlId string  `json:"graphqlId"`
	Id        string  `json:"id"`
	IsForTest bool    `json:"isForTest"`
	Memo      *string `json:"memo,omitempty"`

	// Partner 파트너
	//
	// 파트너는 고객사가 정산해주어야 할 대상입니다.
	// 기본 사업자 정보와 정산정보, 그리고 적용될 계약의 정보를 등록 및 관리할 수 있습니다.
	Partner PlatformPartner `json:"partner"`

	// SettlementCurrency 통화 단위
	SettlementCurrency Currency `json:"settlementCurrency"`

	// SettlementDate 날짜를 나타내는 문자열로, `yyyy-MM-dd` 형식을 따릅니다.
	SettlementDate string `json:"settlementDate"`

	// Status 정산 상태
	Status PlatformPartnerSettlementStatus `json:"status"`
	Type   string                          `json:"type"`
}

// PlatformPartnerMemberCompanyConnectionStatus 플랫폼 파트너 연동 사업자 연결 상태
type PlatformPartnerMemberCompanyConnectionStatus string

// PlatformPartnerNotFoundError defines model for PlatformPartnerNotFoundError.
type PlatformPartnerNotFoundError struct {
	Message *string `json:"message,omitempty"`
	Type    string  `json:"type"`
}

// PlatformPartnerOrderCancelSettlement defines model for PlatformPartnerOrderCancelSettlement.
type PlatformPartnerOrderCancelSettlement struct {
	// Amount 정산 금액 정보
	//
	// 정산 금액과 정산 금액 계산에 사용된 금액 정보들 입니다.
	Amount PlatformOrderSettlementAmount `json:"amount"`

	// Contract 계약
	//
	// 계약은 플랫폼 고객사가 파트너에게 정산해줄 대금과 정산일을 계산하는 데 적용되는 정보입니다.
	// 고객사의 플랫폼에서 재화 및 서비스를 판매하기 위한 중개수수료와 판매금에 대한 정산일로 구성되어 있습니다.
	Contract  PlatformContract `json:"contract"`
	GraphqlId string           `json:"graphqlId"`
	Id        string           `json:"id"`
	IsForTest bool             `json:"isForTest"`
	Memo      *string          `json:"memo,omitempty"`

	// Partner 파트너
	//
	// 파트너는 고객사가 정산해주어야 할 대상입니다.
	// 기본 사업자 정보와 정산정보, 그리고 적용될 계약의 정보를 등록 및 관리할 수 있습니다.
	Partner PlatformPartner `json:"partner"`

	// SettlementCurrency 통화 단위
	SettlementCurrency Currency `json:"settlementCurrency"`

	// SettlementDate 날짜를 나타내는 문자열로, `yyyy-MM-dd` 형식을 따릅니다.
	SettlementDate           string    `json:"settlementDate"`
	SettlementStartDateRange DateRange `json:"settlementStartDateRange"`

	// Status 정산 상태
	Status PlatformPartnerSettlementStatus `json:"status"`
	Type   string                          `json:"type"`
}

// PlatformPartnerOrderSettlement defines model for PlatformPartnerOrderSettlement.
type PlatformPartnerOrderSettlement struct {
	// Amount 정산 금액 정보
	//
	// 정산 금액과 정산 금액 계산에 사용된 금액 정보들 입니다.
	Amount PlatformOrderSettlementAmount `json:"amount"`

	// Contract 계약
	//
	// 계약은 플랫폼 고객사가 파트너에게 정산해줄 대금과 정산일을 계산하는 데 적용되는 정보입니다.
	// 고객사의 플랫폼에서 재화 및 서비스를 판매하기 위한 중개수수료와 판매금에 대한 정산일로 구성되어 있습니다.
	Contract  PlatformContract `json:"contract"`
	GraphqlId string           `json:"graphqlId"`
	Id        string           `json:"id"`
	IsForTest bool             `json:"isForTest"`
	Memo      *string          `json:"memo,omitempty"`

	// Partner 파트너
	//
	// 파트너는 고객사가 정산해주어야 할 대상입니다.
	// 기본 사업자 정보와 정산정보, 그리고 적용될 계약의 정보를 등록 및 관리할 수 있습니다.
	Partner PlatformPartner `json:"partner"`

	// SettlementCurrency 통화 단위
	SettlementCurrency Currency `json:"settlementCurrency"`

	// SettlementDate 날짜를 나타내는 문자열로, `yyyy-MM-dd` 형식을 따릅니다.
	SettlementDate           string    `json:"settlementDate"`
	SettlementStartDateRange DateRange `json:"settlementStartDateRange"`

	// Status 정산 상태
	Status PlatformPartnerSettlementStatus `json:"status"`
	Type   string                          `json:"type"`
}

// PlatformPartnerPayoutAccountTransfer defines model for PlatformPartnerPayoutAccountTransfer.
type PlatformPartnerPayoutAccountTransfer struct {
	Amount              int64     `json:"amount"`
	Balance             *int64    `json:"balance,omitempty"`
	BulkPayoutGraphqlId string    `json:"bulkPayoutGraphqlId"`
	BulkPayoutId        string    `json:"bulkPayoutId"`
	CreatedAt           time.Time `json:"createdAt"`

	// Currency 통화 단위
	Currency             Currency `json:"currency"`
	DepositAccountNumber string   `json:"depositAccountNumber"`

	// DepositBank 은행
	DepositBank      Bank      `json:"depositBank"`
	DepositMemo      *string   `json:"depositMemo,omitempty"`
	FailReason       *string   `json:"failReason,omitempty"`
	Id               string    `json:"id"`
	IsForTest        bool      `json:"isForTest"`
	PartnerGraphqlId string    `json:"partnerGraphqlId"`
	PartnerId        string    `json:"partnerId"`
	PayoutGraphqlId  string    `json:"payoutGraphqlId"`
	PayoutId         string    `json:"payoutId"`
	SequenceNumber   int32     `json:"sequenceNumber"`
	Type             string    `json:"type"`
	UpdatedAt        time.Time `json:"updatedAt"`
	WithdrawalMemo   *string   `json:"withdrawalMemo,omitempty"`
}

// PlatformPartnerScheduleAlreadyExistsError defines model for PlatformPartnerScheduleAlreadyExistsError.
type PlatformPartnerScheduleAlreadyExistsError struct {
	Message *string `json:"message,omitempty"`
	Type    string  `json:"type"`
}

// PlatformPartnerSchedulesAlreadyExistError defines model for PlatformPartnerSchedulesAlreadyExistError.
type PlatformPartnerSchedulesAlreadyExistError struct {
	GraphqlIds []string `json:"graphqlIds"`
	Ids        []string `json:"ids"`
	Message    *string  `json:"message,omitempty"`
	Type       string   `json:"type"`
}

// PlatformPartnerSettlement defines model for PlatformPartnerSettlement.
type PlatformPartnerSettlement struct {
	union json.RawMessage
}

// PlatformPartnerSettlementFilterInput defines model for PlatformPartnerSettlementFilterInput.
type PlatformPartnerSettlementFilterInput struct {
	ContractIds          *[]string                                    `json:"contractIds,omitempty"`
	Keyword              *PlatformPartnerSettlementFilterKeywordInput `json:"keyword,omitempty"`
	PartnerIds           *[]string                                    `json:"partnerIds,omitempty"`
	PartnerTags          *[]string                                    `json:"partnerTags,omitempty"`
	SettlementCurrencies *[]Currency                                  `json:"settlementCurrencies,omitempty"`
	SettlementDates      *[]string                                    `json:"settlementDates,omitempty"`
	SettlementTypes      *[]PlatformPartnerSettlementType             `json:"settlementTypes,omitempty"`
	Statuses             *[]PlatformPartnerSettlementStatus           `json:"statuses,omitempty"`
}

// PlatformPartnerSettlementFilterKeywordInput defines model for PlatformPartnerSettlementFilterKeywordInput.
type PlatformPartnerSettlementFilterKeywordInput struct {
	BulkPayoutId        *string `json:"bulkPayoutId,omitempty"`
	PartnerSettlementId *string `json:"partnerSettlementId,omitempty"`
	PayoutId            *string `json:"payoutId,omitempty"`
}

// PlatformPartnerSettlementStatus 정산 상태
type PlatformPartnerSettlementStatus string

// PlatformPartnerSettlementStatusStats defines model for PlatformPartnerSettlementStatusStats.
type PlatformPartnerSettlementStatusStats struct {
	InPayout        int64 `json:"inPayout"`
	PaidOut         int64 `json:"paidOut"`
	PayoutFailed    int64 `json:"payoutFailed"`
	PayoutPrepared  int64 `json:"payoutPrepared"`
	PayoutScheduled int64 `json:"payoutScheduled"`
	PayoutWithheld  int64 `json:"payoutWithheld"`
}

// PlatformPartnerSettlementType 정산 유형
type PlatformPartnerSettlementType string

// PlatformPartnerStatus 플랫폼 파트너 상태
type PlatformPartnerStatus string

// PlatformPartnerTaxationType 플랫폼 파트너 과세 유형
type PlatformPartnerTaxationType string

// PlatformPartnerType 파트너 유형별 추가 정보
type PlatformPartnerType struct {
	union json.RawMessage
}

// PlatformPartnerTypeBusiness 사업자 파트너 정보
//
// 사업자 유형의 파트너 추가 정보 입니다.
type PlatformPartnerTypeBusiness struct {
	BusinessClass              *string `json:"businessClass,omitempty"`
	BusinessRegistrationNumber string  `json:"businessRegistrationNumber"`

	// BusinessStatus 플랫폼 파트너 사업자 상태
	BusinessStatus                      PlatformPartnerBusinessStatus `json:"businessStatus"`
	BusinessType                        *string                       `json:"businessType,omitempty"`
	CompanyAddress                      *string                       `json:"companyAddress,omitempty"`
	CompanyName                         string                        `json:"companyName"`
	MemberCompanyConnectionFailedReason *string                       `json:"memberCompanyConnectionFailedReason,omitempty"`

	// MemberCompanyConnectionStatus 플랫폼 파트너 연동 사업자 연결 상태
	MemberCompanyConnectionStatus PlatformPartnerMemberCompanyConnectionStatus `json:"memberCompanyConnectionStatus"`
	RepresentativeName            string                                       `json:"representativeName"`

	// TaxationType 플랫폼 파트너 과세 유형
	TaxationType PlatformPartnerTaxationType `json:"taxationType"`
	Type         string                      `json:"type"`
}

// PlatformPartnerTypeName 플랫폼 파트너 유형 이름
type PlatformPartnerTypeName string

// PlatformPartnerTypeNonWhtPayer 원천징수 비대상자 파트너 정보
//
// 비사업자 유형의 파트너 추가 정보 입니다.
type PlatformPartnerTypeNonWhtPayer struct {
	// Birthdate 날짜를 나타내는 문자열로, `yyyy-MM-dd` 형식을 따릅니다.
	Birthdate *string `json:"birthdate,omitempty"`
	Type      string  `json:"type"`
}

// PlatformPartnerTypeWhtPayer 원천징수 대상자 파트너 정보
//
// 비사업자 유형의 파트너 추가 정보 입니다.
type PlatformPartnerTypeWhtPayer struct {
	// Birthdate 날짜를 나타내는 문자열로, `yyyy-MM-dd` 형식을 따릅니다.
	Birthdate *string `json:"birthdate,omitempty"`
	Type      string  `json:"type"`
}

// PlatformPayer 금액 부담 주체
//
// 플랫폼에서 발생한 결제 수수료, 부가세 등 금액을 부담하는 주체를 나타냅니다.
type PlatformPayer string

// PlatformPayment 결제 정보
type PlatformPayment struct {
	union json.RawMessage
}

// PlatformPaymentMethod 결제 수단
type PlatformPaymentMethod struct {
	union json.RawMessage
}

// PlatformPaymentMethodCard 카드
type PlatformPaymentMethodCard struct {
	Type string `json:"type"`
}

// PlatformPaymentMethodCardInput defines model for PlatformPaymentMethodCardInput.
type PlatformPaymentMethodCardInput = map[string]interface{}

// PlatformPaymentMethodEasyPay 간편 결제
type PlatformPaymentMethodEasyPay struct {
	// MethodType 간편 결제 수단
	MethodType *EasyPayMethodType `json:"methodType,omitempty"`

	// Provider 간편 결제사
	Provider *EasyPayProvider `json:"provider,omitempty"`
	Type     string           `json:"type"`
}

// PlatformPaymentMethodEasyPayInput 간편 결제 입력 정보
type PlatformPaymentMethodEasyPayInput struct {
	// MethodType 간편 결제 수단
	MethodType *EasyPayMethodType `json:"methodType,omitempty"`

	// Provider 간편 결제사
	Provider *EasyPayProvider `json:"provider,omitempty"`
}

// PlatformPaymentMethodGiftCertificate 상품권
type PlatformPaymentMethodGiftCertificate struct {
	Type string `json:"type"`
}

// PlatformPaymentMethodGiftCertificateInput defines model for PlatformPaymentMethodGiftCertificateInput.
type PlatformPaymentMethodGiftCertificateInput = map[string]interface{}

// PlatformPaymentMethodInput 결제 수단 입력 정보
type PlatformPaymentMethodInput struct {
	Card *PlatformPaymentMethodCardInput `json:"card,omitempty"`

	// EasyPay 간편 결제 입력 정보
	EasyPay         *PlatformPaymentMethodEasyPayInput         `json:"easyPay,omitempty"`
	GiftCertificate *PlatformPaymentMethodGiftCertificateInput `json:"giftCertificate,omitempty"`
	Mobile          *PlatformPaymentMethodMobileInput          `json:"mobile,omitempty"`
	Transfer        *PlatformPaymentMethodTransferInput        `json:"transfer,omitempty"`
	VirtualAccount  *PlatformPaymentMethodVirtualAccountInput  `json:"virtualAccount,omitempty"`
}

// PlatformPaymentMethodMobile 모바일
type PlatformPaymentMethodMobile struct {
	Type string `json:"type"`
}

// PlatformPaymentMethodMobileInput defines model for PlatformPaymentMethodMobileInput.
type PlatformPaymentMethodMobileInput = map[string]interface{}

// PlatformPaymentMethodTransfer 계좌이체
type PlatformPaymentMethodTransfer struct {
	Type string `json:"type"`
}

// PlatformPaymentMethodTransferInput defines model for PlatformPaymentMethodTransferInput.
type PlatformPaymentMethodTransferInput = map[string]interface{}

// PlatformPaymentMethodVirtualAccount 가상계좌
type PlatformPaymentMethodVirtualAccount struct {
	Type string `json:"type"`
}

// PlatformPaymentMethodVirtualAccountInput defines model for PlatformPaymentMethodVirtualAccountInput.
type PlatformPaymentMethodVirtualAccountInput = map[string]interface{}

// PlatformPaymentNotFoundError defines model for PlatformPaymentNotFoundError.
type PlatformPaymentNotFoundError struct {
	Message *string `json:"message,omitempty"`
	Type    string  `json:"type"`
}

// PlatformPayout defines model for PlatformPayout.
type PlatformPayout struct {
	Account   PlatformPayoutAccount `json:"account"`
	Amount    int64                 `json:"amount"`
	CreatedAt time.Time             `json:"createdAt"`

	// Currency 통화 단위
	Currency             Currency             `json:"currency"`
	DepositMemo          *string              `json:"depositMemo,omitempty"`
	GraphqlId            string               `json:"graphqlId"`
	Id                   string               `json:"id"`
	IncomeTaxAmount      int64                `json:"incomeTaxAmount"`
	LocalIncomeTaxAmount int64                `json:"localIncomeTaxAmount"`
	Memo                 *string              `json:"memo,omitempty"`
	Method               PlatformPayoutMethod `json:"method"`

	// Partner 파트너
	//
	// 파트너는 고객사가 정산해주어야 할 대상입니다.
	// 기본 사업자 정보와 정산정보, 그리고 적용될 계약의 정보를 등록 및 관리할 수 있습니다.
	Partner          PlatformPartner      `json:"partner"`
	ScheduledAt      *time.Time           `json:"scheduledAt,omitempty"`
	SettlementAmount int64                `json:"settlementAmount"`
	Status           PlatformPayoutStatus `json:"status"`
	StatusUpdatedAt  time.Time            `json:"statusUpdatedAt"`
	WithdrawalMemo   *string              `json:"withdrawalMemo,omitempty"`
}

// PlatformPayoutAccount defines model for PlatformPayoutAccount.
type PlatformPayoutAccount struct {
	// Bank 은행
	Bank   Bank   `json:"bank"`
	Holder string `json:"holder"`
	Number string `json:"number"`
}

// PlatformPayoutFilterInput 지급 내역 필터 입력 정보
type PlatformPayoutFilterInput struct {
	// Criteria 검색 기준 입력 정보
	Criteria PlatformPayoutFilterInputCriteria `json:"criteria"`

	// PartnerIds 값이 존재하는 경우 해당 리스트에 포함되는 파트너 아이디를 가진 지급 내역을 조회합니다.
	PartnerIds *[]string `json:"partnerIds,omitempty"`

	// PartnerTags 값이 존재하는 경우 해당 리스트에 포함되는 파트너 태그를 하나 이상 가진 지급 내역을 조회합니다.
	PartnerTags *[]string `json:"partnerTags,omitempty"`

	// PayoutAccountBanks 값이 존재하는 경우 해당 리스트에 포함되는 지급 계좌 은행을 가진 지급 내역을 조회합니다.
	PayoutAccountBanks *[]Bank `json:"payoutAccountBanks,omitempty"`

	// PayoutCurrencies 값이 존재하는 경우 해당 리스트에 포함되는 지급 통화를 가진 지급 내역을 조회합니다.
	PayoutCurrencies *[]Currency `json:"payoutCurrencies,omitempty"`

	// Statuses 값이 존재하는 경우 해당 리스트에 포함되는 지급 상태를 가진 지급 내역을 조회합니다.
	Statuses *[]PlatformPayoutStatus `json:"statuses,omitempty"`
}

// PlatformPayoutFilterInputCriteria 검색 기준 입력 정보
type PlatformPayoutFilterInputCriteria struct {
	BulkPayoutId *string `json:"bulkPayoutId,omitempty"`
	PayoutId     *string `json:"payoutId,omitempty"`

	// TimestampRange 시간 범위
	TimestampRange *DateTimeRange `json:"timestampRange,omitempty"`
}

// PlatformPayoutMethod defines model for PlatformPayoutMethod.
type PlatformPayoutMethod string

// PlatformPayoutStatus defines model for PlatformPayoutStatus.
type PlatformPayoutStatus string

// PlatformPayoutStatusStats defines model for PlatformPayoutStatusStats.
type PlatformPayoutStatusStats struct {
	Cancelled  int64 `json:"cancelled"`
	Failed     int64 `json:"failed"`
	Prepared   int64 `json:"prepared"`
	Processing int64 `json:"processing"`
	Scheduled  int64 `json:"scheduled"`
	Stopped    int64 `json:"stopped"`
	Succeeded  int64 `json:"succeeded"`
}

// PlatformPortOnePayment 포트원 결제 정보
type PlatformPortOnePayment struct {
	ChannelKey string `json:"channelKey"`

	// Currency 통화 단위
	Currency Currency `json:"currency"`
	Id       string   `json:"id"`

	// Method 결제 수단
	Method    *PlatformPaymentMethod `json:"method,omitempty"`
	OrderName string                 `json:"orderName"`
	PaidAt    time.Time              `json:"paidAt"`
	StoreId   string                 `json:"storeId"`
	Type      string                 `json:"type"`
}

// PlatformPortOnePaymentCancelAmountType 금액 타입
type PlatformPortOnePaymentCancelAmountType string

// PlatformProductIdDuplicatedError defines model for PlatformProductIdDuplicatedError.
type PlatformProductIdDuplicatedError struct {
	Id      string  `json:"id"`
	Message *string `json:"message,omitempty"`
	Type    string  `json:"type"`
}

// PlatformProductIdNotFoundError defines model for PlatformProductIdNotFoundError.
type PlatformProductIdNotFoundError struct {
	Id      string  `json:"id"`
	Message *string `json:"message,omitempty"`
	Type    string  `json:"type"`
}

// PlatformProperties defines model for PlatformProperties.
type PlatformProperties map[string]PlatformUserDefinedPropertyValue

// PlatformRemitAccountTransfer defines model for PlatformRemitAccountTransfer.
type PlatformRemitAccountTransfer struct {
	Amount    int64     `json:"amount"`
	Balance   *int64    `json:"balance,omitempty"`
	CreatedAt time.Time `json:"createdAt"`

	// Currency 통화 단위
	Currency             Currency `json:"currency"`
	DepositAccountNumber string   `json:"depositAccountNumber"`

	// DepositBank 은행
	DepositBank    Bank      `json:"depositBank"`
	DepositMemo    *string   `json:"depositMemo,omitempty"`
	DocumentId     string    `json:"documentId"`
	FailReason     *string   `json:"failReason,omitempty"`
	Id             string    `json:"id"`
	IsForTest      bool      `json:"isForTest"`
	SequenceNumber int32     `json:"sequenceNumber"`
	Type           string    `json:"type"`
	UpdatedAt      time.Time `json:"updatedAt"`
	WithdrawalMemo *string   `json:"withdrawalMemo,omitempty"`
}

// PlatformRoundType 금액에 대한 소수점 처리 방식
type PlatformRoundType string

// PlatformSetting 플랫폼 설정
type PlatformSetting struct {
	DefaultDepositMemo    *string `json:"defaultDepositMemo,omitempty"`
	DefaultWithdrawalMemo *string `json:"defaultWithdrawalMemo,omitempty"`
}

// PlatformSettlementAmountExceededError 정산 가능한 금액을 초과한 경우
type PlatformSettlementAmountExceededError struct {
	AllowedAmount int64   `json:"allowedAmount"`
	Message       *string `json:"message,omitempty"`

	// ProductId 주문 항목의 상품 아이디입니다.
	ProductId       *string            `json:"productId,omitempty"`
	RequestedAmount int64              `json:"requestedAmount"`
	Type            AmountExceededType `json:"type"`
}

// PlatformSettlementCancelAmountExceededPortOneCancelError 정산 취소 요청 금액이 포트원 결제 취소 내역의 취소 금액을 초과한 경우
type PlatformSettlementCancelAmountExceededPortOneCancelError struct {
	// AmountType 금액 타입
	AmountType                       PlatformPortOnePaymentCancelAmountType `json:"amountType"`
	Message                          *string                                `json:"message,omitempty"`
	PortOneCancelAmount              int64                                  `json:"portOneCancelAmount"`
	RegisteredSettlementCancelAmount int64                                  `json:"registeredSettlementCancelAmount"`
	RequestSettlementCancelAmount    int64                                  `json:"requestSettlementCancelAmount"`
	Type                             string                                 `json:"type"`
}

// PlatformSettlementCycle 정산 주기
//
// 지체일, 정산일, 기준일로 구성되며, 해당 요소들의 조합으로 실제 정산일을 계산합니다.
type PlatformSettlementCycle struct {
	// DatePolicy 플랫폼 정산 기준일
	DatePolicy PlatformSettlementCycleDatePolicy `json:"datePolicy"`

	// LagDays 정산시작일(통상 주문완료일)로부터 더해진 다음 날짜로부터 가장 가까운 날에 정산이 됩니다. 최소 1 에서 최대 10 까지 지정할 수 있습니다.
	LagDays int32 `json:"lagDays"`

	// Method 플랫폼 정산 주기 계산 방식
	Method PlatformSettlementCycleMethod `json:"method"`
}

// PlatformSettlementCycleDatePolicy 플랫폼 정산 기준일
type PlatformSettlementCycleDatePolicy string

// PlatformSettlementCycleInput 플랫폼 정산 주기 입력 정보
type PlatformSettlementCycleInput struct {
	// DatePolicy 플랫폼 정산 기준일
	DatePolicy PlatformSettlementCycleDatePolicy `json:"datePolicy"`

	// LagDays 정산시작일(통상 주문완료일)로부터 더해진 다음 날짜로부터 가장 가까운 날에 정산이 됩니다. 최소 1 에서 최대 10 까지 지정할 수 있습니다.
	LagDays int32 `json:"lagDays"`

	// Method 플랫폼 정산 주기 계산 방식 입력 정보
	//
	// 하나의 하위 필드에만 값을 명시하여 요청합니다.
	Method PlatformSettlementCycleMethodInput `json:"method"`
}

// PlatformSettlementCycleMethod 플랫폼 정산 주기 계산 방식
type PlatformSettlementCycleMethod struct {
	union json.RawMessage
}

// PlatformSettlementCycleMethodDaily 매일 정산
type PlatformSettlementCycleMethodDaily struct {
	Type string `json:"type"`
}

// PlatformSettlementCycleMethodDailyInput defines model for PlatformSettlementCycleMethodDailyInput.
type PlatformSettlementCycleMethodDailyInput = map[string]interface{}

// PlatformSettlementCycleMethodInput 플랫폼 정산 주기 계산 방식 입력 정보
//
// 하나의 하위 필드에만 값을 명시하여 요청합니다.
type PlatformSettlementCycleMethodInput struct {
	Daily       *PlatformSettlementCycleMethodDailyInput       `json:"daily,omitempty"`
	ManualDates *PlatformSettlementCycleMethodManualDatesInput `json:"manualDates,omitempty"`
	Monthly     *PlatformSettlementCycleMethodMonthlyInput     `json:"monthly,omitempty"`
	Weekly      *PlatformSettlementCycleMethodWeeklyInput      `json:"weekly,omitempty"`
}

// PlatformSettlementCycleMethodManualDates 정해진 날짜(월, 일)에 정산
type PlatformSettlementCycleMethodManualDates struct {
	Dates []MonthDay `json:"dates"`
	Type  string     `json:"type"`
}

// PlatformSettlementCycleMethodManualDatesInput defines model for PlatformSettlementCycleMethodManualDatesInput.
type PlatformSettlementCycleMethodManualDatesInput struct {
	Dates []MonthDay `json:"dates"`
}

// PlatformSettlementCycleMethodMonthly 매월 정해진 날(일)에 정산
type PlatformSettlementCycleMethodMonthly struct {
	DaysOfMonth []int32 `json:"daysOfMonth"`
	Type        string  `json:"type"`
}

// PlatformSettlementCycleMethodMonthlyInput defines model for PlatformSettlementCycleMethodMonthlyInput.
type PlatformSettlementCycleMethodMonthlyInput struct {
	DaysOfMonth []int32 `json:"daysOfMonth"`
}

// PlatformSettlementCycleMethodWeekly 매주 정해진 요일에 정산
type PlatformSettlementCycleMethodWeekly struct {
	DaysOfWeek []DayOfWeek `json:"daysOfWeek"`
	Type       string      `json:"type"`
}

// PlatformSettlementCycleMethodWeeklyInput defines model for PlatformSettlementCycleMethodWeeklyInput.
type PlatformSettlementCycleMethodWeeklyInput struct {
	DaysOfWeek []DayOfWeek `json:"daysOfWeek"`
}

// PlatformSettlementCycleType 플랫폼 정산 주기 계산 방식
type PlatformSettlementCycleType string

// PlatformSettlementFormula 플랫폼 내 발생하는 여러 수수료 및 할인 분담에 관한 계산식 정보
type PlatformSettlementFormula struct {
	AdditionalFee string `json:"additionalFee"`
	DiscountShare string `json:"discountShare"`
	PlatformFee   string `json:"platformFee"`
}

// PlatformSettlementFormulaError defines model for PlatformSettlementFormulaError.
type PlatformSettlementFormulaError struct {
	union json.RawMessage
}

// PlatformSettlementFormulaInvalidFunction defines model for PlatformSettlementFormulaInvalidFunction.
type PlatformSettlementFormulaInvalidFunction struct {
	Name     string                            `json:"name"`
	Position PlatformSettlementFormulaPosition `json:"position"`
	Type     string                            `json:"type"`
}

// PlatformSettlementFormulaInvalidOperator defines model for PlatformSettlementFormulaInvalidOperator.
type PlatformSettlementFormulaInvalidOperator struct {
	Operator string                            `json:"operator"`
	Position PlatformSettlementFormulaPosition `json:"position"`
	Type     string                            `json:"type"`
}

// PlatformSettlementFormulaInvalidSyntax defines model for PlatformSettlementFormulaInvalidSyntax.
type PlatformSettlementFormulaInvalidSyntax struct {
	Position PlatformSettlementFormulaPosition `json:"position"`
	Syntax   string                            `json:"syntax"`
	Type     string                            `json:"type"`
}

// PlatformSettlementFormulaInvalidVariable defines model for PlatformSettlementFormulaInvalidVariable.
type PlatformSettlementFormulaInvalidVariable struct {
	Name     string                            `json:"name"`
	Position PlatformSettlementFormulaPosition `json:"position"`
	Type     string                            `json:"type"`
}

// PlatformSettlementFormulaPosition defines model for PlatformSettlementFormulaPosition.
type PlatformSettlementFormulaPosition struct {
	EndIndex   int32 `json:"endIndex"`
	EndLine    int32 `json:"endLine"`
	StartIndex int32 `json:"startIndex"`
	StartLine  int32 `json:"startLine"`
}

// PlatformSettlementFormulaUnexpectedFunctionArguments defines model for PlatformSettlementFormulaUnexpectedFunctionArguments.
type PlatformSettlementFormulaUnexpectedFunctionArguments struct {
	CurrentCount  int32                             `json:"currentCount"`
	ExpectedCount int32                             `json:"expectedCount"`
	FunctionName  string                            `json:"functionName"`
	Position      PlatformSettlementFormulaPosition `json:"position"`
	Type          string                            `json:"type"`
}

// PlatformSettlementFormulaUnknownError defines model for PlatformSettlementFormulaUnknownError.
type PlatformSettlementFormulaUnknownError struct {
	Type string `json:"type"`
}

// PlatformSettlementFormulaUnsupportedVariable defines model for PlatformSettlementFormulaUnsupportedVariable.
type PlatformSettlementFormulaUnsupportedVariable struct {
	Name     string                            `json:"name"`
	Position PlatformSettlementFormulaPosition `json:"position"`
	Type     string                            `json:"type"`
}

// PlatformSettlementParameterNotFoundError 정산 파라미터가 존재하지 않는 경우
type PlatformSettlementParameterNotFoundError struct {
	Message *string `json:"message,omitempty"`
	Type    string  `json:"type"`
}

// PlatformSettlementParameterValue 플랫폼 정산 파라미터 값
type PlatformSettlementParameterValue struct {
	Decimal int64 `json:"decimal"`

	// DecimalScale 정산 시 필요한 `decimalScale`이 지정되지 않은 경우 기본값으로 0을 사용합니다.
	// 입력 가능한 법위는 0 ~ 5 입니다.
	DecimalScale *int32 `json:"decimalScale,omitempty"`
}

// PlatformSettlementPaymentAmountExceededPortOnePaymentError 정산 요청 결제 금액이 포트원 결제 내역의 결제 금액을 초과한 경우
type PlatformSettlementPaymentAmountExceededPortOnePaymentError struct {
	Message                           *string `json:"message,omitempty"`
	PortOnePaymentAmount              int64   `json:"portOnePaymentAmount"`
	RegisteredSettlementPaymentAmount int64   `json:"registeredSettlementPaymentAmount"`
	RequestSettlementPaymentAmount    int64   `json:"requestSettlementPaymentAmount"`
	Type                              string  `json:"type"`
}

// PlatformSettlementRule 플랫폼 정산건 처리 방식에 관한 규칙
type PlatformSettlementRule struct {
	AdjustSettlementDateAfterHolidayIfEarlier bool `json:"adjustSettlementDateAfterHolidayIfEarlier"`
	SubtractWhtInPayoutAmount                 bool `json:"subtractWhtInPayoutAmount"`
	SupportsMultipleOrderTransfersPerPartner  bool `json:"supportsMultipleOrderTransfersPerPartner"`
}

// PlatformSettlementSupplyWithVatAmountExceededPortOnePaymentError 정산 요청 공급대가가 포트원 결제 내역의 공급대가를 초과한 경우
type PlatformSettlementSupplyWithVatAmountExceededPortOnePaymentError struct {
	Message                                 *string `json:"message,omitempty"`
	PortOneSupplyWithVatAmount              int64   `json:"portOneSupplyWithVatAmount"`
	RegisteredSettlementSupplyWithVatAmount int64   `json:"registeredSettlementSupplyWithVatAmount"`
	RequestSettlementSupplyWithVatAmount    int64   `json:"requestSettlementSupplyWithVatAmount"`
	Type                                    string  `json:"type"`
}

// PlatformSettlementTaxFreeAmountExceededPortOnePaymentError 정산 요청 면세 금액이 포트원 결제 내역의 면세 금액을 초과한 경우
type PlatformSettlementTaxFreeAmountExceededPortOnePaymentError struct {
	Message                           *string `json:"message,omitempty"`
	PortOneTaxFreeAmount              int64   `json:"portOneTaxFreeAmount"`
	RegisteredSettlementTaxFreeAmount int64   `json:"registeredSettlementTaxFreeAmount"`
	RequestSettlementTaxFreeAmount    int64   `json:"requestSettlementTaxFreeAmount"`
	Type                              string  `json:"type"`
}

// PlatformTaxationType 플랫폼 과세 유형
type PlatformTaxationType string

// PlatformTransfer 정산건
//
// 정산건은 파트너에 정산해줄 정산 금액과 정산 방식 등이 포함되어 있는 정산 정보입니다.
// 정산 방식은은 주문 정산, 주문 취소 정산, 수기 정산이 있습니다.
type PlatformTransfer struct {
	union json.RawMessage
}

// PlatformTransferAlreadyExistsError defines model for PlatformTransferAlreadyExistsError.
type PlatformTransferAlreadyExistsError struct {
	Message           *string `json:"message,omitempty"`
	TransferGraphqlId string  `json:"transferGraphqlId"`
	TransferId        string  `json:"transferId"`
	Type              string  `json:"type"`
}

// PlatformTransferDiscountSharePolicyNotFoundError defines model for PlatformTransferDiscountSharePolicyNotFoundError.
type PlatformTransferDiscountSharePolicyNotFoundError struct {
	DiscountSharePolicyGraphqlId string  `json:"discountSharePolicyGraphqlId"`
	DiscountSharePolicyId        string  `json:"discountSharePolicyId"`
	Message                      *string `json:"message,omitempty"`
	ProductId                    *string `json:"productId,omitempty"`
	Type                         string  `json:"type"`
}

// PlatformTransferFilterInput 정산건 필터 입력 정보
//
// 정산 시작일 범위와 정산 일 범위는 둘 중 하나만 입력 가능합니다.
type PlatformTransferFilterInput struct {
	// AdditionalFeePolicyIds 하나 이상의 값이 존재하는 경우 해당 리스트에 포함되는 추가 수수료 아이디를 하나 이상 가지는 정산건만 조회합니다.
	AdditionalFeePolicyIds *[]string `json:"additionalFeePolicyIds,omitempty"`

	// ChannelKeys 하나 이상의 값이 존재하는 경우 해당 리스트에 포함되는 채널 키를 가지는 정산건만 조회합니다.
	ChannelKeys *[]string `json:"channelKeys,omitempty"`

	// ContractIds 하나 이상의 값이 존재하는 경우 해당 리스트에 포함되는 계약 아이디를 가지는 정산건만 조회합니다.
	ContractIds *[]string `json:"contractIds,omitempty"`

	// DiscountSharePolicyIds 하나 이상의 값이 존재하는 경우 해당 리스트에 포함되는 할인 분담 정책 아이디를 하나 이상 가지는 정산건만 조회합니다.
	DiscountSharePolicyIds *[]string `json:"discountSharePolicyIds,omitempty"`
	IsForTest              *bool     `json:"isForTest,omitempty"`

	// Keyword 정산건 검색 키워드 입력 정보
	//
	// 검색 키워드 적용을 위한 옵션으로, 명시된 키워드를 포함하는 정산건만 조회합니다. 하나의 하위 필드에만 값을 명시하여 요청합니다.
	Keyword *PlatformTransferFilterInputKeyword `json:"keyword,omitempty"`

	// PartnerTags 하나 이상의 값이 존재하는 경우 해당 리스트에 포함되는 태그를 하나 이상 가지는 파트너에 대한 정산건만 조회합니다.
	PartnerTags *[]string `json:"partnerTags,omitempty"`

	// PaymentMethodTypes 하나 이상의 값이 존재하는 경우 해당 리스트에 포함되는 결제 수단을 가지는 파트너만 조회합니다.
	PaymentMethodTypes       *[]PaymentMethodType `json:"paymentMethodTypes,omitempty"`
	SettlementDateRange      *DateRange           `json:"settlementDateRange,omitempty"`
	SettlementStartDateRange *DateRange           `json:"settlementStartDateRange,omitempty"`

	// Statuses 하나 이상의 값이 존재하는 경우 해당 리스트에 포함되는 정산 상태인 정산건만 조회합니다.
	Statuses *[]PlatformTransferStatus `json:"statuses,omitempty"`

	// Types 하나 이상의 값이 존재하는 경우 해당 리스트에 포함되는 정산 방식의 정산건만 조회합니다.
	Types *[]PlatformTransferType `json:"types,omitempty"`
}

// PlatformTransferFilterInputKeyword 정산건 검색 키워드 입력 정보
//
// 검색 키워드 적용을 위한 옵션으로, 명시된 키워드를 포함하는 정산건만 조회합니다. 하나의 하위 필드에만 값을 명시하여 요청합니다.
type PlatformTransferFilterInputKeyword struct {
	// All 해당 값이 포함된 정보를 가진 정산건만 조회합니다.
	All *string `json:"all,omitempty"`

	// PartnerId 해당 값이랑 일치하는 partnerId 를 가진 정산건만 조회합니다.
	PartnerId *string `json:"partnerId,omitempty"`

	// PartnerMemo 해당 값이 포함된 partnerMemo 를 가진 정산건만 조회합니다.
	PartnerMemo *string `json:"partnerMemo,omitempty"`

	// PartnerName 해당 값이 포함된 partnerName 을 가진 정산건만 조회합니다.
	PartnerName *string `json:"partnerName,omitempty"`

	// PaymentId 해당 값이랑 일치하는 paymentId 를 가진 정산건만 조회합니다.
	PaymentId *string `json:"paymentId,omitempty"`

	// ProductId 해당 값이랑 일치하는 productId 를 가진 정산건만 조회합니다.
	ProductId *string `json:"productId,omitempty"`

	// ProductName 해당 값이랑 일치하는 productName 을 가진 정산건만 조회합니다.
	ProductName *string `json:"productName,omitempty"`

	// TransferId 해당 값이랑 일치하는 transferId 를 가진 정산건만 조회합니다.
	TransferId *string `json:"transferId,omitempty"`

	// TransferMemo 해당 값이 포함된 transferMemo 를 가진 정산건만 조회합니다.
	TransferMemo *string `json:"transferMemo,omitempty"`
}

// PlatformTransferNonDeletableStatusError defines model for PlatformTransferNonDeletableStatusError.
type PlatformTransferNonDeletableStatusError struct {
	Message *string `json:"message,omitempty"`
	Type    string  `json:"type"`
}

// PlatformTransferNotFoundError defines model for PlatformTransferNotFoundError.
type PlatformTransferNotFoundError struct {
	Message *string `json:"message,omitempty"`
	Type    string  `json:"type"`
}

// PlatformTransferSheetField 다운로드 할 시트 컬럼
type PlatformTransferSheetField string

// PlatformTransferStatus 정산 상태
type PlatformTransferStatus string

// PlatformTransferSummary defines model for PlatformTransferSummary.
type PlatformTransferSummary struct {
	union json.RawMessage
}

// PlatformTransferSummaryExternalPayment defines model for PlatformTransferSummaryExternalPayment.
type PlatformTransferSummaryExternalPayment struct {
	// Currency 통화 단위
	Currency   Currency           `json:"currency"`
	Id         string             `json:"id"`
	MethodType *PaymentMethodType `json:"methodType,omitempty"`
	OrderName  *string            `json:"orderName,omitempty"`
	Type       string             `json:"type"`
}

// PlatformTransferSummaryPartner defines model for PlatformTransferSummaryPartner.
type PlatformTransferSummaryPartner struct {
	GraphqlId string `json:"graphqlId"`
	Id        string `json:"id"`
	Name      string `json:"name"`

	// TaxationType 플랫폼 파트너 과세 유형
	TaxationType *PlatformPartnerTaxationType `json:"taxationType,omitempty"`

	// Type 파트너 유형
	Type PlatformTransferSummaryPartnerType `json:"type"`
}

// PlatformTransferSummaryPartnerType 파트너 유형
type PlatformTransferSummaryPartnerType string

// PlatformTransferSummaryPayment defines model for PlatformTransferSummaryPayment.
type PlatformTransferSummaryPayment struct {
	union json.RawMessage
}

// PlatformTransferSummaryPortOnePayment defines model for PlatformTransferSummaryPortOnePayment.
type PlatformTransferSummaryPortOnePayment struct {
	// Currency 통화 단위
	Currency   Currency           `json:"currency"`
	Id         string             `json:"id"`
	MethodType *PaymentMethodType `json:"methodType,omitempty"`
	OrderName  string             `json:"orderName"`
	Type       string             `json:"type"`
}

// PlatformTransferType defines model for PlatformTransferType.
type PlatformTransferType string

// PlatformUserDefinedPropertyKeyValue 사용자 정의 속성
type PlatformUserDefinedPropertyKeyValue struct {
	Key   string                           `json:"key"`
	Value PlatformUserDefinedPropertyValue `json:"value"`
}

// PlatformUserDefinedPropertyNotFoundError 사용자 정의 속성이 존재 하지 않는 경우
type PlatformUserDefinedPropertyNotFoundError struct {
	Message *string `json:"message,omitempty"`
	Type    string  `json:"type"`
}

// PlatformUserDefinedPropertyValue defines model for PlatformUserDefinedPropertyValue.
type PlatformUserDefinedPropertyValue struct {
	String string `json:"string"`
}

// PortOneVersion 포트원 버전
type PortOneVersion string

// PreRegisterPaymentBody 결제 정보 사전 등록 입력 정보
type PreRegisterPaymentBody struct {
	// Currency 통화 단위
	Currency *Currency `json:"currency,omitempty"`

	// StoreId 접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.
	StoreId       *string `json:"storeId,omitempty"`
	TaxFreeAmount *int64  `json:"taxFreeAmount,omitempty"`
	TotalAmount   *int64  `json:"totalAmount,omitempty"`
}

// PreRegisterPaymentError defines model for PreRegisterPaymentError.
type PreRegisterPaymentError struct {
	union json.RawMessage
}

// PreRegisterPaymentResponse 결제 사전 등록 성공 응답
type PreRegisterPaymentResponse = map[string]interface{}

// Promotion 프로모션
type Promotion struct {
	union json.RawMessage
}

// PromotionAmountDiscountScheme defines model for PromotionAmountDiscountScheme.
type PromotionAmountDiscountScheme struct {
	Amount int64  `json:"amount"`
	Type   string `json:"type"`
}

// PromotionCardCompany 프로모션 적용 가능한 카드사
type PromotionCardCompany string

// PromotionDiscountPartition 금액 구간별 프로모션 할인 정책
type PromotionDiscountPartition struct {
	AmountFrom int64                   `json:"amountFrom"`
	Scheme     PromotionDiscountScheme `json:"scheme"`
}

// PromotionDiscountPolicy 프로모션 할인 정책
type PromotionDiscountPolicy struct {
	Partitions []PromotionDiscountPartition `json:"partitions"`
}

// PromotionDiscountRetainOption defines model for PromotionDiscountRetainOption.
type PromotionDiscountRetainOption string

// PromotionDiscountRetainOptionShouldNotBeChangedError 프로모션 혜택 유지 옵션을 이전 부분 취소와 다른 것으로 입력한 경우
type PromotionDiscountRetainOptionShouldNotBeChangedError struct {
	Message *string `json:"message,omitempty"`
	Type    string  `json:"type"`
}

// PromotionDiscountScheme defines model for PromotionDiscountScheme.
type PromotionDiscountScheme struct {
	union json.RawMessage
}

// PromotionNotFoundError 프로모션이 존재하지 않는 경우
type PromotionNotFoundError struct {
	Message *string `json:"message,omitempty"`
	Type    string  `json:"type"`
}

// PromotionPayMethodDoesNotMatchError 결제수단이 프로모션에 지정된 것과 일치하지 않는 경우
type PromotionPayMethodDoesNotMatchError struct {
	Message *string `json:"message,omitempty"`
	Type    string  `json:"type"`
}

// PromotionPercentDiscountScheme defines model for PromotionPercentDiscountScheme.
type PromotionPercentDiscountScheme struct {
	Percent int32  `json:"percent"`
	Type    string `json:"type"`
}

// PromotionRecoverOption defines model for PromotionRecoverOption.
type PromotionRecoverOption struct {
	union json.RawMessage
}

// PromotionRecoverOptionNoRecover 결제 취소 시 프로모션 예산 미복구
type PromotionRecoverOptionNoRecover struct {
	SpareBudget *PromotionSpareBudget `json:"spareBudget,omitempty"`
	Type        string                `json:"type"`
}

// PromotionRecoverOptionRecover 결제 취소 시 프로모션 예산 복구
type PromotionRecoverOptionRecover struct {
	Type string `json:"type"`
}

// PromotionSpareBudget defines model for PromotionSpareBudget.
type PromotionSpareBudget struct {
	union json.RawMessage
}

// PromotionSpareBudgetAmount defines model for PromotionSpareBudgetAmount.
type PromotionSpareBudgetAmount struct {
	Amount int64  `json:"amount"`
	Type   string `json:"type"`
}

// PromotionSpareBudgetPercent defines model for PromotionSpareBudgetPercent.
type PromotionSpareBudgetPercent struct {
	Percent int32  `json:"percent"`
	Type    string `json:"type"`
}

// PromotionStatus defines model for PromotionStatus.
type PromotionStatus string

// ReadyIdentityVerification 준비 상태의 본인인증 내역
type ReadyIdentityVerification struct {
	// Channel (결제, 본인인증 등에) 선택된 채널 정보
	Channel     *SelectedChannel `json:"channel,omitempty"`
	CustomData  *string          `json:"customData,omitempty"`
	Id          string           `json:"id"`
	RequestedAt time.Time        `json:"requestedAt"`

	// RequestedCustomer 요청 시 고객 정보
	RequestedCustomer IdentityVerificationRequestedCustomer `json:"requestedCustomer"`
	Status            string                                `json:"status"`
	StatusChangedAt   time.Time                             `json:"statusChangedAt"`
	UpdatedAt         time.Time                             `json:"updatedAt"`
}

// ReadyPayment 준비 상태 건
type ReadyPayment struct {
	// Amount 결제 금액 세부 정보
	Amount PaymentAmount `json:"amount"`

	// BillingKey 빌링키 결제인 경우에만 존재
	BillingKey *string `json:"billingKey,omitempty"`

	// Channel (결제, 본인인증 등에) 선택된 채널 정보
	Channel *SelectedChannel `json:"channel,omitempty"`

	// ChannelGroup 채널 그룹 정보
	ChannelGroup *ChannelGroupSummary `json:"channelGroup,omitempty"`

	// Country 국가
	Country *Country `json:"country,omitempty"`

	// Currency 통화 단위
	Currency   Currency `json:"currency"`
	CustomData *string  `json:"customData,omitempty"`

	// Customer 고객 정보
	Customer Customer `json:"customer"`

	// Escrow 에스크로 정보
	//
	// V1 결제 건의 경우 타입이 REGISTERED 로 고정됩니다.
	Escrow            *PaymentEscrow `json:"escrow,omitempty"`
	Id                string         `json:"id"`
	IsCulturalExpense *bool          `json:"isCulturalExpense,omitempty"`
	MerchantId        string         `json:"merchantId"`

	// Method 결제수단 정보
	Method       *PaymentMethod    `json:"method,omitempty"`
	OrderName    string            `json:"orderName"`
	ProductCount *int32            `json:"productCount,omitempty"`
	Products     *[]PaymentProduct `json:"products,omitempty"`
	PromotionId  *string           `json:"promotionId,omitempty"`
	RequestedAt  time.Time         `json:"requestedAt"`

	// ScheduleId 결제 예약을 이용한 경우에만 존재
	ScheduleId      *string   `json:"scheduleId,omitempty"`
	Status          string    `json:"status"`
	StatusChangedAt time.Time `json:"statusChangedAt"`
	StoreId         string    `json:"storeId"`

	// TransactionId V1 결제 건의 경우 imp_uid에 해당합니다.
	TransactionId string    `json:"transactionId"`
	UpdatedAt     time.Time `json:"updatedAt"`

	// Version 포트원 버전
	Version  PortOneVersion    `json:"version"`
	Webhooks *[]PaymentWebhook `json:"webhooks,omitempty"`
}

// ReadyPaymentTransaction 준비 상태 건
type ReadyPaymentTransaction struct {
	// Amount 결제 금액 세부 정보
	Amount PaymentAmount `json:"amount"`

	// BillingKey 빌링키 결제인 경우에만 존재
	BillingKey *string `json:"billingKey,omitempty"`

	// Channel (결제, 본인인증 등에) 선택된 채널 정보
	Channel *SelectedChannel `json:"channel,omitempty"`

	// ChannelGroup 채널 그룹 정보
	ChannelGroup *ChannelGroupSummary `json:"channelGroup,omitempty"`

	// Country 국가
	Country *Country `json:"country,omitempty"`

	// Currency 통화 단위
	Currency   Currency `json:"currency"`
	CustomData *string  `json:"customData,omitempty"`

	// Customer 고객 정보
	Customer Customer `json:"customer"`

	// Escrow 에스크로 정보
	//
	// V1 결제 건의 경우 타입이 REGISTERED 로 고정됩니다.
	Escrow *PaymentEscrow `json:"escrow,omitempty"`

	// Id V1 결제 건의 경우 imp_uid에 해당합니다.
	Id                string `json:"id"`
	IsCulturalExpense *bool  `json:"isCulturalExpense,omitempty"`
	MerchantId        string `json:"merchantId"`

	// Method 결제수단 정보
	Method       *PaymentMethod    `json:"method,omitempty"`
	OrderName    string            `json:"orderName"`
	PaymentId    string            `json:"paymentId"`
	ProductCount *int32            `json:"productCount,omitempty"`
	Products     *[]PaymentProduct `json:"products,omitempty"`
	PromotionId  *string           `json:"promotionId,omitempty"`
	RequestedAt  time.Time         `json:"requestedAt"`

	// ScheduleId 결제 예약을 이용한 경우에만 존재
	ScheduleId      *string   `json:"scheduleId,omitempty"`
	Status          string    `json:"status"`
	StatusChangedAt time.Time `json:"statusChangedAt"`
	StoreId         string    `json:"storeId"`
	UpdatedAt       time.Time `json:"updatedAt"`

	// Version 포트원 버전
	Version  PortOneVersion    `json:"version"`
	Webhooks *[]PaymentWebhook `json:"webhooks,omitempty"`
}

// RecoverPlatformAdditionalFeePolicyError defines model for RecoverPlatformAdditionalFeePolicyError.
type RecoverPlatformAdditionalFeePolicyError struct {
	union json.RawMessage
}

// RecoverPlatformAdditionalFeePolicyResponse 추가 수수료 정책 복원 성공 응답
type RecoverPlatformAdditionalFeePolicyResponse struct {
	// AdditionalFeePolicy 추가 수수료 정책
	//
	// 추가 수수료 정책는 고객사의 주문건에 대한 중개수수료에 별도로 추가로 부여되는 수수료입니다. 대표적인 사용 예시로 풀필먼트 수수료, 로켓배송 수수료, 마케팅 채널 수수료등이 있습니다.
	AdditionalFeePolicy PlatformAdditionalFeePolicy `json:"additionalFeePolicy"`
}

// RecoverPlatformContractError defines model for RecoverPlatformContractError.
type RecoverPlatformContractError struct {
	union json.RawMessage
}

// RecoverPlatformContractResponse 계약 복원 성공 응답
type RecoverPlatformContractResponse struct {
	// Contract 계약
	//
	// 계약은 플랫폼 고객사가 파트너에게 정산해줄 대금과 정산일을 계산하는 데 적용되는 정보입니다.
	// 고객사의 플랫폼에서 재화 및 서비스를 판매하기 위한 중개수수료와 판매금에 대한 정산일로 구성되어 있습니다.
	Contract PlatformContract `json:"contract"`
}

// RecoverPlatformDiscountSharePolicyError defines model for RecoverPlatformDiscountSharePolicyError.
type RecoverPlatformDiscountSharePolicyError struct {
	union json.RawMessage
}

// RecoverPlatformDiscountSharePolicyResponse 할인 분담 복원 성공 응답
type RecoverPlatformDiscountSharePolicyResponse struct {
	// DiscountSharePolicy 할인 분담 정책
	//
	// 할인 분담은 고객사의 주문건에 쿠폰 및 포인트와 같은 할인금액이 적용될 때, 파트너 정산 시 할인금액에 대한 분담 정책을 가지는 객체입니다.
	// 할인 유형에 대한 아이디와 메모, 그리고 파트너 분담율을 가집니다.
	DiscountSharePolicy PlatformDiscountSharePolicy `json:"discountSharePolicy"`
}

// RecoverPlatformPartnerError defines model for RecoverPlatformPartnerError.
type RecoverPlatformPartnerError struct {
	union json.RawMessage
}

// RecoverPlatformPartnerResponse 파트너 복원 성공 응답
type RecoverPlatformPartnerResponse struct {
	// Partner 파트너
	//
	// 파트너는 고객사가 정산해주어야 할 대상입니다.
	// 기본 사업자 정보와 정산정보, 그리고 적용될 계약의 정보를 등록 및 관리할 수 있습니다.
	Partner PlatformPartner `json:"partner"`
}

// RefreshTokenBody 토큰 재발급을 위한 입력 정보
type RefreshTokenBody struct {
	RefreshToken string `json:"refreshToken"`
}

// RefreshTokenError defines model for RefreshTokenError.
type RefreshTokenError struct {
	union json.RawMessage
}

// RefreshTokenResponse 토큰 재발급 성공 응답
type RefreshTokenResponse struct {
	// AccessToken 하루의 유효기간을 가지고 있습니다.
	AccessToken string `json:"accessToken"`

	// RefreshToken 일주일의 유효기간을 가지고 있으며, 리프레시 토큰을 통해 유효기간이 연장된 새로운 엑세스 토큰을 발급받을 수 있습니다.
	// 동일한 유저가 로그인 또는 토큰 재발급을 진행할 때마다 기존에 발급된 리프레시 토큰은 즉시 만료되므로 API 사용에 유의해주세요.
	RefreshToken string `json:"refreshToken"`
}

// RegisterEscrowLogisticsBody 에스크로 배송 정보 등록 입력 정보
type RegisterEscrowLogisticsBody struct {
	// Logistics 배송정보
	Logistics PaymentLogistics  `json:"logistics"`
	Products  *[]PaymentProduct `json:"products,omitempty"`

	// Receiver 에스크로 수취인 정보
	Receiver *PaymentEscrowReceiverInput `json:"receiver,omitempty"`

	// SendEmail 에스크로 구매 확정 시 이메일로 알림을 보낼지 여부입니다.
	SendEmail *bool `json:"sendEmail,omitempty"`

	// Sender 에스크로 발송자 정보
	Sender *PaymentEscrowSenderInput `json:"sender,omitempty"`

	// StoreId 접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.
	StoreId *string `json:"storeId,omitempty"`
}

// RegisterStoreReceiptBody 영수증 내 하위 상점 거래 등록 정보
type RegisterStoreReceiptBody struct {
	Items   []RegisterStoreReceiptBodyItem `json:"items"`
	StoreId *string                        `json:"storeId,omitempty"`
}

// RegisterStoreReceiptBodyItem 하위 상점 거래 정보
type RegisterStoreReceiptBodyItem struct {
	// Currency 통화 단위
	Currency                        Currency `json:"currency"`
	StoreBusinessRegistrationNumber string   `json:"storeBusinessRegistrationNumber"`
	StoreName                       string   `json:"storeName"`
	SupplyAmount                    *int64   `json:"supplyAmount,omitempty"`
	TaxFreeAmount                   *int64   `json:"taxFreeAmount,omitempty"`
	TotalAmount                     int64    `json:"totalAmount"`
	VatAmount                       *int64   `json:"vatAmount,omitempty"`
}

// RegisterStoreReceiptError defines model for RegisterStoreReceiptError.
type RegisterStoreReceiptError struct {
	union json.RawMessage
}

// RegisterStoreReceiptResponse 영수증 내 하위 상점 거래 등록 응답
type RegisterStoreReceiptResponse struct {
	ReceiptUrl *string `json:"receiptUrl,omitempty"`
}

// RegisteredPaymentEscrow 배송 정보 등록 완료
type RegisteredPaymentEscrow struct {
	AppliedAt     *time.Time `json:"appliedAt,omitempty"`
	Company       string     `json:"company"`
	InvoiceNumber string     `json:"invoiceNumber"`
	SentAt        *time.Time `json:"sentAt,omitempty"`
	Status        string     `json:"status"`
}

// RejectConfirmedPaymentEscrow 구매 거절 확정
type RejectConfirmedPaymentEscrow struct {
	AppliedAt     *time.Time `json:"appliedAt,omitempty"`
	Company       string     `json:"company"`
	InvoiceNumber string     `json:"invoiceNumber"`
	SentAt        *time.Time `json:"sentAt,omitempty"`
	Status        string     `json:"status"`
}

// RejectedPaymentEscrow 구매 거절
type RejectedPaymentEscrow struct {
	AppliedAt     *time.Time `json:"appliedAt,omitempty"`
	Company       string     `json:"company"`
	InvoiceNumber string     `json:"invoiceNumber"`
	SentAt        *time.Time `json:"sentAt,omitempty"`
	Status        string     `json:"status"`
}

// RequestedPaymentCancellation 취소 요청 상태
type RequestedPaymentCancellation struct {
	CancelledAt           *time.Time `json:"cancelledAt,omitempty"`
	EasyPayDiscountAmount *int64     `json:"easyPayDiscountAmount,omitempty"`
	Id                    string     `json:"id"`
	PgCancellationId      *string    `json:"pgCancellationId,omitempty"`
	Reason                string     `json:"reason"`
	RequestedAt           time.Time  `json:"requestedAt"`
	Status                string     `json:"status"`
	TaxFreeAmount         int64      `json:"taxFreeAmount"`
	TotalAmount           int64      `json:"totalAmount"`
	Trigger               *Trigger   `json:"trigger,omitempty"`
	VatAmount             int64      `json:"vatAmount"`
}

// RescheduleAdditionalFeePolicyError defines model for RescheduleAdditionalFeePolicyError.
type RescheduleAdditionalFeePolicyError struct {
	union json.RawMessage
}

// RescheduleContractError defines model for RescheduleContractError.
type RescheduleContractError struct {
	union json.RawMessage
}

// RescheduleDiscountSharePolicyError defines model for RescheduleDiscountSharePolicyError.
type RescheduleDiscountSharePolicyError struct {
	union json.RawMessage
}

// ReschedulePartnerError defines model for ReschedulePartnerError.
type ReschedulePartnerError struct {
	union json.RawMessage
}

// ReschedulePlatformAdditionalFeePolicyBody 추가 수수료 정책 예약 업데이트 재설정을 위한 입력 정보
type ReschedulePlatformAdditionalFeePolicyBody struct {
	AppliedAt time.Time `json:"appliedAt"`

	// Update 추가 수수료 정책 업데이트를 위한 입력 정보
	//
	// 값이 명시하지 않은 필드는 업데이트되지 않습니다.
	Update UpdatePlatformAdditionalFeePolicyBody `json:"update"`
}

// ReschedulePlatformAdditionalFeePolicyResponse 추가 수수료 정책 예약 업데이트 재설정 성공 응답
type ReschedulePlatformAdditionalFeePolicyResponse struct {
	// ScheduledAdditionalFeePolicy 추가 수수료 정책
	//
	// 추가 수수료 정책는 고객사의 주문건에 대한 중개수수료에 별도로 추가로 부여되는 수수료입니다. 대표적인 사용 예시로 풀필먼트 수수료, 로켓배송 수수료, 마케팅 채널 수수료등이 있습니다.
	ScheduledAdditionalFeePolicy PlatformAdditionalFeePolicy `json:"scheduledAdditionalFeePolicy"`
}

// ReschedulePlatformContractBody 계약 예약 업데이트 재설정을 위한 입력 정보
type ReschedulePlatformContractBody struct {
	AppliedAt time.Time `json:"appliedAt"`

	// Update 계약 업데이트를 위한 입력 정보. 값이 명시되지 않은 필드는 업데이트되지 않습니다.
	//
	// 값이 명시되지 않은 필드는 업데이트되지 않습니다.
	Update UpdatePlatformContractBody `json:"update"`
}

// ReschedulePlatformContractResponse 계약 예약 업데이트 재설정 성공 응답
type ReschedulePlatformContractResponse struct {
	// ScheduledContract 계약
	//
	// 계약은 플랫폼 고객사가 파트너에게 정산해줄 대금과 정산일을 계산하는 데 적용되는 정보입니다.
	// 고객사의 플랫폼에서 재화 및 서비스를 판매하기 위한 중개수수료와 판매금에 대한 정산일로 구성되어 있습니다.
	ScheduledContract PlatformContract `json:"scheduledContract"`
}

// ReschedulePlatformDiscountSharePolicyBody 할인 분담 정책 예약 업데이트 재설정을 위한 입력 정보
type ReschedulePlatformDiscountSharePolicyBody struct {
	AppliedAt time.Time `json:"appliedAt"`

	// Update 할인 분담 정책 업데이트를 위한 입력 정보
	//
	// 값이 명시되지 않은 필드는 업데이트하지 않습니다.
	Update UpdatePlatformDiscountSharePolicyBody `json:"update"`
}

// ReschedulePlatformDiscountSharePolicyResponse 할인 분담 정책 예약 업데이트 재설정 성공 응답
type ReschedulePlatformDiscountSharePolicyResponse struct {
	// ScheduledDiscountSharePolicy 할인 분담 정책
	//
	// 할인 분담은 고객사의 주문건에 쿠폰 및 포인트와 같은 할인금액이 적용될 때, 파트너 정산 시 할인금액에 대한 분담 정책을 가지는 객체입니다.
	// 할인 유형에 대한 아이디와 메모, 그리고 파트너 분담율을 가집니다.
	ScheduledDiscountSharePolicy PlatformDiscountSharePolicy `json:"scheduledDiscountSharePolicy"`
}

// ReschedulePlatformPartnerBody 파트너 예약 업데이트 재설정을 위한 입력 정보
type ReschedulePlatformPartnerBody struct {
	AppliedAt time.Time `json:"appliedAt"`

	// Update 파트너 업데이트를 위한 입력 정보
	//
	// 값이 명시되지 않은 필드는 업데이트되지 않습니다.
	Update UpdatePlatformPartnerBody `json:"update"`
}

// ReschedulePlatformPartnerResponse 파트너 예약 업데이트 재설정 성공 응답
type ReschedulePlatformPartnerResponse struct {
	// ScheduledPartner 파트너
	//
	// 파트너는 고객사가 정산해주어야 할 대상입니다.
	// 기본 사업자 정보와 정산정보, 그리고 적용될 계약의 정보를 등록 및 관리할 수 있습니다.
	ScheduledPartner PlatformPartner `json:"scheduledPartner"`
}

// ResendIdentityVerificationError defines model for ResendIdentityVerificationError.
type ResendIdentityVerificationError struct {
	union json.RawMessage
}

// ResendIdentityVerificationResponse 본인인증 요청 재전송 성공 응답
type ResendIdentityVerificationResponse = map[string]interface{}

// ResendWebhookBody 웹훅 재발송을 위한 입력 정보
type ResendWebhookBody struct {
	// StoreId 접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.
	StoreId *string `json:"storeId,omitempty"`

	// WebhookId 입력하지 않으면 결제 건의 가장 최근 웹훅 아이디가 기본 적용됩니다
	WebhookId *string `json:"webhookId,omitempty"`
}

// ResendWebhookError defines model for ResendWebhookError.
type ResendWebhookError struct {
	union json.RawMessage
}

// ResendWebhookResponse 웹훅 재발송 응답 정보
type ResendWebhookResponse struct {
	// Webhook 성공 웹훅 내역
	Webhook PaymentWebhook `json:"webhook"`
}

// RevokePaymentSchedulesBody 결제 예약 건 취소 요청 입력 정보
type RevokePaymentSchedulesBody struct {
	BillingKey  *string   `json:"billingKey,omitempty"`
	ScheduleIds *[]string `json:"scheduleIds,omitempty"`

	// StoreId 접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.
	StoreId *string `json:"storeId,omitempty"`
}

// RevokePaymentSchedulesError defines model for RevokePaymentSchedulesError.
type RevokePaymentSchedulesError struct {
	union json.RawMessage
}

// RevokePaymentSchedulesResponse 결제 예약 건 취소 성공 응답
type RevokePaymentSchedulesResponse struct {
	RevokedAt          *time.Time `json:"revokedAt,omitempty"`
	RevokedScheduleIds []string   `json:"revokedScheduleIds"`
}

// RevokedPaymentSchedule 결제 예약 취소 상태
type RevokedPaymentSchedule struct {
	BillingKey string    `json:"billingKey"`
	CreatedAt  time.Time `json:"createdAt"`

	// Currency 통화 단위
	Currency   Currency `json:"currency"`
	CustomData string   `json:"customData"`

	// Customer 고객 정보
	Customer          Customer          `json:"customer"`
	Id                string            `json:"id"`
	InstallmentMonth  *int32            `json:"installmentMonth,omitempty"`
	IsCulturalExpense bool              `json:"isCulturalExpense"`
	IsEscrow          bool              `json:"isEscrow"`
	MerchantId        string            `json:"merchantId"`
	NoticeUrls        *[]string         `json:"noticeUrls,omitempty"`
	OrderName         string            `json:"orderName"`
	PaymentId         string            `json:"paymentId"`
	Products          *[]PaymentProduct `json:"products,omitempty"`
	RevokedAt         time.Time         `json:"revokedAt"`
	Status            string            `json:"status"`
	StoreId           string            `json:"storeId"`
	TaxFreeAmount     *int64            `json:"taxFreeAmount,omitempty"`
	TimeToPay         time.Time         `json:"timeToPay"`
	TotalAmount       int64             `json:"totalAmount"`
	VatAmount         *int64            `json:"vatAmount,omitempty"`
}

// ScheduleAdditionalFeePolicyError defines model for ScheduleAdditionalFeePolicyError.
type ScheduleAdditionalFeePolicyError struct {
	union json.RawMessage
}

// ScheduleContractError defines model for ScheduleContractError.
type ScheduleContractError struct {
	union json.RawMessage
}

// ScheduleDiscountSharePolicyError defines model for ScheduleDiscountSharePolicyError.
type ScheduleDiscountSharePolicyError struct {
	union json.RawMessage
}

// SchedulePartnerError defines model for SchedulePartnerError.
type SchedulePartnerError struct {
	union json.RawMessage
}

// SchedulePlatformAdditionalFeePolicyBody 추가 수수료 정책 업데이트 예약을 위한 입력 정보
type SchedulePlatformAdditionalFeePolicyBody struct {
	AppliedAt time.Time `json:"appliedAt"`

	// Update 추가 수수료 정책 업데이트를 위한 입력 정보
	//
	// 값이 명시하지 않은 필드는 업데이트되지 않습니다.
	Update UpdatePlatformAdditionalFeePolicyBody `json:"update"`
}

// SchedulePlatformAdditionalFeePolicyResponse 추가 수수료 정책 업데이트 예약 성공 응답
type SchedulePlatformAdditionalFeePolicyResponse struct {
	// ScheduledAdditionalFeePolicy 추가 수수료 정책
	//
	// 추가 수수료 정책는 고객사의 주문건에 대한 중개수수료에 별도로 추가로 부여되는 수수료입니다. 대표적인 사용 예시로 풀필먼트 수수료, 로켓배송 수수료, 마케팅 채널 수수료등이 있습니다.
	ScheduledAdditionalFeePolicy PlatformAdditionalFeePolicy `json:"scheduledAdditionalFeePolicy"`
}

// SchedulePlatformContractBody 계약 업데이트 예약을 위한 입력 정보
type SchedulePlatformContractBody struct {
	AppliedAt time.Time `json:"appliedAt"`

	// Update 계약 업데이트를 위한 입력 정보. 값이 명시되지 않은 필드는 업데이트되지 않습니다.
	//
	// 값이 명시되지 않은 필드는 업데이트되지 않습니다.
	Update UpdatePlatformContractBody `json:"update"`
}

// SchedulePlatformContractResponse 계약 업데이트 예약 성공 응답
type SchedulePlatformContractResponse struct {
	// ScheduledContract 계약
	//
	// 계약은 플랫폼 고객사가 파트너에게 정산해줄 대금과 정산일을 계산하는 데 적용되는 정보입니다.
	// 고객사의 플랫폼에서 재화 및 서비스를 판매하기 위한 중개수수료와 판매금에 대한 정산일로 구성되어 있습니다.
	ScheduledContract PlatformContract `json:"scheduledContract"`
}

// SchedulePlatformDiscountSharePolicyBody 할인 분담 정책 업데이트 예약을 위한 입력 정보
type SchedulePlatformDiscountSharePolicyBody struct {
	AppliedAt time.Time `json:"appliedAt"`

	// Update 할인 분담 정책 업데이트를 위한 입력 정보
	//
	// 값이 명시되지 않은 필드는 업데이트하지 않습니다.
	Update UpdatePlatformDiscountSharePolicyBody `json:"update"`
}

// SchedulePlatformDiscountSharePolicyResponse 할인 분담 정책 업데이트 예약 성공 응답
type SchedulePlatformDiscountSharePolicyResponse struct {
	// ScheduledDiscountSharePolicy 할인 분담 정책
	//
	// 할인 분담은 고객사의 주문건에 쿠폰 및 포인트와 같은 할인금액이 적용될 때, 파트너 정산 시 할인금액에 대한 분담 정책을 가지는 객체입니다.
	// 할인 유형에 대한 아이디와 메모, 그리고 파트너 분담율을 가집니다.
	ScheduledDiscountSharePolicy PlatformDiscountSharePolicy `json:"scheduledDiscountSharePolicy"`
}

// SchedulePlatformPartnerBody 파트너 업데이트 예약을 위한 입력 정보
type SchedulePlatformPartnerBody struct {
	AppliedAt time.Time `json:"appliedAt"`

	// Update 파트너 업데이트를 위한 입력 정보
	//
	// 값이 명시되지 않은 필드는 업데이트되지 않습니다.
	Update UpdatePlatformPartnerBody `json:"update"`
}

// SchedulePlatformPartnerResponse 파트너 업데이트 예약 성공 응답
type SchedulePlatformPartnerResponse struct {
	// ScheduledPartner 파트너
	//
	// 파트너는 고객사가 정산해주어야 할 대상입니다.
	// 기본 사업자 정보와 정산정보, 그리고 적용될 계약의 정보를 등록 및 관리할 수 있습니다.
	ScheduledPartner PlatformPartner `json:"scheduledPartner"`
}

// SchedulePlatformPartnersBody defines model for SchedulePlatformPartnersBody.
type SchedulePlatformPartnersBody struct {
	AppliedAt time.Time `json:"appliedAt"`

	// Filter 파트너 필터 입력 정보
	Filter *PlatformPartnerFilterInput        `json:"filter,omitempty"`
	Update SchedulePlatformPartnersBodyUpdate `json:"update"`
}

// SchedulePlatformPartnersBodyUpdate defines model for SchedulePlatformPartnersBodyUpdate.
type SchedulePlatformPartnersBodyUpdate struct {
	// Account 파트너 계좌 업데이트를 위한 입력 정보
	Account *SchedulePlatformPartnersBodyUpdateAccount `json:"account,omitempty"`

	// Contact 파트너 업데이트를 위한 유형별 추가 정보
	Contact           *SchedulePlatformPartnersBodyUpdateContact `json:"contact,omitempty"`
	DefaultContractId *string                                    `json:"defaultContractId,omitempty"`
	Memo              *string                                    `json:"memo,omitempty"`
	Name              *string                                    `json:"name,omitempty"`
	Tags              *[]string                                  `json:"tags,omitempty"`

	// Type 파트너 유형별 정보 업데이트를 위한 입력 정보
	//
	// 파트너 유형별 추가 정보를 수정합니다.
	// 최초 생성된 유형 내에서 세부 정보만 수정할 수 있고 파트너의 유형 자체를 수정할 수는 없습니다.
	Type                  *SchedulePlatformPartnersBodyUpdateType `json:"type,omitempty"`
	UserDefinedProperties *PlatformProperties                     `json:"userDefinedProperties,omitempty"`
}

// SchedulePlatformPartnersBodyUpdateAccount 파트너 계좌 업데이트를 위한 입력 정보
type SchedulePlatformPartnersBodyUpdateAccount struct {
	AccountVerificationId *string `json:"accountVerificationId,omitempty"`

	// Bank 은행
	Bank Bank `json:"bank"`

	// Currency 통화 단위
	Currency Currency `json:"currency"`
	Holder   string   `json:"holder"`
	Number   string   `json:"number"`
}

// SchedulePlatformPartnersBodyUpdateContact 파트너 업데이트를 위한 유형별 추가 정보
type SchedulePlatformPartnersBodyUpdateContact struct {
	Email       *string `json:"email,omitempty"`
	Name        *string `json:"name,omitempty"`
	PhoneNumber *string `json:"phoneNumber,omitempty"`
}

// SchedulePlatformPartnersBodyUpdateType 파트너 유형별 정보 업데이트를 위한 입력 정보
//
// 파트너 유형별 추가 정보를 수정합니다.
// 최초 생성된 유형 내에서 세부 정보만 수정할 수 있고 파트너의 유형 자체를 수정할 수는 없습니다.
type SchedulePlatformPartnersBodyUpdateType struct {
	Business    *SchedulePlatformPartnersBodyUpdateTypeBusiness    `json:"business,omitempty"`
	NonWhtPayer *SchedulePlatformPartnersBodyUpdateTypeNonWhtPayer `json:"nonWhtPayer,omitempty"`
	WhtPayer    *SchedulePlatformPartnersBodyUpdateTypeWhtPayer    `json:"whtPayer,omitempty"`
}

// SchedulePlatformPartnersBodyUpdateTypeBusiness defines model for SchedulePlatformPartnersBodyUpdateTypeBusiness.
type SchedulePlatformPartnersBodyUpdateTypeBusiness struct {
	BusinessClass              *string `json:"businessClass,omitempty"`
	BusinessRegistrationNumber *string `json:"businessRegistrationNumber,omitempty"`
	BusinessType               *string `json:"businessType,omitempty"`
	CompanyAddress             *string `json:"companyAddress,omitempty"`
	CompanyName                *string `json:"companyName,omitempty"`
	CompanyVerificationId      *string `json:"companyVerificationId,omitempty"`
	RepresentativeName         *string `json:"representativeName,omitempty"`

	// TaxationType 플랫폼 파트너 과세 유형
	TaxationType *PlatformPartnerTaxationType `json:"taxationType,omitempty"`
}

// SchedulePlatformPartnersBodyUpdateTypeNonWhtPayer defines model for SchedulePlatformPartnersBodyUpdateTypeNonWhtPayer.
type SchedulePlatformPartnersBodyUpdateTypeNonWhtPayer struct {
	// Birthdate 날짜를 나타내는 문자열로, `yyyy-MM-dd` 형식을 따릅니다.
	Birthdate *string `json:"birthdate,omitempty"`
}

// SchedulePlatformPartnersBodyUpdateTypeWhtPayer defines model for SchedulePlatformPartnersBodyUpdateTypeWhtPayer.
type SchedulePlatformPartnersBodyUpdateTypeWhtPayer struct {
	// Birthdate 날짜를 나타내는 문자열로, `yyyy-MM-dd` 형식을 따릅니다.
	Birthdate *string `json:"birthdate,omitempty"`
}

// SchedulePlatformPartnersError defines model for SchedulePlatformPartnersError.
type SchedulePlatformPartnersError struct {
	union json.RawMessage
}

// SchedulePlatformPartnersResponse defines model for SchedulePlatformPartnersResponse.
type SchedulePlatformPartnersResponse = map[string]interface{}

// ScheduledPaymentSchedule 결제 예약 완료 상태
type ScheduledPaymentSchedule struct {
	BillingKey string    `json:"billingKey"`
	CreatedAt  time.Time `json:"createdAt"`

	// Currency 통화 단위
	Currency   Currency `json:"currency"`
	CustomData string   `json:"customData"`

	// Customer 고객 정보
	Customer          Customer          `json:"customer"`
	Id                string            `json:"id"`
	InstallmentMonth  *int32            `json:"installmentMonth,omitempty"`
	IsCulturalExpense bool              `json:"isCulturalExpense"`
	IsEscrow          bool              `json:"isEscrow"`
	MerchantId        string            `json:"merchantId"`
	NoticeUrls        *[]string         `json:"noticeUrls,omitempty"`
	OrderName         string            `json:"orderName"`
	PaymentId         string            `json:"paymentId"`
	Products          *[]PaymentProduct `json:"products,omitempty"`
	Status            string            `json:"status"`
	StoreId           string            `json:"storeId"`
	TaxFreeAmount     *int64            `json:"taxFreeAmount,omitempty"`
	TimeToPay         time.Time         `json:"timeToPay"`
	TotalAmount       int64             `json:"totalAmount"`
	VatAmount         *int64            `json:"vatAmount,omitempty"`
}

// SelectedChannel (결제, 본인인증 등에) 선택된 채널 정보
type SelectedChannel struct {
	Id           *string `json:"id,omitempty"`
	Key          *string `json:"key,omitempty"`
	Name         *string `json:"name,omitempty"`
	PgMerchantId string  `json:"pgMerchantId"`

	// PgProvider PG사 결제 모듈
	PgProvider PgProvider `json:"pgProvider"`

	// Type 채널 타입
	Type SelectedChannelType `json:"type"`
}

// SelectedChannelType 채널 타입
type SelectedChannelType string

// SendIdentityVerificationBody 본인인증 요청을 위한 입력 정보
type SendIdentityVerificationBody struct {
	Bypass     *map[string]interface{} `json:"bypass,omitempty"`
	ChannelKey string                  `json:"channelKey"`
	CustomData *string                 `json:"customData,omitempty"`

	// Customer 본인인증 요청을 위한 고객 정보
	Customer SendIdentityVerificationBodyCustomer `json:"customer"`

	// Method 본인인증 방식
	Method IdentityVerificationMethod `json:"method"`

	// Operator 본인인증 통신사
	Operator IdentityVerificationOperator `json:"operator"`

	// StoreId 접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.
	StoreId *string `json:"storeId,omitempty"`
}

// SendIdentityVerificationBodyCustomer 본인인증 요청을 위한 고객 정보
type SendIdentityVerificationBodyCustomer struct {
	Id *string `json:"id,omitempty"`

	// IdentityNumber SMS 방식의 경우 필수로 입력합니다.
	IdentityNumber *string `json:"identityNumber,omitempty"`

	// IpAddress 고객의 요청 속도 제한에 사용됩니다.
	IpAddress string `json:"ipAddress"`
	Name      string `json:"name"`

	// PhoneNumber 특수 문자(-) 없이 숫자만 입력합니다.
	PhoneNumber string `json:"phoneNumber"`
}

// SendIdentityVerificationError defines model for SendIdentityVerificationError.
type SendIdentityVerificationError struct {
	union json.RawMessage
}

// SendIdentityVerificationResponse 본인인증 요청 전송 성공 응답
type SendIdentityVerificationResponse = map[string]interface{}

// SeparatedAddress 분리 형식 주소
//
// 한 줄 형식 주소와 분리 형식 주소 모두 존재합니다.
// 한 줄 형식 주소는 분리 형식 주소를 이어 붙인 형태로 생성됩니다.
type SeparatedAddress struct {
	AddressLine1 string  `json:"addressLine1"`
	AddressLine2 string  `json:"addressLine2"`
	City         *string `json:"city,omitempty"`

	// Country 국가
	Country  *Country `json:"country,omitempty"`
	OneLine  string   `json:"oneLine"`
	Province *string  `json:"province,omitempty"`
	Type     string   `json:"type"`
}

// SeparatedAddressInput 분리 형식 주소 입력 정보
type SeparatedAddressInput struct {
	AddressLine1 string  `json:"addressLine1"`
	AddressLine2 string  `json:"addressLine2"`
	City         *string `json:"city,omitempty"`

	// Country 국가
	Country  *Country `json:"country,omitempty"`
	Province *string  `json:"province,omitempty"`
}

// SortOrder 정렬 방식
type SortOrder string

// StartedPaymentSchedule 결제 시작 상태
type StartedPaymentSchedule struct {
	BillingKey string    `json:"billingKey"`
	CreatedAt  time.Time `json:"createdAt"`

	// Currency 통화 단위
	Currency   Currency `json:"currency"`
	CustomData string   `json:"customData"`

	// Customer 고객 정보
	Customer          Customer          `json:"customer"`
	Id                string            `json:"id"`
	InstallmentMonth  *int32            `json:"installmentMonth,omitempty"`
	IsCulturalExpense bool              `json:"isCulturalExpense"`
	IsEscrow          bool              `json:"isEscrow"`
	MerchantId        string            `json:"merchantId"`
	NoticeUrls        *[]string         `json:"noticeUrls,omitempty"`
	OrderName         string            `json:"orderName"`
	PaymentId         string            `json:"paymentId"`
	Products          *[]PaymentProduct `json:"products,omitempty"`
	StartedAt         time.Time         `json:"startedAt"`
	Status            string            `json:"status"`
	StoreId           string            `json:"storeId"`
	TaxFreeAmount     *int64            `json:"taxFreeAmount,omitempty"`
	TimeToPay         time.Time         `json:"timeToPay"`
	TotalAmount       int64             `json:"totalAmount"`
	VatAmount         *int64            `json:"vatAmount,omitempty"`
}

// SucceededPaymentCancellation 취소 완료 상태
type SucceededPaymentCancellation struct {
	CancelledAt           *time.Time `json:"cancelledAt,omitempty"`
	EasyPayDiscountAmount *int64     `json:"easyPayDiscountAmount,omitempty"`
	Id                    string     `json:"id"`
	PgCancellationId      *string    `json:"pgCancellationId,omitempty"`
	Reason                string     `json:"reason"`
	ReceiptUrl            *string    `json:"receiptUrl,omitempty"`
	RequestedAt           time.Time  `json:"requestedAt"`
	Status                string     `json:"status"`
	TaxFreeAmount         int64      `json:"taxFreeAmount"`
	TotalAmount           int64      `json:"totalAmount"`
	Trigger               *Trigger   `json:"trigger,omitempty"`
	VatAmount             int64      `json:"vatAmount"`
}

// SucceededPaymentSchedule 결제 성공 상태
type SucceededPaymentSchedule struct {
	BillingKey  string    `json:"billingKey"`
	CompletedAt time.Time `json:"completedAt"`
	CreatedAt   time.Time `json:"createdAt"`

	// Currency 통화 단위
	Currency   Currency `json:"currency"`
	CustomData string   `json:"customData"`

	// Customer 고객 정보
	Customer          Customer          `json:"customer"`
	Id                string            `json:"id"`
	InstallmentMonth  *int32            `json:"installmentMonth,omitempty"`
	IsCulturalExpense bool              `json:"isCulturalExpense"`
	IsEscrow          bool              `json:"isEscrow"`
	MerchantId        string            `json:"merchantId"`
	NoticeUrls        *[]string         `json:"noticeUrls,omitempty"`
	OrderName         string            `json:"orderName"`
	PaymentId         string            `json:"paymentId"`
	Products          *[]PaymentProduct `json:"products,omitempty"`
	StartedAt         time.Time         `json:"startedAt"`
	Status            string            `json:"status"`
	StoreId           string            `json:"storeId"`
	TaxFreeAmount     *int64            `json:"taxFreeAmount,omitempty"`
	TimeToPay         time.Time         `json:"timeToPay"`
	TotalAmount       int64             `json:"totalAmount"`
	VatAmount         *int64            `json:"vatAmount,omitempty"`
}

// SumOfPartsExceedsCancelAmountError 면세 금액 등 하위 항목들의 합이 전체 취소 금액을 초과한 경우
type SumOfPartsExceedsCancelAmountError struct {
	Message *string `json:"message,omitempty"`
	Type    string  `json:"type"`
}

// SumOfPartsExceedsTotalAmountError 면세 금액 등 하위 항목들의 합이 전체 결제 금액을 초과한 경우
type SumOfPartsExceedsTotalAmountError struct {
	Message *string `json:"message,omitempty"`
	Type    string  `json:"type"`
}

// TransferParameters defines model for TransferParameters.
type TransferParameters map[string]PlatformSettlementParameterValue

// Trigger defines model for Trigger.
type Trigger string

// UnauthorizedError 인증 정보가 올바르지 않은 경우
type UnauthorizedError struct {
	Message *string `json:"message,omitempty"`
	Type    string  `json:"type"`
}

// UpdatePlatformAdditionalFeePolicyBody 추가 수수료 정책 업데이트를 위한 입력 정보
//
// 값이 명시하지 않은 필드는 업데이트되지 않습니다.
type UpdatePlatformAdditionalFeePolicyBody struct {
	// Fee 수수료 계산 방식을 특정하기 위한 입력 정보
	//
	// 정률 수수료를 설정하고 싶은 경우 `fixedRate` 필드에, 정액 수수료를 설정하고 싶은 경우 `fixedAmount` 필드에 값을 명시해 요청합니다.
	// 두 필드 모두 값이 들어있지 않은 경우 요청이 거절됩니다.
	Fee  *PlatformFeeInput `json:"fee,omitempty"`
	Memo *string           `json:"memo,omitempty"`
	Name *string           `json:"name,omitempty"`

	// VatPayer 금액 부담 주체
	//
	// 플랫폼에서 발생한 결제 수수료, 부가세 등 금액을 부담하는 주체를 나타냅니다.
	VatPayer *PlatformPayer `json:"vatPayer,omitempty"`
}

// UpdatePlatformAdditionalFeePolicyError defines model for UpdatePlatformAdditionalFeePolicyError.
type UpdatePlatformAdditionalFeePolicyError struct {
	union json.RawMessage
}

// UpdatePlatformAdditionalFeePolicyResponse 추가 수수료 정책 업데이트 성공 응답
type UpdatePlatformAdditionalFeePolicyResponse struct {
	// AdditionalFeePolicy 추가 수수료 정책
	//
	// 추가 수수료 정책는 고객사의 주문건에 대한 중개수수료에 별도로 추가로 부여되는 수수료입니다. 대표적인 사용 예시로 풀필먼트 수수료, 로켓배송 수수료, 마케팅 채널 수수료등이 있습니다.
	AdditionalFeePolicy PlatformAdditionalFeePolicy `json:"additionalFeePolicy"`
}

// UpdatePlatformBody 플랫폼 업데이트를 위한 입력 정보
//
// 값이 명시되지 않은 필드는 업데이트하지 않습니다.
type UpdatePlatformBody struct {
	// RoundType 금액에 대한 소수점 처리 방식
	RoundType *PlatformRoundType `json:"roundType,omitempty"`

	// SettlementFormula 플랫폼 업데이트 시 변경할 계산식 정보
	//
	// 값이 명시되지 않은 필드는 업데이트하지 않습니다.
	SettlementFormula *UpdatePlatformBodySettlementFormula `json:"settlementFormula,omitempty"`

	// SettlementRule 플랫폼 업데이트 시 변경할 정산 규칙 정보
	//
	// 값이 명시되지 않은 필드는 업데이트하지 않습니다.
	SettlementRule *UpdatePlatformBodySettlementRule `json:"settlementRule,omitempty"`
}

// UpdatePlatformBodySettlementFormula 플랫폼 업데이트 시 변경할 계산식 정보
//
// 값이 명시되지 않은 필드는 업데이트하지 않습니다.
type UpdatePlatformBodySettlementFormula struct {
	AdditionalFee *string `json:"additionalFee,omitempty"`
	DiscountShare *string `json:"discountShare,omitempty"`
	PlatformFee   *string `json:"platformFee,omitempty"`
}

// UpdatePlatformBodySettlementRule 플랫폼 업데이트 시 변경할 정산 규칙 정보
//
// 값이 명시되지 않은 필드는 업데이트하지 않습니다.
type UpdatePlatformBodySettlementRule struct {
	AdjustSettlementDateAfterHolidayIfEarlier *bool `json:"adjustSettlementDateAfterHolidayIfEarlier,omitempty"`
	SubtractWhtInPayoutAmount                 *bool `json:"subtractWhtInPayoutAmount,omitempty"`
	SupportsMultipleOrderTransfersPerPartner  *bool `json:"supportsMultipleOrderTransfersPerPartner,omitempty"`
}

// UpdatePlatformContractBody 계약 업데이트를 위한 입력 정보. 값이 명시되지 않은 필드는 업데이트되지 않습니다.
//
// 값이 명시되지 않은 필드는 업데이트되지 않습니다.
type UpdatePlatformContractBody struct {
	Memo *string `json:"memo,omitempty"`
	Name *string `json:"name,omitempty"`

	// PlatformFee 수수료 계산 방식을 특정하기 위한 입력 정보
	//
	// 정률 수수료를 설정하고 싶은 경우 `fixedRate` 필드에, 정액 수수료를 설정하고 싶은 경우 `fixedAmount` 필드에 값을 명시해 요청합니다.
	// 두 필드 모두 값이 들어있지 않은 경우 요청이 거절됩니다.
	PlatformFee *PlatformFeeInput `json:"platformFee,omitempty"`

	// PlatformFeeVatPayer 금액 부담 주체
	//
	// 플랫폼에서 발생한 결제 수수료, 부가세 등 금액을 부담하는 주체를 나타냅니다.
	PlatformFeeVatPayer *PlatformPayer `json:"platformFeeVatPayer,omitempty"`

	// SettlementCycle 플랫폼 정산 주기 입력 정보
	SettlementCycle          *PlatformSettlementCycleInput `json:"settlementCycle,omitempty"`
	SubtractPaymentVatAmount *bool                         `json:"subtractPaymentVatAmount,omitempty"`
}

// UpdatePlatformContractError defines model for UpdatePlatformContractError.
type UpdatePlatformContractError struct {
	union json.RawMessage
}

// UpdatePlatformContractResponse 계약 객체 업데이트 성공 응답
type UpdatePlatformContractResponse struct {
	// Contract 계약
	//
	// 계약은 플랫폼 고객사가 파트너에게 정산해줄 대금과 정산일을 계산하는 데 적용되는 정보입니다.
	// 고객사의 플랫폼에서 재화 및 서비스를 판매하기 위한 중개수수료와 판매금에 대한 정산일로 구성되어 있습니다.
	Contract PlatformContract `json:"contract"`
}

// UpdatePlatformDiscountSharePolicyBody 할인 분담 정책 업데이트를 위한 입력 정보
//
// 값이 명시되지 않은 필드는 업데이트하지 않습니다.
type UpdatePlatformDiscountSharePolicyBody struct {
	Memo *string `json:"memo,omitempty"`
	Name *string `json:"name,omitempty"`

	// PartnerShareRate 파트너가 분담할 할인금액의 비율을 의미하는 밀리 퍼센트 단위 (10^-5) 의 음이 아닌 정수이며, 파트너가 부담할 금액은 `할인금액 * partnerShareRate * 10^5` 로 책정합니다.
	PartnerShareRate *int32 `json:"partnerShareRate,omitempty"`
}

// UpdatePlatformDiscountSharePolicyError defines model for UpdatePlatformDiscountSharePolicyError.
type UpdatePlatformDiscountSharePolicyError struct {
	union json.RawMessage
}

// UpdatePlatformDiscountSharePolicyResponse 할인 분담 정책 업데이트 성공 응답
type UpdatePlatformDiscountSharePolicyResponse struct {
	// DiscountSharePolicy 할인 분담 정책
	//
	// 할인 분담은 고객사의 주문건에 쿠폰 및 포인트와 같은 할인금액이 적용될 때, 파트너 정산 시 할인금액에 대한 분담 정책을 가지는 객체입니다.
	// 할인 유형에 대한 아이디와 메모, 그리고 파트너 분담율을 가집니다.
	DiscountSharePolicy PlatformDiscountSharePolicy `json:"discountSharePolicy"`
}

// UpdatePlatformError defines model for UpdatePlatformError.
type UpdatePlatformError struct {
	union json.RawMessage
}

// UpdatePlatformPartnerBody 파트너 업데이트를 위한 입력 정보
//
// 값이 명시되지 않은 필드는 업데이트되지 않습니다.
type UpdatePlatformPartnerBody struct {
	// Account 파트너 계좌 업데이트를 위한 입력 정보
	Account *UpdatePlatformPartnerBodyAccount `json:"account,omitempty"`

	// Contact 파트너 담당자 업데이트를 위한 정보
	Contact           *UpdatePlatformPartnerBodyContact `json:"contact,omitempty"`
	DefaultContractId *string                           `json:"defaultContractId,omitempty"`
	Memo              *string                           `json:"memo,omitempty"`
	Name              *string                           `json:"name,omitempty"`
	Tags              *[]string                         `json:"tags,omitempty"`

	// Type 파트너 업데이트를 위한 유형별 추가 정보
	//
	// 파트너 유형별 추가 정보를 수정합니다.
	// 기존과 다른 파트너 유형 정보가 입력된 경우, 파트너의 유형 자체가 변경됩니다.
	Type                  *UpdatePlatformPartnerBodyType `json:"type,omitempty"`
	UserDefinedProperties *PlatformProperties            `json:"userDefinedProperties,omitempty"`
}

// UpdatePlatformPartnerBodyAccount 파트너 계좌 업데이트를 위한 입력 정보
type UpdatePlatformPartnerBodyAccount struct {
	AccountVerificationId *string `json:"accountVerificationId,omitempty"`

	// Bank 은행
	Bank Bank `json:"bank"`

	// Currency 통화 단위
	Currency Currency `json:"currency"`
	Holder   string   `json:"holder"`
	Number   string   `json:"number"`
}

// UpdatePlatformPartnerBodyContact 파트너 담당자 업데이트를 위한 정보
type UpdatePlatformPartnerBodyContact struct {
	Email       *string `json:"email,omitempty"`
	Name        *string `json:"name,omitempty"`
	PhoneNumber *string `json:"phoneNumber,omitempty"`
}

// UpdatePlatformPartnerBodyType 파트너 업데이트를 위한 유형별 추가 정보
//
// 파트너 유형별 추가 정보를 수정합니다.
// 기존과 다른 파트너 유형 정보가 입력된 경우, 파트너의 유형 자체가 변경됩니다.
type UpdatePlatformPartnerBodyType struct {
	Business    *UpdatePlatformPartnerBodyTypeBusiness    `json:"business,omitempty"`
	NonWhtPayer *UpdatePlatformPartnerBodyTypeNonWhtPayer `json:"nonWhtPayer,omitempty"`
	WhtPayer    *UpdatePlatformPartnerBodyTypeWhtPayer    `json:"whtPayer,omitempty"`
}

// UpdatePlatformPartnerBodyTypeBusiness defines model for UpdatePlatformPartnerBodyTypeBusiness.
type UpdatePlatformPartnerBodyTypeBusiness struct {
	BusinessClass              *string `json:"businessClass,omitempty"`
	BusinessRegistrationNumber *string `json:"businessRegistrationNumber,omitempty"`
	BusinessType               *string `json:"businessType,omitempty"`
	CompanyAddress             *string `json:"companyAddress,omitempty"`
	CompanyName                *string `json:"companyName,omitempty"`
	CompanyVerificationId      *string `json:"companyVerificationId,omitempty"`
	RepresentativeName         *string `json:"representativeName,omitempty"`

	// TaxationType 플랫폼 파트너 과세 유형
	TaxationType *PlatformPartnerTaxationType `json:"taxationType,omitempty"`
}

// UpdatePlatformPartnerBodyTypeNonWhtPayer defines model for UpdatePlatformPartnerBodyTypeNonWhtPayer.
type UpdatePlatformPartnerBodyTypeNonWhtPayer struct {
	// Birthdate 날짜를 나타내는 문자열로, `yyyy-MM-dd` 형식을 따릅니다.
	Birthdate *string `json:"birthdate,omitempty"`
}

// UpdatePlatformPartnerBodyTypeWhtPayer defines model for UpdatePlatformPartnerBodyTypeWhtPayer.
type UpdatePlatformPartnerBodyTypeWhtPayer struct {
	// Birthdate 날짜를 나타내는 문자열로, `yyyy-MM-dd` 형식을 따릅니다.
	Birthdate *string `json:"birthdate,omitempty"`
}

// UpdatePlatformPartnerError defines model for UpdatePlatformPartnerError.
type UpdatePlatformPartnerError struct {
	union json.RawMessage
}

// UpdatePlatformPartnerResponse 파트너 업데이트 성공 응답
type UpdatePlatformPartnerResponse struct {
	// Partner 파트너
	//
	// 파트너는 고객사가 정산해주어야 할 대상입니다.
	// 기본 사업자 정보와 정산정보, 그리고 적용될 계약의 정보를 등록 및 관리할 수 있습니다.
	Partner PlatformPartner `json:"partner"`
}

// UpdatePlatformResponse 플랫폼 업데이트 결과 정보
type UpdatePlatformResponse struct {
	// Platform 고객사의 플랫폼 기능 관련 정보
	Platform Platform `json:"platform"`
}

// UpdatePlatformSettingBody 플랫폼 설정 업데이트를 위한 입력 정보
type UpdatePlatformSettingBody struct {
	DefaultDepositMemo    *string `json:"defaultDepositMemo,omitempty"`
	DefaultWithdrawalMemo *string `json:"defaultWithdrawalMemo,omitempty"`
}

// UpdatePlatformSettingError defines model for UpdatePlatformSettingError.
type UpdatePlatformSettingError struct {
	union json.RawMessage
}

// UpdatePlatformSettingResponse 플랫폼 설정 업데이트 결과
type UpdatePlatformSettingResponse struct {
	// Setting 플랫폼 설정
	Setting PlatformSetting `json:"setting"`
}

// VerifiedIdentityVerification 완료된 본인인증 내역
type VerifiedIdentityVerification struct {
	// Channel (결제, 본인인증 등에) 선택된 채널 정보
	Channel         *SelectedChannel `json:"channel,omitempty"`
	CustomData      *string          `json:"customData,omitempty"`
	Id              string           `json:"id"`
	PgRawResponse   string           `json:"pgRawResponse"`
	PgTxId          string           `json:"pgTxId"`
	RequestedAt     time.Time        `json:"requestedAt"`
	Status          string           `json:"status"`
	StatusChangedAt time.Time        `json:"statusChangedAt"`
	UpdatedAt       time.Time        `json:"updatedAt"`
	VerifiedAt      time.Time        `json:"verifiedAt"`

	// VerifiedCustomer 인증된 고객 정보
	VerifiedCustomer IdentityVerificationVerifiedCustomer `json:"verifiedCustomer"`
}

// VirtualAccountIssuedPayment 가상계좌 발급 완료 상태 건
type VirtualAccountIssuedPayment struct {
	// Amount 결제 금액 세부 정보
	Amount PaymentAmount `json:"amount"`

	// BillingKey 빌링키 결제인 경우에만 존재
	BillingKey *string `json:"billingKey,omitempty"`

	// Channel (결제, 본인인증 등에) 선택된 채널 정보
	Channel SelectedChannel `json:"channel"`

	// ChannelGroup 채널 그룹 정보
	ChannelGroup *ChannelGroupSummary `json:"channelGroup,omitempty"`

	// Country 국가
	Country *Country `json:"country,omitempty"`

	// Currency 통화 단위
	Currency   Currency `json:"currency"`
	CustomData *string  `json:"customData,omitempty"`

	// Customer 고객 정보
	Customer Customer `json:"customer"`

	// Escrow 에스크로 정보
	//
	// V1 결제 건의 경우 타입이 REGISTERED 로 고정됩니다.
	Escrow            *PaymentEscrow `json:"escrow,omitempty"`
	Id                string         `json:"id"`
	IsCulturalExpense *bool          `json:"isCulturalExpense,omitempty"`
	MerchantId        string         `json:"merchantId"`

	// Method 결제수단 정보
	Method       *PaymentMethod    `json:"method,omitempty"`
	OrderName    string            `json:"orderName"`
	PgTxId       *string           `json:"pgTxId,omitempty"`
	ProductCount *int32            `json:"productCount,omitempty"`
	Products     *[]PaymentProduct `json:"products,omitempty"`
	PromotionId  *string           `json:"promotionId,omitempty"`
	RequestedAt  time.Time         `json:"requestedAt"`

	// ScheduleId 결제 예약을 이용한 경우에만 존재
	ScheduleId      *string   `json:"scheduleId,omitempty"`
	Status          string    `json:"status"`
	StatusChangedAt time.Time `json:"statusChangedAt"`
	StoreId         string    `json:"storeId"`

	// TransactionId V1 결제 건의 경우 imp_uid에 해당합니다.
	TransactionId string    `json:"transactionId"`
	UpdatedAt     time.Time `json:"updatedAt"`

	// Version 포트원 버전
	Version  PortOneVersion    `json:"version"`
	Webhooks *[]PaymentWebhook `json:"webhooks,omitempty"`
}

// VirtualAccountIssuedPaymentTransaction 가상계좌 발급 완료 상태 건
type VirtualAccountIssuedPaymentTransaction struct {
	// Amount 결제 금액 세부 정보
	Amount PaymentAmount `json:"amount"`

	// BillingKey 빌링키 결제인 경우에만 존재
	BillingKey *string `json:"billingKey,omitempty"`

	// Channel (결제, 본인인증 등에) 선택된 채널 정보
	Channel SelectedChannel `json:"channel"`

	// ChannelGroup 채널 그룹 정보
	ChannelGroup *ChannelGroupSummary `json:"channelGroup,omitempty"`

	// Country 국가
	Country *Country `json:"country,omitempty"`

	// Currency 통화 단위
	Currency   Currency `json:"currency"`
	CustomData *string  `json:"customData,omitempty"`

	// Customer 고객 정보
	Customer Customer `json:"customer"`

	// Escrow 에스크로 정보
	//
	// V1 결제 건의 경우 타입이 REGISTERED 로 고정됩니다.
	Escrow *PaymentEscrow `json:"escrow,omitempty"`

	// Id V1 결제 건의 경우 imp_uid에 해당합니다.
	Id                string `json:"id"`
	IsCulturalExpense *bool  `json:"isCulturalExpense,omitempty"`
	MerchantId        string `json:"merchantId"`

	// Method 결제수단 정보
	Method       *PaymentMethod    `json:"method,omitempty"`
	OrderName    string            `json:"orderName"`
	PaymentId    string            `json:"paymentId"`
	PgTxId       *string           `json:"pgTxId,omitempty"`
	ProductCount *int32            `json:"productCount,omitempty"`
	Products     *[]PaymentProduct `json:"products,omitempty"`
	PromotionId  *string           `json:"promotionId,omitempty"`
	RequestedAt  time.Time         `json:"requestedAt"`

	// ScheduleId 결제 예약을 이용한 경우에만 존재
	ScheduleId      *string   `json:"scheduleId,omitempty"`
	Status          string    `json:"status"`
	StatusChangedAt time.Time `json:"statusChangedAt"`
	StoreId         string    `json:"storeId"`
	UpdatedAt       time.Time `json:"updatedAt"`

	// Version 포트원 버전
	Version  PortOneVersion    `json:"version"`
	Webhooks *[]PaymentWebhook `json:"webhooks,omitempty"`
}

// WebhookNotFoundError 웹훅 내역이 존재하지 않는 경우
type WebhookNotFoundError struct {
	Message *string `json:"message,omitempty"`
	Type    string  `json:"type"`
}

// GetBillingKeyInfosParams defines parameters for GetBillingKeyInfos.
type GetBillingKeyInfosParams struct {
	RequestBody *GetBillingKeyInfosBody `form:"requestBody,omitempty" json:"requestBody,omitempty"`
}

// DeleteBillingKeyParams defines parameters for DeleteBillingKey.
type DeleteBillingKeyParams struct {
	// StoreId 상점 아이디
	//
	// 접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.
	StoreId *string `form:"storeId,omitempty" json:"storeId,omitempty"`

	// Reason 사유
	//
	// 네이버페이: 자동결제 해지 사유입니다. 명시가 필요합니다.
	Reason *string `form:"reason,omitempty" json:"reason,omitempty"`
}

// GetBillingKeyInfoParams defines parameters for GetBillingKeyInfo.
type GetBillingKeyInfoParams struct {
	// StoreId 상점 아이디
	//
	// 접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.
	StoreId *string `form:"storeId,omitempty" json:"storeId,omitempty"`
}

// GetIdentityVerificationParams defines parameters for GetIdentityVerification.
type GetIdentityVerificationParams struct {
	// StoreId 상점 아이디
	//
	// 접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.
	StoreId *string `form:"storeId,omitempty" json:"storeId,omitempty"`
}

// ResendIdentityVerificationParams defines parameters for ResendIdentityVerification.
type ResendIdentityVerificationParams struct {
	// StoreId 상점 아이디
	//
	// 접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.
	StoreId *string `form:"storeId,omitempty" json:"storeId,omitempty"`
}

// GetKakaopayPaymentOrderParams defines parameters for GetKakaopayPaymentOrder.
type GetKakaopayPaymentOrderParams struct {
	// PgTxId 카카오페이 주문 번호 (tid)
	PgTxId string `form:"pgTxId" json:"pgTxId"`

	// ChannelKey 채널 키
	ChannelKey string `form:"channelKey" json:"channelKey"`
}

// RevokePaymentSchedulesParams defines parameters for RevokePaymentSchedules.
type RevokePaymentSchedulesParams struct {
	RequestBody RevokePaymentSchedulesBody `form:"requestBody" json:"requestBody"`
}

// GetPaymentSchedulesParams defines parameters for GetPaymentSchedules.
type GetPaymentSchedulesParams struct {
	RequestBody *GetPaymentSchedulesBody `form:"requestBody,omitempty" json:"requestBody,omitempty"`
}

// GetPaymentScheduleParams defines parameters for GetPaymentSchedule.
type GetPaymentScheduleParams struct {
	// StoreId 상점 아이디
	//
	// 접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.
	StoreId *string `form:"storeId,omitempty" json:"storeId,omitempty"`
}

// GetPaymentsParams defines parameters for GetPayments.
type GetPaymentsParams struct {
	RequestBody *GetPaymentsBody `form:"requestBody,omitempty" json:"requestBody,omitempty"`
}

// GetAllPaymentsByCursorParams defines parameters for GetAllPaymentsByCursor.
type GetAllPaymentsByCursorParams struct {
	RequestBody *GetAllPaymentsByCursorBody `form:"requestBody,omitempty" json:"requestBody,omitempty"`
}

// GetPaymentParams defines parameters for GetPayment.
type GetPaymentParams struct {
	// StoreId 상점 아이디
	StoreId *string `form:"storeId,omitempty" json:"storeId,omitempty"`
}

// GetCashReceiptByPaymentIdParams defines parameters for GetCashReceiptByPaymentId.
type GetCashReceiptByPaymentIdParams struct {
	// StoreId 상점 아이디
	//
	// 접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.
	StoreId *string `form:"storeId,omitempty" json:"storeId,omitempty"`
}

// CancelCashReceiptByPaymentIdParams defines parameters for CancelCashReceiptByPaymentId.
type CancelCashReceiptByPaymentIdParams struct {
	// StoreId 상점 아이디
	//
	// 접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.
	StoreId *string `form:"storeId,omitempty" json:"storeId,omitempty"`
}

// GetPaymentTransactionsParams defines parameters for GetPaymentTransactions.
type GetPaymentTransactionsParams struct {
	// StoreId 상점 아이디
	StoreId *string `form:"storeId,omitempty" json:"storeId,omitempty"`
}

// CloseVirtualAccountParams defines parameters for CloseVirtualAccount.
type CloseVirtualAccountParams struct {
	// StoreId 상점 아이디
	//
	// 접근 권한이 있는 상점 아이디만 입력 가능하며, 미입력시 토큰에 담긴 상점 아이디를 사용합니다.
	StoreId *string `form:"storeId,omitempty" json:"storeId,omitempty"`
}

// GetPlatformAccountTransfersParams defines parameters for GetPlatformAccountTransfers.
type GetPlatformAccountTransfersParams struct {
	RequestBody *GetAccountTransfersBody `form:"requestBody,omitempty" json:"requestBody,omitempty"`
}

// GetPlatformAdditionalFeePoliciesParams defines parameters for GetPlatformAdditionalFeePolicies.
type GetPlatformAdditionalFeePoliciesParams struct {
	RequestBody *GetPlatformAdditionalFeePoliciesBody `form:"requestBody,omitempty" json:"requestBody,omitempty"`
}

// GetPlatformAccountHolderParams defines parameters for GetPlatformAccountHolder.
type GetPlatformAccountHolderParams struct {
	// Birthdate 생년월일
	//
	// 실명 조회를 위해 추가로 보낼 수 있습니다. birthdate과 businessRegistrationNumber 중 하나만 사용해야 합니다.
	Birthdate *string `form:"birthdate,omitempty" json:"birthdate,omitempty"`

	// BusinessRegistrationNumber 사업자등록번호
	//
	// 실명 조회를 위해 추가로 보낼 수 있습니다. birthdate과 businessRegistrationNumber 중 하나만 사용해야 합니다.
	BusinessRegistrationNumber *string `form:"businessRegistrationNumber,omitempty" json:"businessRegistrationNumber,omitempty"`
}

// GetPlatformBulkPayoutsParams defines parameters for GetPlatformBulkPayouts.
type GetPlatformBulkPayoutsParams struct {
	RequestBody *GetPlatformBulkPayoutsBody `form:"requestBody,omitempty" json:"requestBody,omitempty"`
}

// GetPlatformContractsParams defines parameters for GetPlatformContracts.
type GetPlatformContractsParams struct {
	RequestBody *GetPlatformContractsBody `form:"requestBody,omitempty" json:"requestBody,omitempty"`
}

// GetPlatformDiscountSharePoliciesParams defines parameters for GetPlatformDiscountSharePolicies.
type GetPlatformDiscountSharePoliciesParams struct {
	RequestBody *GetPlatformDiscountSharePoliciesBody `form:"requestBody,omitempty" json:"requestBody,omitempty"`
}

// GetPlatformDiscountSharePolicyFilterOptionsParams defines parameters for GetPlatformDiscountSharePolicyFilterOptions.
type GetPlatformDiscountSharePolicyFilterOptionsParams struct {
	// IsArchived 보관 조회 여부
	//
	// true 이면 보관된 할인 분담의 필터 옵션을 조회하고, false 이면 보관되지 않은 할인 분담의 필터 옵션을 조회합니다. 기본값은 false 입니다.
	IsArchived *bool `form:"isArchived,omitempty" json:"isArchived,omitempty"`
}

// GetPlatformPartnerFilterOptionsParams defines parameters for GetPlatformPartnerFilterOptions.
type GetPlatformPartnerFilterOptionsParams struct {
	// IsArchived 보관 조회 여부
	//
	// true 이면 보관된 파트너의 필터 옵션을 조회하고, false 이면 보관되지 않은 파트너의 필터 옵션을 조회합니다. 기본값은 false 입니다.
	IsArchived *bool `form:"isArchived,omitempty" json:"isArchived,omitempty"`
}

// GetPlatformPartnerSettlementsParams defines parameters for GetPlatformPartnerSettlements.
type GetPlatformPartnerSettlementsParams struct {
	RequestBody *GetPlatformPartnerSettlementsBody `form:"requestBody,omitempty" json:"requestBody,omitempty"`
}

// GetPlatformPartnersParams defines parameters for GetPlatformPartners.
type GetPlatformPartnersParams struct {
	RequestBody *GetPlatformPartnersBody `form:"requestBody,omitempty" json:"requestBody,omitempty"`
}

// GetPlatformPayoutsParams defines parameters for GetPlatformPayouts.
type GetPlatformPayoutsParams struct {
	RequestBody *GetPlatformPayoutsBody `form:"requestBody,omitempty" json:"requestBody,omitempty"`
}

// GetPlatformTransferSummariesParams defines parameters for GetPlatformTransferSummaries.
type GetPlatformTransferSummariesParams struct {
	RequestBody *GetPlatformTransferSummariesBody `form:"requestBody,omitempty" json:"requestBody,omitempty"`
}

// DownloadPlatformTransferSheetParams defines parameters for DownloadPlatformTransferSheet.
type DownloadPlatformTransferSheetParams struct {
	RequestBody DownloadPlatformTransferSheetBody `form:"requestBody" json:"requestBody"`
}

// IssueBillingKeyJSONRequestBody defines body for IssueBillingKey for application/json ContentType.
type IssueBillingKeyJSONRequestBody = IssueBillingKeyBody

// IssueCashReceiptJSONRequestBody defines body for IssueCashReceipt for application/json ContentType.
type IssueCashReceiptJSONRequestBody = IssueCashReceiptBody

// ConfirmIdentityVerificationJSONRequestBody defines body for ConfirmIdentityVerification for application/json ContentType.
type ConfirmIdentityVerificationJSONRequestBody = ConfirmIdentityVerificationBody

// SendIdentityVerificationJSONRequestBody defines body for SendIdentityVerification for application/json ContentType.
type SendIdentityVerificationJSONRequestBody = SendIdentityVerificationBody

// LoginViaApiSecretJSONRequestBody defines body for LoginViaApiSecret for application/json ContentType.
type LoginViaApiSecretJSONRequestBody = LoginViaApiSecretBody

// PayWithBillingKeyJSONRequestBody defines body for PayWithBillingKey for application/json ContentType.
type PayWithBillingKeyJSONRequestBody = BillingKeyPaymentInput

// CancelPaymentJSONRequestBody defines body for CancelPayment for application/json ContentType.
type CancelPaymentJSONRequestBody = CancelPaymentBody

// ConfirmEscrowJSONRequestBody defines body for ConfirmEscrow for application/json ContentType.
type ConfirmEscrowJSONRequestBody = ConfirmEscrowBody

// ModifyEscrowLogisticsJSONRequestBody defines body for ModifyEscrowLogistics for application/json ContentType.
type ModifyEscrowLogisticsJSONRequestBody = ModifyEscrowLogisticsBody

// ApplyEscrowLogisticsJSONRequestBody defines body for ApplyEscrowLogistics for application/json ContentType.
type ApplyEscrowLogisticsJSONRequestBody = RegisterEscrowLogisticsBody

// PayInstantlyJSONRequestBody defines body for PayInstantly for application/json ContentType.
type PayInstantlyJSONRequestBody = InstantPaymentInput

// PreRegisterPaymentJSONRequestBody defines body for PreRegisterPayment for application/json ContentType.
type PreRegisterPaymentJSONRequestBody = PreRegisterPaymentBody

// RegisterStoreReceiptJSONRequestBody defines body for RegisterStoreReceipt for application/json ContentType.
type RegisterStoreReceiptJSONRequestBody = RegisterStoreReceiptBody

// ResendWebhookJSONRequestBody defines body for ResendWebhook for application/json ContentType.
type ResendWebhookJSONRequestBody = ResendWebhookBody

// CreatePaymentScheduleJSONRequestBody defines body for CreatePaymentSchedule for application/json ContentType.
type CreatePaymentScheduleJSONRequestBody = CreatePaymentScheduleBody

// UpdatePlatformJSONRequestBody defines body for UpdatePlatform for application/json ContentType.
type UpdatePlatformJSONRequestBody = UpdatePlatformBody

// CreatePlatformAdditionalFeePolicyJSONRequestBody defines body for CreatePlatformAdditionalFeePolicy for application/json ContentType.
type CreatePlatformAdditionalFeePolicyJSONRequestBody = CreatePlatformAdditionalFeePolicyBody

// UpdatePlatformAdditionalFeePolicyJSONRequestBody defines body for UpdatePlatformAdditionalFeePolicy for application/json ContentType.
type UpdatePlatformAdditionalFeePolicyJSONRequestBody = UpdatePlatformAdditionalFeePolicyBody

// ScheduleAdditionalFeePolicyJSONRequestBody defines body for ScheduleAdditionalFeePolicy for application/json ContentType.
type ScheduleAdditionalFeePolicyJSONRequestBody = SchedulePlatformAdditionalFeePolicyBody

// RescheduleAdditionalFeePolicyJSONRequestBody defines body for RescheduleAdditionalFeePolicy for application/json ContentType.
type RescheduleAdditionalFeePolicyJSONRequestBody = ReschedulePlatformAdditionalFeePolicyBody

// CreatePlatformContractJSONRequestBody defines body for CreatePlatformContract for application/json ContentType.
type CreatePlatformContractJSONRequestBody = CreatePlatformContractBody

// UpdatePlatformContractJSONRequestBody defines body for UpdatePlatformContract for application/json ContentType.
type UpdatePlatformContractJSONRequestBody = UpdatePlatformContractBody

// ScheduleContractJSONRequestBody defines body for ScheduleContract for application/json ContentType.
type ScheduleContractJSONRequestBody = SchedulePlatformContractBody

// RescheduleContractJSONRequestBody defines body for RescheduleContract for application/json ContentType.
type RescheduleContractJSONRequestBody = ReschedulePlatformContractBody

// CreatePlatformDiscountSharePolicyJSONRequestBody defines body for CreatePlatformDiscountSharePolicy for application/json ContentType.
type CreatePlatformDiscountSharePolicyJSONRequestBody = CreatePlatformDiscountSharePolicyBody

// UpdatePlatformDiscountSharePolicyJSONRequestBody defines body for UpdatePlatformDiscountSharePolicy for application/json ContentType.
type UpdatePlatformDiscountSharePolicyJSONRequestBody = UpdatePlatformDiscountSharePolicyBody

// ScheduleDiscountSharePolicyJSONRequestBody defines body for ScheduleDiscountSharePolicy for application/json ContentType.
type ScheduleDiscountSharePolicyJSONRequestBody = SchedulePlatformDiscountSharePolicyBody

// RescheduleDiscountSharePolicyJSONRequestBody defines body for RescheduleDiscountSharePolicy for application/json ContentType.
type RescheduleDiscountSharePolicyJSONRequestBody = ReschedulePlatformDiscountSharePolicyBody

// CreatePlatformPartnerJSONRequestBody defines body for CreatePlatformPartner for application/json ContentType.
type CreatePlatformPartnerJSONRequestBody = CreatePlatformPartnerBody

// CreatePlatformPartnersJSONRequestBody defines body for CreatePlatformPartners for application/json ContentType.
type CreatePlatformPartnersJSONRequestBody = CreatePlatformPartnersBody

// SchedulePlatformPartnersJSONRequestBody defines body for SchedulePlatformPartners for application/json ContentType.
type SchedulePlatformPartnersJSONRequestBody = SchedulePlatformPartnersBody

// UpdatePlatformPartnerJSONRequestBody defines body for UpdatePlatformPartner for application/json ContentType.
type UpdatePlatformPartnerJSONRequestBody = UpdatePlatformPartnerBody

// SchedulePartnerJSONRequestBody defines body for SchedulePartner for application/json ContentType.
type SchedulePartnerJSONRequestBody = SchedulePlatformPartnerBody

// ReschedulePartnerJSONRequestBody defines body for ReschedulePartner for application/json ContentType.
type ReschedulePartnerJSONRequestBody = ReschedulePlatformPartnerBody

// UpdatePlatformSettingJSONRequestBody defines body for UpdatePlatformSetting for application/json ContentType.
type UpdatePlatformSettingJSONRequestBody = UpdatePlatformSettingBody

// CreatePlatformManualTransferJSONRequestBody defines body for CreatePlatformManualTransfer for application/json ContentType.
type CreatePlatformManualTransferJSONRequestBody = CreatePlatformManualTransferBody

// CreatePlatformOrderTransferJSONRequestBody defines body for CreatePlatformOrderTransfer for application/json ContentType.
type CreatePlatformOrderTransferJSONRequestBody = CreatePlatformOrderTransferBody

// CreatePlatformOrderCancelTransferJSONRequestBody defines body for CreatePlatformOrderCancelTransfer for application/json ContentType.
type CreatePlatformOrderCancelTransferJSONRequestBody = CreatePlatformOrderCancelTransferBody

// RefreshTokenJSONRequestBody defines body for RefreshToken for application/json ContentType.
type RefreshTokenJSONRequestBody = RefreshTokenBody

// AsOneLineAddress returns the union data inside the Address as a OneLineAddress
func (t Address) AsOneLineAddress() (OneLineAddress, error) {
	var body OneLineAddress
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromOneLineAddress overwrites any union data inside the Address as the provided OneLineAddress
func (t *Address) FromOneLineAddress(v OneLineAddress) error {
	v.Type = "ONE_LINE"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeOneLineAddress performs a merge with any union data inside the Address, using the provided OneLineAddress
func (t *Address) MergeOneLineAddress(v OneLineAddress) error {
	v.Type = "ONE_LINE"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSeparatedAddress returns the union data inside the Address as a SeparatedAddress
func (t Address) AsSeparatedAddress() (SeparatedAddress, error) {
	var body SeparatedAddress
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSeparatedAddress overwrites any union data inside the Address as the provided SeparatedAddress
func (t *Address) FromSeparatedAddress(v SeparatedAddress) error {
	v.Type = "SEPARATED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSeparatedAddress performs a merge with any union data inside the Address, using the provided SeparatedAddress
func (t *Address) MergeSeparatedAddress(v SeparatedAddress) error {
	v.Type = "SEPARATED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Address) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t Address) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "ONE_LINE":
		return t.AsOneLineAddress()
	case "SEPARATED":
		return t.AsSeparatedAddress()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t Address) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Address) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsForbiddenError returns the union data inside the ApplyEscrowLogisticsError as a ForbiddenError
func (t ApplyEscrowLogisticsError) AsForbiddenError() (ForbiddenError, error) {
	var body ForbiddenError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromForbiddenError overwrites any union data inside the ApplyEscrowLogisticsError as the provided ForbiddenError
func (t *ApplyEscrowLogisticsError) FromForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeForbiddenError performs a merge with any union data inside the ApplyEscrowLogisticsError, using the provided ForbiddenError
func (t *ApplyEscrowLogisticsError) MergeForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInvalidRequestError returns the union data inside the ApplyEscrowLogisticsError as a InvalidRequestError
func (t ApplyEscrowLogisticsError) AsInvalidRequestError() (InvalidRequestError, error) {
	var body InvalidRequestError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInvalidRequestError overwrites any union data inside the ApplyEscrowLogisticsError as the provided InvalidRequestError
func (t *ApplyEscrowLogisticsError) FromInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInvalidRequestError performs a merge with any union data inside the ApplyEscrowLogisticsError, using the provided InvalidRequestError
func (t *ApplyEscrowLogisticsError) MergeInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPaymentNotFoundError returns the union data inside the ApplyEscrowLogisticsError as a PaymentNotFoundError
func (t ApplyEscrowLogisticsError) AsPaymentNotFoundError() (PaymentNotFoundError, error) {
	var body PaymentNotFoundError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPaymentNotFoundError overwrites any union data inside the ApplyEscrowLogisticsError as the provided PaymentNotFoundError
func (t *ApplyEscrowLogisticsError) FromPaymentNotFoundError(v PaymentNotFoundError) error {
	v.Type = "PAYMENT_NOT_FOUND"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePaymentNotFoundError performs a merge with any union data inside the ApplyEscrowLogisticsError, using the provided PaymentNotFoundError
func (t *ApplyEscrowLogisticsError) MergePaymentNotFoundError(v PaymentNotFoundError) error {
	v.Type = "PAYMENT_NOT_FOUND"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPaymentNotPaidError returns the union data inside the ApplyEscrowLogisticsError as a PaymentNotPaidError
func (t ApplyEscrowLogisticsError) AsPaymentNotPaidError() (PaymentNotPaidError, error) {
	var body PaymentNotPaidError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPaymentNotPaidError overwrites any union data inside the ApplyEscrowLogisticsError as the provided PaymentNotPaidError
func (t *ApplyEscrowLogisticsError) FromPaymentNotPaidError(v PaymentNotPaidError) error {
	v.Type = "PAYMENT_NOT_PAID"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePaymentNotPaidError performs a merge with any union data inside the ApplyEscrowLogisticsError, using the provided PaymentNotPaidError
func (t *ApplyEscrowLogisticsError) MergePaymentNotPaidError(v PaymentNotPaidError) error {
	v.Type = "PAYMENT_NOT_PAID"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPgProviderError returns the union data inside the ApplyEscrowLogisticsError as a PgProviderError
func (t ApplyEscrowLogisticsError) AsPgProviderError() (PgProviderError, error) {
	var body PgProviderError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPgProviderError overwrites any union data inside the ApplyEscrowLogisticsError as the provided PgProviderError
func (t *ApplyEscrowLogisticsError) FromPgProviderError(v PgProviderError) error {
	v.Type = "PG_PROVIDER"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePgProviderError performs a merge with any union data inside the ApplyEscrowLogisticsError, using the provided PgProviderError
func (t *ApplyEscrowLogisticsError) MergePgProviderError(v PgProviderError) error {
	v.Type = "PG_PROVIDER"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUnauthorizedError returns the union data inside the ApplyEscrowLogisticsError as a UnauthorizedError
func (t ApplyEscrowLogisticsError) AsUnauthorizedError() (UnauthorizedError, error) {
	var body UnauthorizedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUnauthorizedError overwrites any union data inside the ApplyEscrowLogisticsError as the provided UnauthorizedError
func (t *ApplyEscrowLogisticsError) FromUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUnauthorizedError performs a merge with any union data inside the ApplyEscrowLogisticsError, using the provided UnauthorizedError
func (t *ApplyEscrowLogisticsError) MergeUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ApplyEscrowLogisticsError) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t ApplyEscrowLogisticsError) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "FORBIDDEN":
		return t.AsForbiddenError()
	case "INVALID_REQUEST":
		return t.AsInvalidRequestError()
	case "PAYMENT_NOT_FOUND":
		return t.AsPaymentNotFoundError()
	case "PAYMENT_NOT_PAID":
		return t.AsPaymentNotPaidError()
	case "PG_PROVIDER":
		return t.AsPgProviderError()
	case "UNAUTHORIZED":
		return t.AsUnauthorizedError()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t ApplyEscrowLogisticsError) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ApplyEscrowLogisticsError) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsForbiddenError returns the union data inside the ArchivePlatformAdditionalFeePolicyError as a ForbiddenError
func (t ArchivePlatformAdditionalFeePolicyError) AsForbiddenError() (ForbiddenError, error) {
	var body ForbiddenError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromForbiddenError overwrites any union data inside the ArchivePlatformAdditionalFeePolicyError as the provided ForbiddenError
func (t *ArchivePlatformAdditionalFeePolicyError) FromForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeForbiddenError performs a merge with any union data inside the ArchivePlatformAdditionalFeePolicyError, using the provided ForbiddenError
func (t *ArchivePlatformAdditionalFeePolicyError) MergeForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInvalidRequestError returns the union data inside the ArchivePlatformAdditionalFeePolicyError as a InvalidRequestError
func (t ArchivePlatformAdditionalFeePolicyError) AsInvalidRequestError() (InvalidRequestError, error) {
	var body InvalidRequestError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInvalidRequestError overwrites any union data inside the ArchivePlatformAdditionalFeePolicyError as the provided InvalidRequestError
func (t *ArchivePlatformAdditionalFeePolicyError) FromInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInvalidRequestError performs a merge with any union data inside the ArchivePlatformAdditionalFeePolicyError, using the provided InvalidRequestError
func (t *ArchivePlatformAdditionalFeePolicyError) MergeInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformAdditionalFeePolicyNotFoundError returns the union data inside the ArchivePlatformAdditionalFeePolicyError as a PlatformAdditionalFeePolicyNotFoundError
func (t ArchivePlatformAdditionalFeePolicyError) AsPlatformAdditionalFeePolicyNotFoundError() (PlatformAdditionalFeePolicyNotFoundError, error) {
	var body PlatformAdditionalFeePolicyNotFoundError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformAdditionalFeePolicyNotFoundError overwrites any union data inside the ArchivePlatformAdditionalFeePolicyError as the provided PlatformAdditionalFeePolicyNotFoundError
func (t *ArchivePlatformAdditionalFeePolicyError) FromPlatformAdditionalFeePolicyNotFoundError(v PlatformAdditionalFeePolicyNotFoundError) error {
	v.Type = "PLATFORM_ADDITIONAL_FEE_POLICY_NOT_FOUND"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformAdditionalFeePolicyNotFoundError performs a merge with any union data inside the ArchivePlatformAdditionalFeePolicyError, using the provided PlatformAdditionalFeePolicyNotFoundError
func (t *ArchivePlatformAdditionalFeePolicyError) MergePlatformAdditionalFeePolicyNotFoundError(v PlatformAdditionalFeePolicyNotFoundError) error {
	v.Type = "PLATFORM_ADDITIONAL_FEE_POLICY_NOT_FOUND"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformCannotArchiveScheduledAdditionalFeePolicyError returns the union data inside the ArchivePlatformAdditionalFeePolicyError as a PlatformCannotArchiveScheduledAdditionalFeePolicyError
func (t ArchivePlatformAdditionalFeePolicyError) AsPlatformCannotArchiveScheduledAdditionalFeePolicyError() (PlatformCannotArchiveScheduledAdditionalFeePolicyError, error) {
	var body PlatformCannotArchiveScheduledAdditionalFeePolicyError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformCannotArchiveScheduledAdditionalFeePolicyError overwrites any union data inside the ArchivePlatformAdditionalFeePolicyError as the provided PlatformCannotArchiveScheduledAdditionalFeePolicyError
func (t *ArchivePlatformAdditionalFeePolicyError) FromPlatformCannotArchiveScheduledAdditionalFeePolicyError(v PlatformCannotArchiveScheduledAdditionalFeePolicyError) error {
	v.Type = "PLATFORM_CANNOT_ARCHIVE_SCHEDULED_ADDITIONAL_FEE_POLICY"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformCannotArchiveScheduledAdditionalFeePolicyError performs a merge with any union data inside the ArchivePlatformAdditionalFeePolicyError, using the provided PlatformCannotArchiveScheduledAdditionalFeePolicyError
func (t *ArchivePlatformAdditionalFeePolicyError) MergePlatformCannotArchiveScheduledAdditionalFeePolicyError(v PlatformCannotArchiveScheduledAdditionalFeePolicyError) error {
	v.Type = "PLATFORM_CANNOT_ARCHIVE_SCHEDULED_ADDITIONAL_FEE_POLICY"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformNotEnabledError returns the union data inside the ArchivePlatformAdditionalFeePolicyError as a PlatformNotEnabledError
func (t ArchivePlatformAdditionalFeePolicyError) AsPlatformNotEnabledError() (PlatformNotEnabledError, error) {
	var body PlatformNotEnabledError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformNotEnabledError overwrites any union data inside the ArchivePlatformAdditionalFeePolicyError as the provided PlatformNotEnabledError
func (t *ArchivePlatformAdditionalFeePolicyError) FromPlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformNotEnabledError performs a merge with any union data inside the ArchivePlatformAdditionalFeePolicyError, using the provided PlatformNotEnabledError
func (t *ArchivePlatformAdditionalFeePolicyError) MergePlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUnauthorizedError returns the union data inside the ArchivePlatformAdditionalFeePolicyError as a UnauthorizedError
func (t ArchivePlatformAdditionalFeePolicyError) AsUnauthorizedError() (UnauthorizedError, error) {
	var body UnauthorizedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUnauthorizedError overwrites any union data inside the ArchivePlatformAdditionalFeePolicyError as the provided UnauthorizedError
func (t *ArchivePlatformAdditionalFeePolicyError) FromUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUnauthorizedError performs a merge with any union data inside the ArchivePlatformAdditionalFeePolicyError, using the provided UnauthorizedError
func (t *ArchivePlatformAdditionalFeePolicyError) MergeUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ArchivePlatformAdditionalFeePolicyError) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t ArchivePlatformAdditionalFeePolicyError) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "FORBIDDEN":
		return t.AsForbiddenError()
	case "INVALID_REQUEST":
		return t.AsInvalidRequestError()
	case "PLATFORM_ADDITIONAL_FEE_POLICY_NOT_FOUND":
		return t.AsPlatformAdditionalFeePolicyNotFoundError()
	case "PLATFORM_CANNOT_ARCHIVE_SCHEDULED_ADDITIONAL_FEE_POLICY":
		return t.AsPlatformCannotArchiveScheduledAdditionalFeePolicyError()
	case "PLATFORM_NOT_ENABLED":
		return t.AsPlatformNotEnabledError()
	case "UNAUTHORIZED":
		return t.AsUnauthorizedError()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t ArchivePlatformAdditionalFeePolicyError) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ArchivePlatformAdditionalFeePolicyError) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsForbiddenError returns the union data inside the ArchivePlatformContractError as a ForbiddenError
func (t ArchivePlatformContractError) AsForbiddenError() (ForbiddenError, error) {
	var body ForbiddenError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromForbiddenError overwrites any union data inside the ArchivePlatformContractError as the provided ForbiddenError
func (t *ArchivePlatformContractError) FromForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeForbiddenError performs a merge with any union data inside the ArchivePlatformContractError, using the provided ForbiddenError
func (t *ArchivePlatformContractError) MergeForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInvalidRequestError returns the union data inside the ArchivePlatformContractError as a InvalidRequestError
func (t ArchivePlatformContractError) AsInvalidRequestError() (InvalidRequestError, error) {
	var body InvalidRequestError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInvalidRequestError overwrites any union data inside the ArchivePlatformContractError as the provided InvalidRequestError
func (t *ArchivePlatformContractError) FromInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInvalidRequestError performs a merge with any union data inside the ArchivePlatformContractError, using the provided InvalidRequestError
func (t *ArchivePlatformContractError) MergeInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformCannotArchiveScheduledContractError returns the union data inside the ArchivePlatformContractError as a PlatformCannotArchiveScheduledContractError
func (t ArchivePlatformContractError) AsPlatformCannotArchiveScheduledContractError() (PlatformCannotArchiveScheduledContractError, error) {
	var body PlatformCannotArchiveScheduledContractError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformCannotArchiveScheduledContractError overwrites any union data inside the ArchivePlatformContractError as the provided PlatformCannotArchiveScheduledContractError
func (t *ArchivePlatformContractError) FromPlatformCannotArchiveScheduledContractError(v PlatformCannotArchiveScheduledContractError) error {
	v.Type = "PLATFORM_CANNOT_ARCHIVE_SCHEDULED_CONTRACT"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformCannotArchiveScheduledContractError performs a merge with any union data inside the ArchivePlatformContractError, using the provided PlatformCannotArchiveScheduledContractError
func (t *ArchivePlatformContractError) MergePlatformCannotArchiveScheduledContractError(v PlatformCannotArchiveScheduledContractError) error {
	v.Type = "PLATFORM_CANNOT_ARCHIVE_SCHEDULED_CONTRACT"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformContractNotFoundError returns the union data inside the ArchivePlatformContractError as a PlatformContractNotFoundError
func (t ArchivePlatformContractError) AsPlatformContractNotFoundError() (PlatformContractNotFoundError, error) {
	var body PlatformContractNotFoundError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformContractNotFoundError overwrites any union data inside the ArchivePlatformContractError as the provided PlatformContractNotFoundError
func (t *ArchivePlatformContractError) FromPlatformContractNotFoundError(v PlatformContractNotFoundError) error {
	v.Type = "PLATFORM_CONTRACT_NOT_FOUND"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformContractNotFoundError performs a merge with any union data inside the ArchivePlatformContractError, using the provided PlatformContractNotFoundError
func (t *ArchivePlatformContractError) MergePlatformContractNotFoundError(v PlatformContractNotFoundError) error {
	v.Type = "PLATFORM_CONTRACT_NOT_FOUND"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformNotEnabledError returns the union data inside the ArchivePlatformContractError as a PlatformNotEnabledError
func (t ArchivePlatformContractError) AsPlatformNotEnabledError() (PlatformNotEnabledError, error) {
	var body PlatformNotEnabledError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformNotEnabledError overwrites any union data inside the ArchivePlatformContractError as the provided PlatformNotEnabledError
func (t *ArchivePlatformContractError) FromPlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformNotEnabledError performs a merge with any union data inside the ArchivePlatformContractError, using the provided PlatformNotEnabledError
func (t *ArchivePlatformContractError) MergePlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUnauthorizedError returns the union data inside the ArchivePlatformContractError as a UnauthorizedError
func (t ArchivePlatformContractError) AsUnauthorizedError() (UnauthorizedError, error) {
	var body UnauthorizedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUnauthorizedError overwrites any union data inside the ArchivePlatformContractError as the provided UnauthorizedError
func (t *ArchivePlatformContractError) FromUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUnauthorizedError performs a merge with any union data inside the ArchivePlatformContractError, using the provided UnauthorizedError
func (t *ArchivePlatformContractError) MergeUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ArchivePlatformContractError) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t ArchivePlatformContractError) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "FORBIDDEN":
		return t.AsForbiddenError()
	case "INVALID_REQUEST":
		return t.AsInvalidRequestError()
	case "PLATFORM_CANNOT_ARCHIVE_SCHEDULED_CONTRACT":
		return t.AsPlatformCannotArchiveScheduledContractError()
	case "PLATFORM_CONTRACT_NOT_FOUND":
		return t.AsPlatformContractNotFoundError()
	case "PLATFORM_NOT_ENABLED":
		return t.AsPlatformNotEnabledError()
	case "UNAUTHORIZED":
		return t.AsUnauthorizedError()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t ArchivePlatformContractError) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ArchivePlatformContractError) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsForbiddenError returns the union data inside the ArchivePlatformDiscountSharePolicyError as a ForbiddenError
func (t ArchivePlatformDiscountSharePolicyError) AsForbiddenError() (ForbiddenError, error) {
	var body ForbiddenError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromForbiddenError overwrites any union data inside the ArchivePlatformDiscountSharePolicyError as the provided ForbiddenError
func (t *ArchivePlatformDiscountSharePolicyError) FromForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeForbiddenError performs a merge with any union data inside the ArchivePlatformDiscountSharePolicyError, using the provided ForbiddenError
func (t *ArchivePlatformDiscountSharePolicyError) MergeForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInvalidRequestError returns the union data inside the ArchivePlatformDiscountSharePolicyError as a InvalidRequestError
func (t ArchivePlatformDiscountSharePolicyError) AsInvalidRequestError() (InvalidRequestError, error) {
	var body InvalidRequestError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInvalidRequestError overwrites any union data inside the ArchivePlatformDiscountSharePolicyError as the provided InvalidRequestError
func (t *ArchivePlatformDiscountSharePolicyError) FromInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInvalidRequestError performs a merge with any union data inside the ArchivePlatformDiscountSharePolicyError, using the provided InvalidRequestError
func (t *ArchivePlatformDiscountSharePolicyError) MergeInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformCannotArchiveScheduledDiscountSharePolicyError returns the union data inside the ArchivePlatformDiscountSharePolicyError as a PlatformCannotArchiveScheduledDiscountSharePolicyError
func (t ArchivePlatformDiscountSharePolicyError) AsPlatformCannotArchiveScheduledDiscountSharePolicyError() (PlatformCannotArchiveScheduledDiscountSharePolicyError, error) {
	var body PlatformCannotArchiveScheduledDiscountSharePolicyError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformCannotArchiveScheduledDiscountSharePolicyError overwrites any union data inside the ArchivePlatformDiscountSharePolicyError as the provided PlatformCannotArchiveScheduledDiscountSharePolicyError
func (t *ArchivePlatformDiscountSharePolicyError) FromPlatformCannotArchiveScheduledDiscountSharePolicyError(v PlatformCannotArchiveScheduledDiscountSharePolicyError) error {
	v.Type = "PLATFORM_CANNOT_ARCHIVE_SCHEDULED_DISCOUNT_SHARE_POLICY"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformCannotArchiveScheduledDiscountSharePolicyError performs a merge with any union data inside the ArchivePlatformDiscountSharePolicyError, using the provided PlatformCannotArchiveScheduledDiscountSharePolicyError
func (t *ArchivePlatformDiscountSharePolicyError) MergePlatformCannotArchiveScheduledDiscountSharePolicyError(v PlatformCannotArchiveScheduledDiscountSharePolicyError) error {
	v.Type = "PLATFORM_CANNOT_ARCHIVE_SCHEDULED_DISCOUNT_SHARE_POLICY"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformDiscountSharePolicyNotFoundError returns the union data inside the ArchivePlatformDiscountSharePolicyError as a PlatformDiscountSharePolicyNotFoundError
func (t ArchivePlatformDiscountSharePolicyError) AsPlatformDiscountSharePolicyNotFoundError() (PlatformDiscountSharePolicyNotFoundError, error) {
	var body PlatformDiscountSharePolicyNotFoundError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformDiscountSharePolicyNotFoundError overwrites any union data inside the ArchivePlatformDiscountSharePolicyError as the provided PlatformDiscountSharePolicyNotFoundError
func (t *ArchivePlatformDiscountSharePolicyError) FromPlatformDiscountSharePolicyNotFoundError(v PlatformDiscountSharePolicyNotFoundError) error {
	v.Type = "PLATFORM_DISCOUNT_SHARE_POLICY_NOT_FOUND"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformDiscountSharePolicyNotFoundError performs a merge with any union data inside the ArchivePlatformDiscountSharePolicyError, using the provided PlatformDiscountSharePolicyNotFoundError
func (t *ArchivePlatformDiscountSharePolicyError) MergePlatformDiscountSharePolicyNotFoundError(v PlatformDiscountSharePolicyNotFoundError) error {
	v.Type = "PLATFORM_DISCOUNT_SHARE_POLICY_NOT_FOUND"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformNotEnabledError returns the union data inside the ArchivePlatformDiscountSharePolicyError as a PlatformNotEnabledError
func (t ArchivePlatformDiscountSharePolicyError) AsPlatformNotEnabledError() (PlatformNotEnabledError, error) {
	var body PlatformNotEnabledError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformNotEnabledError overwrites any union data inside the ArchivePlatformDiscountSharePolicyError as the provided PlatformNotEnabledError
func (t *ArchivePlatformDiscountSharePolicyError) FromPlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformNotEnabledError performs a merge with any union data inside the ArchivePlatformDiscountSharePolicyError, using the provided PlatformNotEnabledError
func (t *ArchivePlatformDiscountSharePolicyError) MergePlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUnauthorizedError returns the union data inside the ArchivePlatformDiscountSharePolicyError as a UnauthorizedError
func (t ArchivePlatformDiscountSharePolicyError) AsUnauthorizedError() (UnauthorizedError, error) {
	var body UnauthorizedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUnauthorizedError overwrites any union data inside the ArchivePlatformDiscountSharePolicyError as the provided UnauthorizedError
func (t *ArchivePlatformDiscountSharePolicyError) FromUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUnauthorizedError performs a merge with any union data inside the ArchivePlatformDiscountSharePolicyError, using the provided UnauthorizedError
func (t *ArchivePlatformDiscountSharePolicyError) MergeUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ArchivePlatformDiscountSharePolicyError) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t ArchivePlatformDiscountSharePolicyError) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "FORBIDDEN":
		return t.AsForbiddenError()
	case "INVALID_REQUEST":
		return t.AsInvalidRequestError()
	case "PLATFORM_CANNOT_ARCHIVE_SCHEDULED_DISCOUNT_SHARE_POLICY":
		return t.AsPlatformCannotArchiveScheduledDiscountSharePolicyError()
	case "PLATFORM_DISCOUNT_SHARE_POLICY_NOT_FOUND":
		return t.AsPlatformDiscountSharePolicyNotFoundError()
	case "PLATFORM_NOT_ENABLED":
		return t.AsPlatformNotEnabledError()
	case "UNAUTHORIZED":
		return t.AsUnauthorizedError()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t ArchivePlatformDiscountSharePolicyError) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ArchivePlatformDiscountSharePolicyError) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsForbiddenError returns the union data inside the ArchivePlatformPartnerError as a ForbiddenError
func (t ArchivePlatformPartnerError) AsForbiddenError() (ForbiddenError, error) {
	var body ForbiddenError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromForbiddenError overwrites any union data inside the ArchivePlatformPartnerError as the provided ForbiddenError
func (t *ArchivePlatformPartnerError) FromForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeForbiddenError performs a merge with any union data inside the ArchivePlatformPartnerError, using the provided ForbiddenError
func (t *ArchivePlatformPartnerError) MergeForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInvalidRequestError returns the union data inside the ArchivePlatformPartnerError as a InvalidRequestError
func (t ArchivePlatformPartnerError) AsInvalidRequestError() (InvalidRequestError, error) {
	var body InvalidRequestError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInvalidRequestError overwrites any union data inside the ArchivePlatformPartnerError as the provided InvalidRequestError
func (t *ArchivePlatformPartnerError) FromInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInvalidRequestError performs a merge with any union data inside the ArchivePlatformPartnerError, using the provided InvalidRequestError
func (t *ArchivePlatformPartnerError) MergeInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformCannotArchiveScheduledPartnerError returns the union data inside the ArchivePlatformPartnerError as a PlatformCannotArchiveScheduledPartnerError
func (t ArchivePlatformPartnerError) AsPlatformCannotArchiveScheduledPartnerError() (PlatformCannotArchiveScheduledPartnerError, error) {
	var body PlatformCannotArchiveScheduledPartnerError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformCannotArchiveScheduledPartnerError overwrites any union data inside the ArchivePlatformPartnerError as the provided PlatformCannotArchiveScheduledPartnerError
func (t *ArchivePlatformPartnerError) FromPlatformCannotArchiveScheduledPartnerError(v PlatformCannotArchiveScheduledPartnerError) error {
	v.Type = "PLATFORM_CANNOT_ARCHIVE_SCHEDULED_PARTNER"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformCannotArchiveScheduledPartnerError performs a merge with any union data inside the ArchivePlatformPartnerError, using the provided PlatformCannotArchiveScheduledPartnerError
func (t *ArchivePlatformPartnerError) MergePlatformCannotArchiveScheduledPartnerError(v PlatformCannotArchiveScheduledPartnerError) error {
	v.Type = "PLATFORM_CANNOT_ARCHIVE_SCHEDULED_PARTNER"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformNotEnabledError returns the union data inside the ArchivePlatformPartnerError as a PlatformNotEnabledError
func (t ArchivePlatformPartnerError) AsPlatformNotEnabledError() (PlatformNotEnabledError, error) {
	var body PlatformNotEnabledError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformNotEnabledError overwrites any union data inside the ArchivePlatformPartnerError as the provided PlatformNotEnabledError
func (t *ArchivePlatformPartnerError) FromPlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformNotEnabledError performs a merge with any union data inside the ArchivePlatformPartnerError, using the provided PlatformNotEnabledError
func (t *ArchivePlatformPartnerError) MergePlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformPartnerNotFoundError returns the union data inside the ArchivePlatformPartnerError as a PlatformPartnerNotFoundError
func (t ArchivePlatformPartnerError) AsPlatformPartnerNotFoundError() (PlatformPartnerNotFoundError, error) {
	var body PlatformPartnerNotFoundError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformPartnerNotFoundError overwrites any union data inside the ArchivePlatformPartnerError as the provided PlatformPartnerNotFoundError
func (t *ArchivePlatformPartnerError) FromPlatformPartnerNotFoundError(v PlatformPartnerNotFoundError) error {
	v.Type = "PLATFORM_PARTNER_NOT_FOUND"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformPartnerNotFoundError performs a merge with any union data inside the ArchivePlatformPartnerError, using the provided PlatformPartnerNotFoundError
func (t *ArchivePlatformPartnerError) MergePlatformPartnerNotFoundError(v PlatformPartnerNotFoundError) error {
	v.Type = "PLATFORM_PARTNER_NOT_FOUND"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUnauthorizedError returns the union data inside the ArchivePlatformPartnerError as a UnauthorizedError
func (t ArchivePlatformPartnerError) AsUnauthorizedError() (UnauthorizedError, error) {
	var body UnauthorizedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUnauthorizedError overwrites any union data inside the ArchivePlatformPartnerError as the provided UnauthorizedError
func (t *ArchivePlatformPartnerError) FromUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUnauthorizedError performs a merge with any union data inside the ArchivePlatformPartnerError, using the provided UnauthorizedError
func (t *ArchivePlatformPartnerError) MergeUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ArchivePlatformPartnerError) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t ArchivePlatformPartnerError) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "FORBIDDEN":
		return t.AsForbiddenError()
	case "INVALID_REQUEST":
		return t.AsInvalidRequestError()
	case "PLATFORM_CANNOT_ARCHIVE_SCHEDULED_PARTNER":
		return t.AsPlatformCannotArchiveScheduledPartnerError()
	case "PLATFORM_NOT_ENABLED":
		return t.AsPlatformNotEnabledError()
	case "PLATFORM_PARTNER_NOT_FOUND":
		return t.AsPlatformPartnerNotFoundError()
	case "UNAUTHORIZED":
		return t.AsUnauthorizedError()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t ArchivePlatformPartnerError) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ArchivePlatformPartnerError) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDeletedBillingKeyInfo returns the union data inside the BillingKeyInfo as a DeletedBillingKeyInfo
func (t BillingKeyInfo) AsDeletedBillingKeyInfo() (DeletedBillingKeyInfo, error) {
	var body DeletedBillingKeyInfo
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDeletedBillingKeyInfo overwrites any union data inside the BillingKeyInfo as the provided DeletedBillingKeyInfo
func (t *BillingKeyInfo) FromDeletedBillingKeyInfo(v DeletedBillingKeyInfo) error {
	v.Status = "DELETED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDeletedBillingKeyInfo performs a merge with any union data inside the BillingKeyInfo, using the provided DeletedBillingKeyInfo
func (t *BillingKeyInfo) MergeDeletedBillingKeyInfo(v DeletedBillingKeyInfo) error {
	v.Status = "DELETED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsIssuedBillingKeyInfo returns the union data inside the BillingKeyInfo as a IssuedBillingKeyInfo
func (t BillingKeyInfo) AsIssuedBillingKeyInfo() (IssuedBillingKeyInfo, error) {
	var body IssuedBillingKeyInfo
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromIssuedBillingKeyInfo overwrites any union data inside the BillingKeyInfo as the provided IssuedBillingKeyInfo
func (t *BillingKeyInfo) FromIssuedBillingKeyInfo(v IssuedBillingKeyInfo) error {
	v.Status = "ISSUED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeIssuedBillingKeyInfo performs a merge with any union data inside the BillingKeyInfo, using the provided IssuedBillingKeyInfo
func (t *BillingKeyInfo) MergeIssuedBillingKeyInfo(v IssuedBillingKeyInfo) error {
	v.Status = "ISSUED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t BillingKeyInfo) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"status"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t BillingKeyInfo) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "DELETED":
		return t.AsDeletedBillingKeyInfo()
	case "ISSUED":
		return t.AsIssuedBillingKeyInfo()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t BillingKeyInfo) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *BillingKeyInfo) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsBillingKeyPaymentMethodCard returns the union data inside the BillingKeyPaymentMethod as a BillingKeyPaymentMethodCard
func (t BillingKeyPaymentMethod) AsBillingKeyPaymentMethodCard() (BillingKeyPaymentMethodCard, error) {
	var body BillingKeyPaymentMethodCard
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBillingKeyPaymentMethodCard overwrites any union data inside the BillingKeyPaymentMethod as the provided BillingKeyPaymentMethodCard
func (t *BillingKeyPaymentMethod) FromBillingKeyPaymentMethodCard(v BillingKeyPaymentMethodCard) error {
	v.Type = "BillingKeyPaymentMethodCard"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBillingKeyPaymentMethodCard performs a merge with any union data inside the BillingKeyPaymentMethod, using the provided BillingKeyPaymentMethodCard
func (t *BillingKeyPaymentMethod) MergeBillingKeyPaymentMethodCard(v BillingKeyPaymentMethodCard) error {
	v.Type = "BillingKeyPaymentMethodCard"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsBillingKeyPaymentMethodEasyPay returns the union data inside the BillingKeyPaymentMethod as a BillingKeyPaymentMethodEasyPay
func (t BillingKeyPaymentMethod) AsBillingKeyPaymentMethodEasyPay() (BillingKeyPaymentMethodEasyPay, error) {
	var body BillingKeyPaymentMethodEasyPay
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBillingKeyPaymentMethodEasyPay overwrites any union data inside the BillingKeyPaymentMethod as the provided BillingKeyPaymentMethodEasyPay
func (t *BillingKeyPaymentMethod) FromBillingKeyPaymentMethodEasyPay(v BillingKeyPaymentMethodEasyPay) error {
	v.Type = "BillingKeyPaymentMethodEasyPay"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBillingKeyPaymentMethodEasyPay performs a merge with any union data inside the BillingKeyPaymentMethod, using the provided BillingKeyPaymentMethodEasyPay
func (t *BillingKeyPaymentMethod) MergeBillingKeyPaymentMethodEasyPay(v BillingKeyPaymentMethodEasyPay) error {
	v.Type = "BillingKeyPaymentMethodEasyPay"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsBillingKeyPaymentMethodMobile returns the union data inside the BillingKeyPaymentMethod as a BillingKeyPaymentMethodMobile
func (t BillingKeyPaymentMethod) AsBillingKeyPaymentMethodMobile() (BillingKeyPaymentMethodMobile, error) {
	var body BillingKeyPaymentMethodMobile
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBillingKeyPaymentMethodMobile overwrites any union data inside the BillingKeyPaymentMethod as the provided BillingKeyPaymentMethodMobile
func (t *BillingKeyPaymentMethod) FromBillingKeyPaymentMethodMobile(v BillingKeyPaymentMethodMobile) error {
	v.Type = "BillingKeyPaymentMethodMobile"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBillingKeyPaymentMethodMobile performs a merge with any union data inside the BillingKeyPaymentMethod, using the provided BillingKeyPaymentMethodMobile
func (t *BillingKeyPaymentMethod) MergeBillingKeyPaymentMethodMobile(v BillingKeyPaymentMethodMobile) error {
	v.Type = "BillingKeyPaymentMethodMobile"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsBillingKeyPaymentMethodPaypal returns the union data inside the BillingKeyPaymentMethod as a BillingKeyPaymentMethodPaypal
func (t BillingKeyPaymentMethod) AsBillingKeyPaymentMethodPaypal() (BillingKeyPaymentMethodPaypal, error) {
	var body BillingKeyPaymentMethodPaypal
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBillingKeyPaymentMethodPaypal overwrites any union data inside the BillingKeyPaymentMethod as the provided BillingKeyPaymentMethodPaypal
func (t *BillingKeyPaymentMethod) FromBillingKeyPaymentMethodPaypal(v BillingKeyPaymentMethodPaypal) error {
	v.Type = "BillingKeyPaymentMethodPaypal"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBillingKeyPaymentMethodPaypal performs a merge with any union data inside the BillingKeyPaymentMethod, using the provided BillingKeyPaymentMethodPaypal
func (t *BillingKeyPaymentMethod) MergeBillingKeyPaymentMethodPaypal(v BillingKeyPaymentMethodPaypal) error {
	v.Type = "BillingKeyPaymentMethodPaypal"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsBillingKeyPaymentMethodTransfer returns the union data inside the BillingKeyPaymentMethod as a BillingKeyPaymentMethodTransfer
func (t BillingKeyPaymentMethod) AsBillingKeyPaymentMethodTransfer() (BillingKeyPaymentMethodTransfer, error) {
	var body BillingKeyPaymentMethodTransfer
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBillingKeyPaymentMethodTransfer overwrites any union data inside the BillingKeyPaymentMethod as the provided BillingKeyPaymentMethodTransfer
func (t *BillingKeyPaymentMethod) FromBillingKeyPaymentMethodTransfer(v BillingKeyPaymentMethodTransfer) error {
	v.Type = "BillingKeyPaymentMethodTransfer"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBillingKeyPaymentMethodTransfer performs a merge with any union data inside the BillingKeyPaymentMethod, using the provided BillingKeyPaymentMethodTransfer
func (t *BillingKeyPaymentMethod) MergeBillingKeyPaymentMethodTransfer(v BillingKeyPaymentMethodTransfer) error {
	v.Type = "BillingKeyPaymentMethodTransfer"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t BillingKeyPaymentMethod) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t BillingKeyPaymentMethod) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "BillingKeyPaymentMethodCard":
		return t.AsBillingKeyPaymentMethodCard()
	case "BillingKeyPaymentMethodEasyPay":
		return t.AsBillingKeyPaymentMethodEasyPay()
	case "BillingKeyPaymentMethodMobile":
		return t.AsBillingKeyPaymentMethodMobile()
	case "BillingKeyPaymentMethodPaypal":
		return t.AsBillingKeyPaymentMethodPaypal()
	case "BillingKeyPaymentMethodTransfer":
		return t.AsBillingKeyPaymentMethodTransfer()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t BillingKeyPaymentMethod) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *BillingKeyPaymentMethod) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsBillingKeyPaymentMethodCard returns the union data inside the BillingKeyPaymentMethodEasyPayMethod as a BillingKeyPaymentMethodCard
func (t BillingKeyPaymentMethodEasyPayMethod) AsBillingKeyPaymentMethodCard() (BillingKeyPaymentMethodCard, error) {
	var body BillingKeyPaymentMethodCard
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBillingKeyPaymentMethodCard overwrites any union data inside the BillingKeyPaymentMethodEasyPayMethod as the provided BillingKeyPaymentMethodCard
func (t *BillingKeyPaymentMethodEasyPayMethod) FromBillingKeyPaymentMethodCard(v BillingKeyPaymentMethodCard) error {
	v.Type = "BillingKeyPaymentMethodCard"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBillingKeyPaymentMethodCard performs a merge with any union data inside the BillingKeyPaymentMethodEasyPayMethod, using the provided BillingKeyPaymentMethodCard
func (t *BillingKeyPaymentMethodEasyPayMethod) MergeBillingKeyPaymentMethodCard(v BillingKeyPaymentMethodCard) error {
	v.Type = "BillingKeyPaymentMethodCard"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsBillingKeyPaymentMethodEasyPayCharge returns the union data inside the BillingKeyPaymentMethodEasyPayMethod as a BillingKeyPaymentMethodEasyPayCharge
func (t BillingKeyPaymentMethodEasyPayMethod) AsBillingKeyPaymentMethodEasyPayCharge() (BillingKeyPaymentMethodEasyPayCharge, error) {
	var body BillingKeyPaymentMethodEasyPayCharge
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBillingKeyPaymentMethodEasyPayCharge overwrites any union data inside the BillingKeyPaymentMethodEasyPayMethod as the provided BillingKeyPaymentMethodEasyPayCharge
func (t *BillingKeyPaymentMethodEasyPayMethod) FromBillingKeyPaymentMethodEasyPayCharge(v BillingKeyPaymentMethodEasyPayCharge) error {
	v.Type = "BillingKeyPaymentMethodEasyPayCharge"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBillingKeyPaymentMethodEasyPayCharge performs a merge with any union data inside the BillingKeyPaymentMethodEasyPayMethod, using the provided BillingKeyPaymentMethodEasyPayCharge
func (t *BillingKeyPaymentMethodEasyPayMethod) MergeBillingKeyPaymentMethodEasyPayCharge(v BillingKeyPaymentMethodEasyPayCharge) error {
	v.Type = "BillingKeyPaymentMethodEasyPayCharge"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsBillingKeyPaymentMethodTransfer returns the union data inside the BillingKeyPaymentMethodEasyPayMethod as a BillingKeyPaymentMethodTransfer
func (t BillingKeyPaymentMethodEasyPayMethod) AsBillingKeyPaymentMethodTransfer() (BillingKeyPaymentMethodTransfer, error) {
	var body BillingKeyPaymentMethodTransfer
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBillingKeyPaymentMethodTransfer overwrites any union data inside the BillingKeyPaymentMethodEasyPayMethod as the provided BillingKeyPaymentMethodTransfer
func (t *BillingKeyPaymentMethodEasyPayMethod) FromBillingKeyPaymentMethodTransfer(v BillingKeyPaymentMethodTransfer) error {
	v.Type = "BillingKeyPaymentMethodTransfer"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBillingKeyPaymentMethodTransfer performs a merge with any union data inside the BillingKeyPaymentMethodEasyPayMethod, using the provided BillingKeyPaymentMethodTransfer
func (t *BillingKeyPaymentMethodEasyPayMethod) MergeBillingKeyPaymentMethodTransfer(v BillingKeyPaymentMethodTransfer) error {
	v.Type = "BillingKeyPaymentMethodTransfer"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t BillingKeyPaymentMethodEasyPayMethod) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t BillingKeyPaymentMethodEasyPayMethod) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "BillingKeyPaymentMethodCard":
		return t.AsBillingKeyPaymentMethodCard()
	case "BillingKeyPaymentMethodEasyPayCharge":
		return t.AsBillingKeyPaymentMethodEasyPayCharge()
	case "BillingKeyPaymentMethodTransfer":
		return t.AsBillingKeyPaymentMethodTransfer()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t BillingKeyPaymentMethodEasyPayMethod) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *BillingKeyPaymentMethodEasyPayMethod) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsCashReceiptNotFoundError returns the union data inside the CancelCashReceiptError as a CashReceiptNotFoundError
func (t CancelCashReceiptError) AsCashReceiptNotFoundError() (CashReceiptNotFoundError, error) {
	var body CashReceiptNotFoundError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCashReceiptNotFoundError overwrites any union data inside the CancelCashReceiptError as the provided CashReceiptNotFoundError
func (t *CancelCashReceiptError) FromCashReceiptNotFoundError(v CashReceiptNotFoundError) error {
	v.Type = "CASH_RECEIPT_NOT_FOUND"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCashReceiptNotFoundError performs a merge with any union data inside the CancelCashReceiptError, using the provided CashReceiptNotFoundError
func (t *CancelCashReceiptError) MergeCashReceiptNotFoundError(v CashReceiptNotFoundError) error {
	v.Type = "CASH_RECEIPT_NOT_FOUND"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCashReceiptNotIssuedError returns the union data inside the CancelCashReceiptError as a CashReceiptNotIssuedError
func (t CancelCashReceiptError) AsCashReceiptNotIssuedError() (CashReceiptNotIssuedError, error) {
	var body CashReceiptNotIssuedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCashReceiptNotIssuedError overwrites any union data inside the CancelCashReceiptError as the provided CashReceiptNotIssuedError
func (t *CancelCashReceiptError) FromCashReceiptNotIssuedError(v CashReceiptNotIssuedError) error {
	v.Type = "CASH_RECEIPT_NOT_ISSUED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCashReceiptNotIssuedError performs a merge with any union data inside the CancelCashReceiptError, using the provided CashReceiptNotIssuedError
func (t *CancelCashReceiptError) MergeCashReceiptNotIssuedError(v CashReceiptNotIssuedError) error {
	v.Type = "CASH_RECEIPT_NOT_ISSUED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsForbiddenError returns the union data inside the CancelCashReceiptError as a ForbiddenError
func (t CancelCashReceiptError) AsForbiddenError() (ForbiddenError, error) {
	var body ForbiddenError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromForbiddenError overwrites any union data inside the CancelCashReceiptError as the provided ForbiddenError
func (t *CancelCashReceiptError) FromForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeForbiddenError performs a merge with any union data inside the CancelCashReceiptError, using the provided ForbiddenError
func (t *CancelCashReceiptError) MergeForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInvalidRequestError returns the union data inside the CancelCashReceiptError as a InvalidRequestError
func (t CancelCashReceiptError) AsInvalidRequestError() (InvalidRequestError, error) {
	var body InvalidRequestError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInvalidRequestError overwrites any union data inside the CancelCashReceiptError as the provided InvalidRequestError
func (t *CancelCashReceiptError) FromInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInvalidRequestError performs a merge with any union data inside the CancelCashReceiptError, using the provided InvalidRequestError
func (t *CancelCashReceiptError) MergeInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPgProviderError returns the union data inside the CancelCashReceiptError as a PgProviderError
func (t CancelCashReceiptError) AsPgProviderError() (PgProviderError, error) {
	var body PgProviderError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPgProviderError overwrites any union data inside the CancelCashReceiptError as the provided PgProviderError
func (t *CancelCashReceiptError) FromPgProviderError(v PgProviderError) error {
	v.Type = "PG_PROVIDER"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePgProviderError performs a merge with any union data inside the CancelCashReceiptError, using the provided PgProviderError
func (t *CancelCashReceiptError) MergePgProviderError(v PgProviderError) error {
	v.Type = "PG_PROVIDER"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUnauthorizedError returns the union data inside the CancelCashReceiptError as a UnauthorizedError
func (t CancelCashReceiptError) AsUnauthorizedError() (UnauthorizedError, error) {
	var body UnauthorizedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUnauthorizedError overwrites any union data inside the CancelCashReceiptError as the provided UnauthorizedError
func (t *CancelCashReceiptError) FromUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUnauthorizedError performs a merge with any union data inside the CancelCashReceiptError, using the provided UnauthorizedError
func (t *CancelCashReceiptError) MergeUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t CancelCashReceiptError) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t CancelCashReceiptError) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "CASH_RECEIPT_NOT_FOUND":
		return t.AsCashReceiptNotFoundError()
	case "CASH_RECEIPT_NOT_ISSUED":
		return t.AsCashReceiptNotIssuedError()
	case "FORBIDDEN":
		return t.AsForbiddenError()
	case "INVALID_REQUEST":
		return t.AsInvalidRequestError()
	case "PG_PROVIDER":
		return t.AsPgProviderError()
	case "UNAUTHORIZED":
		return t.AsUnauthorizedError()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t CancelCashReceiptError) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CancelCashReceiptError) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsCancelAmountExceedsCancellableAmountError returns the union data inside the CancelPaymentError as a CancelAmountExceedsCancellableAmountError
func (t CancelPaymentError) AsCancelAmountExceedsCancellableAmountError() (CancelAmountExceedsCancellableAmountError, error) {
	var body CancelAmountExceedsCancellableAmountError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCancelAmountExceedsCancellableAmountError overwrites any union data inside the CancelPaymentError as the provided CancelAmountExceedsCancellableAmountError
func (t *CancelPaymentError) FromCancelAmountExceedsCancellableAmountError(v CancelAmountExceedsCancellableAmountError) error {
	v.Type = "CANCEL_AMOUNT_EXCEEDS_CANCELLABLE_AMOUNT"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCancelAmountExceedsCancellableAmountError performs a merge with any union data inside the CancelPaymentError, using the provided CancelAmountExceedsCancellableAmountError
func (t *CancelPaymentError) MergeCancelAmountExceedsCancellableAmountError(v CancelAmountExceedsCancellableAmountError) error {
	v.Type = "CANCEL_AMOUNT_EXCEEDS_CANCELLABLE_AMOUNT"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCancelTaxAmountExceedsCancellableTaxAmountError returns the union data inside the CancelPaymentError as a CancelTaxAmountExceedsCancellableTaxAmountError
func (t CancelPaymentError) AsCancelTaxAmountExceedsCancellableTaxAmountError() (CancelTaxAmountExceedsCancellableTaxAmountError, error) {
	var body CancelTaxAmountExceedsCancellableTaxAmountError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCancelTaxAmountExceedsCancellableTaxAmountError overwrites any union data inside the CancelPaymentError as the provided CancelTaxAmountExceedsCancellableTaxAmountError
func (t *CancelPaymentError) FromCancelTaxAmountExceedsCancellableTaxAmountError(v CancelTaxAmountExceedsCancellableTaxAmountError) error {
	v.Type = "CANCEL_TAX_AMOUNT_EXCEEDS_CANCELLABLE_TAX_AMOUNT"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCancelTaxAmountExceedsCancellableTaxAmountError performs a merge with any union data inside the CancelPaymentError, using the provided CancelTaxAmountExceedsCancellableTaxAmountError
func (t *CancelPaymentError) MergeCancelTaxAmountExceedsCancellableTaxAmountError(v CancelTaxAmountExceedsCancellableTaxAmountError) error {
	v.Type = "CANCEL_TAX_AMOUNT_EXCEEDS_CANCELLABLE_TAX_AMOUNT"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCancelTaxFreeAmountExceedsCancellableTaxFreeAmountError returns the union data inside the CancelPaymentError as a CancelTaxFreeAmountExceedsCancellableTaxFreeAmountError
func (t CancelPaymentError) AsCancelTaxFreeAmountExceedsCancellableTaxFreeAmountError() (CancelTaxFreeAmountExceedsCancellableTaxFreeAmountError, error) {
	var body CancelTaxFreeAmountExceedsCancellableTaxFreeAmountError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCancelTaxFreeAmountExceedsCancellableTaxFreeAmountError overwrites any union data inside the CancelPaymentError as the provided CancelTaxFreeAmountExceedsCancellableTaxFreeAmountError
func (t *CancelPaymentError) FromCancelTaxFreeAmountExceedsCancellableTaxFreeAmountError(v CancelTaxFreeAmountExceedsCancellableTaxFreeAmountError) error {
	v.Type = "CANCEL_TAX_FREE_AMOUNT_EXCEEDS_CANCELLABLE_TAX_FREE_AMOUNT"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCancelTaxFreeAmountExceedsCancellableTaxFreeAmountError performs a merge with any union data inside the CancelPaymentError, using the provided CancelTaxFreeAmountExceedsCancellableTaxFreeAmountError
func (t *CancelPaymentError) MergeCancelTaxFreeAmountExceedsCancellableTaxFreeAmountError(v CancelTaxFreeAmountExceedsCancellableTaxFreeAmountError) error {
	v.Type = "CANCEL_TAX_FREE_AMOUNT_EXCEEDS_CANCELLABLE_TAX_FREE_AMOUNT"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCancellableAmountConsistencyBrokenError returns the union data inside the CancelPaymentError as a CancellableAmountConsistencyBrokenError
func (t CancelPaymentError) AsCancellableAmountConsistencyBrokenError() (CancellableAmountConsistencyBrokenError, error) {
	var body CancellableAmountConsistencyBrokenError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCancellableAmountConsistencyBrokenError overwrites any union data inside the CancelPaymentError as the provided CancellableAmountConsistencyBrokenError
func (t *CancelPaymentError) FromCancellableAmountConsistencyBrokenError(v CancellableAmountConsistencyBrokenError) error {
	v.Type = "CANCELLABLE_AMOUNT_CONSISTENCY_BROKEN"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCancellableAmountConsistencyBrokenError performs a merge with any union data inside the CancelPaymentError, using the provided CancellableAmountConsistencyBrokenError
func (t *CancelPaymentError) MergeCancellableAmountConsistencyBrokenError(v CancellableAmountConsistencyBrokenError) error {
	v.Type = "CANCELLABLE_AMOUNT_CONSISTENCY_BROKEN"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsForbiddenError returns the union data inside the CancelPaymentError as a ForbiddenError
func (t CancelPaymentError) AsForbiddenError() (ForbiddenError, error) {
	var body ForbiddenError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromForbiddenError overwrites any union data inside the CancelPaymentError as the provided ForbiddenError
func (t *CancelPaymentError) FromForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeForbiddenError performs a merge with any union data inside the CancelPaymentError, using the provided ForbiddenError
func (t *CancelPaymentError) MergeForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInvalidRequestError returns the union data inside the CancelPaymentError as a InvalidRequestError
func (t CancelPaymentError) AsInvalidRequestError() (InvalidRequestError, error) {
	var body InvalidRequestError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInvalidRequestError overwrites any union data inside the CancelPaymentError as the provided InvalidRequestError
func (t *CancelPaymentError) FromInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInvalidRequestError performs a merge with any union data inside the CancelPaymentError, using the provided InvalidRequestError
func (t *CancelPaymentError) MergeInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNegativePromotionAdjustedCancelAmountError returns the union data inside the CancelPaymentError as a NegativePromotionAdjustedCancelAmountError
func (t CancelPaymentError) AsNegativePromotionAdjustedCancelAmountError() (NegativePromotionAdjustedCancelAmountError, error) {
	var body NegativePromotionAdjustedCancelAmountError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNegativePromotionAdjustedCancelAmountError overwrites any union data inside the CancelPaymentError as the provided NegativePromotionAdjustedCancelAmountError
func (t *CancelPaymentError) FromNegativePromotionAdjustedCancelAmountError(v NegativePromotionAdjustedCancelAmountError) error {
	v.Type = "NEGATIVE_PROMOTION_ADJUSTED_CANCEL_AMOUNT"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNegativePromotionAdjustedCancelAmountError performs a merge with any union data inside the CancelPaymentError, using the provided NegativePromotionAdjustedCancelAmountError
func (t *CancelPaymentError) MergeNegativePromotionAdjustedCancelAmountError(v NegativePromotionAdjustedCancelAmountError) error {
	v.Type = "NEGATIVE_PROMOTION_ADJUSTED_CANCEL_AMOUNT"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPaymentAlreadyCancelledError returns the union data inside the CancelPaymentError as a PaymentAlreadyCancelledError
func (t CancelPaymentError) AsPaymentAlreadyCancelledError() (PaymentAlreadyCancelledError, error) {
	var body PaymentAlreadyCancelledError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPaymentAlreadyCancelledError overwrites any union data inside the CancelPaymentError as the provided PaymentAlreadyCancelledError
func (t *CancelPaymentError) FromPaymentAlreadyCancelledError(v PaymentAlreadyCancelledError) error {
	v.Type = "PAYMENT_ALREADY_CANCELLED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePaymentAlreadyCancelledError performs a merge with any union data inside the CancelPaymentError, using the provided PaymentAlreadyCancelledError
func (t *CancelPaymentError) MergePaymentAlreadyCancelledError(v PaymentAlreadyCancelledError) error {
	v.Type = "PAYMENT_ALREADY_CANCELLED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPaymentNotFoundError returns the union data inside the CancelPaymentError as a PaymentNotFoundError
func (t CancelPaymentError) AsPaymentNotFoundError() (PaymentNotFoundError, error) {
	var body PaymentNotFoundError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPaymentNotFoundError overwrites any union data inside the CancelPaymentError as the provided PaymentNotFoundError
func (t *CancelPaymentError) FromPaymentNotFoundError(v PaymentNotFoundError) error {
	v.Type = "PAYMENT_NOT_FOUND"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePaymentNotFoundError performs a merge with any union data inside the CancelPaymentError, using the provided PaymentNotFoundError
func (t *CancelPaymentError) MergePaymentNotFoundError(v PaymentNotFoundError) error {
	v.Type = "PAYMENT_NOT_FOUND"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPaymentNotPaidError returns the union data inside the CancelPaymentError as a PaymentNotPaidError
func (t CancelPaymentError) AsPaymentNotPaidError() (PaymentNotPaidError, error) {
	var body PaymentNotPaidError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPaymentNotPaidError overwrites any union data inside the CancelPaymentError as the provided PaymentNotPaidError
func (t *CancelPaymentError) FromPaymentNotPaidError(v PaymentNotPaidError) error {
	v.Type = "PAYMENT_NOT_PAID"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePaymentNotPaidError performs a merge with any union data inside the CancelPaymentError, using the provided PaymentNotPaidError
func (t *CancelPaymentError) MergePaymentNotPaidError(v PaymentNotPaidError) error {
	v.Type = "PAYMENT_NOT_PAID"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPgProviderError returns the union data inside the CancelPaymentError as a PgProviderError
func (t CancelPaymentError) AsPgProviderError() (PgProviderError, error) {
	var body PgProviderError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPgProviderError overwrites any union data inside the CancelPaymentError as the provided PgProviderError
func (t *CancelPaymentError) FromPgProviderError(v PgProviderError) error {
	v.Type = "PG_PROVIDER"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePgProviderError performs a merge with any union data inside the CancelPaymentError, using the provided PgProviderError
func (t *CancelPaymentError) MergePgProviderError(v PgProviderError) error {
	v.Type = "PG_PROVIDER"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPromotionDiscountRetainOptionShouldNotBeChangedError returns the union data inside the CancelPaymentError as a PromotionDiscountRetainOptionShouldNotBeChangedError
func (t CancelPaymentError) AsPromotionDiscountRetainOptionShouldNotBeChangedError() (PromotionDiscountRetainOptionShouldNotBeChangedError, error) {
	var body PromotionDiscountRetainOptionShouldNotBeChangedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPromotionDiscountRetainOptionShouldNotBeChangedError overwrites any union data inside the CancelPaymentError as the provided PromotionDiscountRetainOptionShouldNotBeChangedError
func (t *CancelPaymentError) FromPromotionDiscountRetainOptionShouldNotBeChangedError(v PromotionDiscountRetainOptionShouldNotBeChangedError) error {
	v.Type = "PROMOTION_DISCOUNT_RETAIN_OPTION_SHOULD_NOT_BE_CHANGED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePromotionDiscountRetainOptionShouldNotBeChangedError performs a merge with any union data inside the CancelPaymentError, using the provided PromotionDiscountRetainOptionShouldNotBeChangedError
func (t *CancelPaymentError) MergePromotionDiscountRetainOptionShouldNotBeChangedError(v PromotionDiscountRetainOptionShouldNotBeChangedError) error {
	v.Type = "PROMOTION_DISCOUNT_RETAIN_OPTION_SHOULD_NOT_BE_CHANGED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSumOfPartsExceedsCancelAmountError returns the union data inside the CancelPaymentError as a SumOfPartsExceedsCancelAmountError
func (t CancelPaymentError) AsSumOfPartsExceedsCancelAmountError() (SumOfPartsExceedsCancelAmountError, error) {
	var body SumOfPartsExceedsCancelAmountError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSumOfPartsExceedsCancelAmountError overwrites any union data inside the CancelPaymentError as the provided SumOfPartsExceedsCancelAmountError
func (t *CancelPaymentError) FromSumOfPartsExceedsCancelAmountError(v SumOfPartsExceedsCancelAmountError) error {
	v.Type = "SUM_OF_PARTS_EXCEEDS_CANCEL_AMOUNT"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSumOfPartsExceedsCancelAmountError performs a merge with any union data inside the CancelPaymentError, using the provided SumOfPartsExceedsCancelAmountError
func (t *CancelPaymentError) MergeSumOfPartsExceedsCancelAmountError(v SumOfPartsExceedsCancelAmountError) error {
	v.Type = "SUM_OF_PARTS_EXCEEDS_CANCEL_AMOUNT"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUnauthorizedError returns the union data inside the CancelPaymentError as a UnauthorizedError
func (t CancelPaymentError) AsUnauthorizedError() (UnauthorizedError, error) {
	var body UnauthorizedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUnauthorizedError overwrites any union data inside the CancelPaymentError as the provided UnauthorizedError
func (t *CancelPaymentError) FromUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUnauthorizedError performs a merge with any union data inside the CancelPaymentError, using the provided UnauthorizedError
func (t *CancelPaymentError) MergeUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t CancelPaymentError) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t CancelPaymentError) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "CANCELLABLE_AMOUNT_CONSISTENCY_BROKEN":
		return t.AsCancellableAmountConsistencyBrokenError()
	case "CANCEL_AMOUNT_EXCEEDS_CANCELLABLE_AMOUNT":
		return t.AsCancelAmountExceedsCancellableAmountError()
	case "CANCEL_TAX_AMOUNT_EXCEEDS_CANCELLABLE_TAX_AMOUNT":
		return t.AsCancelTaxAmountExceedsCancellableTaxAmountError()
	case "CANCEL_TAX_FREE_AMOUNT_EXCEEDS_CANCELLABLE_TAX_FREE_AMOUNT":
		return t.AsCancelTaxFreeAmountExceedsCancellableTaxFreeAmountError()
	case "FORBIDDEN":
		return t.AsForbiddenError()
	case "INVALID_REQUEST":
		return t.AsInvalidRequestError()
	case "NEGATIVE_PROMOTION_ADJUSTED_CANCEL_AMOUNT":
		return t.AsNegativePromotionAdjustedCancelAmountError()
	case "PAYMENT_ALREADY_CANCELLED":
		return t.AsPaymentAlreadyCancelledError()
	case "PAYMENT_NOT_FOUND":
		return t.AsPaymentNotFoundError()
	case "PAYMENT_NOT_PAID":
		return t.AsPaymentNotPaidError()
	case "PG_PROVIDER":
		return t.AsPgProviderError()
	case "PROMOTION_DISCOUNT_RETAIN_OPTION_SHOULD_NOT_BE_CHANGED":
		return t.AsPromotionDiscountRetainOptionShouldNotBeChangedError()
	case "SUM_OF_PARTS_EXCEEDS_CANCEL_AMOUNT":
		return t.AsSumOfPartsExceedsCancelAmountError()
	case "UNAUTHORIZED":
		return t.AsUnauthorizedError()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t CancelPaymentError) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CancelPaymentError) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsForbiddenError returns the union data inside the CancelPlatformAdditionalFeePolicyScheduleError as a ForbiddenError
func (t CancelPlatformAdditionalFeePolicyScheduleError) AsForbiddenError() (ForbiddenError, error) {
	var body ForbiddenError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromForbiddenError overwrites any union data inside the CancelPlatformAdditionalFeePolicyScheduleError as the provided ForbiddenError
func (t *CancelPlatformAdditionalFeePolicyScheduleError) FromForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeForbiddenError performs a merge with any union data inside the CancelPlatformAdditionalFeePolicyScheduleError, using the provided ForbiddenError
func (t *CancelPlatformAdditionalFeePolicyScheduleError) MergeForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInvalidRequestError returns the union data inside the CancelPlatformAdditionalFeePolicyScheduleError as a InvalidRequestError
func (t CancelPlatformAdditionalFeePolicyScheduleError) AsInvalidRequestError() (InvalidRequestError, error) {
	var body InvalidRequestError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInvalidRequestError overwrites any union data inside the CancelPlatformAdditionalFeePolicyScheduleError as the provided InvalidRequestError
func (t *CancelPlatformAdditionalFeePolicyScheduleError) FromInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInvalidRequestError performs a merge with any union data inside the CancelPlatformAdditionalFeePolicyScheduleError, using the provided InvalidRequestError
func (t *CancelPlatformAdditionalFeePolicyScheduleError) MergeInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformAdditionalFeePolicyNotFoundError returns the union data inside the CancelPlatformAdditionalFeePolicyScheduleError as a PlatformAdditionalFeePolicyNotFoundError
func (t CancelPlatformAdditionalFeePolicyScheduleError) AsPlatformAdditionalFeePolicyNotFoundError() (PlatformAdditionalFeePolicyNotFoundError, error) {
	var body PlatformAdditionalFeePolicyNotFoundError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformAdditionalFeePolicyNotFoundError overwrites any union data inside the CancelPlatformAdditionalFeePolicyScheduleError as the provided PlatformAdditionalFeePolicyNotFoundError
func (t *CancelPlatformAdditionalFeePolicyScheduleError) FromPlatformAdditionalFeePolicyNotFoundError(v PlatformAdditionalFeePolicyNotFoundError) error {
	v.Type = "PLATFORM_ADDITIONAL_FEE_POLICY_NOT_FOUND"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformAdditionalFeePolicyNotFoundError performs a merge with any union data inside the CancelPlatformAdditionalFeePolicyScheduleError, using the provided PlatformAdditionalFeePolicyNotFoundError
func (t *CancelPlatformAdditionalFeePolicyScheduleError) MergePlatformAdditionalFeePolicyNotFoundError(v PlatformAdditionalFeePolicyNotFoundError) error {
	v.Type = "PLATFORM_ADDITIONAL_FEE_POLICY_NOT_FOUND"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformNotEnabledError returns the union data inside the CancelPlatformAdditionalFeePolicyScheduleError as a PlatformNotEnabledError
func (t CancelPlatformAdditionalFeePolicyScheduleError) AsPlatformNotEnabledError() (PlatformNotEnabledError, error) {
	var body PlatformNotEnabledError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformNotEnabledError overwrites any union data inside the CancelPlatformAdditionalFeePolicyScheduleError as the provided PlatformNotEnabledError
func (t *CancelPlatformAdditionalFeePolicyScheduleError) FromPlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformNotEnabledError performs a merge with any union data inside the CancelPlatformAdditionalFeePolicyScheduleError, using the provided PlatformNotEnabledError
func (t *CancelPlatformAdditionalFeePolicyScheduleError) MergePlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUnauthorizedError returns the union data inside the CancelPlatformAdditionalFeePolicyScheduleError as a UnauthorizedError
func (t CancelPlatformAdditionalFeePolicyScheduleError) AsUnauthorizedError() (UnauthorizedError, error) {
	var body UnauthorizedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUnauthorizedError overwrites any union data inside the CancelPlatformAdditionalFeePolicyScheduleError as the provided UnauthorizedError
func (t *CancelPlatformAdditionalFeePolicyScheduleError) FromUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUnauthorizedError performs a merge with any union data inside the CancelPlatformAdditionalFeePolicyScheduleError, using the provided UnauthorizedError
func (t *CancelPlatformAdditionalFeePolicyScheduleError) MergeUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t CancelPlatformAdditionalFeePolicyScheduleError) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t CancelPlatformAdditionalFeePolicyScheduleError) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "FORBIDDEN":
		return t.AsForbiddenError()
	case "INVALID_REQUEST":
		return t.AsInvalidRequestError()
	case "PLATFORM_ADDITIONAL_FEE_POLICY_NOT_FOUND":
		return t.AsPlatformAdditionalFeePolicyNotFoundError()
	case "PLATFORM_NOT_ENABLED":
		return t.AsPlatformNotEnabledError()
	case "UNAUTHORIZED":
		return t.AsUnauthorizedError()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t CancelPlatformAdditionalFeePolicyScheduleError) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CancelPlatformAdditionalFeePolicyScheduleError) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsForbiddenError returns the union data inside the CancelPlatformContractScheduleError as a ForbiddenError
func (t CancelPlatformContractScheduleError) AsForbiddenError() (ForbiddenError, error) {
	var body ForbiddenError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromForbiddenError overwrites any union data inside the CancelPlatformContractScheduleError as the provided ForbiddenError
func (t *CancelPlatformContractScheduleError) FromForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeForbiddenError performs a merge with any union data inside the CancelPlatformContractScheduleError, using the provided ForbiddenError
func (t *CancelPlatformContractScheduleError) MergeForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInvalidRequestError returns the union data inside the CancelPlatformContractScheduleError as a InvalidRequestError
func (t CancelPlatformContractScheduleError) AsInvalidRequestError() (InvalidRequestError, error) {
	var body InvalidRequestError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInvalidRequestError overwrites any union data inside the CancelPlatformContractScheduleError as the provided InvalidRequestError
func (t *CancelPlatformContractScheduleError) FromInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInvalidRequestError performs a merge with any union data inside the CancelPlatformContractScheduleError, using the provided InvalidRequestError
func (t *CancelPlatformContractScheduleError) MergeInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformContractNotFoundError returns the union data inside the CancelPlatformContractScheduleError as a PlatformContractNotFoundError
func (t CancelPlatformContractScheduleError) AsPlatformContractNotFoundError() (PlatformContractNotFoundError, error) {
	var body PlatformContractNotFoundError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformContractNotFoundError overwrites any union data inside the CancelPlatformContractScheduleError as the provided PlatformContractNotFoundError
func (t *CancelPlatformContractScheduleError) FromPlatformContractNotFoundError(v PlatformContractNotFoundError) error {
	v.Type = "PLATFORM_CONTRACT_NOT_FOUND"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformContractNotFoundError performs a merge with any union data inside the CancelPlatformContractScheduleError, using the provided PlatformContractNotFoundError
func (t *CancelPlatformContractScheduleError) MergePlatformContractNotFoundError(v PlatformContractNotFoundError) error {
	v.Type = "PLATFORM_CONTRACT_NOT_FOUND"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformNotEnabledError returns the union data inside the CancelPlatformContractScheduleError as a PlatformNotEnabledError
func (t CancelPlatformContractScheduleError) AsPlatformNotEnabledError() (PlatformNotEnabledError, error) {
	var body PlatformNotEnabledError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformNotEnabledError overwrites any union data inside the CancelPlatformContractScheduleError as the provided PlatformNotEnabledError
func (t *CancelPlatformContractScheduleError) FromPlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformNotEnabledError performs a merge with any union data inside the CancelPlatformContractScheduleError, using the provided PlatformNotEnabledError
func (t *CancelPlatformContractScheduleError) MergePlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUnauthorizedError returns the union data inside the CancelPlatformContractScheduleError as a UnauthorizedError
func (t CancelPlatformContractScheduleError) AsUnauthorizedError() (UnauthorizedError, error) {
	var body UnauthorizedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUnauthorizedError overwrites any union data inside the CancelPlatformContractScheduleError as the provided UnauthorizedError
func (t *CancelPlatformContractScheduleError) FromUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUnauthorizedError performs a merge with any union data inside the CancelPlatformContractScheduleError, using the provided UnauthorizedError
func (t *CancelPlatformContractScheduleError) MergeUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t CancelPlatformContractScheduleError) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t CancelPlatformContractScheduleError) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "FORBIDDEN":
		return t.AsForbiddenError()
	case "INVALID_REQUEST":
		return t.AsInvalidRequestError()
	case "PLATFORM_CONTRACT_NOT_FOUND":
		return t.AsPlatformContractNotFoundError()
	case "PLATFORM_NOT_ENABLED":
		return t.AsPlatformNotEnabledError()
	case "UNAUTHORIZED":
		return t.AsUnauthorizedError()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t CancelPlatformContractScheduleError) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CancelPlatformContractScheduleError) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsForbiddenError returns the union data inside the CancelPlatformDiscountSharePolicyScheduleError as a ForbiddenError
func (t CancelPlatformDiscountSharePolicyScheduleError) AsForbiddenError() (ForbiddenError, error) {
	var body ForbiddenError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromForbiddenError overwrites any union data inside the CancelPlatformDiscountSharePolicyScheduleError as the provided ForbiddenError
func (t *CancelPlatformDiscountSharePolicyScheduleError) FromForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeForbiddenError performs a merge with any union data inside the CancelPlatformDiscountSharePolicyScheduleError, using the provided ForbiddenError
func (t *CancelPlatformDiscountSharePolicyScheduleError) MergeForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInvalidRequestError returns the union data inside the CancelPlatformDiscountSharePolicyScheduleError as a InvalidRequestError
func (t CancelPlatformDiscountSharePolicyScheduleError) AsInvalidRequestError() (InvalidRequestError, error) {
	var body InvalidRequestError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInvalidRequestError overwrites any union data inside the CancelPlatformDiscountSharePolicyScheduleError as the provided InvalidRequestError
func (t *CancelPlatformDiscountSharePolicyScheduleError) FromInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInvalidRequestError performs a merge with any union data inside the CancelPlatformDiscountSharePolicyScheduleError, using the provided InvalidRequestError
func (t *CancelPlatformDiscountSharePolicyScheduleError) MergeInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformDiscountSharePolicyNotFoundError returns the union data inside the CancelPlatformDiscountSharePolicyScheduleError as a PlatformDiscountSharePolicyNotFoundError
func (t CancelPlatformDiscountSharePolicyScheduleError) AsPlatformDiscountSharePolicyNotFoundError() (PlatformDiscountSharePolicyNotFoundError, error) {
	var body PlatformDiscountSharePolicyNotFoundError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformDiscountSharePolicyNotFoundError overwrites any union data inside the CancelPlatformDiscountSharePolicyScheduleError as the provided PlatformDiscountSharePolicyNotFoundError
func (t *CancelPlatformDiscountSharePolicyScheduleError) FromPlatformDiscountSharePolicyNotFoundError(v PlatformDiscountSharePolicyNotFoundError) error {
	v.Type = "PLATFORM_DISCOUNT_SHARE_POLICY_NOT_FOUND"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformDiscountSharePolicyNotFoundError performs a merge with any union data inside the CancelPlatformDiscountSharePolicyScheduleError, using the provided PlatformDiscountSharePolicyNotFoundError
func (t *CancelPlatformDiscountSharePolicyScheduleError) MergePlatformDiscountSharePolicyNotFoundError(v PlatformDiscountSharePolicyNotFoundError) error {
	v.Type = "PLATFORM_DISCOUNT_SHARE_POLICY_NOT_FOUND"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformNotEnabledError returns the union data inside the CancelPlatformDiscountSharePolicyScheduleError as a PlatformNotEnabledError
func (t CancelPlatformDiscountSharePolicyScheduleError) AsPlatformNotEnabledError() (PlatformNotEnabledError, error) {
	var body PlatformNotEnabledError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformNotEnabledError overwrites any union data inside the CancelPlatformDiscountSharePolicyScheduleError as the provided PlatformNotEnabledError
func (t *CancelPlatformDiscountSharePolicyScheduleError) FromPlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformNotEnabledError performs a merge with any union data inside the CancelPlatformDiscountSharePolicyScheduleError, using the provided PlatformNotEnabledError
func (t *CancelPlatformDiscountSharePolicyScheduleError) MergePlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUnauthorizedError returns the union data inside the CancelPlatformDiscountSharePolicyScheduleError as a UnauthorizedError
func (t CancelPlatformDiscountSharePolicyScheduleError) AsUnauthorizedError() (UnauthorizedError, error) {
	var body UnauthorizedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUnauthorizedError overwrites any union data inside the CancelPlatformDiscountSharePolicyScheduleError as the provided UnauthorizedError
func (t *CancelPlatformDiscountSharePolicyScheduleError) FromUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUnauthorizedError performs a merge with any union data inside the CancelPlatformDiscountSharePolicyScheduleError, using the provided UnauthorizedError
func (t *CancelPlatformDiscountSharePolicyScheduleError) MergeUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t CancelPlatformDiscountSharePolicyScheduleError) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t CancelPlatformDiscountSharePolicyScheduleError) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "FORBIDDEN":
		return t.AsForbiddenError()
	case "INVALID_REQUEST":
		return t.AsInvalidRequestError()
	case "PLATFORM_DISCOUNT_SHARE_POLICY_NOT_FOUND":
		return t.AsPlatformDiscountSharePolicyNotFoundError()
	case "PLATFORM_NOT_ENABLED":
		return t.AsPlatformNotEnabledError()
	case "UNAUTHORIZED":
		return t.AsUnauthorizedError()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t CancelPlatformDiscountSharePolicyScheduleError) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CancelPlatformDiscountSharePolicyScheduleError) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsForbiddenError returns the union data inside the CancelPlatformPartnerScheduleError as a ForbiddenError
func (t CancelPlatformPartnerScheduleError) AsForbiddenError() (ForbiddenError, error) {
	var body ForbiddenError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromForbiddenError overwrites any union data inside the CancelPlatformPartnerScheduleError as the provided ForbiddenError
func (t *CancelPlatformPartnerScheduleError) FromForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeForbiddenError performs a merge with any union data inside the CancelPlatformPartnerScheduleError, using the provided ForbiddenError
func (t *CancelPlatformPartnerScheduleError) MergeForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInvalidRequestError returns the union data inside the CancelPlatformPartnerScheduleError as a InvalidRequestError
func (t CancelPlatformPartnerScheduleError) AsInvalidRequestError() (InvalidRequestError, error) {
	var body InvalidRequestError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInvalidRequestError overwrites any union data inside the CancelPlatformPartnerScheduleError as the provided InvalidRequestError
func (t *CancelPlatformPartnerScheduleError) FromInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInvalidRequestError performs a merge with any union data inside the CancelPlatformPartnerScheduleError, using the provided InvalidRequestError
func (t *CancelPlatformPartnerScheduleError) MergeInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformNotEnabledError returns the union data inside the CancelPlatformPartnerScheduleError as a PlatformNotEnabledError
func (t CancelPlatformPartnerScheduleError) AsPlatformNotEnabledError() (PlatformNotEnabledError, error) {
	var body PlatformNotEnabledError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformNotEnabledError overwrites any union data inside the CancelPlatformPartnerScheduleError as the provided PlatformNotEnabledError
func (t *CancelPlatformPartnerScheduleError) FromPlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformNotEnabledError performs a merge with any union data inside the CancelPlatformPartnerScheduleError, using the provided PlatformNotEnabledError
func (t *CancelPlatformPartnerScheduleError) MergePlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformPartnerNotFoundError returns the union data inside the CancelPlatformPartnerScheduleError as a PlatformPartnerNotFoundError
func (t CancelPlatformPartnerScheduleError) AsPlatformPartnerNotFoundError() (PlatformPartnerNotFoundError, error) {
	var body PlatformPartnerNotFoundError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformPartnerNotFoundError overwrites any union data inside the CancelPlatformPartnerScheduleError as the provided PlatformPartnerNotFoundError
func (t *CancelPlatformPartnerScheduleError) FromPlatformPartnerNotFoundError(v PlatformPartnerNotFoundError) error {
	v.Type = "PLATFORM_PARTNER_NOT_FOUND"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformPartnerNotFoundError performs a merge with any union data inside the CancelPlatformPartnerScheduleError, using the provided PlatformPartnerNotFoundError
func (t *CancelPlatformPartnerScheduleError) MergePlatformPartnerNotFoundError(v PlatformPartnerNotFoundError) error {
	v.Type = "PLATFORM_PARTNER_NOT_FOUND"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUnauthorizedError returns the union data inside the CancelPlatformPartnerScheduleError as a UnauthorizedError
func (t CancelPlatformPartnerScheduleError) AsUnauthorizedError() (UnauthorizedError, error) {
	var body UnauthorizedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUnauthorizedError overwrites any union data inside the CancelPlatformPartnerScheduleError as the provided UnauthorizedError
func (t *CancelPlatformPartnerScheduleError) FromUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUnauthorizedError performs a merge with any union data inside the CancelPlatformPartnerScheduleError, using the provided UnauthorizedError
func (t *CancelPlatformPartnerScheduleError) MergeUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t CancelPlatformPartnerScheduleError) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t CancelPlatformPartnerScheduleError) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "FORBIDDEN":
		return t.AsForbiddenError()
	case "INVALID_REQUEST":
		return t.AsInvalidRequestError()
	case "PLATFORM_NOT_ENABLED":
		return t.AsPlatformNotEnabledError()
	case "PLATFORM_PARTNER_NOT_FOUND":
		return t.AsPlatformPartnerNotFoundError()
	case "UNAUTHORIZED":
		return t.AsUnauthorizedError()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t CancelPlatformPartnerScheduleError) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CancelPlatformPartnerScheduleError) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsCancelledCashReceipt returns the union data inside the CashReceipt as a CancelledCashReceipt
func (t CashReceipt) AsCancelledCashReceipt() (CancelledCashReceipt, error) {
	var body CancelledCashReceipt
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCancelledCashReceipt overwrites any union data inside the CashReceipt as the provided CancelledCashReceipt
func (t *CashReceipt) FromCancelledCashReceipt(v CancelledCashReceipt) error {
	v.Status = "CANCELLED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCancelledCashReceipt performs a merge with any union data inside the CashReceipt, using the provided CancelledCashReceipt
func (t *CashReceipt) MergeCancelledCashReceipt(v CancelledCashReceipt) error {
	v.Status = "CANCELLED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsIssueFailedCashReceipt returns the union data inside the CashReceipt as a IssueFailedCashReceipt
func (t CashReceipt) AsIssueFailedCashReceipt() (IssueFailedCashReceipt, error) {
	var body IssueFailedCashReceipt
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromIssueFailedCashReceipt overwrites any union data inside the CashReceipt as the provided IssueFailedCashReceipt
func (t *CashReceipt) FromIssueFailedCashReceipt(v IssueFailedCashReceipt) error {
	v.Status = "ISSUE_FAILED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeIssueFailedCashReceipt performs a merge with any union data inside the CashReceipt, using the provided IssueFailedCashReceipt
func (t *CashReceipt) MergeIssueFailedCashReceipt(v IssueFailedCashReceipt) error {
	v.Status = "ISSUE_FAILED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsIssuedCashReceipt returns the union data inside the CashReceipt as a IssuedCashReceipt
func (t CashReceipt) AsIssuedCashReceipt() (IssuedCashReceipt, error) {
	var body IssuedCashReceipt
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromIssuedCashReceipt overwrites any union data inside the CashReceipt as the provided IssuedCashReceipt
func (t *CashReceipt) FromIssuedCashReceipt(v IssuedCashReceipt) error {
	v.Status = "ISSUED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeIssuedCashReceipt performs a merge with any union data inside the CashReceipt, using the provided IssuedCashReceipt
func (t *CashReceipt) MergeIssuedCashReceipt(v IssuedCashReceipt) error {
	v.Status = "ISSUED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t CashReceipt) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"status"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t CashReceipt) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "CANCELLED":
		return t.AsCancelledCashReceipt()
	case "ISSUED":
		return t.AsIssuedCashReceipt()
	case "ISSUE_FAILED":
		return t.AsIssueFailedCashReceipt()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t CashReceipt) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CashReceipt) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsChannelSpecificFailureInvalidRequest returns the union data inside the ChannelSpecificFailure as a ChannelSpecificFailureInvalidRequest
func (t ChannelSpecificFailure) AsChannelSpecificFailureInvalidRequest() (ChannelSpecificFailureInvalidRequest, error) {
	var body ChannelSpecificFailureInvalidRequest
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromChannelSpecificFailureInvalidRequest overwrites any union data inside the ChannelSpecificFailure as the provided ChannelSpecificFailureInvalidRequest
func (t *ChannelSpecificFailure) FromChannelSpecificFailureInvalidRequest(v ChannelSpecificFailureInvalidRequest) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeChannelSpecificFailureInvalidRequest performs a merge with any union data inside the ChannelSpecificFailure, using the provided ChannelSpecificFailureInvalidRequest
func (t *ChannelSpecificFailure) MergeChannelSpecificFailureInvalidRequest(v ChannelSpecificFailureInvalidRequest) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsChannelSpecificFailurePgProvider returns the union data inside the ChannelSpecificFailure as a ChannelSpecificFailurePgProvider
func (t ChannelSpecificFailure) AsChannelSpecificFailurePgProvider() (ChannelSpecificFailurePgProvider, error) {
	var body ChannelSpecificFailurePgProvider
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromChannelSpecificFailurePgProvider overwrites any union data inside the ChannelSpecificFailure as the provided ChannelSpecificFailurePgProvider
func (t *ChannelSpecificFailure) FromChannelSpecificFailurePgProvider(v ChannelSpecificFailurePgProvider) error {
	v.Type = "PG_PROVIDER"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeChannelSpecificFailurePgProvider performs a merge with any union data inside the ChannelSpecificFailure, using the provided ChannelSpecificFailurePgProvider
func (t *ChannelSpecificFailure) MergeChannelSpecificFailurePgProvider(v ChannelSpecificFailurePgProvider) error {
	v.Type = "PG_PROVIDER"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ChannelSpecificFailure) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t ChannelSpecificFailure) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "INVALID_REQUEST":
		return t.AsChannelSpecificFailureInvalidRequest()
	case "PG_PROVIDER":
		return t.AsChannelSpecificFailurePgProvider()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t ChannelSpecificFailure) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ChannelSpecificFailure) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsForbiddenError returns the union data inside the CloseVirtualAccountError as a ForbiddenError
func (t CloseVirtualAccountError) AsForbiddenError() (ForbiddenError, error) {
	var body ForbiddenError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromForbiddenError overwrites any union data inside the CloseVirtualAccountError as the provided ForbiddenError
func (t *CloseVirtualAccountError) FromForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeForbiddenError performs a merge with any union data inside the CloseVirtualAccountError, using the provided ForbiddenError
func (t *CloseVirtualAccountError) MergeForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInvalidRequestError returns the union data inside the CloseVirtualAccountError as a InvalidRequestError
func (t CloseVirtualAccountError) AsInvalidRequestError() (InvalidRequestError, error) {
	var body InvalidRequestError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInvalidRequestError overwrites any union data inside the CloseVirtualAccountError as the provided InvalidRequestError
func (t *CloseVirtualAccountError) FromInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInvalidRequestError performs a merge with any union data inside the CloseVirtualAccountError, using the provided InvalidRequestError
func (t *CloseVirtualAccountError) MergeInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPaymentNotFoundError returns the union data inside the CloseVirtualAccountError as a PaymentNotFoundError
func (t CloseVirtualAccountError) AsPaymentNotFoundError() (PaymentNotFoundError, error) {
	var body PaymentNotFoundError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPaymentNotFoundError overwrites any union data inside the CloseVirtualAccountError as the provided PaymentNotFoundError
func (t *CloseVirtualAccountError) FromPaymentNotFoundError(v PaymentNotFoundError) error {
	v.Type = "PAYMENT_NOT_FOUND"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePaymentNotFoundError performs a merge with any union data inside the CloseVirtualAccountError, using the provided PaymentNotFoundError
func (t *CloseVirtualAccountError) MergePaymentNotFoundError(v PaymentNotFoundError) error {
	v.Type = "PAYMENT_NOT_FOUND"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPaymentNotWaitingForDepositError returns the union data inside the CloseVirtualAccountError as a PaymentNotWaitingForDepositError
func (t CloseVirtualAccountError) AsPaymentNotWaitingForDepositError() (PaymentNotWaitingForDepositError, error) {
	var body PaymentNotWaitingForDepositError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPaymentNotWaitingForDepositError overwrites any union data inside the CloseVirtualAccountError as the provided PaymentNotWaitingForDepositError
func (t *CloseVirtualAccountError) FromPaymentNotWaitingForDepositError(v PaymentNotWaitingForDepositError) error {
	v.Type = "PAYMENT_NOT_WAITING_FOR_DEPOSIT"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePaymentNotWaitingForDepositError performs a merge with any union data inside the CloseVirtualAccountError, using the provided PaymentNotWaitingForDepositError
func (t *CloseVirtualAccountError) MergePaymentNotWaitingForDepositError(v PaymentNotWaitingForDepositError) error {
	v.Type = "PAYMENT_NOT_WAITING_FOR_DEPOSIT"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPgProviderError returns the union data inside the CloseVirtualAccountError as a PgProviderError
func (t CloseVirtualAccountError) AsPgProviderError() (PgProviderError, error) {
	var body PgProviderError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPgProviderError overwrites any union data inside the CloseVirtualAccountError as the provided PgProviderError
func (t *CloseVirtualAccountError) FromPgProviderError(v PgProviderError) error {
	v.Type = "PG_PROVIDER"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePgProviderError performs a merge with any union data inside the CloseVirtualAccountError, using the provided PgProviderError
func (t *CloseVirtualAccountError) MergePgProviderError(v PgProviderError) error {
	v.Type = "PG_PROVIDER"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUnauthorizedError returns the union data inside the CloseVirtualAccountError as a UnauthorizedError
func (t CloseVirtualAccountError) AsUnauthorizedError() (UnauthorizedError, error) {
	var body UnauthorizedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUnauthorizedError overwrites any union data inside the CloseVirtualAccountError as the provided UnauthorizedError
func (t *CloseVirtualAccountError) FromUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUnauthorizedError performs a merge with any union data inside the CloseVirtualAccountError, using the provided UnauthorizedError
func (t *CloseVirtualAccountError) MergeUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t CloseVirtualAccountError) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t CloseVirtualAccountError) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "FORBIDDEN":
		return t.AsForbiddenError()
	case "INVALID_REQUEST":
		return t.AsInvalidRequestError()
	case "PAYMENT_NOT_FOUND":
		return t.AsPaymentNotFoundError()
	case "PAYMENT_NOT_WAITING_FOR_DEPOSIT":
		return t.AsPaymentNotWaitingForDepositError()
	case "PG_PROVIDER":
		return t.AsPgProviderError()
	case "UNAUTHORIZED":
		return t.AsUnauthorizedError()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t CloseVirtualAccountError) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CloseVirtualAccountError) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsForbiddenError returns the union data inside the ConfirmEscrowError as a ForbiddenError
func (t ConfirmEscrowError) AsForbiddenError() (ForbiddenError, error) {
	var body ForbiddenError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromForbiddenError overwrites any union data inside the ConfirmEscrowError as the provided ForbiddenError
func (t *ConfirmEscrowError) FromForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeForbiddenError performs a merge with any union data inside the ConfirmEscrowError, using the provided ForbiddenError
func (t *ConfirmEscrowError) MergeForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInvalidRequestError returns the union data inside the ConfirmEscrowError as a InvalidRequestError
func (t ConfirmEscrowError) AsInvalidRequestError() (InvalidRequestError, error) {
	var body InvalidRequestError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInvalidRequestError overwrites any union data inside the ConfirmEscrowError as the provided InvalidRequestError
func (t *ConfirmEscrowError) FromInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInvalidRequestError performs a merge with any union data inside the ConfirmEscrowError, using the provided InvalidRequestError
func (t *ConfirmEscrowError) MergeInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPaymentNotFoundError returns the union data inside the ConfirmEscrowError as a PaymentNotFoundError
func (t ConfirmEscrowError) AsPaymentNotFoundError() (PaymentNotFoundError, error) {
	var body PaymentNotFoundError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPaymentNotFoundError overwrites any union data inside the ConfirmEscrowError as the provided PaymentNotFoundError
func (t *ConfirmEscrowError) FromPaymentNotFoundError(v PaymentNotFoundError) error {
	v.Type = "PAYMENT_NOT_FOUND"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePaymentNotFoundError performs a merge with any union data inside the ConfirmEscrowError, using the provided PaymentNotFoundError
func (t *ConfirmEscrowError) MergePaymentNotFoundError(v PaymentNotFoundError) error {
	v.Type = "PAYMENT_NOT_FOUND"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPaymentNotPaidError returns the union data inside the ConfirmEscrowError as a PaymentNotPaidError
func (t ConfirmEscrowError) AsPaymentNotPaidError() (PaymentNotPaidError, error) {
	var body PaymentNotPaidError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPaymentNotPaidError overwrites any union data inside the ConfirmEscrowError as the provided PaymentNotPaidError
func (t *ConfirmEscrowError) FromPaymentNotPaidError(v PaymentNotPaidError) error {
	v.Type = "PAYMENT_NOT_PAID"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePaymentNotPaidError performs a merge with any union data inside the ConfirmEscrowError, using the provided PaymentNotPaidError
func (t *ConfirmEscrowError) MergePaymentNotPaidError(v PaymentNotPaidError) error {
	v.Type = "PAYMENT_NOT_PAID"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPgProviderError returns the union data inside the ConfirmEscrowError as a PgProviderError
func (t ConfirmEscrowError) AsPgProviderError() (PgProviderError, error) {
	var body PgProviderError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPgProviderError overwrites any union data inside the ConfirmEscrowError as the provided PgProviderError
func (t *ConfirmEscrowError) FromPgProviderError(v PgProviderError) error {
	v.Type = "PG_PROVIDER"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePgProviderError performs a merge with any union data inside the ConfirmEscrowError, using the provided PgProviderError
func (t *ConfirmEscrowError) MergePgProviderError(v PgProviderError) error {
	v.Type = "PG_PROVIDER"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUnauthorizedError returns the union data inside the ConfirmEscrowError as a UnauthorizedError
func (t ConfirmEscrowError) AsUnauthorizedError() (UnauthorizedError, error) {
	var body UnauthorizedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUnauthorizedError overwrites any union data inside the ConfirmEscrowError as the provided UnauthorizedError
func (t *ConfirmEscrowError) FromUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUnauthorizedError performs a merge with any union data inside the ConfirmEscrowError, using the provided UnauthorizedError
func (t *ConfirmEscrowError) MergeUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ConfirmEscrowError) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t ConfirmEscrowError) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "FORBIDDEN":
		return t.AsForbiddenError()
	case "INVALID_REQUEST":
		return t.AsInvalidRequestError()
	case "PAYMENT_NOT_FOUND":
		return t.AsPaymentNotFoundError()
	case "PAYMENT_NOT_PAID":
		return t.AsPaymentNotPaidError()
	case "PG_PROVIDER":
		return t.AsPgProviderError()
	case "UNAUTHORIZED":
		return t.AsUnauthorizedError()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t ConfirmEscrowError) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ConfirmEscrowError) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsForbiddenError returns the union data inside the ConfirmIdentityVerificationError as a ForbiddenError
func (t ConfirmIdentityVerificationError) AsForbiddenError() (ForbiddenError, error) {
	var body ForbiddenError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromForbiddenError overwrites any union data inside the ConfirmIdentityVerificationError as the provided ForbiddenError
func (t *ConfirmIdentityVerificationError) FromForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeForbiddenError performs a merge with any union data inside the ConfirmIdentityVerificationError, using the provided ForbiddenError
func (t *ConfirmIdentityVerificationError) MergeForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsIdentityVerificationAlreadyVerifiedError returns the union data inside the ConfirmIdentityVerificationError as a IdentityVerificationAlreadyVerifiedError
func (t ConfirmIdentityVerificationError) AsIdentityVerificationAlreadyVerifiedError() (IdentityVerificationAlreadyVerifiedError, error) {
	var body IdentityVerificationAlreadyVerifiedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromIdentityVerificationAlreadyVerifiedError overwrites any union data inside the ConfirmIdentityVerificationError as the provided IdentityVerificationAlreadyVerifiedError
func (t *ConfirmIdentityVerificationError) FromIdentityVerificationAlreadyVerifiedError(v IdentityVerificationAlreadyVerifiedError) error {
	v.Type = "IDENTITY_VERIFICATION_ALREADY_VERIFIED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeIdentityVerificationAlreadyVerifiedError performs a merge with any union data inside the ConfirmIdentityVerificationError, using the provided IdentityVerificationAlreadyVerifiedError
func (t *ConfirmIdentityVerificationError) MergeIdentityVerificationAlreadyVerifiedError(v IdentityVerificationAlreadyVerifiedError) error {
	v.Type = "IDENTITY_VERIFICATION_ALREADY_VERIFIED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsIdentityVerificationNotFoundError returns the union data inside the ConfirmIdentityVerificationError as a IdentityVerificationNotFoundError
func (t ConfirmIdentityVerificationError) AsIdentityVerificationNotFoundError() (IdentityVerificationNotFoundError, error) {
	var body IdentityVerificationNotFoundError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromIdentityVerificationNotFoundError overwrites any union data inside the ConfirmIdentityVerificationError as the provided IdentityVerificationNotFoundError
func (t *ConfirmIdentityVerificationError) FromIdentityVerificationNotFoundError(v IdentityVerificationNotFoundError) error {
	v.Type = "IDENTITY_VERIFICATION_NOT_FOUND"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeIdentityVerificationNotFoundError performs a merge with any union data inside the ConfirmIdentityVerificationError, using the provided IdentityVerificationNotFoundError
func (t *ConfirmIdentityVerificationError) MergeIdentityVerificationNotFoundError(v IdentityVerificationNotFoundError) error {
	v.Type = "IDENTITY_VERIFICATION_NOT_FOUND"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsIdentityVerificationNotSentError returns the union data inside the ConfirmIdentityVerificationError as a IdentityVerificationNotSentError
func (t ConfirmIdentityVerificationError) AsIdentityVerificationNotSentError() (IdentityVerificationNotSentError, error) {
	var body IdentityVerificationNotSentError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromIdentityVerificationNotSentError overwrites any union data inside the ConfirmIdentityVerificationError as the provided IdentityVerificationNotSentError
func (t *ConfirmIdentityVerificationError) FromIdentityVerificationNotSentError(v IdentityVerificationNotSentError) error {
	v.Type = "IDENTITY_VERIFICATION_NOT_SENT"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeIdentityVerificationNotSentError performs a merge with any union data inside the ConfirmIdentityVerificationError, using the provided IdentityVerificationNotSentError
func (t *ConfirmIdentityVerificationError) MergeIdentityVerificationNotSentError(v IdentityVerificationNotSentError) error {
	v.Type = "IDENTITY_VERIFICATION_NOT_SENT"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInvalidRequestError returns the union data inside the ConfirmIdentityVerificationError as a InvalidRequestError
func (t ConfirmIdentityVerificationError) AsInvalidRequestError() (InvalidRequestError, error) {
	var body InvalidRequestError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInvalidRequestError overwrites any union data inside the ConfirmIdentityVerificationError as the provided InvalidRequestError
func (t *ConfirmIdentityVerificationError) FromInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInvalidRequestError performs a merge with any union data inside the ConfirmIdentityVerificationError, using the provided InvalidRequestError
func (t *ConfirmIdentityVerificationError) MergeInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPgProviderError returns the union data inside the ConfirmIdentityVerificationError as a PgProviderError
func (t ConfirmIdentityVerificationError) AsPgProviderError() (PgProviderError, error) {
	var body PgProviderError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPgProviderError overwrites any union data inside the ConfirmIdentityVerificationError as the provided PgProviderError
func (t *ConfirmIdentityVerificationError) FromPgProviderError(v PgProviderError) error {
	v.Type = "PG_PROVIDER"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePgProviderError performs a merge with any union data inside the ConfirmIdentityVerificationError, using the provided PgProviderError
func (t *ConfirmIdentityVerificationError) MergePgProviderError(v PgProviderError) error {
	v.Type = "PG_PROVIDER"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUnauthorizedError returns the union data inside the ConfirmIdentityVerificationError as a UnauthorizedError
func (t ConfirmIdentityVerificationError) AsUnauthorizedError() (UnauthorizedError, error) {
	var body UnauthorizedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUnauthorizedError overwrites any union data inside the ConfirmIdentityVerificationError as the provided UnauthorizedError
func (t *ConfirmIdentityVerificationError) FromUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUnauthorizedError performs a merge with any union data inside the ConfirmIdentityVerificationError, using the provided UnauthorizedError
func (t *ConfirmIdentityVerificationError) MergeUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ConfirmIdentityVerificationError) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t ConfirmIdentityVerificationError) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "FORBIDDEN":
		return t.AsForbiddenError()
	case "IDENTITY_VERIFICATION_ALREADY_VERIFIED":
		return t.AsIdentityVerificationAlreadyVerifiedError()
	case "IDENTITY_VERIFICATION_NOT_FOUND":
		return t.AsIdentityVerificationNotFoundError()
	case "IDENTITY_VERIFICATION_NOT_SENT":
		return t.AsIdentityVerificationNotSentError()
	case "INVALID_REQUEST":
		return t.AsInvalidRequestError()
	case "PG_PROVIDER":
		return t.AsPgProviderError()
	case "UNAUTHORIZED":
		return t.AsUnauthorizedError()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t ConfirmIdentityVerificationError) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ConfirmIdentityVerificationError) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsAlreadyPaidOrWaitingError returns the union data inside the CreatePaymentScheduleError as a AlreadyPaidOrWaitingError
func (t CreatePaymentScheduleError) AsAlreadyPaidOrWaitingError() (AlreadyPaidOrWaitingError, error) {
	var body AlreadyPaidOrWaitingError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAlreadyPaidOrWaitingError overwrites any union data inside the CreatePaymentScheduleError as the provided AlreadyPaidOrWaitingError
func (t *CreatePaymentScheduleError) FromAlreadyPaidOrWaitingError(v AlreadyPaidOrWaitingError) error {
	v.Type = "ALREADY_PAID_OR_WAITING"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAlreadyPaidOrWaitingError performs a merge with any union data inside the CreatePaymentScheduleError, using the provided AlreadyPaidOrWaitingError
func (t *CreatePaymentScheduleError) MergeAlreadyPaidOrWaitingError(v AlreadyPaidOrWaitingError) error {
	v.Type = "ALREADY_PAID_OR_WAITING"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsBillingKeyAlreadyDeletedError returns the union data inside the CreatePaymentScheduleError as a BillingKeyAlreadyDeletedError
func (t CreatePaymentScheduleError) AsBillingKeyAlreadyDeletedError() (BillingKeyAlreadyDeletedError, error) {
	var body BillingKeyAlreadyDeletedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBillingKeyAlreadyDeletedError overwrites any union data inside the CreatePaymentScheduleError as the provided BillingKeyAlreadyDeletedError
func (t *CreatePaymentScheduleError) FromBillingKeyAlreadyDeletedError(v BillingKeyAlreadyDeletedError) error {
	v.Type = "BILLING_KEY_ALREADY_DELETED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBillingKeyAlreadyDeletedError performs a merge with any union data inside the CreatePaymentScheduleError, using the provided BillingKeyAlreadyDeletedError
func (t *CreatePaymentScheduleError) MergeBillingKeyAlreadyDeletedError(v BillingKeyAlreadyDeletedError) error {
	v.Type = "BILLING_KEY_ALREADY_DELETED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsBillingKeyNotFoundError returns the union data inside the CreatePaymentScheduleError as a BillingKeyNotFoundError
func (t CreatePaymentScheduleError) AsBillingKeyNotFoundError() (BillingKeyNotFoundError, error) {
	var body BillingKeyNotFoundError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBillingKeyNotFoundError overwrites any union data inside the CreatePaymentScheduleError as the provided BillingKeyNotFoundError
func (t *CreatePaymentScheduleError) FromBillingKeyNotFoundError(v BillingKeyNotFoundError) error {
	v.Type = "BILLING_KEY_NOT_FOUND"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBillingKeyNotFoundError performs a merge with any union data inside the CreatePaymentScheduleError, using the provided BillingKeyNotFoundError
func (t *CreatePaymentScheduleError) MergeBillingKeyNotFoundError(v BillingKeyNotFoundError) error {
	v.Type = "BILLING_KEY_NOT_FOUND"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsForbiddenError returns the union data inside the CreatePaymentScheduleError as a ForbiddenError
func (t CreatePaymentScheduleError) AsForbiddenError() (ForbiddenError, error) {
	var body ForbiddenError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromForbiddenError overwrites any union data inside the CreatePaymentScheduleError as the provided ForbiddenError
func (t *CreatePaymentScheduleError) FromForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeForbiddenError performs a merge with any union data inside the CreatePaymentScheduleError, using the provided ForbiddenError
func (t *CreatePaymentScheduleError) MergeForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInvalidRequestError returns the union data inside the CreatePaymentScheduleError as a InvalidRequestError
func (t CreatePaymentScheduleError) AsInvalidRequestError() (InvalidRequestError, error) {
	var body InvalidRequestError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInvalidRequestError overwrites any union data inside the CreatePaymentScheduleError as the provided InvalidRequestError
func (t *CreatePaymentScheduleError) FromInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInvalidRequestError performs a merge with any union data inside the CreatePaymentScheduleError, using the provided InvalidRequestError
func (t *CreatePaymentScheduleError) MergeInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPaymentScheduleAlreadyExistsError returns the union data inside the CreatePaymentScheduleError as a PaymentScheduleAlreadyExistsError
func (t CreatePaymentScheduleError) AsPaymentScheduleAlreadyExistsError() (PaymentScheduleAlreadyExistsError, error) {
	var body PaymentScheduleAlreadyExistsError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPaymentScheduleAlreadyExistsError overwrites any union data inside the CreatePaymentScheduleError as the provided PaymentScheduleAlreadyExistsError
func (t *CreatePaymentScheduleError) FromPaymentScheduleAlreadyExistsError(v PaymentScheduleAlreadyExistsError) error {
	v.Type = "PAYMENT_SCHEDULE_ALREADY_EXISTS"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePaymentScheduleAlreadyExistsError performs a merge with any union data inside the CreatePaymentScheduleError, using the provided PaymentScheduleAlreadyExistsError
func (t *CreatePaymentScheduleError) MergePaymentScheduleAlreadyExistsError(v PaymentScheduleAlreadyExistsError) error {
	v.Type = "PAYMENT_SCHEDULE_ALREADY_EXISTS"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSumOfPartsExceedsTotalAmountError returns the union data inside the CreatePaymentScheduleError as a SumOfPartsExceedsTotalAmountError
func (t CreatePaymentScheduleError) AsSumOfPartsExceedsTotalAmountError() (SumOfPartsExceedsTotalAmountError, error) {
	var body SumOfPartsExceedsTotalAmountError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSumOfPartsExceedsTotalAmountError overwrites any union data inside the CreatePaymentScheduleError as the provided SumOfPartsExceedsTotalAmountError
func (t *CreatePaymentScheduleError) FromSumOfPartsExceedsTotalAmountError(v SumOfPartsExceedsTotalAmountError) error {
	v.Type = "SUM_OF_PARTS_EXCEEDS_TOTAL_AMOUNT"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSumOfPartsExceedsTotalAmountError performs a merge with any union data inside the CreatePaymentScheduleError, using the provided SumOfPartsExceedsTotalAmountError
func (t *CreatePaymentScheduleError) MergeSumOfPartsExceedsTotalAmountError(v SumOfPartsExceedsTotalAmountError) error {
	v.Type = "SUM_OF_PARTS_EXCEEDS_TOTAL_AMOUNT"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUnauthorizedError returns the union data inside the CreatePaymentScheduleError as a UnauthorizedError
func (t CreatePaymentScheduleError) AsUnauthorizedError() (UnauthorizedError, error) {
	var body UnauthorizedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUnauthorizedError overwrites any union data inside the CreatePaymentScheduleError as the provided UnauthorizedError
func (t *CreatePaymentScheduleError) FromUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUnauthorizedError performs a merge with any union data inside the CreatePaymentScheduleError, using the provided UnauthorizedError
func (t *CreatePaymentScheduleError) MergeUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t CreatePaymentScheduleError) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t CreatePaymentScheduleError) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "ALREADY_PAID_OR_WAITING":
		return t.AsAlreadyPaidOrWaitingError()
	case "BILLING_KEY_ALREADY_DELETED":
		return t.AsBillingKeyAlreadyDeletedError()
	case "BILLING_KEY_NOT_FOUND":
		return t.AsBillingKeyNotFoundError()
	case "FORBIDDEN":
		return t.AsForbiddenError()
	case "INVALID_REQUEST":
		return t.AsInvalidRequestError()
	case "PAYMENT_SCHEDULE_ALREADY_EXISTS":
		return t.AsPaymentScheduleAlreadyExistsError()
	case "SUM_OF_PARTS_EXCEEDS_TOTAL_AMOUNT":
		return t.AsSumOfPartsExceedsTotalAmountError()
	case "UNAUTHORIZED":
		return t.AsUnauthorizedError()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t CreatePaymentScheduleError) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CreatePaymentScheduleError) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsForbiddenError returns the union data inside the CreatePlatformAdditionalFeePolicyError as a ForbiddenError
func (t CreatePlatformAdditionalFeePolicyError) AsForbiddenError() (ForbiddenError, error) {
	var body ForbiddenError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromForbiddenError overwrites any union data inside the CreatePlatformAdditionalFeePolicyError as the provided ForbiddenError
func (t *CreatePlatformAdditionalFeePolicyError) FromForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeForbiddenError performs a merge with any union data inside the CreatePlatformAdditionalFeePolicyError, using the provided ForbiddenError
func (t *CreatePlatformAdditionalFeePolicyError) MergeForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInvalidRequestError returns the union data inside the CreatePlatformAdditionalFeePolicyError as a InvalidRequestError
func (t CreatePlatformAdditionalFeePolicyError) AsInvalidRequestError() (InvalidRequestError, error) {
	var body InvalidRequestError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInvalidRequestError overwrites any union data inside the CreatePlatformAdditionalFeePolicyError as the provided InvalidRequestError
func (t *CreatePlatformAdditionalFeePolicyError) FromInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInvalidRequestError performs a merge with any union data inside the CreatePlatformAdditionalFeePolicyError, using the provided InvalidRequestError
func (t *CreatePlatformAdditionalFeePolicyError) MergeInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformAdditionalFeePolicyAlreadyExistsError returns the union data inside the CreatePlatformAdditionalFeePolicyError as a PlatformAdditionalFeePolicyAlreadyExistsError
func (t CreatePlatformAdditionalFeePolicyError) AsPlatformAdditionalFeePolicyAlreadyExistsError() (PlatformAdditionalFeePolicyAlreadyExistsError, error) {
	var body PlatformAdditionalFeePolicyAlreadyExistsError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformAdditionalFeePolicyAlreadyExistsError overwrites any union data inside the CreatePlatformAdditionalFeePolicyError as the provided PlatformAdditionalFeePolicyAlreadyExistsError
func (t *CreatePlatformAdditionalFeePolicyError) FromPlatformAdditionalFeePolicyAlreadyExistsError(v PlatformAdditionalFeePolicyAlreadyExistsError) error {
	v.Type = "PLATFORM_ADDITIONAL_FEE_POLICY_ALREADY_EXISTS"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformAdditionalFeePolicyAlreadyExistsError performs a merge with any union data inside the CreatePlatformAdditionalFeePolicyError, using the provided PlatformAdditionalFeePolicyAlreadyExistsError
func (t *CreatePlatformAdditionalFeePolicyError) MergePlatformAdditionalFeePolicyAlreadyExistsError(v PlatformAdditionalFeePolicyAlreadyExistsError) error {
	v.Type = "PLATFORM_ADDITIONAL_FEE_POLICY_ALREADY_EXISTS"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformNotEnabledError returns the union data inside the CreatePlatformAdditionalFeePolicyError as a PlatformNotEnabledError
func (t CreatePlatformAdditionalFeePolicyError) AsPlatformNotEnabledError() (PlatformNotEnabledError, error) {
	var body PlatformNotEnabledError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformNotEnabledError overwrites any union data inside the CreatePlatformAdditionalFeePolicyError as the provided PlatformNotEnabledError
func (t *CreatePlatformAdditionalFeePolicyError) FromPlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformNotEnabledError performs a merge with any union data inside the CreatePlatformAdditionalFeePolicyError, using the provided PlatformNotEnabledError
func (t *CreatePlatformAdditionalFeePolicyError) MergePlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUnauthorizedError returns the union data inside the CreatePlatformAdditionalFeePolicyError as a UnauthorizedError
func (t CreatePlatformAdditionalFeePolicyError) AsUnauthorizedError() (UnauthorizedError, error) {
	var body UnauthorizedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUnauthorizedError overwrites any union data inside the CreatePlatformAdditionalFeePolicyError as the provided UnauthorizedError
func (t *CreatePlatformAdditionalFeePolicyError) FromUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUnauthorizedError performs a merge with any union data inside the CreatePlatformAdditionalFeePolicyError, using the provided UnauthorizedError
func (t *CreatePlatformAdditionalFeePolicyError) MergeUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t CreatePlatformAdditionalFeePolicyError) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t CreatePlatformAdditionalFeePolicyError) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "FORBIDDEN":
		return t.AsForbiddenError()
	case "INVALID_REQUEST":
		return t.AsInvalidRequestError()
	case "PLATFORM_ADDITIONAL_FEE_POLICY_ALREADY_EXISTS":
		return t.AsPlatformAdditionalFeePolicyAlreadyExistsError()
	case "PLATFORM_NOT_ENABLED":
		return t.AsPlatformNotEnabledError()
	case "UNAUTHORIZED":
		return t.AsUnauthorizedError()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t CreatePlatformAdditionalFeePolicyError) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CreatePlatformAdditionalFeePolicyError) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsForbiddenError returns the union data inside the CreatePlatformContractError as a ForbiddenError
func (t CreatePlatformContractError) AsForbiddenError() (ForbiddenError, error) {
	var body ForbiddenError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromForbiddenError overwrites any union data inside the CreatePlatformContractError as the provided ForbiddenError
func (t *CreatePlatformContractError) FromForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeForbiddenError performs a merge with any union data inside the CreatePlatformContractError, using the provided ForbiddenError
func (t *CreatePlatformContractError) MergeForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInvalidRequestError returns the union data inside the CreatePlatformContractError as a InvalidRequestError
func (t CreatePlatformContractError) AsInvalidRequestError() (InvalidRequestError, error) {
	var body InvalidRequestError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInvalidRequestError overwrites any union data inside the CreatePlatformContractError as the provided InvalidRequestError
func (t *CreatePlatformContractError) FromInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInvalidRequestError performs a merge with any union data inside the CreatePlatformContractError, using the provided InvalidRequestError
func (t *CreatePlatformContractError) MergeInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformContractAlreadyExistsError returns the union data inside the CreatePlatformContractError as a PlatformContractAlreadyExistsError
func (t CreatePlatformContractError) AsPlatformContractAlreadyExistsError() (PlatformContractAlreadyExistsError, error) {
	var body PlatformContractAlreadyExistsError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformContractAlreadyExistsError overwrites any union data inside the CreatePlatformContractError as the provided PlatformContractAlreadyExistsError
func (t *CreatePlatformContractError) FromPlatformContractAlreadyExistsError(v PlatformContractAlreadyExistsError) error {
	v.Type = "PLATFORM_CONTRACT_ALREADY_EXISTS"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformContractAlreadyExistsError performs a merge with any union data inside the CreatePlatformContractError, using the provided PlatformContractAlreadyExistsError
func (t *CreatePlatformContractError) MergePlatformContractAlreadyExistsError(v PlatformContractAlreadyExistsError) error {
	v.Type = "PLATFORM_CONTRACT_ALREADY_EXISTS"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformNotEnabledError returns the union data inside the CreatePlatformContractError as a PlatformNotEnabledError
func (t CreatePlatformContractError) AsPlatformNotEnabledError() (PlatformNotEnabledError, error) {
	var body PlatformNotEnabledError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformNotEnabledError overwrites any union data inside the CreatePlatformContractError as the provided PlatformNotEnabledError
func (t *CreatePlatformContractError) FromPlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformNotEnabledError performs a merge with any union data inside the CreatePlatformContractError, using the provided PlatformNotEnabledError
func (t *CreatePlatformContractError) MergePlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUnauthorizedError returns the union data inside the CreatePlatformContractError as a UnauthorizedError
func (t CreatePlatformContractError) AsUnauthorizedError() (UnauthorizedError, error) {
	var body UnauthorizedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUnauthorizedError overwrites any union data inside the CreatePlatformContractError as the provided UnauthorizedError
func (t *CreatePlatformContractError) FromUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUnauthorizedError performs a merge with any union data inside the CreatePlatformContractError, using the provided UnauthorizedError
func (t *CreatePlatformContractError) MergeUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t CreatePlatformContractError) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t CreatePlatformContractError) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "FORBIDDEN":
		return t.AsForbiddenError()
	case "INVALID_REQUEST":
		return t.AsInvalidRequestError()
	case "PLATFORM_CONTRACT_ALREADY_EXISTS":
		return t.AsPlatformContractAlreadyExistsError()
	case "PLATFORM_NOT_ENABLED":
		return t.AsPlatformNotEnabledError()
	case "UNAUTHORIZED":
		return t.AsUnauthorizedError()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t CreatePlatformContractError) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CreatePlatformContractError) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsForbiddenError returns the union data inside the CreatePlatformDiscountSharePolicyError as a ForbiddenError
func (t CreatePlatformDiscountSharePolicyError) AsForbiddenError() (ForbiddenError, error) {
	var body ForbiddenError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromForbiddenError overwrites any union data inside the CreatePlatformDiscountSharePolicyError as the provided ForbiddenError
func (t *CreatePlatformDiscountSharePolicyError) FromForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeForbiddenError performs a merge with any union data inside the CreatePlatformDiscountSharePolicyError, using the provided ForbiddenError
func (t *CreatePlatformDiscountSharePolicyError) MergeForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInvalidRequestError returns the union data inside the CreatePlatformDiscountSharePolicyError as a InvalidRequestError
func (t CreatePlatformDiscountSharePolicyError) AsInvalidRequestError() (InvalidRequestError, error) {
	var body InvalidRequestError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInvalidRequestError overwrites any union data inside the CreatePlatformDiscountSharePolicyError as the provided InvalidRequestError
func (t *CreatePlatformDiscountSharePolicyError) FromInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInvalidRequestError performs a merge with any union data inside the CreatePlatformDiscountSharePolicyError, using the provided InvalidRequestError
func (t *CreatePlatformDiscountSharePolicyError) MergeInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformDiscountSharePolicyAlreadyExistsError returns the union data inside the CreatePlatformDiscountSharePolicyError as a PlatformDiscountSharePolicyAlreadyExistsError
func (t CreatePlatformDiscountSharePolicyError) AsPlatformDiscountSharePolicyAlreadyExistsError() (PlatformDiscountSharePolicyAlreadyExistsError, error) {
	var body PlatformDiscountSharePolicyAlreadyExistsError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformDiscountSharePolicyAlreadyExistsError overwrites any union data inside the CreatePlatformDiscountSharePolicyError as the provided PlatformDiscountSharePolicyAlreadyExistsError
func (t *CreatePlatformDiscountSharePolicyError) FromPlatformDiscountSharePolicyAlreadyExistsError(v PlatformDiscountSharePolicyAlreadyExistsError) error {
	v.Type = "PLATFORM_DISCOUNT_SHARE_POLICY_ALREADY_EXISTS"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformDiscountSharePolicyAlreadyExistsError performs a merge with any union data inside the CreatePlatformDiscountSharePolicyError, using the provided PlatformDiscountSharePolicyAlreadyExistsError
func (t *CreatePlatformDiscountSharePolicyError) MergePlatformDiscountSharePolicyAlreadyExistsError(v PlatformDiscountSharePolicyAlreadyExistsError) error {
	v.Type = "PLATFORM_DISCOUNT_SHARE_POLICY_ALREADY_EXISTS"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformNotEnabledError returns the union data inside the CreatePlatformDiscountSharePolicyError as a PlatformNotEnabledError
func (t CreatePlatformDiscountSharePolicyError) AsPlatformNotEnabledError() (PlatformNotEnabledError, error) {
	var body PlatformNotEnabledError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformNotEnabledError overwrites any union data inside the CreatePlatformDiscountSharePolicyError as the provided PlatformNotEnabledError
func (t *CreatePlatformDiscountSharePolicyError) FromPlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformNotEnabledError performs a merge with any union data inside the CreatePlatformDiscountSharePolicyError, using the provided PlatformNotEnabledError
func (t *CreatePlatformDiscountSharePolicyError) MergePlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUnauthorizedError returns the union data inside the CreatePlatformDiscountSharePolicyError as a UnauthorizedError
func (t CreatePlatformDiscountSharePolicyError) AsUnauthorizedError() (UnauthorizedError, error) {
	var body UnauthorizedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUnauthorizedError overwrites any union data inside the CreatePlatformDiscountSharePolicyError as the provided UnauthorizedError
func (t *CreatePlatformDiscountSharePolicyError) FromUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUnauthorizedError performs a merge with any union data inside the CreatePlatformDiscountSharePolicyError, using the provided UnauthorizedError
func (t *CreatePlatformDiscountSharePolicyError) MergeUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t CreatePlatformDiscountSharePolicyError) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t CreatePlatformDiscountSharePolicyError) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "FORBIDDEN":
		return t.AsForbiddenError()
	case "INVALID_REQUEST":
		return t.AsInvalidRequestError()
	case "PLATFORM_DISCOUNT_SHARE_POLICY_ALREADY_EXISTS":
		return t.AsPlatformDiscountSharePolicyAlreadyExistsError()
	case "PLATFORM_NOT_ENABLED":
		return t.AsPlatformNotEnabledError()
	case "UNAUTHORIZED":
		return t.AsUnauthorizedError()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t CreatePlatformDiscountSharePolicyError) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CreatePlatformDiscountSharePolicyError) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsForbiddenError returns the union data inside the CreatePlatformManualTransferError as a ForbiddenError
func (t CreatePlatformManualTransferError) AsForbiddenError() (ForbiddenError, error) {
	var body ForbiddenError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromForbiddenError overwrites any union data inside the CreatePlatformManualTransferError as the provided ForbiddenError
func (t *CreatePlatformManualTransferError) FromForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeForbiddenError performs a merge with any union data inside the CreatePlatformManualTransferError, using the provided ForbiddenError
func (t *CreatePlatformManualTransferError) MergeForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInvalidRequestError returns the union data inside the CreatePlatformManualTransferError as a InvalidRequestError
func (t CreatePlatformManualTransferError) AsInvalidRequestError() (InvalidRequestError, error) {
	var body InvalidRequestError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInvalidRequestError overwrites any union data inside the CreatePlatformManualTransferError as the provided InvalidRequestError
func (t *CreatePlatformManualTransferError) FromInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInvalidRequestError performs a merge with any union data inside the CreatePlatformManualTransferError, using the provided InvalidRequestError
func (t *CreatePlatformManualTransferError) MergeInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformNotEnabledError returns the union data inside the CreatePlatformManualTransferError as a PlatformNotEnabledError
func (t CreatePlatformManualTransferError) AsPlatformNotEnabledError() (PlatformNotEnabledError, error) {
	var body PlatformNotEnabledError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformNotEnabledError overwrites any union data inside the CreatePlatformManualTransferError as the provided PlatformNotEnabledError
func (t *CreatePlatformManualTransferError) FromPlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformNotEnabledError performs a merge with any union data inside the CreatePlatformManualTransferError, using the provided PlatformNotEnabledError
func (t *CreatePlatformManualTransferError) MergePlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformPartnerNotFoundError returns the union data inside the CreatePlatformManualTransferError as a PlatformPartnerNotFoundError
func (t CreatePlatformManualTransferError) AsPlatformPartnerNotFoundError() (PlatformPartnerNotFoundError, error) {
	var body PlatformPartnerNotFoundError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformPartnerNotFoundError overwrites any union data inside the CreatePlatformManualTransferError as the provided PlatformPartnerNotFoundError
func (t *CreatePlatformManualTransferError) FromPlatformPartnerNotFoundError(v PlatformPartnerNotFoundError) error {
	v.Type = "PLATFORM_PARTNER_NOT_FOUND"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformPartnerNotFoundError performs a merge with any union data inside the CreatePlatformManualTransferError, using the provided PlatformPartnerNotFoundError
func (t *CreatePlatformManualTransferError) MergePlatformPartnerNotFoundError(v PlatformPartnerNotFoundError) error {
	v.Type = "PLATFORM_PARTNER_NOT_FOUND"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformUserDefinedPropertyNotFoundError returns the union data inside the CreatePlatformManualTransferError as a PlatformUserDefinedPropertyNotFoundError
func (t CreatePlatformManualTransferError) AsPlatformUserDefinedPropertyNotFoundError() (PlatformUserDefinedPropertyNotFoundError, error) {
	var body PlatformUserDefinedPropertyNotFoundError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformUserDefinedPropertyNotFoundError overwrites any union data inside the CreatePlatformManualTransferError as the provided PlatformUserDefinedPropertyNotFoundError
func (t *CreatePlatformManualTransferError) FromPlatformUserDefinedPropertyNotFoundError(v PlatformUserDefinedPropertyNotFoundError) error {
	v.Type = "PLATFORM_USER_DEFINED_PROPERTY_NOT_FOUND"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformUserDefinedPropertyNotFoundError performs a merge with any union data inside the CreatePlatformManualTransferError, using the provided PlatformUserDefinedPropertyNotFoundError
func (t *CreatePlatformManualTransferError) MergePlatformUserDefinedPropertyNotFoundError(v PlatformUserDefinedPropertyNotFoundError) error {
	v.Type = "PLATFORM_USER_DEFINED_PROPERTY_NOT_FOUND"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUnauthorizedError returns the union data inside the CreatePlatformManualTransferError as a UnauthorizedError
func (t CreatePlatformManualTransferError) AsUnauthorizedError() (UnauthorizedError, error) {
	var body UnauthorizedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUnauthorizedError overwrites any union data inside the CreatePlatformManualTransferError as the provided UnauthorizedError
func (t *CreatePlatformManualTransferError) FromUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUnauthorizedError performs a merge with any union data inside the CreatePlatformManualTransferError, using the provided UnauthorizedError
func (t *CreatePlatformManualTransferError) MergeUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t CreatePlatformManualTransferError) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t CreatePlatformManualTransferError) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "FORBIDDEN":
		return t.AsForbiddenError()
	case "INVALID_REQUEST":
		return t.AsInvalidRequestError()
	case "PLATFORM_NOT_ENABLED":
		return t.AsPlatformNotEnabledError()
	case "PLATFORM_PARTNER_NOT_FOUND":
		return t.AsPlatformPartnerNotFoundError()
	case "PLATFORM_USER_DEFINED_PROPERTY_NOT_FOUND":
		return t.AsPlatformUserDefinedPropertyNotFoundError()
	case "UNAUTHORIZED":
		return t.AsUnauthorizedError()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t CreatePlatformManualTransferError) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CreatePlatformManualTransferError) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsForbiddenError returns the union data inside the CreatePlatformOrderCancelTransferError as a ForbiddenError
func (t CreatePlatformOrderCancelTransferError) AsForbiddenError() (ForbiddenError, error) {
	var body ForbiddenError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromForbiddenError overwrites any union data inside the CreatePlatformOrderCancelTransferError as the provided ForbiddenError
func (t *CreatePlatformOrderCancelTransferError) FromForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeForbiddenError performs a merge with any union data inside the CreatePlatformOrderCancelTransferError, using the provided ForbiddenError
func (t *CreatePlatformOrderCancelTransferError) MergeForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInvalidRequestError returns the union data inside the CreatePlatformOrderCancelTransferError as a InvalidRequestError
func (t CreatePlatformOrderCancelTransferError) AsInvalidRequestError() (InvalidRequestError, error) {
	var body InvalidRequestError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInvalidRequestError overwrites any union data inside the CreatePlatformOrderCancelTransferError as the provided InvalidRequestError
func (t *CreatePlatformOrderCancelTransferError) FromInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInvalidRequestError performs a merge with any union data inside the CreatePlatformOrderCancelTransferError, using the provided InvalidRequestError
func (t *CreatePlatformOrderCancelTransferError) MergeInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformCancellableAmountExceededError returns the union data inside the CreatePlatformOrderCancelTransferError as a PlatformCancellableAmountExceededError
func (t CreatePlatformOrderCancelTransferError) AsPlatformCancellableAmountExceededError() (PlatformCancellableAmountExceededError, error) {
	var body PlatformCancellableAmountExceededError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformCancellableAmountExceededError overwrites any union data inside the CreatePlatformOrderCancelTransferError as the provided PlatformCancellableAmountExceededError
func (t *CreatePlatformOrderCancelTransferError) FromPlatformCancellableAmountExceededError(v PlatformCancellableAmountExceededError) error {
	v.Type = "PLATFORM_CANCELLABLE_AMOUNT_EXCEEDED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformCancellableAmountExceededError performs a merge with any union data inside the CreatePlatformOrderCancelTransferError, using the provided PlatformCancellableAmountExceededError
func (t *CreatePlatformOrderCancelTransferError) MergePlatformCancellableAmountExceededError(v PlatformCancellableAmountExceededError) error {
	v.Type = "PLATFORM_CANCELLABLE_AMOUNT_EXCEEDED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformCancellableDiscountAmountExceededError returns the union data inside the CreatePlatformOrderCancelTransferError as a PlatformCancellableDiscountAmountExceededError
func (t CreatePlatformOrderCancelTransferError) AsPlatformCancellableDiscountAmountExceededError() (PlatformCancellableDiscountAmountExceededError, error) {
	var body PlatformCancellableDiscountAmountExceededError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformCancellableDiscountAmountExceededError overwrites any union data inside the CreatePlatformOrderCancelTransferError as the provided PlatformCancellableDiscountAmountExceededError
func (t *CreatePlatformOrderCancelTransferError) FromPlatformCancellableDiscountAmountExceededError(v PlatformCancellableDiscountAmountExceededError) error {
	v.Type = "PLATFORM_CANCELLABLE_DISCOUNT_AMOUNT_EXCEEDED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformCancellableDiscountAmountExceededError performs a merge with any union data inside the CreatePlatformOrderCancelTransferError, using the provided PlatformCancellableDiscountAmountExceededError
func (t *CreatePlatformOrderCancelTransferError) MergePlatformCancellableDiscountAmountExceededError(v PlatformCancellableDiscountAmountExceededError) error {
	v.Type = "PLATFORM_CANCELLABLE_DISCOUNT_AMOUNT_EXCEEDED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformCancellableDiscountTaxFreeAmountExceededError returns the union data inside the CreatePlatformOrderCancelTransferError as a PlatformCancellableDiscountTaxFreeAmountExceededError
func (t CreatePlatformOrderCancelTransferError) AsPlatformCancellableDiscountTaxFreeAmountExceededError() (PlatformCancellableDiscountTaxFreeAmountExceededError, error) {
	var body PlatformCancellableDiscountTaxFreeAmountExceededError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformCancellableDiscountTaxFreeAmountExceededError overwrites any union data inside the CreatePlatformOrderCancelTransferError as the provided PlatformCancellableDiscountTaxFreeAmountExceededError
func (t *CreatePlatformOrderCancelTransferError) FromPlatformCancellableDiscountTaxFreeAmountExceededError(v PlatformCancellableDiscountTaxFreeAmountExceededError) error {
	v.Type = "PLATFORM_CANCELLABLE_DISCOUNT_TAX_FREE_AMOUNT_EXCEEDED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformCancellableDiscountTaxFreeAmountExceededError performs a merge with any union data inside the CreatePlatformOrderCancelTransferError, using the provided PlatformCancellableDiscountTaxFreeAmountExceededError
func (t *CreatePlatformOrderCancelTransferError) MergePlatformCancellableDiscountTaxFreeAmountExceededError(v PlatformCancellableDiscountTaxFreeAmountExceededError) error {
	v.Type = "PLATFORM_CANCELLABLE_DISCOUNT_TAX_FREE_AMOUNT_EXCEEDED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformCancellableProductQuantityExceededError returns the union data inside the CreatePlatformOrderCancelTransferError as a PlatformCancellableProductQuantityExceededError
func (t CreatePlatformOrderCancelTransferError) AsPlatformCancellableProductQuantityExceededError() (PlatformCancellableProductQuantityExceededError, error) {
	var body PlatformCancellableProductQuantityExceededError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformCancellableProductQuantityExceededError overwrites any union data inside the CreatePlatformOrderCancelTransferError as the provided PlatformCancellableProductQuantityExceededError
func (t *CreatePlatformOrderCancelTransferError) FromPlatformCancellableProductQuantityExceededError(v PlatformCancellableProductQuantityExceededError) error {
	v.Type = "PLATFORM_CANCELLABLE_PRODUCT_QUANTITY_EXCEEDED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformCancellableProductQuantityExceededError performs a merge with any union data inside the CreatePlatformOrderCancelTransferError, using the provided PlatformCancellableProductQuantityExceededError
func (t *CreatePlatformOrderCancelTransferError) MergePlatformCancellableProductQuantityExceededError(v PlatformCancellableProductQuantityExceededError) error {
	v.Type = "PLATFORM_CANCELLABLE_PRODUCT_QUANTITY_EXCEEDED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformCancellationAndPaymentTypeMismatchedError returns the union data inside the CreatePlatformOrderCancelTransferError as a PlatformCancellationAndPaymentTypeMismatchedError
func (t CreatePlatformOrderCancelTransferError) AsPlatformCancellationAndPaymentTypeMismatchedError() (PlatformCancellationAndPaymentTypeMismatchedError, error) {
	var body PlatformCancellationAndPaymentTypeMismatchedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformCancellationAndPaymentTypeMismatchedError overwrites any union data inside the CreatePlatformOrderCancelTransferError as the provided PlatformCancellationAndPaymentTypeMismatchedError
func (t *CreatePlatformOrderCancelTransferError) FromPlatformCancellationAndPaymentTypeMismatchedError(v PlatformCancellationAndPaymentTypeMismatchedError) error {
	v.Type = "PLATFORM_CANCELLATION_AND_PAYMENT_TYPE_MISMATCHED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformCancellationAndPaymentTypeMismatchedError performs a merge with any union data inside the CreatePlatformOrderCancelTransferError, using the provided PlatformCancellationAndPaymentTypeMismatchedError
func (t *CreatePlatformOrderCancelTransferError) MergePlatformCancellationAndPaymentTypeMismatchedError(v PlatformCancellationAndPaymentTypeMismatchedError) error {
	v.Type = "PLATFORM_CANCELLATION_AND_PAYMENT_TYPE_MISMATCHED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformCancellationNotFoundError returns the union data inside the CreatePlatformOrderCancelTransferError as a PlatformCancellationNotFoundError
func (t CreatePlatformOrderCancelTransferError) AsPlatformCancellationNotFoundError() (PlatformCancellationNotFoundError, error) {
	var body PlatformCancellationNotFoundError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformCancellationNotFoundError overwrites any union data inside the CreatePlatformOrderCancelTransferError as the provided PlatformCancellationNotFoundError
func (t *CreatePlatformOrderCancelTransferError) FromPlatformCancellationNotFoundError(v PlatformCancellationNotFoundError) error {
	v.Type = "PLATFORM_CANCELLATION_NOT_FOUND"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformCancellationNotFoundError performs a merge with any union data inside the CreatePlatformOrderCancelTransferError, using the provided PlatformCancellationNotFoundError
func (t *CreatePlatformOrderCancelTransferError) MergePlatformCancellationNotFoundError(v PlatformCancellationNotFoundError) error {
	v.Type = "PLATFORM_CANCELLATION_NOT_FOUND"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformCannotSpecifyTransferError returns the union data inside the CreatePlatformOrderCancelTransferError as a PlatformCannotSpecifyTransferError
func (t CreatePlatformOrderCancelTransferError) AsPlatformCannotSpecifyTransferError() (PlatformCannotSpecifyTransferError, error) {
	var body PlatformCannotSpecifyTransferError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformCannotSpecifyTransferError overwrites any union data inside the CreatePlatformOrderCancelTransferError as the provided PlatformCannotSpecifyTransferError
func (t *CreatePlatformOrderCancelTransferError) FromPlatformCannotSpecifyTransferError(v PlatformCannotSpecifyTransferError) error {
	v.Type = "PLATFORM_CANNOT_SPECIFY_TRANSFER"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformCannotSpecifyTransferError performs a merge with any union data inside the CreatePlatformOrderCancelTransferError, using the provided PlatformCannotSpecifyTransferError
func (t *CreatePlatformOrderCancelTransferError) MergePlatformCannotSpecifyTransferError(v PlatformCannotSpecifyTransferError) error {
	v.Type = "PLATFORM_CANNOT_SPECIFY_TRANSFER"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformDiscountSharePolicyIdDuplicatedError returns the union data inside the CreatePlatformOrderCancelTransferError as a PlatformDiscountSharePolicyIdDuplicatedError
func (t CreatePlatformOrderCancelTransferError) AsPlatformDiscountSharePolicyIdDuplicatedError() (PlatformDiscountSharePolicyIdDuplicatedError, error) {
	var body PlatformDiscountSharePolicyIdDuplicatedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformDiscountSharePolicyIdDuplicatedError overwrites any union data inside the CreatePlatformOrderCancelTransferError as the provided PlatformDiscountSharePolicyIdDuplicatedError
func (t *CreatePlatformOrderCancelTransferError) FromPlatformDiscountSharePolicyIdDuplicatedError(v PlatformDiscountSharePolicyIdDuplicatedError) error {
	v.Type = "PLATFORM_DISCOUNT_SHARE_POLICY_ID_DUPLICATED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformDiscountSharePolicyIdDuplicatedError performs a merge with any union data inside the CreatePlatformOrderCancelTransferError, using the provided PlatformDiscountSharePolicyIdDuplicatedError
func (t *CreatePlatformOrderCancelTransferError) MergePlatformDiscountSharePolicyIdDuplicatedError(v PlatformDiscountSharePolicyIdDuplicatedError) error {
	v.Type = "PLATFORM_DISCOUNT_SHARE_POLICY_ID_DUPLICATED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformNotEnabledError returns the union data inside the CreatePlatformOrderCancelTransferError as a PlatformNotEnabledError
func (t CreatePlatformOrderCancelTransferError) AsPlatformNotEnabledError() (PlatformNotEnabledError, error) {
	var body PlatformNotEnabledError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformNotEnabledError overwrites any union data inside the CreatePlatformOrderCancelTransferError as the provided PlatformNotEnabledError
func (t *CreatePlatformOrderCancelTransferError) FromPlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformNotEnabledError performs a merge with any union data inside the CreatePlatformOrderCancelTransferError, using the provided PlatformNotEnabledError
func (t *CreatePlatformOrderCancelTransferError) MergePlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformOrderDetailMismatchedError returns the union data inside the CreatePlatformOrderCancelTransferError as a PlatformOrderDetailMismatchedError
func (t CreatePlatformOrderCancelTransferError) AsPlatformOrderDetailMismatchedError() (PlatformOrderDetailMismatchedError, error) {
	var body PlatformOrderDetailMismatchedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformOrderDetailMismatchedError overwrites any union data inside the CreatePlatformOrderCancelTransferError as the provided PlatformOrderDetailMismatchedError
func (t *CreatePlatformOrderCancelTransferError) FromPlatformOrderDetailMismatchedError(v PlatformOrderDetailMismatchedError) error {
	v.Type = "PLATFORM_ORDER_DETAIL_MISMATCHED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformOrderDetailMismatchedError performs a merge with any union data inside the CreatePlatformOrderCancelTransferError, using the provided PlatformOrderDetailMismatchedError
func (t *CreatePlatformOrderCancelTransferError) MergePlatformOrderDetailMismatchedError(v PlatformOrderDetailMismatchedError) error {
	v.Type = "PLATFORM_ORDER_DETAIL_MISMATCHED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformOrderTransferAlreadyCancelledError returns the union data inside the CreatePlatformOrderCancelTransferError as a PlatformOrderTransferAlreadyCancelledError
func (t CreatePlatformOrderCancelTransferError) AsPlatformOrderTransferAlreadyCancelledError() (PlatformOrderTransferAlreadyCancelledError, error) {
	var body PlatformOrderTransferAlreadyCancelledError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformOrderTransferAlreadyCancelledError overwrites any union data inside the CreatePlatformOrderCancelTransferError as the provided PlatformOrderTransferAlreadyCancelledError
func (t *CreatePlatformOrderCancelTransferError) FromPlatformOrderTransferAlreadyCancelledError(v PlatformOrderTransferAlreadyCancelledError) error {
	v.Type = "PLATFORM_ORDER_TRANSFER_ALREADY_CANCELLED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformOrderTransferAlreadyCancelledError performs a merge with any union data inside the CreatePlatformOrderCancelTransferError, using the provided PlatformOrderTransferAlreadyCancelledError
func (t *CreatePlatformOrderCancelTransferError) MergePlatformOrderTransferAlreadyCancelledError(v PlatformOrderTransferAlreadyCancelledError) error {
	v.Type = "PLATFORM_ORDER_TRANSFER_ALREADY_CANCELLED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformPaymentNotFoundError returns the union data inside the CreatePlatformOrderCancelTransferError as a PlatformPaymentNotFoundError
func (t CreatePlatformOrderCancelTransferError) AsPlatformPaymentNotFoundError() (PlatformPaymentNotFoundError, error) {
	var body PlatformPaymentNotFoundError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformPaymentNotFoundError overwrites any union data inside the CreatePlatformOrderCancelTransferError as the provided PlatformPaymentNotFoundError
func (t *CreatePlatformOrderCancelTransferError) FromPlatformPaymentNotFoundError(v PlatformPaymentNotFoundError) error {
	v.Type = "PLATFORM_PAYMENT_NOT_FOUND"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformPaymentNotFoundError performs a merge with any union data inside the CreatePlatformOrderCancelTransferError, using the provided PlatformPaymentNotFoundError
func (t *CreatePlatformOrderCancelTransferError) MergePlatformPaymentNotFoundError(v PlatformPaymentNotFoundError) error {
	v.Type = "PLATFORM_PAYMENT_NOT_FOUND"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformProductIdDuplicatedError returns the union data inside the CreatePlatformOrderCancelTransferError as a PlatformProductIdDuplicatedError
func (t CreatePlatformOrderCancelTransferError) AsPlatformProductIdDuplicatedError() (PlatformProductIdDuplicatedError, error) {
	var body PlatformProductIdDuplicatedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformProductIdDuplicatedError overwrites any union data inside the CreatePlatformOrderCancelTransferError as the provided PlatformProductIdDuplicatedError
func (t *CreatePlatformOrderCancelTransferError) FromPlatformProductIdDuplicatedError(v PlatformProductIdDuplicatedError) error {
	v.Type = "PLATFORM_PRODUCT_ID_DUPLICATED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformProductIdDuplicatedError performs a merge with any union data inside the CreatePlatformOrderCancelTransferError, using the provided PlatformProductIdDuplicatedError
func (t *CreatePlatformOrderCancelTransferError) MergePlatformProductIdDuplicatedError(v PlatformProductIdDuplicatedError) error {
	v.Type = "PLATFORM_PRODUCT_ID_DUPLICATED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformProductIdNotFoundError returns the union data inside the CreatePlatformOrderCancelTransferError as a PlatformProductIdNotFoundError
func (t CreatePlatformOrderCancelTransferError) AsPlatformProductIdNotFoundError() (PlatformProductIdNotFoundError, error) {
	var body PlatformProductIdNotFoundError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformProductIdNotFoundError overwrites any union data inside the CreatePlatformOrderCancelTransferError as the provided PlatformProductIdNotFoundError
func (t *CreatePlatformOrderCancelTransferError) FromPlatformProductIdNotFoundError(v PlatformProductIdNotFoundError) error {
	v.Type = "PLATFORM_PRODUCT_ID_NOT_FOUND"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformProductIdNotFoundError performs a merge with any union data inside the CreatePlatformOrderCancelTransferError, using the provided PlatformProductIdNotFoundError
func (t *CreatePlatformOrderCancelTransferError) MergePlatformProductIdNotFoundError(v PlatformProductIdNotFoundError) error {
	v.Type = "PLATFORM_PRODUCT_ID_NOT_FOUND"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformSettlementAmountExceededError returns the union data inside the CreatePlatformOrderCancelTransferError as a PlatformSettlementAmountExceededError
func (t CreatePlatformOrderCancelTransferError) AsPlatformSettlementAmountExceededError() (PlatformSettlementAmountExceededError, error) {
	var body PlatformSettlementAmountExceededError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformSettlementAmountExceededError overwrites any union data inside the CreatePlatformOrderCancelTransferError as the provided PlatformSettlementAmountExceededError
func (t *CreatePlatformOrderCancelTransferError) FromPlatformSettlementAmountExceededError(v PlatformSettlementAmountExceededError) error {
	v.Type = "PLATFORM_SETTLEMENT_AMOUNT_EXCEEDED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformSettlementAmountExceededError performs a merge with any union data inside the CreatePlatformOrderCancelTransferError, using the provided PlatformSettlementAmountExceededError
func (t *CreatePlatformOrderCancelTransferError) MergePlatformSettlementAmountExceededError(v PlatformSettlementAmountExceededError) error {
	v.Type = "PLATFORM_SETTLEMENT_AMOUNT_EXCEEDED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformSettlementCancelAmountExceededPortOneCancelError returns the union data inside the CreatePlatformOrderCancelTransferError as a PlatformSettlementCancelAmountExceededPortOneCancelError
func (t CreatePlatformOrderCancelTransferError) AsPlatformSettlementCancelAmountExceededPortOneCancelError() (PlatformSettlementCancelAmountExceededPortOneCancelError, error) {
	var body PlatformSettlementCancelAmountExceededPortOneCancelError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformSettlementCancelAmountExceededPortOneCancelError overwrites any union data inside the CreatePlatformOrderCancelTransferError as the provided PlatformSettlementCancelAmountExceededPortOneCancelError
func (t *CreatePlatformOrderCancelTransferError) FromPlatformSettlementCancelAmountExceededPortOneCancelError(v PlatformSettlementCancelAmountExceededPortOneCancelError) error {
	v.Type = "PLATFORM_SETTLEMENT_CANCEL_AMOUNT_EXCEEDED_PORT_ONE_CANCEL"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformSettlementCancelAmountExceededPortOneCancelError performs a merge with any union data inside the CreatePlatformOrderCancelTransferError, using the provided PlatformSettlementCancelAmountExceededPortOneCancelError
func (t *CreatePlatformOrderCancelTransferError) MergePlatformSettlementCancelAmountExceededPortOneCancelError(v PlatformSettlementCancelAmountExceededPortOneCancelError) error {
	v.Type = "PLATFORM_SETTLEMENT_CANCEL_AMOUNT_EXCEEDED_PORT_ONE_CANCEL"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformTransferAlreadyExistsError returns the union data inside the CreatePlatformOrderCancelTransferError as a PlatformTransferAlreadyExistsError
func (t CreatePlatformOrderCancelTransferError) AsPlatformTransferAlreadyExistsError() (PlatformTransferAlreadyExistsError, error) {
	var body PlatformTransferAlreadyExistsError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformTransferAlreadyExistsError overwrites any union data inside the CreatePlatformOrderCancelTransferError as the provided PlatformTransferAlreadyExistsError
func (t *CreatePlatformOrderCancelTransferError) FromPlatformTransferAlreadyExistsError(v PlatformTransferAlreadyExistsError) error {
	v.Type = "PLATFORM_TRANSFER_ALREADY_EXISTS"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformTransferAlreadyExistsError performs a merge with any union data inside the CreatePlatformOrderCancelTransferError, using the provided PlatformTransferAlreadyExistsError
func (t *CreatePlatformOrderCancelTransferError) MergePlatformTransferAlreadyExistsError(v PlatformTransferAlreadyExistsError) error {
	v.Type = "PLATFORM_TRANSFER_ALREADY_EXISTS"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformTransferDiscountSharePolicyNotFoundError returns the union data inside the CreatePlatformOrderCancelTransferError as a PlatformTransferDiscountSharePolicyNotFoundError
func (t CreatePlatformOrderCancelTransferError) AsPlatformTransferDiscountSharePolicyNotFoundError() (PlatformTransferDiscountSharePolicyNotFoundError, error) {
	var body PlatformTransferDiscountSharePolicyNotFoundError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformTransferDiscountSharePolicyNotFoundError overwrites any union data inside the CreatePlatformOrderCancelTransferError as the provided PlatformTransferDiscountSharePolicyNotFoundError
func (t *CreatePlatformOrderCancelTransferError) FromPlatformTransferDiscountSharePolicyNotFoundError(v PlatformTransferDiscountSharePolicyNotFoundError) error {
	v.Type = "PLATFORM_TRANSFER_DISCOUNT_SHARE_POLICY_NOT_FOUND"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformTransferDiscountSharePolicyNotFoundError performs a merge with any union data inside the CreatePlatformOrderCancelTransferError, using the provided PlatformTransferDiscountSharePolicyNotFoundError
func (t *CreatePlatformOrderCancelTransferError) MergePlatformTransferDiscountSharePolicyNotFoundError(v PlatformTransferDiscountSharePolicyNotFoundError) error {
	v.Type = "PLATFORM_TRANSFER_DISCOUNT_SHARE_POLICY_NOT_FOUND"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformTransferNotFoundError returns the union data inside the CreatePlatformOrderCancelTransferError as a PlatformTransferNotFoundError
func (t CreatePlatformOrderCancelTransferError) AsPlatformTransferNotFoundError() (PlatformTransferNotFoundError, error) {
	var body PlatformTransferNotFoundError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformTransferNotFoundError overwrites any union data inside the CreatePlatformOrderCancelTransferError as the provided PlatformTransferNotFoundError
func (t *CreatePlatformOrderCancelTransferError) FromPlatformTransferNotFoundError(v PlatformTransferNotFoundError) error {
	v.Type = "PLATFORM_TRANSFER_NOT_FOUND"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformTransferNotFoundError performs a merge with any union data inside the CreatePlatformOrderCancelTransferError, using the provided PlatformTransferNotFoundError
func (t *CreatePlatformOrderCancelTransferError) MergePlatformTransferNotFoundError(v PlatformTransferNotFoundError) error {
	v.Type = "PLATFORM_TRANSFER_NOT_FOUND"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformUserDefinedPropertyNotFoundError returns the union data inside the CreatePlatformOrderCancelTransferError as a PlatformUserDefinedPropertyNotFoundError
func (t CreatePlatformOrderCancelTransferError) AsPlatformUserDefinedPropertyNotFoundError() (PlatformUserDefinedPropertyNotFoundError, error) {
	var body PlatformUserDefinedPropertyNotFoundError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformUserDefinedPropertyNotFoundError overwrites any union data inside the CreatePlatformOrderCancelTransferError as the provided PlatformUserDefinedPropertyNotFoundError
func (t *CreatePlatformOrderCancelTransferError) FromPlatformUserDefinedPropertyNotFoundError(v PlatformUserDefinedPropertyNotFoundError) error {
	v.Type = "PLATFORM_USER_DEFINED_PROPERTY_NOT_FOUND"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformUserDefinedPropertyNotFoundError performs a merge with any union data inside the CreatePlatformOrderCancelTransferError, using the provided PlatformUserDefinedPropertyNotFoundError
func (t *CreatePlatformOrderCancelTransferError) MergePlatformUserDefinedPropertyNotFoundError(v PlatformUserDefinedPropertyNotFoundError) error {
	v.Type = "PLATFORM_USER_DEFINED_PROPERTY_NOT_FOUND"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUnauthorizedError returns the union data inside the CreatePlatformOrderCancelTransferError as a UnauthorizedError
func (t CreatePlatformOrderCancelTransferError) AsUnauthorizedError() (UnauthorizedError, error) {
	var body UnauthorizedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUnauthorizedError overwrites any union data inside the CreatePlatformOrderCancelTransferError as the provided UnauthorizedError
func (t *CreatePlatformOrderCancelTransferError) FromUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUnauthorizedError performs a merge with any union data inside the CreatePlatformOrderCancelTransferError, using the provided UnauthorizedError
func (t *CreatePlatformOrderCancelTransferError) MergeUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t CreatePlatformOrderCancelTransferError) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t CreatePlatformOrderCancelTransferError) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "FORBIDDEN":
		return t.AsForbiddenError()
	case "INVALID_REQUEST":
		return t.AsInvalidRequestError()
	case "PLATFORM_CANCELLABLE_AMOUNT_EXCEEDED":
		return t.AsPlatformCancellableAmountExceededError()
	case "PLATFORM_CANCELLABLE_DISCOUNT_AMOUNT_EXCEEDED":
		return t.AsPlatformCancellableDiscountAmountExceededError()
	case "PLATFORM_CANCELLABLE_DISCOUNT_TAX_FREE_AMOUNT_EXCEEDED":
		return t.AsPlatformCancellableDiscountTaxFreeAmountExceededError()
	case "PLATFORM_CANCELLABLE_PRODUCT_QUANTITY_EXCEEDED":
		return t.AsPlatformCancellableProductQuantityExceededError()
	case "PLATFORM_CANCELLATION_AND_PAYMENT_TYPE_MISMATCHED":
		return t.AsPlatformCancellationAndPaymentTypeMismatchedError()
	case "PLATFORM_CANCELLATION_NOT_FOUND":
		return t.AsPlatformCancellationNotFoundError()
	case "PLATFORM_CANNOT_SPECIFY_TRANSFER":
		return t.AsPlatformCannotSpecifyTransferError()
	case "PLATFORM_DISCOUNT_SHARE_POLICY_ID_DUPLICATED":
		return t.AsPlatformDiscountSharePolicyIdDuplicatedError()
	case "PLATFORM_NOT_ENABLED":
		return t.AsPlatformNotEnabledError()
	case "PLATFORM_ORDER_DETAIL_MISMATCHED":
		return t.AsPlatformOrderDetailMismatchedError()
	case "PLATFORM_ORDER_TRANSFER_ALREADY_CANCELLED":
		return t.AsPlatformOrderTransferAlreadyCancelledError()
	case "PLATFORM_PAYMENT_NOT_FOUND":
		return t.AsPlatformPaymentNotFoundError()
	case "PLATFORM_PRODUCT_ID_DUPLICATED":
		return t.AsPlatformProductIdDuplicatedError()
	case "PLATFORM_PRODUCT_ID_NOT_FOUND":
		return t.AsPlatformProductIdNotFoundError()
	case "PLATFORM_SETTLEMENT_AMOUNT_EXCEEDED":
		return t.AsPlatformSettlementAmountExceededError()
	case "PLATFORM_SETTLEMENT_CANCEL_AMOUNT_EXCEEDED_PORT_ONE_CANCEL":
		return t.AsPlatformSettlementCancelAmountExceededPortOneCancelError()
	case "PLATFORM_TRANSFER_ALREADY_EXISTS":
		return t.AsPlatformTransferAlreadyExistsError()
	case "PLATFORM_TRANSFER_DISCOUNT_SHARE_POLICY_NOT_FOUND":
		return t.AsPlatformTransferDiscountSharePolicyNotFoundError()
	case "PLATFORM_TRANSFER_NOT_FOUND":
		return t.AsPlatformTransferNotFoundError()
	case "PLATFORM_USER_DEFINED_PROPERTY_NOT_FOUND":
		return t.AsPlatformUserDefinedPropertyNotFoundError()
	case "UNAUTHORIZED":
		return t.AsUnauthorizedError()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t CreatePlatformOrderCancelTransferError) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CreatePlatformOrderCancelTransferError) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsForbiddenError returns the union data inside the CreatePlatformOrderTransferError as a ForbiddenError
func (t CreatePlatformOrderTransferError) AsForbiddenError() (ForbiddenError, error) {
	var body ForbiddenError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromForbiddenError overwrites any union data inside the CreatePlatformOrderTransferError as the provided ForbiddenError
func (t *CreatePlatformOrderTransferError) FromForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeForbiddenError performs a merge with any union data inside the CreatePlatformOrderTransferError, using the provided ForbiddenError
func (t *CreatePlatformOrderTransferError) MergeForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInvalidRequestError returns the union data inside the CreatePlatformOrderTransferError as a InvalidRequestError
func (t CreatePlatformOrderTransferError) AsInvalidRequestError() (InvalidRequestError, error) {
	var body InvalidRequestError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInvalidRequestError overwrites any union data inside the CreatePlatformOrderTransferError as the provided InvalidRequestError
func (t *CreatePlatformOrderTransferError) FromInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInvalidRequestError performs a merge with any union data inside the CreatePlatformOrderTransferError, using the provided InvalidRequestError
func (t *CreatePlatformOrderTransferError) MergeInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformAdditionalFeePoliciesNotFoundError returns the union data inside the CreatePlatformOrderTransferError as a PlatformAdditionalFeePoliciesNotFoundError
func (t CreatePlatformOrderTransferError) AsPlatformAdditionalFeePoliciesNotFoundError() (PlatformAdditionalFeePoliciesNotFoundError, error) {
	var body PlatformAdditionalFeePoliciesNotFoundError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformAdditionalFeePoliciesNotFoundError overwrites any union data inside the CreatePlatformOrderTransferError as the provided PlatformAdditionalFeePoliciesNotFoundError
func (t *CreatePlatformOrderTransferError) FromPlatformAdditionalFeePoliciesNotFoundError(v PlatformAdditionalFeePoliciesNotFoundError) error {
	v.Type = "PLATFORM_ADDITIONAL_FEE_POLICIES_NOT_FOUND"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformAdditionalFeePoliciesNotFoundError performs a merge with any union data inside the CreatePlatformOrderTransferError, using the provided PlatformAdditionalFeePoliciesNotFoundError
func (t *CreatePlatformOrderTransferError) MergePlatformAdditionalFeePoliciesNotFoundError(v PlatformAdditionalFeePoliciesNotFoundError) error {
	v.Type = "PLATFORM_ADDITIONAL_FEE_POLICIES_NOT_FOUND"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformAdditionalFixedAmountFeeCurrencyAndSettlementCurrencyMismatchedError returns the union data inside the CreatePlatformOrderTransferError as a PlatformAdditionalFixedAmountFeeCurrencyAndSettlementCurrencyMismatchedError
func (t CreatePlatformOrderTransferError) AsPlatformAdditionalFixedAmountFeeCurrencyAndSettlementCurrencyMismatchedError() (PlatformAdditionalFixedAmountFeeCurrencyAndSettlementCurrencyMismatchedError, error) {
	var body PlatformAdditionalFixedAmountFeeCurrencyAndSettlementCurrencyMismatchedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformAdditionalFixedAmountFeeCurrencyAndSettlementCurrencyMismatchedError overwrites any union data inside the CreatePlatformOrderTransferError as the provided PlatformAdditionalFixedAmountFeeCurrencyAndSettlementCurrencyMismatchedError
func (t *CreatePlatformOrderTransferError) FromPlatformAdditionalFixedAmountFeeCurrencyAndSettlementCurrencyMismatchedError(v PlatformAdditionalFixedAmountFeeCurrencyAndSettlementCurrencyMismatchedError) error {
	v.Type = "PLATFORM_ADDITIONAL_FIXED_AMOUNT_FEE_CURRENCY_AND_SETTLEMENT_CURRENCY_MISMATCHED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformAdditionalFixedAmountFeeCurrencyAndSettlementCurrencyMismatchedError performs a merge with any union data inside the CreatePlatformOrderTransferError, using the provided PlatformAdditionalFixedAmountFeeCurrencyAndSettlementCurrencyMismatchedError
func (t *CreatePlatformOrderTransferError) MergePlatformAdditionalFixedAmountFeeCurrencyAndSettlementCurrencyMismatchedError(v PlatformAdditionalFixedAmountFeeCurrencyAndSettlementCurrencyMismatchedError) error {
	v.Type = "PLATFORM_ADDITIONAL_FIXED_AMOUNT_FEE_CURRENCY_AND_SETTLEMENT_CURRENCY_MISMATCHED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformContractNotFoundError returns the union data inside the CreatePlatformOrderTransferError as a PlatformContractNotFoundError
func (t CreatePlatformOrderTransferError) AsPlatformContractNotFoundError() (PlatformContractNotFoundError, error) {
	var body PlatformContractNotFoundError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformContractNotFoundError overwrites any union data inside the CreatePlatformOrderTransferError as the provided PlatformContractNotFoundError
func (t *CreatePlatformOrderTransferError) FromPlatformContractNotFoundError(v PlatformContractNotFoundError) error {
	v.Type = "PLATFORM_CONTRACT_NOT_FOUND"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformContractNotFoundError performs a merge with any union data inside the CreatePlatformOrderTransferError, using the provided PlatformContractNotFoundError
func (t *CreatePlatformOrderTransferError) MergePlatformContractNotFoundError(v PlatformContractNotFoundError) error {
	v.Type = "PLATFORM_CONTRACT_NOT_FOUND"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformContractPlatformFixedAmountFeeCurrencyAndSettlementCurrencyMismatchedError returns the union data inside the CreatePlatformOrderTransferError as a PlatformContractPlatformFixedAmountFeeCurrencyAndSettlementCurrencyMismatchedError
func (t CreatePlatformOrderTransferError) AsPlatformContractPlatformFixedAmountFeeCurrencyAndSettlementCurrencyMismatchedError() (PlatformContractPlatformFixedAmountFeeCurrencyAndSettlementCurrencyMismatchedError, error) {
	var body PlatformContractPlatformFixedAmountFeeCurrencyAndSettlementCurrencyMismatchedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformContractPlatformFixedAmountFeeCurrencyAndSettlementCurrencyMismatchedError overwrites any union data inside the CreatePlatformOrderTransferError as the provided PlatformContractPlatformFixedAmountFeeCurrencyAndSettlementCurrencyMismatchedError
func (t *CreatePlatformOrderTransferError) FromPlatformContractPlatformFixedAmountFeeCurrencyAndSettlementCurrencyMismatchedError(v PlatformContractPlatformFixedAmountFeeCurrencyAndSettlementCurrencyMismatchedError) error {
	v.Type = "PLATFORM_CONTRACT_PLATFORM_FIXED_AMOUNT_FEE_CURRENCY_AND_SETTLEMENT_CURRENCY_MISMATCHED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformContractPlatformFixedAmountFeeCurrencyAndSettlementCurrencyMismatchedError performs a merge with any union data inside the CreatePlatformOrderTransferError, using the provided PlatformContractPlatformFixedAmountFeeCurrencyAndSettlementCurrencyMismatchedError
func (t *CreatePlatformOrderTransferError) MergePlatformContractPlatformFixedAmountFeeCurrencyAndSettlementCurrencyMismatchedError(v PlatformContractPlatformFixedAmountFeeCurrencyAndSettlementCurrencyMismatchedError) error {
	v.Type = "PLATFORM_CONTRACT_PLATFORM_FIXED_AMOUNT_FEE_CURRENCY_AND_SETTLEMENT_CURRENCY_MISMATCHED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformCurrencyNotSupportedError returns the union data inside the CreatePlatformOrderTransferError as a PlatformCurrencyNotSupportedError
func (t CreatePlatformOrderTransferError) AsPlatformCurrencyNotSupportedError() (PlatformCurrencyNotSupportedError, error) {
	var body PlatformCurrencyNotSupportedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformCurrencyNotSupportedError overwrites any union data inside the CreatePlatformOrderTransferError as the provided PlatformCurrencyNotSupportedError
func (t *CreatePlatformOrderTransferError) FromPlatformCurrencyNotSupportedError(v PlatformCurrencyNotSupportedError) error {
	v.Type = "PLATFORM_CURRENCY_NOT_SUPPORTED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformCurrencyNotSupportedError performs a merge with any union data inside the CreatePlatformOrderTransferError, using the provided PlatformCurrencyNotSupportedError
func (t *CreatePlatformOrderTransferError) MergePlatformCurrencyNotSupportedError(v PlatformCurrencyNotSupportedError) error {
	v.Type = "PLATFORM_CURRENCY_NOT_SUPPORTED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformDiscountSharePoliciesNotFoundError returns the union data inside the CreatePlatformOrderTransferError as a PlatformDiscountSharePoliciesNotFoundError
func (t CreatePlatformOrderTransferError) AsPlatformDiscountSharePoliciesNotFoundError() (PlatformDiscountSharePoliciesNotFoundError, error) {
	var body PlatformDiscountSharePoliciesNotFoundError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformDiscountSharePoliciesNotFoundError overwrites any union data inside the CreatePlatformOrderTransferError as the provided PlatformDiscountSharePoliciesNotFoundError
func (t *CreatePlatformOrderTransferError) FromPlatformDiscountSharePoliciesNotFoundError(v PlatformDiscountSharePoliciesNotFoundError) error {
	v.Type = "PLATFORM_DISCOUNT_SHARE_POLICIES_NOT_FOUND"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformDiscountSharePoliciesNotFoundError performs a merge with any union data inside the CreatePlatformOrderTransferError, using the provided PlatformDiscountSharePoliciesNotFoundError
func (t *CreatePlatformOrderTransferError) MergePlatformDiscountSharePoliciesNotFoundError(v PlatformDiscountSharePoliciesNotFoundError) error {
	v.Type = "PLATFORM_DISCOUNT_SHARE_POLICIES_NOT_FOUND"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformNotEnabledError returns the union data inside the CreatePlatformOrderTransferError as a PlatformNotEnabledError
func (t CreatePlatformOrderTransferError) AsPlatformNotEnabledError() (PlatformNotEnabledError, error) {
	var body PlatformNotEnabledError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformNotEnabledError overwrites any union data inside the CreatePlatformOrderTransferError as the provided PlatformNotEnabledError
func (t *CreatePlatformOrderTransferError) FromPlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformNotEnabledError performs a merge with any union data inside the CreatePlatformOrderTransferError, using the provided PlatformNotEnabledError
func (t *CreatePlatformOrderTransferError) MergePlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformPartnerNotFoundError returns the union data inside the CreatePlatformOrderTransferError as a PlatformPartnerNotFoundError
func (t CreatePlatformOrderTransferError) AsPlatformPartnerNotFoundError() (PlatformPartnerNotFoundError, error) {
	var body PlatformPartnerNotFoundError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformPartnerNotFoundError overwrites any union data inside the CreatePlatformOrderTransferError as the provided PlatformPartnerNotFoundError
func (t *CreatePlatformOrderTransferError) FromPlatformPartnerNotFoundError(v PlatformPartnerNotFoundError) error {
	v.Type = "PLATFORM_PARTNER_NOT_FOUND"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformPartnerNotFoundError performs a merge with any union data inside the CreatePlatformOrderTransferError, using the provided PlatformPartnerNotFoundError
func (t *CreatePlatformOrderTransferError) MergePlatformPartnerNotFoundError(v PlatformPartnerNotFoundError) error {
	v.Type = "PLATFORM_PARTNER_NOT_FOUND"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformPaymentNotFoundError returns the union data inside the CreatePlatformOrderTransferError as a PlatformPaymentNotFoundError
func (t CreatePlatformOrderTransferError) AsPlatformPaymentNotFoundError() (PlatformPaymentNotFoundError, error) {
	var body PlatformPaymentNotFoundError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformPaymentNotFoundError overwrites any union data inside the CreatePlatformOrderTransferError as the provided PlatformPaymentNotFoundError
func (t *CreatePlatformOrderTransferError) FromPlatformPaymentNotFoundError(v PlatformPaymentNotFoundError) error {
	v.Type = "PLATFORM_PAYMENT_NOT_FOUND"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformPaymentNotFoundError performs a merge with any union data inside the CreatePlatformOrderTransferError, using the provided PlatformPaymentNotFoundError
func (t *CreatePlatformOrderTransferError) MergePlatformPaymentNotFoundError(v PlatformPaymentNotFoundError) error {
	v.Type = "PLATFORM_PAYMENT_NOT_FOUND"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformProductIdDuplicatedError returns the union data inside the CreatePlatformOrderTransferError as a PlatformProductIdDuplicatedError
func (t CreatePlatformOrderTransferError) AsPlatformProductIdDuplicatedError() (PlatformProductIdDuplicatedError, error) {
	var body PlatformProductIdDuplicatedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformProductIdDuplicatedError overwrites any union data inside the CreatePlatformOrderTransferError as the provided PlatformProductIdDuplicatedError
func (t *CreatePlatformOrderTransferError) FromPlatformProductIdDuplicatedError(v PlatformProductIdDuplicatedError) error {
	v.Type = "PLATFORM_PRODUCT_ID_DUPLICATED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformProductIdDuplicatedError performs a merge with any union data inside the CreatePlatformOrderTransferError, using the provided PlatformProductIdDuplicatedError
func (t *CreatePlatformOrderTransferError) MergePlatformProductIdDuplicatedError(v PlatformProductIdDuplicatedError) error {
	v.Type = "PLATFORM_PRODUCT_ID_DUPLICATED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformSettlementAmountExceededError returns the union data inside the CreatePlatformOrderTransferError as a PlatformSettlementAmountExceededError
func (t CreatePlatformOrderTransferError) AsPlatformSettlementAmountExceededError() (PlatformSettlementAmountExceededError, error) {
	var body PlatformSettlementAmountExceededError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformSettlementAmountExceededError overwrites any union data inside the CreatePlatformOrderTransferError as the provided PlatformSettlementAmountExceededError
func (t *CreatePlatformOrderTransferError) FromPlatformSettlementAmountExceededError(v PlatformSettlementAmountExceededError) error {
	v.Type = "PLATFORM_SETTLEMENT_AMOUNT_EXCEEDED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformSettlementAmountExceededError performs a merge with any union data inside the CreatePlatformOrderTransferError, using the provided PlatformSettlementAmountExceededError
func (t *CreatePlatformOrderTransferError) MergePlatformSettlementAmountExceededError(v PlatformSettlementAmountExceededError) error {
	v.Type = "PLATFORM_SETTLEMENT_AMOUNT_EXCEEDED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformSettlementParameterNotFoundError returns the union data inside the CreatePlatformOrderTransferError as a PlatformSettlementParameterNotFoundError
func (t CreatePlatformOrderTransferError) AsPlatformSettlementParameterNotFoundError() (PlatformSettlementParameterNotFoundError, error) {
	var body PlatformSettlementParameterNotFoundError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformSettlementParameterNotFoundError overwrites any union data inside the CreatePlatformOrderTransferError as the provided PlatformSettlementParameterNotFoundError
func (t *CreatePlatformOrderTransferError) FromPlatformSettlementParameterNotFoundError(v PlatformSettlementParameterNotFoundError) error {
	v.Type = "PLATFORM_SETTLEMENT_PARAMETER_NOT_FOUND"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformSettlementParameterNotFoundError performs a merge with any union data inside the CreatePlatformOrderTransferError, using the provided PlatformSettlementParameterNotFoundError
func (t *CreatePlatformOrderTransferError) MergePlatformSettlementParameterNotFoundError(v PlatformSettlementParameterNotFoundError) error {
	v.Type = "PLATFORM_SETTLEMENT_PARAMETER_NOT_FOUND"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformSettlementPaymentAmountExceededPortOnePaymentError returns the union data inside the CreatePlatformOrderTransferError as a PlatformSettlementPaymentAmountExceededPortOnePaymentError
func (t CreatePlatformOrderTransferError) AsPlatformSettlementPaymentAmountExceededPortOnePaymentError() (PlatformSettlementPaymentAmountExceededPortOnePaymentError, error) {
	var body PlatformSettlementPaymentAmountExceededPortOnePaymentError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformSettlementPaymentAmountExceededPortOnePaymentError overwrites any union data inside the CreatePlatformOrderTransferError as the provided PlatformSettlementPaymentAmountExceededPortOnePaymentError
func (t *CreatePlatformOrderTransferError) FromPlatformSettlementPaymentAmountExceededPortOnePaymentError(v PlatformSettlementPaymentAmountExceededPortOnePaymentError) error {
	v.Type = "PLATFORM_SETTLEMENT_PAYMENT_AMOUNT_EXCEEDED_PORT_ONE_PAYMENT"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformSettlementPaymentAmountExceededPortOnePaymentError performs a merge with any union data inside the CreatePlatformOrderTransferError, using the provided PlatformSettlementPaymentAmountExceededPortOnePaymentError
func (t *CreatePlatformOrderTransferError) MergePlatformSettlementPaymentAmountExceededPortOnePaymentError(v PlatformSettlementPaymentAmountExceededPortOnePaymentError) error {
	v.Type = "PLATFORM_SETTLEMENT_PAYMENT_AMOUNT_EXCEEDED_PORT_ONE_PAYMENT"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformSettlementSupplyWithVatAmountExceededPortOnePaymentError returns the union data inside the CreatePlatformOrderTransferError as a PlatformSettlementSupplyWithVatAmountExceededPortOnePaymentError
func (t CreatePlatformOrderTransferError) AsPlatformSettlementSupplyWithVatAmountExceededPortOnePaymentError() (PlatformSettlementSupplyWithVatAmountExceededPortOnePaymentError, error) {
	var body PlatformSettlementSupplyWithVatAmountExceededPortOnePaymentError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformSettlementSupplyWithVatAmountExceededPortOnePaymentError overwrites any union data inside the CreatePlatformOrderTransferError as the provided PlatformSettlementSupplyWithVatAmountExceededPortOnePaymentError
func (t *CreatePlatformOrderTransferError) FromPlatformSettlementSupplyWithVatAmountExceededPortOnePaymentError(v PlatformSettlementSupplyWithVatAmountExceededPortOnePaymentError) error {
	v.Type = "PLATFORM_SETTLEMENT_SUPPLY_WITH_VAT_AMOUNT_EXCEEDED_PORT_ONE_PAYMENT"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformSettlementSupplyWithVatAmountExceededPortOnePaymentError performs a merge with any union data inside the CreatePlatformOrderTransferError, using the provided PlatformSettlementSupplyWithVatAmountExceededPortOnePaymentError
func (t *CreatePlatformOrderTransferError) MergePlatformSettlementSupplyWithVatAmountExceededPortOnePaymentError(v PlatformSettlementSupplyWithVatAmountExceededPortOnePaymentError) error {
	v.Type = "PLATFORM_SETTLEMENT_SUPPLY_WITH_VAT_AMOUNT_EXCEEDED_PORT_ONE_PAYMENT"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformSettlementTaxFreeAmountExceededPortOnePaymentError returns the union data inside the CreatePlatformOrderTransferError as a PlatformSettlementTaxFreeAmountExceededPortOnePaymentError
func (t CreatePlatformOrderTransferError) AsPlatformSettlementTaxFreeAmountExceededPortOnePaymentError() (PlatformSettlementTaxFreeAmountExceededPortOnePaymentError, error) {
	var body PlatformSettlementTaxFreeAmountExceededPortOnePaymentError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformSettlementTaxFreeAmountExceededPortOnePaymentError overwrites any union data inside the CreatePlatformOrderTransferError as the provided PlatformSettlementTaxFreeAmountExceededPortOnePaymentError
func (t *CreatePlatformOrderTransferError) FromPlatformSettlementTaxFreeAmountExceededPortOnePaymentError(v PlatformSettlementTaxFreeAmountExceededPortOnePaymentError) error {
	v.Type = "PLATFORM_SETTLEMENT_TAX_FREE_AMOUNT_EXCEEDED_PORT_ONE_PAYMENT"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformSettlementTaxFreeAmountExceededPortOnePaymentError performs a merge with any union data inside the CreatePlatformOrderTransferError, using the provided PlatformSettlementTaxFreeAmountExceededPortOnePaymentError
func (t *CreatePlatformOrderTransferError) MergePlatformSettlementTaxFreeAmountExceededPortOnePaymentError(v PlatformSettlementTaxFreeAmountExceededPortOnePaymentError) error {
	v.Type = "PLATFORM_SETTLEMENT_TAX_FREE_AMOUNT_EXCEEDED_PORT_ONE_PAYMENT"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformTransferAlreadyExistsError returns the union data inside the CreatePlatformOrderTransferError as a PlatformTransferAlreadyExistsError
func (t CreatePlatformOrderTransferError) AsPlatformTransferAlreadyExistsError() (PlatformTransferAlreadyExistsError, error) {
	var body PlatformTransferAlreadyExistsError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformTransferAlreadyExistsError overwrites any union data inside the CreatePlatformOrderTransferError as the provided PlatformTransferAlreadyExistsError
func (t *CreatePlatformOrderTransferError) FromPlatformTransferAlreadyExistsError(v PlatformTransferAlreadyExistsError) error {
	v.Type = "PLATFORM_TRANSFER_ALREADY_EXISTS"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformTransferAlreadyExistsError performs a merge with any union data inside the CreatePlatformOrderTransferError, using the provided PlatformTransferAlreadyExistsError
func (t *CreatePlatformOrderTransferError) MergePlatformTransferAlreadyExistsError(v PlatformTransferAlreadyExistsError) error {
	v.Type = "PLATFORM_TRANSFER_ALREADY_EXISTS"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformUserDefinedPropertyNotFoundError returns the union data inside the CreatePlatformOrderTransferError as a PlatformUserDefinedPropertyNotFoundError
func (t CreatePlatformOrderTransferError) AsPlatformUserDefinedPropertyNotFoundError() (PlatformUserDefinedPropertyNotFoundError, error) {
	var body PlatformUserDefinedPropertyNotFoundError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformUserDefinedPropertyNotFoundError overwrites any union data inside the CreatePlatformOrderTransferError as the provided PlatformUserDefinedPropertyNotFoundError
func (t *CreatePlatformOrderTransferError) FromPlatformUserDefinedPropertyNotFoundError(v PlatformUserDefinedPropertyNotFoundError) error {
	v.Type = "PLATFORM_USER_DEFINED_PROPERTY_NOT_FOUND"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformUserDefinedPropertyNotFoundError performs a merge with any union data inside the CreatePlatformOrderTransferError, using the provided PlatformUserDefinedPropertyNotFoundError
func (t *CreatePlatformOrderTransferError) MergePlatformUserDefinedPropertyNotFoundError(v PlatformUserDefinedPropertyNotFoundError) error {
	v.Type = "PLATFORM_USER_DEFINED_PROPERTY_NOT_FOUND"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUnauthorizedError returns the union data inside the CreatePlatformOrderTransferError as a UnauthorizedError
func (t CreatePlatformOrderTransferError) AsUnauthorizedError() (UnauthorizedError, error) {
	var body UnauthorizedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUnauthorizedError overwrites any union data inside the CreatePlatformOrderTransferError as the provided UnauthorizedError
func (t *CreatePlatformOrderTransferError) FromUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUnauthorizedError performs a merge with any union data inside the CreatePlatformOrderTransferError, using the provided UnauthorizedError
func (t *CreatePlatformOrderTransferError) MergeUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t CreatePlatformOrderTransferError) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t CreatePlatformOrderTransferError) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "FORBIDDEN":
		return t.AsForbiddenError()
	case "INVALID_REQUEST":
		return t.AsInvalidRequestError()
	case "PLATFORM_ADDITIONAL_FEE_POLICIES_NOT_FOUND":
		return t.AsPlatformAdditionalFeePoliciesNotFoundError()
	case "PLATFORM_ADDITIONAL_FIXED_AMOUNT_FEE_CURRENCY_AND_SETTLEMENT_CURRENCY_MISMATCHED":
		return t.AsPlatformAdditionalFixedAmountFeeCurrencyAndSettlementCurrencyMismatchedError()
	case "PLATFORM_CONTRACT_NOT_FOUND":
		return t.AsPlatformContractNotFoundError()
	case "PLATFORM_CONTRACT_PLATFORM_FIXED_AMOUNT_FEE_CURRENCY_AND_SETTLEMENT_CURRENCY_MISMATCHED":
		return t.AsPlatformContractPlatformFixedAmountFeeCurrencyAndSettlementCurrencyMismatchedError()
	case "PLATFORM_CURRENCY_NOT_SUPPORTED":
		return t.AsPlatformCurrencyNotSupportedError()
	case "PLATFORM_DISCOUNT_SHARE_POLICIES_NOT_FOUND":
		return t.AsPlatformDiscountSharePoliciesNotFoundError()
	case "PLATFORM_NOT_ENABLED":
		return t.AsPlatformNotEnabledError()
	case "PLATFORM_PARTNER_NOT_FOUND":
		return t.AsPlatformPartnerNotFoundError()
	case "PLATFORM_PAYMENT_NOT_FOUND":
		return t.AsPlatformPaymentNotFoundError()
	case "PLATFORM_PRODUCT_ID_DUPLICATED":
		return t.AsPlatformProductIdDuplicatedError()
	case "PLATFORM_SETTLEMENT_AMOUNT_EXCEEDED":
		return t.AsPlatformSettlementAmountExceededError()
	case "PLATFORM_SETTLEMENT_PARAMETER_NOT_FOUND":
		return t.AsPlatformSettlementParameterNotFoundError()
	case "PLATFORM_SETTLEMENT_PAYMENT_AMOUNT_EXCEEDED_PORT_ONE_PAYMENT":
		return t.AsPlatformSettlementPaymentAmountExceededPortOnePaymentError()
	case "PLATFORM_SETTLEMENT_SUPPLY_WITH_VAT_AMOUNT_EXCEEDED_PORT_ONE_PAYMENT":
		return t.AsPlatformSettlementSupplyWithVatAmountExceededPortOnePaymentError()
	case "PLATFORM_SETTLEMENT_TAX_FREE_AMOUNT_EXCEEDED_PORT_ONE_PAYMENT":
		return t.AsPlatformSettlementTaxFreeAmountExceededPortOnePaymentError()
	case "PLATFORM_TRANSFER_ALREADY_EXISTS":
		return t.AsPlatformTransferAlreadyExistsError()
	case "PLATFORM_USER_DEFINED_PROPERTY_NOT_FOUND":
		return t.AsPlatformUserDefinedPropertyNotFoundError()
	case "UNAUTHORIZED":
		return t.AsUnauthorizedError()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t CreatePlatformOrderTransferError) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CreatePlatformOrderTransferError) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsForbiddenError returns the union data inside the CreatePlatformPartnerError as a ForbiddenError
func (t CreatePlatformPartnerError) AsForbiddenError() (ForbiddenError, error) {
	var body ForbiddenError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromForbiddenError overwrites any union data inside the CreatePlatformPartnerError as the provided ForbiddenError
func (t *CreatePlatformPartnerError) FromForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeForbiddenError performs a merge with any union data inside the CreatePlatformPartnerError, using the provided ForbiddenError
func (t *CreatePlatformPartnerError) MergeForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInvalidRequestError returns the union data inside the CreatePlatformPartnerError as a InvalidRequestError
func (t CreatePlatformPartnerError) AsInvalidRequestError() (InvalidRequestError, error) {
	var body InvalidRequestError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInvalidRequestError overwrites any union data inside the CreatePlatformPartnerError as the provided InvalidRequestError
func (t *CreatePlatformPartnerError) FromInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInvalidRequestError performs a merge with any union data inside the CreatePlatformPartnerError, using the provided InvalidRequestError
func (t *CreatePlatformPartnerError) MergeInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformAccountVerificationAlreadyUsedError returns the union data inside the CreatePlatformPartnerError as a PlatformAccountVerificationAlreadyUsedError
func (t CreatePlatformPartnerError) AsPlatformAccountVerificationAlreadyUsedError() (PlatformAccountVerificationAlreadyUsedError, error) {
	var body PlatformAccountVerificationAlreadyUsedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformAccountVerificationAlreadyUsedError overwrites any union data inside the CreatePlatformPartnerError as the provided PlatformAccountVerificationAlreadyUsedError
func (t *CreatePlatformPartnerError) FromPlatformAccountVerificationAlreadyUsedError(v PlatformAccountVerificationAlreadyUsedError) error {
	v.Type = "PLATFORM_ACCOUNT_VERIFICATION_ALREADY_USED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformAccountVerificationAlreadyUsedError performs a merge with any union data inside the CreatePlatformPartnerError, using the provided PlatformAccountVerificationAlreadyUsedError
func (t *CreatePlatformPartnerError) MergePlatformAccountVerificationAlreadyUsedError(v PlatformAccountVerificationAlreadyUsedError) error {
	v.Type = "PLATFORM_ACCOUNT_VERIFICATION_ALREADY_USED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformAccountVerificationFailedError returns the union data inside the CreatePlatformPartnerError as a PlatformAccountVerificationFailedError
func (t CreatePlatformPartnerError) AsPlatformAccountVerificationFailedError() (PlatformAccountVerificationFailedError, error) {
	var body PlatformAccountVerificationFailedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformAccountVerificationFailedError overwrites any union data inside the CreatePlatformPartnerError as the provided PlatformAccountVerificationFailedError
func (t *CreatePlatformPartnerError) FromPlatformAccountVerificationFailedError(v PlatformAccountVerificationFailedError) error {
	v.Type = "PLATFORM_ACCOUNT_VERIFICATION_FAILED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformAccountVerificationFailedError performs a merge with any union data inside the CreatePlatformPartnerError, using the provided PlatformAccountVerificationFailedError
func (t *CreatePlatformPartnerError) MergePlatformAccountVerificationFailedError(v PlatformAccountVerificationFailedError) error {
	v.Type = "PLATFORM_ACCOUNT_VERIFICATION_FAILED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformAccountVerificationNotFoundError returns the union data inside the CreatePlatformPartnerError as a PlatformAccountVerificationNotFoundError
func (t CreatePlatformPartnerError) AsPlatformAccountVerificationNotFoundError() (PlatformAccountVerificationNotFoundError, error) {
	var body PlatformAccountVerificationNotFoundError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformAccountVerificationNotFoundError overwrites any union data inside the CreatePlatformPartnerError as the provided PlatformAccountVerificationNotFoundError
func (t *CreatePlatformPartnerError) FromPlatformAccountVerificationNotFoundError(v PlatformAccountVerificationNotFoundError) error {
	v.Type = "PLATFORM_ACCOUNT_VERIFICATION_NOT_FOUND"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformAccountVerificationNotFoundError performs a merge with any union data inside the CreatePlatformPartnerError, using the provided PlatformAccountVerificationNotFoundError
func (t *CreatePlatformPartnerError) MergePlatformAccountVerificationNotFoundError(v PlatformAccountVerificationNotFoundError) error {
	v.Type = "PLATFORM_ACCOUNT_VERIFICATION_NOT_FOUND"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformCompanyVerificationAlreadyUsedError returns the union data inside the CreatePlatformPartnerError as a PlatformCompanyVerificationAlreadyUsedError
func (t CreatePlatformPartnerError) AsPlatformCompanyVerificationAlreadyUsedError() (PlatformCompanyVerificationAlreadyUsedError, error) {
	var body PlatformCompanyVerificationAlreadyUsedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformCompanyVerificationAlreadyUsedError overwrites any union data inside the CreatePlatformPartnerError as the provided PlatformCompanyVerificationAlreadyUsedError
func (t *CreatePlatformPartnerError) FromPlatformCompanyVerificationAlreadyUsedError(v PlatformCompanyVerificationAlreadyUsedError) error {
	v.Type = "PLATFORM_COMPANY_VERIFICATION_ALREADY_USED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformCompanyVerificationAlreadyUsedError performs a merge with any union data inside the CreatePlatformPartnerError, using the provided PlatformCompanyVerificationAlreadyUsedError
func (t *CreatePlatformPartnerError) MergePlatformCompanyVerificationAlreadyUsedError(v PlatformCompanyVerificationAlreadyUsedError) error {
	v.Type = "PLATFORM_COMPANY_VERIFICATION_ALREADY_USED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformContractNotFoundError returns the union data inside the CreatePlatformPartnerError as a PlatformContractNotFoundError
func (t CreatePlatformPartnerError) AsPlatformContractNotFoundError() (PlatformContractNotFoundError, error) {
	var body PlatformContractNotFoundError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformContractNotFoundError overwrites any union data inside the CreatePlatformPartnerError as the provided PlatformContractNotFoundError
func (t *CreatePlatformPartnerError) FromPlatformContractNotFoundError(v PlatformContractNotFoundError) error {
	v.Type = "PLATFORM_CONTRACT_NOT_FOUND"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformContractNotFoundError performs a merge with any union data inside the CreatePlatformPartnerError, using the provided PlatformContractNotFoundError
func (t *CreatePlatformPartnerError) MergePlatformContractNotFoundError(v PlatformContractNotFoundError) error {
	v.Type = "PLATFORM_CONTRACT_NOT_FOUND"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformCurrencyNotSupportedError returns the union data inside the CreatePlatformPartnerError as a PlatformCurrencyNotSupportedError
func (t CreatePlatformPartnerError) AsPlatformCurrencyNotSupportedError() (PlatformCurrencyNotSupportedError, error) {
	var body PlatformCurrencyNotSupportedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformCurrencyNotSupportedError overwrites any union data inside the CreatePlatformPartnerError as the provided PlatformCurrencyNotSupportedError
func (t *CreatePlatformPartnerError) FromPlatformCurrencyNotSupportedError(v PlatformCurrencyNotSupportedError) error {
	v.Type = "PLATFORM_CURRENCY_NOT_SUPPORTED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformCurrencyNotSupportedError performs a merge with any union data inside the CreatePlatformPartnerError, using the provided PlatformCurrencyNotSupportedError
func (t *CreatePlatformPartnerError) MergePlatformCurrencyNotSupportedError(v PlatformCurrencyNotSupportedError) error {
	v.Type = "PLATFORM_CURRENCY_NOT_SUPPORTED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformNotEnabledError returns the union data inside the CreatePlatformPartnerError as a PlatformNotEnabledError
func (t CreatePlatformPartnerError) AsPlatformNotEnabledError() (PlatformNotEnabledError, error) {
	var body PlatformNotEnabledError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformNotEnabledError overwrites any union data inside the CreatePlatformPartnerError as the provided PlatformNotEnabledError
func (t *CreatePlatformPartnerError) FromPlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformNotEnabledError performs a merge with any union data inside the CreatePlatformPartnerError, using the provided PlatformNotEnabledError
func (t *CreatePlatformPartnerError) MergePlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformPartnerIdAlreadyExistsError returns the union data inside the CreatePlatformPartnerError as a PlatformPartnerIdAlreadyExistsError
func (t CreatePlatformPartnerError) AsPlatformPartnerIdAlreadyExistsError() (PlatformPartnerIdAlreadyExistsError, error) {
	var body PlatformPartnerIdAlreadyExistsError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformPartnerIdAlreadyExistsError overwrites any union data inside the CreatePlatformPartnerError as the provided PlatformPartnerIdAlreadyExistsError
func (t *CreatePlatformPartnerError) FromPlatformPartnerIdAlreadyExistsError(v PlatformPartnerIdAlreadyExistsError) error {
	v.Type = "PLATFORM_PARTNER_ID_ALREADY_EXISTS"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformPartnerIdAlreadyExistsError performs a merge with any union data inside the CreatePlatformPartnerError, using the provided PlatformPartnerIdAlreadyExistsError
func (t *CreatePlatformPartnerError) MergePlatformPartnerIdAlreadyExistsError(v PlatformPartnerIdAlreadyExistsError) error {
	v.Type = "PLATFORM_PARTNER_ID_ALREADY_EXISTS"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformUserDefinedPropertyNotFoundError returns the union data inside the CreatePlatformPartnerError as a PlatformUserDefinedPropertyNotFoundError
func (t CreatePlatformPartnerError) AsPlatformUserDefinedPropertyNotFoundError() (PlatformUserDefinedPropertyNotFoundError, error) {
	var body PlatformUserDefinedPropertyNotFoundError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformUserDefinedPropertyNotFoundError overwrites any union data inside the CreatePlatformPartnerError as the provided PlatformUserDefinedPropertyNotFoundError
func (t *CreatePlatformPartnerError) FromPlatformUserDefinedPropertyNotFoundError(v PlatformUserDefinedPropertyNotFoundError) error {
	v.Type = "PLATFORM_USER_DEFINED_PROPERTY_NOT_FOUND"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformUserDefinedPropertyNotFoundError performs a merge with any union data inside the CreatePlatformPartnerError, using the provided PlatformUserDefinedPropertyNotFoundError
func (t *CreatePlatformPartnerError) MergePlatformUserDefinedPropertyNotFoundError(v PlatformUserDefinedPropertyNotFoundError) error {
	v.Type = "PLATFORM_USER_DEFINED_PROPERTY_NOT_FOUND"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUnauthorizedError returns the union data inside the CreatePlatformPartnerError as a UnauthorizedError
func (t CreatePlatformPartnerError) AsUnauthorizedError() (UnauthorizedError, error) {
	var body UnauthorizedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUnauthorizedError overwrites any union data inside the CreatePlatformPartnerError as the provided UnauthorizedError
func (t *CreatePlatformPartnerError) FromUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUnauthorizedError performs a merge with any union data inside the CreatePlatformPartnerError, using the provided UnauthorizedError
func (t *CreatePlatformPartnerError) MergeUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t CreatePlatformPartnerError) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t CreatePlatformPartnerError) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "FORBIDDEN":
		return t.AsForbiddenError()
	case "INVALID_REQUEST":
		return t.AsInvalidRequestError()
	case "PLATFORM_ACCOUNT_VERIFICATION_ALREADY_USED":
		return t.AsPlatformAccountVerificationAlreadyUsedError()
	case "PLATFORM_ACCOUNT_VERIFICATION_FAILED":
		return t.AsPlatformAccountVerificationFailedError()
	case "PLATFORM_ACCOUNT_VERIFICATION_NOT_FOUND":
		return t.AsPlatformAccountVerificationNotFoundError()
	case "PLATFORM_COMPANY_VERIFICATION_ALREADY_USED":
		return t.AsPlatformCompanyVerificationAlreadyUsedError()
	case "PLATFORM_CONTRACT_NOT_FOUND":
		return t.AsPlatformContractNotFoundError()
	case "PLATFORM_CURRENCY_NOT_SUPPORTED":
		return t.AsPlatformCurrencyNotSupportedError()
	case "PLATFORM_NOT_ENABLED":
		return t.AsPlatformNotEnabledError()
	case "PLATFORM_PARTNER_ID_ALREADY_EXISTS":
		return t.AsPlatformPartnerIdAlreadyExistsError()
	case "PLATFORM_USER_DEFINED_PROPERTY_NOT_FOUND":
		return t.AsPlatformUserDefinedPropertyNotFoundError()
	case "UNAUTHORIZED":
		return t.AsUnauthorizedError()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t CreatePlatformPartnerError) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CreatePlatformPartnerError) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsForbiddenError returns the union data inside the CreatePlatformPartnersError as a ForbiddenError
func (t CreatePlatformPartnersError) AsForbiddenError() (ForbiddenError, error) {
	var body ForbiddenError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromForbiddenError overwrites any union data inside the CreatePlatformPartnersError as the provided ForbiddenError
func (t *CreatePlatformPartnersError) FromForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeForbiddenError performs a merge with any union data inside the CreatePlatformPartnersError, using the provided ForbiddenError
func (t *CreatePlatformPartnersError) MergeForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInvalidRequestError returns the union data inside the CreatePlatformPartnersError as a InvalidRequestError
func (t CreatePlatformPartnersError) AsInvalidRequestError() (InvalidRequestError, error) {
	var body InvalidRequestError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInvalidRequestError overwrites any union data inside the CreatePlatformPartnersError as the provided InvalidRequestError
func (t *CreatePlatformPartnersError) FromInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInvalidRequestError performs a merge with any union data inside the CreatePlatformPartnersError, using the provided InvalidRequestError
func (t *CreatePlatformPartnersError) MergeInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformContractsNotFoundError returns the union data inside the CreatePlatformPartnersError as a PlatformContractsNotFoundError
func (t CreatePlatformPartnersError) AsPlatformContractsNotFoundError() (PlatformContractsNotFoundError, error) {
	var body PlatformContractsNotFoundError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformContractsNotFoundError overwrites any union data inside the CreatePlatformPartnersError as the provided PlatformContractsNotFoundError
func (t *CreatePlatformPartnersError) FromPlatformContractsNotFoundError(v PlatformContractsNotFoundError) error {
	v.Type = "PLATFORM_CONTRACTS_NOT_FOUND"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformContractsNotFoundError performs a merge with any union data inside the CreatePlatformPartnersError, using the provided PlatformContractsNotFoundError
func (t *CreatePlatformPartnersError) MergePlatformContractsNotFoundError(v PlatformContractsNotFoundError) error {
	v.Type = "PLATFORM_CONTRACTS_NOT_FOUND"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformCurrencyNotSupportedError returns the union data inside the CreatePlatformPartnersError as a PlatformCurrencyNotSupportedError
func (t CreatePlatformPartnersError) AsPlatformCurrencyNotSupportedError() (PlatformCurrencyNotSupportedError, error) {
	var body PlatformCurrencyNotSupportedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformCurrencyNotSupportedError overwrites any union data inside the CreatePlatformPartnersError as the provided PlatformCurrencyNotSupportedError
func (t *CreatePlatformPartnersError) FromPlatformCurrencyNotSupportedError(v PlatformCurrencyNotSupportedError) error {
	v.Type = "PLATFORM_CURRENCY_NOT_SUPPORTED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformCurrencyNotSupportedError performs a merge with any union data inside the CreatePlatformPartnersError, using the provided PlatformCurrencyNotSupportedError
func (t *CreatePlatformPartnersError) MergePlatformCurrencyNotSupportedError(v PlatformCurrencyNotSupportedError) error {
	v.Type = "PLATFORM_CURRENCY_NOT_SUPPORTED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformNotEnabledError returns the union data inside the CreatePlatformPartnersError as a PlatformNotEnabledError
func (t CreatePlatformPartnersError) AsPlatformNotEnabledError() (PlatformNotEnabledError, error) {
	var body PlatformNotEnabledError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformNotEnabledError overwrites any union data inside the CreatePlatformPartnersError as the provided PlatformNotEnabledError
func (t *CreatePlatformPartnersError) FromPlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformNotEnabledError performs a merge with any union data inside the CreatePlatformPartnersError, using the provided PlatformNotEnabledError
func (t *CreatePlatformPartnersError) MergePlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformPartnerIdsAlreadyExistError returns the union data inside the CreatePlatformPartnersError as a PlatformPartnerIdsAlreadyExistError
func (t CreatePlatformPartnersError) AsPlatformPartnerIdsAlreadyExistError() (PlatformPartnerIdsAlreadyExistError, error) {
	var body PlatformPartnerIdsAlreadyExistError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformPartnerIdsAlreadyExistError overwrites any union data inside the CreatePlatformPartnersError as the provided PlatformPartnerIdsAlreadyExistError
func (t *CreatePlatformPartnersError) FromPlatformPartnerIdsAlreadyExistError(v PlatformPartnerIdsAlreadyExistError) error {
	v.Type = "PLATFORM_PARTNER_IDS_ALREADY_EXISTS"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformPartnerIdsAlreadyExistError performs a merge with any union data inside the CreatePlatformPartnersError, using the provided PlatformPartnerIdsAlreadyExistError
func (t *CreatePlatformPartnersError) MergePlatformPartnerIdsAlreadyExistError(v PlatformPartnerIdsAlreadyExistError) error {
	v.Type = "PLATFORM_PARTNER_IDS_ALREADY_EXISTS"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformPartnerIdsDuplicatedError returns the union data inside the CreatePlatformPartnersError as a PlatformPartnerIdsDuplicatedError
func (t CreatePlatformPartnersError) AsPlatformPartnerIdsDuplicatedError() (PlatformPartnerIdsDuplicatedError, error) {
	var body PlatformPartnerIdsDuplicatedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformPartnerIdsDuplicatedError overwrites any union data inside the CreatePlatformPartnersError as the provided PlatformPartnerIdsDuplicatedError
func (t *CreatePlatformPartnersError) FromPlatformPartnerIdsDuplicatedError(v PlatformPartnerIdsDuplicatedError) error {
	v.Type = "PLATFORM_PARTNER_IDS_DUPLICATED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformPartnerIdsDuplicatedError performs a merge with any union data inside the CreatePlatformPartnersError, using the provided PlatformPartnerIdsDuplicatedError
func (t *CreatePlatformPartnersError) MergePlatformPartnerIdsDuplicatedError(v PlatformPartnerIdsDuplicatedError) error {
	v.Type = "PLATFORM_PARTNER_IDS_DUPLICATED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformUserDefinedPropertyNotFoundError returns the union data inside the CreatePlatformPartnersError as a PlatformUserDefinedPropertyNotFoundError
func (t CreatePlatformPartnersError) AsPlatformUserDefinedPropertyNotFoundError() (PlatformUserDefinedPropertyNotFoundError, error) {
	var body PlatformUserDefinedPropertyNotFoundError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformUserDefinedPropertyNotFoundError overwrites any union data inside the CreatePlatformPartnersError as the provided PlatformUserDefinedPropertyNotFoundError
func (t *CreatePlatformPartnersError) FromPlatformUserDefinedPropertyNotFoundError(v PlatformUserDefinedPropertyNotFoundError) error {
	v.Type = "PLATFORM_USER_DEFINED_PROPERTY_NOT_FOUND"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformUserDefinedPropertyNotFoundError performs a merge with any union data inside the CreatePlatformPartnersError, using the provided PlatformUserDefinedPropertyNotFoundError
func (t *CreatePlatformPartnersError) MergePlatformUserDefinedPropertyNotFoundError(v PlatformUserDefinedPropertyNotFoundError) error {
	v.Type = "PLATFORM_USER_DEFINED_PROPERTY_NOT_FOUND"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUnauthorizedError returns the union data inside the CreatePlatformPartnersError as a UnauthorizedError
func (t CreatePlatformPartnersError) AsUnauthorizedError() (UnauthorizedError, error) {
	var body UnauthorizedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUnauthorizedError overwrites any union data inside the CreatePlatformPartnersError as the provided UnauthorizedError
func (t *CreatePlatformPartnersError) FromUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUnauthorizedError performs a merge with any union data inside the CreatePlatformPartnersError, using the provided UnauthorizedError
func (t *CreatePlatformPartnersError) MergeUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t CreatePlatformPartnersError) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t CreatePlatformPartnersError) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "FORBIDDEN":
		return t.AsForbiddenError()
	case "INVALID_REQUEST":
		return t.AsInvalidRequestError()
	case "PLATFORM_CONTRACTS_NOT_FOUND":
		return t.AsPlatformContractsNotFoundError()
	case "PLATFORM_CURRENCY_NOT_SUPPORTED":
		return t.AsPlatformCurrencyNotSupportedError()
	case "PLATFORM_NOT_ENABLED":
		return t.AsPlatformNotEnabledError()
	case "PLATFORM_PARTNER_IDS_ALREADY_EXISTS":
		return t.AsPlatformPartnerIdsAlreadyExistError()
	case "PLATFORM_PARTNER_IDS_DUPLICATED":
		return t.AsPlatformPartnerIdsDuplicatedError()
	case "PLATFORM_USER_DEFINED_PROPERTY_NOT_FOUND":
		return t.AsPlatformUserDefinedPropertyNotFoundError()
	case "UNAUTHORIZED":
		return t.AsUnauthorizedError()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t CreatePlatformPartnersError) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CreatePlatformPartnersError) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsBillingKeyAlreadyDeletedError returns the union data inside the DeleteBillingKeyError as a BillingKeyAlreadyDeletedError
func (t DeleteBillingKeyError) AsBillingKeyAlreadyDeletedError() (BillingKeyAlreadyDeletedError, error) {
	var body BillingKeyAlreadyDeletedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBillingKeyAlreadyDeletedError overwrites any union data inside the DeleteBillingKeyError as the provided BillingKeyAlreadyDeletedError
func (t *DeleteBillingKeyError) FromBillingKeyAlreadyDeletedError(v BillingKeyAlreadyDeletedError) error {
	v.Type = "BILLING_KEY_ALREADY_DELETED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBillingKeyAlreadyDeletedError performs a merge with any union data inside the DeleteBillingKeyError, using the provided BillingKeyAlreadyDeletedError
func (t *DeleteBillingKeyError) MergeBillingKeyAlreadyDeletedError(v BillingKeyAlreadyDeletedError) error {
	v.Type = "BILLING_KEY_ALREADY_DELETED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsBillingKeyNotFoundError returns the union data inside the DeleteBillingKeyError as a BillingKeyNotFoundError
func (t DeleteBillingKeyError) AsBillingKeyNotFoundError() (BillingKeyNotFoundError, error) {
	var body BillingKeyNotFoundError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBillingKeyNotFoundError overwrites any union data inside the DeleteBillingKeyError as the provided BillingKeyNotFoundError
func (t *DeleteBillingKeyError) FromBillingKeyNotFoundError(v BillingKeyNotFoundError) error {
	v.Type = "BILLING_KEY_NOT_FOUND"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBillingKeyNotFoundError performs a merge with any union data inside the DeleteBillingKeyError, using the provided BillingKeyNotFoundError
func (t *DeleteBillingKeyError) MergeBillingKeyNotFoundError(v BillingKeyNotFoundError) error {
	v.Type = "BILLING_KEY_NOT_FOUND"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsBillingKeyNotIssuedError returns the union data inside the DeleteBillingKeyError as a BillingKeyNotIssuedError
func (t DeleteBillingKeyError) AsBillingKeyNotIssuedError() (BillingKeyNotIssuedError, error) {
	var body BillingKeyNotIssuedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBillingKeyNotIssuedError overwrites any union data inside the DeleteBillingKeyError as the provided BillingKeyNotIssuedError
func (t *DeleteBillingKeyError) FromBillingKeyNotIssuedError(v BillingKeyNotIssuedError) error {
	v.Type = "BILLING_KEY_NOT_ISSUED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBillingKeyNotIssuedError performs a merge with any union data inside the DeleteBillingKeyError, using the provided BillingKeyNotIssuedError
func (t *DeleteBillingKeyError) MergeBillingKeyNotIssuedError(v BillingKeyNotIssuedError) error {
	v.Type = "BILLING_KEY_NOT_ISSUED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsChannelSpecificError returns the union data inside the DeleteBillingKeyError as a ChannelSpecificError
func (t DeleteBillingKeyError) AsChannelSpecificError() (ChannelSpecificError, error) {
	var body ChannelSpecificError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromChannelSpecificError overwrites any union data inside the DeleteBillingKeyError as the provided ChannelSpecificError
func (t *DeleteBillingKeyError) FromChannelSpecificError(v ChannelSpecificError) error {
	v.Type = "CHANNEL_SPECIFIC"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeChannelSpecificError performs a merge with any union data inside the DeleteBillingKeyError, using the provided ChannelSpecificError
func (t *DeleteBillingKeyError) MergeChannelSpecificError(v ChannelSpecificError) error {
	v.Type = "CHANNEL_SPECIFIC"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsForbiddenError returns the union data inside the DeleteBillingKeyError as a ForbiddenError
func (t DeleteBillingKeyError) AsForbiddenError() (ForbiddenError, error) {
	var body ForbiddenError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromForbiddenError overwrites any union data inside the DeleteBillingKeyError as the provided ForbiddenError
func (t *DeleteBillingKeyError) FromForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeForbiddenError performs a merge with any union data inside the DeleteBillingKeyError, using the provided ForbiddenError
func (t *DeleteBillingKeyError) MergeForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInvalidRequestError returns the union data inside the DeleteBillingKeyError as a InvalidRequestError
func (t DeleteBillingKeyError) AsInvalidRequestError() (InvalidRequestError, error) {
	var body InvalidRequestError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInvalidRequestError overwrites any union data inside the DeleteBillingKeyError as the provided InvalidRequestError
func (t *DeleteBillingKeyError) FromInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInvalidRequestError performs a merge with any union data inside the DeleteBillingKeyError, using the provided InvalidRequestError
func (t *DeleteBillingKeyError) MergeInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPaymentScheduleAlreadyExistsError returns the union data inside the DeleteBillingKeyError as a PaymentScheduleAlreadyExistsError
func (t DeleteBillingKeyError) AsPaymentScheduleAlreadyExistsError() (PaymentScheduleAlreadyExistsError, error) {
	var body PaymentScheduleAlreadyExistsError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPaymentScheduleAlreadyExistsError overwrites any union data inside the DeleteBillingKeyError as the provided PaymentScheduleAlreadyExistsError
func (t *DeleteBillingKeyError) FromPaymentScheduleAlreadyExistsError(v PaymentScheduleAlreadyExistsError) error {
	v.Type = "PAYMENT_SCHEDULE_ALREADY_EXISTS"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePaymentScheduleAlreadyExistsError performs a merge with any union data inside the DeleteBillingKeyError, using the provided PaymentScheduleAlreadyExistsError
func (t *DeleteBillingKeyError) MergePaymentScheduleAlreadyExistsError(v PaymentScheduleAlreadyExistsError) error {
	v.Type = "PAYMENT_SCHEDULE_ALREADY_EXISTS"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPgProviderError returns the union data inside the DeleteBillingKeyError as a PgProviderError
func (t DeleteBillingKeyError) AsPgProviderError() (PgProviderError, error) {
	var body PgProviderError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPgProviderError overwrites any union data inside the DeleteBillingKeyError as the provided PgProviderError
func (t *DeleteBillingKeyError) FromPgProviderError(v PgProviderError) error {
	v.Type = "PG_PROVIDER"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePgProviderError performs a merge with any union data inside the DeleteBillingKeyError, using the provided PgProviderError
func (t *DeleteBillingKeyError) MergePgProviderError(v PgProviderError) error {
	v.Type = "PG_PROVIDER"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUnauthorizedError returns the union data inside the DeleteBillingKeyError as a UnauthorizedError
func (t DeleteBillingKeyError) AsUnauthorizedError() (UnauthorizedError, error) {
	var body UnauthorizedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUnauthorizedError overwrites any union data inside the DeleteBillingKeyError as the provided UnauthorizedError
func (t *DeleteBillingKeyError) FromUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUnauthorizedError performs a merge with any union data inside the DeleteBillingKeyError, using the provided UnauthorizedError
func (t *DeleteBillingKeyError) MergeUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DeleteBillingKeyError) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t DeleteBillingKeyError) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "BILLING_KEY_ALREADY_DELETED":
		return t.AsBillingKeyAlreadyDeletedError()
	case "BILLING_KEY_NOT_FOUND":
		return t.AsBillingKeyNotFoundError()
	case "BILLING_KEY_NOT_ISSUED":
		return t.AsBillingKeyNotIssuedError()
	case "CHANNEL_SPECIFIC":
		return t.AsChannelSpecificError()
	case "FORBIDDEN":
		return t.AsForbiddenError()
	case "INVALID_REQUEST":
		return t.AsInvalidRequestError()
	case "PAYMENT_SCHEDULE_ALREADY_EXISTS":
		return t.AsPaymentScheduleAlreadyExistsError()
	case "PG_PROVIDER":
		return t.AsPgProviderError()
	case "UNAUTHORIZED":
		return t.AsUnauthorizedError()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t DeleteBillingKeyError) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DeleteBillingKeyError) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsForbiddenError returns the union data inside the DeletePlatformTransferError as a ForbiddenError
func (t DeletePlatformTransferError) AsForbiddenError() (ForbiddenError, error) {
	var body ForbiddenError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromForbiddenError overwrites any union data inside the DeletePlatformTransferError as the provided ForbiddenError
func (t *DeletePlatformTransferError) FromForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeForbiddenError performs a merge with any union data inside the DeletePlatformTransferError, using the provided ForbiddenError
func (t *DeletePlatformTransferError) MergeForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInvalidRequestError returns the union data inside the DeletePlatformTransferError as a InvalidRequestError
func (t DeletePlatformTransferError) AsInvalidRequestError() (InvalidRequestError, error) {
	var body InvalidRequestError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInvalidRequestError overwrites any union data inside the DeletePlatformTransferError as the provided InvalidRequestError
func (t *DeletePlatformTransferError) FromInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInvalidRequestError performs a merge with any union data inside the DeletePlatformTransferError, using the provided InvalidRequestError
func (t *DeletePlatformTransferError) MergeInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformCancelOrderTransfersExistsError returns the union data inside the DeletePlatformTransferError as a PlatformCancelOrderTransfersExistsError
func (t DeletePlatformTransferError) AsPlatformCancelOrderTransfersExistsError() (PlatformCancelOrderTransfersExistsError, error) {
	var body PlatformCancelOrderTransfersExistsError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformCancelOrderTransfersExistsError overwrites any union data inside the DeletePlatformTransferError as the provided PlatformCancelOrderTransfersExistsError
func (t *DeletePlatformTransferError) FromPlatformCancelOrderTransfersExistsError(v PlatformCancelOrderTransfersExistsError) error {
	v.Type = "PLATFORM_CANCEL_ORDER_TRANSFERS_EXISTS"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformCancelOrderTransfersExistsError performs a merge with any union data inside the DeletePlatformTransferError, using the provided PlatformCancelOrderTransfersExistsError
func (t *DeletePlatformTransferError) MergePlatformCancelOrderTransfersExistsError(v PlatformCancelOrderTransfersExistsError) error {
	v.Type = "PLATFORM_CANCEL_ORDER_TRANSFERS_EXISTS"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformNotEnabledError returns the union data inside the DeletePlatformTransferError as a PlatformNotEnabledError
func (t DeletePlatformTransferError) AsPlatformNotEnabledError() (PlatformNotEnabledError, error) {
	var body PlatformNotEnabledError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformNotEnabledError overwrites any union data inside the DeletePlatformTransferError as the provided PlatformNotEnabledError
func (t *DeletePlatformTransferError) FromPlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformNotEnabledError performs a merge with any union data inside the DeletePlatformTransferError, using the provided PlatformNotEnabledError
func (t *DeletePlatformTransferError) MergePlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformTransferNonDeletableStatusError returns the union data inside the DeletePlatformTransferError as a PlatformTransferNonDeletableStatusError
func (t DeletePlatformTransferError) AsPlatformTransferNonDeletableStatusError() (PlatformTransferNonDeletableStatusError, error) {
	var body PlatformTransferNonDeletableStatusError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformTransferNonDeletableStatusError overwrites any union data inside the DeletePlatformTransferError as the provided PlatformTransferNonDeletableStatusError
func (t *DeletePlatformTransferError) FromPlatformTransferNonDeletableStatusError(v PlatformTransferNonDeletableStatusError) error {
	v.Type = "PLATFORM_TRANSFER_NON_DELETABLE_STATUS"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformTransferNonDeletableStatusError performs a merge with any union data inside the DeletePlatformTransferError, using the provided PlatformTransferNonDeletableStatusError
func (t *DeletePlatformTransferError) MergePlatformTransferNonDeletableStatusError(v PlatformTransferNonDeletableStatusError) error {
	v.Type = "PLATFORM_TRANSFER_NON_DELETABLE_STATUS"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformTransferNotFoundError returns the union data inside the DeletePlatformTransferError as a PlatformTransferNotFoundError
func (t DeletePlatformTransferError) AsPlatformTransferNotFoundError() (PlatformTransferNotFoundError, error) {
	var body PlatformTransferNotFoundError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformTransferNotFoundError overwrites any union data inside the DeletePlatformTransferError as the provided PlatformTransferNotFoundError
func (t *DeletePlatformTransferError) FromPlatformTransferNotFoundError(v PlatformTransferNotFoundError) error {
	v.Type = "PLATFORM_TRANSFER_NOT_FOUND"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformTransferNotFoundError performs a merge with any union data inside the DeletePlatformTransferError, using the provided PlatformTransferNotFoundError
func (t *DeletePlatformTransferError) MergePlatformTransferNotFoundError(v PlatformTransferNotFoundError) error {
	v.Type = "PLATFORM_TRANSFER_NOT_FOUND"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUnauthorizedError returns the union data inside the DeletePlatformTransferError as a UnauthorizedError
func (t DeletePlatformTransferError) AsUnauthorizedError() (UnauthorizedError, error) {
	var body UnauthorizedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUnauthorizedError overwrites any union data inside the DeletePlatformTransferError as the provided UnauthorizedError
func (t *DeletePlatformTransferError) FromUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUnauthorizedError performs a merge with any union data inside the DeletePlatformTransferError, using the provided UnauthorizedError
func (t *DeletePlatformTransferError) MergeUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DeletePlatformTransferError) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t DeletePlatformTransferError) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "FORBIDDEN":
		return t.AsForbiddenError()
	case "INVALID_REQUEST":
		return t.AsInvalidRequestError()
	case "PLATFORM_CANCEL_ORDER_TRANSFERS_EXISTS":
		return t.AsPlatformCancelOrderTransfersExistsError()
	case "PLATFORM_NOT_ENABLED":
		return t.AsPlatformNotEnabledError()
	case "PLATFORM_TRANSFER_NON_DELETABLE_STATUS":
		return t.AsPlatformTransferNonDeletableStatusError()
	case "PLATFORM_TRANSFER_NOT_FOUND":
		return t.AsPlatformTransferNotFoundError()
	case "UNAUTHORIZED":
		return t.AsUnauthorizedError()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t DeletePlatformTransferError) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DeletePlatformTransferError) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsInvalidRequestError returns the union data inside the DownloadPlatformTransferSheetError as a InvalidRequestError
func (t DownloadPlatformTransferSheetError) AsInvalidRequestError() (InvalidRequestError, error) {
	var body InvalidRequestError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInvalidRequestError overwrites any union data inside the DownloadPlatformTransferSheetError as the provided InvalidRequestError
func (t *DownloadPlatformTransferSheetError) FromInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInvalidRequestError performs a merge with any union data inside the DownloadPlatformTransferSheetError, using the provided InvalidRequestError
func (t *DownloadPlatformTransferSheetError) MergeInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUnauthorizedError returns the union data inside the DownloadPlatformTransferSheetError as a UnauthorizedError
func (t DownloadPlatformTransferSheetError) AsUnauthorizedError() (UnauthorizedError, error) {
	var body UnauthorizedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUnauthorizedError overwrites any union data inside the DownloadPlatformTransferSheetError as the provided UnauthorizedError
func (t *DownloadPlatformTransferSheetError) FromUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUnauthorizedError performs a merge with any union data inside the DownloadPlatformTransferSheetError, using the provided UnauthorizedError
func (t *DownloadPlatformTransferSheetError) MergeUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DownloadPlatformTransferSheetError) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t DownloadPlatformTransferSheetError) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "INVALID_REQUEST":
		return t.AsInvalidRequestError()
	case "UNAUTHORIZED":
		return t.AsUnauthorizedError()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t DownloadPlatformTransferSheetError) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DownloadPlatformTransferSheetError) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsForbiddenError returns the union data inside the GetAllPaymentsError as a ForbiddenError
func (t GetAllPaymentsError) AsForbiddenError() (ForbiddenError, error) {
	var body ForbiddenError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromForbiddenError overwrites any union data inside the GetAllPaymentsError as the provided ForbiddenError
func (t *GetAllPaymentsError) FromForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeForbiddenError performs a merge with any union data inside the GetAllPaymentsError, using the provided ForbiddenError
func (t *GetAllPaymentsError) MergeForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInvalidRequestError returns the union data inside the GetAllPaymentsError as a InvalidRequestError
func (t GetAllPaymentsError) AsInvalidRequestError() (InvalidRequestError, error) {
	var body InvalidRequestError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInvalidRequestError overwrites any union data inside the GetAllPaymentsError as the provided InvalidRequestError
func (t *GetAllPaymentsError) FromInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInvalidRequestError performs a merge with any union data inside the GetAllPaymentsError, using the provided InvalidRequestError
func (t *GetAllPaymentsError) MergeInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUnauthorizedError returns the union data inside the GetAllPaymentsError as a UnauthorizedError
func (t GetAllPaymentsError) AsUnauthorizedError() (UnauthorizedError, error) {
	var body UnauthorizedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUnauthorizedError overwrites any union data inside the GetAllPaymentsError as the provided UnauthorizedError
func (t *GetAllPaymentsError) FromUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUnauthorizedError performs a merge with any union data inside the GetAllPaymentsError, using the provided UnauthorizedError
func (t *GetAllPaymentsError) MergeUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t GetAllPaymentsError) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t GetAllPaymentsError) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "FORBIDDEN":
		return t.AsForbiddenError()
	case "INVALID_REQUEST":
		return t.AsInvalidRequestError()
	case "UNAUTHORIZED":
		return t.AsUnauthorizedError()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t GetAllPaymentsError) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *GetAllPaymentsError) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsInvalidRequestError returns the union data inside the GetBankInfosError as a InvalidRequestError
func (t GetBankInfosError) AsInvalidRequestError() (InvalidRequestError, error) {
	var body InvalidRequestError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInvalidRequestError overwrites any union data inside the GetBankInfosError as the provided InvalidRequestError
func (t *GetBankInfosError) FromInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInvalidRequestError performs a merge with any union data inside the GetBankInfosError, using the provided InvalidRequestError
func (t *GetBankInfosError) MergeInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t GetBankInfosError) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t GetBankInfosError) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "INVALID_REQUEST":
		return t.AsInvalidRequestError()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t GetBankInfosError) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *GetBankInfosError) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsBillingKeyNotFoundError returns the union data inside the GetBillingKeyInfoError as a BillingKeyNotFoundError
func (t GetBillingKeyInfoError) AsBillingKeyNotFoundError() (BillingKeyNotFoundError, error) {
	var body BillingKeyNotFoundError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBillingKeyNotFoundError overwrites any union data inside the GetBillingKeyInfoError as the provided BillingKeyNotFoundError
func (t *GetBillingKeyInfoError) FromBillingKeyNotFoundError(v BillingKeyNotFoundError) error {
	v.Type = "BILLING_KEY_NOT_FOUND"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBillingKeyNotFoundError performs a merge with any union data inside the GetBillingKeyInfoError, using the provided BillingKeyNotFoundError
func (t *GetBillingKeyInfoError) MergeBillingKeyNotFoundError(v BillingKeyNotFoundError) error {
	v.Type = "BILLING_KEY_NOT_FOUND"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsForbiddenError returns the union data inside the GetBillingKeyInfoError as a ForbiddenError
func (t GetBillingKeyInfoError) AsForbiddenError() (ForbiddenError, error) {
	var body ForbiddenError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromForbiddenError overwrites any union data inside the GetBillingKeyInfoError as the provided ForbiddenError
func (t *GetBillingKeyInfoError) FromForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeForbiddenError performs a merge with any union data inside the GetBillingKeyInfoError, using the provided ForbiddenError
func (t *GetBillingKeyInfoError) MergeForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInvalidRequestError returns the union data inside the GetBillingKeyInfoError as a InvalidRequestError
func (t GetBillingKeyInfoError) AsInvalidRequestError() (InvalidRequestError, error) {
	var body InvalidRequestError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInvalidRequestError overwrites any union data inside the GetBillingKeyInfoError as the provided InvalidRequestError
func (t *GetBillingKeyInfoError) FromInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInvalidRequestError performs a merge with any union data inside the GetBillingKeyInfoError, using the provided InvalidRequestError
func (t *GetBillingKeyInfoError) MergeInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUnauthorizedError returns the union data inside the GetBillingKeyInfoError as a UnauthorizedError
func (t GetBillingKeyInfoError) AsUnauthorizedError() (UnauthorizedError, error) {
	var body UnauthorizedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUnauthorizedError overwrites any union data inside the GetBillingKeyInfoError as the provided UnauthorizedError
func (t *GetBillingKeyInfoError) FromUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUnauthorizedError performs a merge with any union data inside the GetBillingKeyInfoError, using the provided UnauthorizedError
func (t *GetBillingKeyInfoError) MergeUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t GetBillingKeyInfoError) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t GetBillingKeyInfoError) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "BILLING_KEY_NOT_FOUND":
		return t.AsBillingKeyNotFoundError()
	case "FORBIDDEN":
		return t.AsForbiddenError()
	case "INVALID_REQUEST":
		return t.AsInvalidRequestError()
	case "UNAUTHORIZED":
		return t.AsUnauthorizedError()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t GetBillingKeyInfoError) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *GetBillingKeyInfoError) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsForbiddenError returns the union data inside the GetBillingKeyInfosError as a ForbiddenError
func (t GetBillingKeyInfosError) AsForbiddenError() (ForbiddenError, error) {
	var body ForbiddenError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromForbiddenError overwrites any union data inside the GetBillingKeyInfosError as the provided ForbiddenError
func (t *GetBillingKeyInfosError) FromForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeForbiddenError performs a merge with any union data inside the GetBillingKeyInfosError, using the provided ForbiddenError
func (t *GetBillingKeyInfosError) MergeForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInvalidRequestError returns the union data inside the GetBillingKeyInfosError as a InvalidRequestError
func (t GetBillingKeyInfosError) AsInvalidRequestError() (InvalidRequestError, error) {
	var body InvalidRequestError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInvalidRequestError overwrites any union data inside the GetBillingKeyInfosError as the provided InvalidRequestError
func (t *GetBillingKeyInfosError) FromInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInvalidRequestError performs a merge with any union data inside the GetBillingKeyInfosError, using the provided InvalidRequestError
func (t *GetBillingKeyInfosError) MergeInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUnauthorizedError returns the union data inside the GetBillingKeyInfosError as a UnauthorizedError
func (t GetBillingKeyInfosError) AsUnauthorizedError() (UnauthorizedError, error) {
	var body UnauthorizedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUnauthorizedError overwrites any union data inside the GetBillingKeyInfosError as the provided UnauthorizedError
func (t *GetBillingKeyInfosError) FromUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUnauthorizedError performs a merge with any union data inside the GetBillingKeyInfosError, using the provided UnauthorizedError
func (t *GetBillingKeyInfosError) MergeUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t GetBillingKeyInfosError) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t GetBillingKeyInfosError) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "FORBIDDEN":
		return t.AsForbiddenError()
	case "INVALID_REQUEST":
		return t.AsInvalidRequestError()
	case "UNAUTHORIZED":
		return t.AsUnauthorizedError()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t GetBillingKeyInfosError) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *GetBillingKeyInfosError) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsCashReceiptNotFoundError returns the union data inside the GetCashReceiptError as a CashReceiptNotFoundError
func (t GetCashReceiptError) AsCashReceiptNotFoundError() (CashReceiptNotFoundError, error) {
	var body CashReceiptNotFoundError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCashReceiptNotFoundError overwrites any union data inside the GetCashReceiptError as the provided CashReceiptNotFoundError
func (t *GetCashReceiptError) FromCashReceiptNotFoundError(v CashReceiptNotFoundError) error {
	v.Type = "CASH_RECEIPT_NOT_FOUND"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCashReceiptNotFoundError performs a merge with any union data inside the GetCashReceiptError, using the provided CashReceiptNotFoundError
func (t *GetCashReceiptError) MergeCashReceiptNotFoundError(v CashReceiptNotFoundError) error {
	v.Type = "CASH_RECEIPT_NOT_FOUND"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsForbiddenError returns the union data inside the GetCashReceiptError as a ForbiddenError
func (t GetCashReceiptError) AsForbiddenError() (ForbiddenError, error) {
	var body ForbiddenError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromForbiddenError overwrites any union data inside the GetCashReceiptError as the provided ForbiddenError
func (t *GetCashReceiptError) FromForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeForbiddenError performs a merge with any union data inside the GetCashReceiptError, using the provided ForbiddenError
func (t *GetCashReceiptError) MergeForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInvalidRequestError returns the union data inside the GetCashReceiptError as a InvalidRequestError
func (t GetCashReceiptError) AsInvalidRequestError() (InvalidRequestError, error) {
	var body InvalidRequestError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInvalidRequestError overwrites any union data inside the GetCashReceiptError as the provided InvalidRequestError
func (t *GetCashReceiptError) FromInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInvalidRequestError performs a merge with any union data inside the GetCashReceiptError, using the provided InvalidRequestError
func (t *GetCashReceiptError) MergeInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUnauthorizedError returns the union data inside the GetCashReceiptError as a UnauthorizedError
func (t GetCashReceiptError) AsUnauthorizedError() (UnauthorizedError, error) {
	var body UnauthorizedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUnauthorizedError overwrites any union data inside the GetCashReceiptError as the provided UnauthorizedError
func (t *GetCashReceiptError) FromUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUnauthorizedError performs a merge with any union data inside the GetCashReceiptError, using the provided UnauthorizedError
func (t *GetCashReceiptError) MergeUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t GetCashReceiptError) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t GetCashReceiptError) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "CASH_RECEIPT_NOT_FOUND":
		return t.AsCashReceiptNotFoundError()
	case "FORBIDDEN":
		return t.AsForbiddenError()
	case "INVALID_REQUEST":
		return t.AsInvalidRequestError()
	case "UNAUTHORIZED":
		return t.AsUnauthorizedError()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t GetCashReceiptError) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *GetCashReceiptError) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsForbiddenError returns the union data inside the GetIdentityVerificationError as a ForbiddenError
func (t GetIdentityVerificationError) AsForbiddenError() (ForbiddenError, error) {
	var body ForbiddenError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromForbiddenError overwrites any union data inside the GetIdentityVerificationError as the provided ForbiddenError
func (t *GetIdentityVerificationError) FromForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeForbiddenError performs a merge with any union data inside the GetIdentityVerificationError, using the provided ForbiddenError
func (t *GetIdentityVerificationError) MergeForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsIdentityVerificationNotFoundError returns the union data inside the GetIdentityVerificationError as a IdentityVerificationNotFoundError
func (t GetIdentityVerificationError) AsIdentityVerificationNotFoundError() (IdentityVerificationNotFoundError, error) {
	var body IdentityVerificationNotFoundError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromIdentityVerificationNotFoundError overwrites any union data inside the GetIdentityVerificationError as the provided IdentityVerificationNotFoundError
func (t *GetIdentityVerificationError) FromIdentityVerificationNotFoundError(v IdentityVerificationNotFoundError) error {
	v.Type = "IDENTITY_VERIFICATION_NOT_FOUND"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeIdentityVerificationNotFoundError performs a merge with any union data inside the GetIdentityVerificationError, using the provided IdentityVerificationNotFoundError
func (t *GetIdentityVerificationError) MergeIdentityVerificationNotFoundError(v IdentityVerificationNotFoundError) error {
	v.Type = "IDENTITY_VERIFICATION_NOT_FOUND"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInvalidRequestError returns the union data inside the GetIdentityVerificationError as a InvalidRequestError
func (t GetIdentityVerificationError) AsInvalidRequestError() (InvalidRequestError, error) {
	var body InvalidRequestError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInvalidRequestError overwrites any union data inside the GetIdentityVerificationError as the provided InvalidRequestError
func (t *GetIdentityVerificationError) FromInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInvalidRequestError performs a merge with any union data inside the GetIdentityVerificationError, using the provided InvalidRequestError
func (t *GetIdentityVerificationError) MergeInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUnauthorizedError returns the union data inside the GetIdentityVerificationError as a UnauthorizedError
func (t GetIdentityVerificationError) AsUnauthorizedError() (UnauthorizedError, error) {
	var body UnauthorizedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUnauthorizedError overwrites any union data inside the GetIdentityVerificationError as the provided UnauthorizedError
func (t *GetIdentityVerificationError) FromUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUnauthorizedError performs a merge with any union data inside the GetIdentityVerificationError, using the provided UnauthorizedError
func (t *GetIdentityVerificationError) MergeUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t GetIdentityVerificationError) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t GetIdentityVerificationError) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "FORBIDDEN":
		return t.AsForbiddenError()
	case "IDENTITY_VERIFICATION_NOT_FOUND":
		return t.AsIdentityVerificationNotFoundError()
	case "INVALID_REQUEST":
		return t.AsInvalidRequestError()
	case "UNAUTHORIZED":
		return t.AsUnauthorizedError()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t GetIdentityVerificationError) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *GetIdentityVerificationError) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsInvalidRequestError returns the union data inside the GetKakaopayPaymentOrderError as a InvalidRequestError
func (t GetKakaopayPaymentOrderError) AsInvalidRequestError() (InvalidRequestError, error) {
	var body InvalidRequestError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInvalidRequestError overwrites any union data inside the GetKakaopayPaymentOrderError as the provided InvalidRequestError
func (t *GetKakaopayPaymentOrderError) FromInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInvalidRequestError performs a merge with any union data inside the GetKakaopayPaymentOrderError, using the provided InvalidRequestError
func (t *GetKakaopayPaymentOrderError) MergeInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUnauthorizedError returns the union data inside the GetKakaopayPaymentOrderError as a UnauthorizedError
func (t GetKakaopayPaymentOrderError) AsUnauthorizedError() (UnauthorizedError, error) {
	var body UnauthorizedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUnauthorizedError overwrites any union data inside the GetKakaopayPaymentOrderError as the provided UnauthorizedError
func (t *GetKakaopayPaymentOrderError) FromUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUnauthorizedError performs a merge with any union data inside the GetKakaopayPaymentOrderError, using the provided UnauthorizedError
func (t *GetKakaopayPaymentOrderError) MergeUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t GetKakaopayPaymentOrderError) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t GetKakaopayPaymentOrderError) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "INVALID_REQUEST":
		return t.AsInvalidRequestError()
	case "UNAUTHORIZED":
		return t.AsUnauthorizedError()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t GetKakaopayPaymentOrderError) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *GetKakaopayPaymentOrderError) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsForbiddenError returns the union data inside the GetPaymentError as a ForbiddenError
func (t GetPaymentError) AsForbiddenError() (ForbiddenError, error) {
	var body ForbiddenError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromForbiddenError overwrites any union data inside the GetPaymentError as the provided ForbiddenError
func (t *GetPaymentError) FromForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeForbiddenError performs a merge with any union data inside the GetPaymentError, using the provided ForbiddenError
func (t *GetPaymentError) MergeForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInvalidRequestError returns the union data inside the GetPaymentError as a InvalidRequestError
func (t GetPaymentError) AsInvalidRequestError() (InvalidRequestError, error) {
	var body InvalidRequestError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInvalidRequestError overwrites any union data inside the GetPaymentError as the provided InvalidRequestError
func (t *GetPaymentError) FromInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInvalidRequestError performs a merge with any union data inside the GetPaymentError, using the provided InvalidRequestError
func (t *GetPaymentError) MergeInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPaymentNotFoundError returns the union data inside the GetPaymentError as a PaymentNotFoundError
func (t GetPaymentError) AsPaymentNotFoundError() (PaymentNotFoundError, error) {
	var body PaymentNotFoundError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPaymentNotFoundError overwrites any union data inside the GetPaymentError as the provided PaymentNotFoundError
func (t *GetPaymentError) FromPaymentNotFoundError(v PaymentNotFoundError) error {
	v.Type = "PAYMENT_NOT_FOUND"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePaymentNotFoundError performs a merge with any union data inside the GetPaymentError, using the provided PaymentNotFoundError
func (t *GetPaymentError) MergePaymentNotFoundError(v PaymentNotFoundError) error {
	v.Type = "PAYMENT_NOT_FOUND"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUnauthorizedError returns the union data inside the GetPaymentError as a UnauthorizedError
func (t GetPaymentError) AsUnauthorizedError() (UnauthorizedError, error) {
	var body UnauthorizedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUnauthorizedError overwrites any union data inside the GetPaymentError as the provided UnauthorizedError
func (t *GetPaymentError) FromUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUnauthorizedError performs a merge with any union data inside the GetPaymentError, using the provided UnauthorizedError
func (t *GetPaymentError) MergeUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t GetPaymentError) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t GetPaymentError) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "FORBIDDEN":
		return t.AsForbiddenError()
	case "INVALID_REQUEST":
		return t.AsInvalidRequestError()
	case "PAYMENT_NOT_FOUND":
		return t.AsPaymentNotFoundError()
	case "UNAUTHORIZED":
		return t.AsUnauthorizedError()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t GetPaymentError) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *GetPaymentError) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsForbiddenError returns the union data inside the GetPaymentScheduleError as a ForbiddenError
func (t GetPaymentScheduleError) AsForbiddenError() (ForbiddenError, error) {
	var body ForbiddenError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromForbiddenError overwrites any union data inside the GetPaymentScheduleError as the provided ForbiddenError
func (t *GetPaymentScheduleError) FromForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeForbiddenError performs a merge with any union data inside the GetPaymentScheduleError, using the provided ForbiddenError
func (t *GetPaymentScheduleError) MergeForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInvalidRequestError returns the union data inside the GetPaymentScheduleError as a InvalidRequestError
func (t GetPaymentScheduleError) AsInvalidRequestError() (InvalidRequestError, error) {
	var body InvalidRequestError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInvalidRequestError overwrites any union data inside the GetPaymentScheduleError as the provided InvalidRequestError
func (t *GetPaymentScheduleError) FromInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInvalidRequestError performs a merge with any union data inside the GetPaymentScheduleError, using the provided InvalidRequestError
func (t *GetPaymentScheduleError) MergeInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPaymentScheduleNotFoundError returns the union data inside the GetPaymentScheduleError as a PaymentScheduleNotFoundError
func (t GetPaymentScheduleError) AsPaymentScheduleNotFoundError() (PaymentScheduleNotFoundError, error) {
	var body PaymentScheduleNotFoundError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPaymentScheduleNotFoundError overwrites any union data inside the GetPaymentScheduleError as the provided PaymentScheduleNotFoundError
func (t *GetPaymentScheduleError) FromPaymentScheduleNotFoundError(v PaymentScheduleNotFoundError) error {
	v.Type = "PAYMENT_SCHEDULE_NOT_FOUND"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePaymentScheduleNotFoundError performs a merge with any union data inside the GetPaymentScheduleError, using the provided PaymentScheduleNotFoundError
func (t *GetPaymentScheduleError) MergePaymentScheduleNotFoundError(v PaymentScheduleNotFoundError) error {
	v.Type = "PAYMENT_SCHEDULE_NOT_FOUND"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUnauthorizedError returns the union data inside the GetPaymentScheduleError as a UnauthorizedError
func (t GetPaymentScheduleError) AsUnauthorizedError() (UnauthorizedError, error) {
	var body UnauthorizedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUnauthorizedError overwrites any union data inside the GetPaymentScheduleError as the provided UnauthorizedError
func (t *GetPaymentScheduleError) FromUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUnauthorizedError performs a merge with any union data inside the GetPaymentScheduleError, using the provided UnauthorizedError
func (t *GetPaymentScheduleError) MergeUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t GetPaymentScheduleError) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t GetPaymentScheduleError) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "FORBIDDEN":
		return t.AsForbiddenError()
	case "INVALID_REQUEST":
		return t.AsInvalidRequestError()
	case "PAYMENT_SCHEDULE_NOT_FOUND":
		return t.AsPaymentScheduleNotFoundError()
	case "UNAUTHORIZED":
		return t.AsUnauthorizedError()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t GetPaymentScheduleError) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *GetPaymentScheduleError) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsForbiddenError returns the union data inside the GetPaymentSchedulesError as a ForbiddenError
func (t GetPaymentSchedulesError) AsForbiddenError() (ForbiddenError, error) {
	var body ForbiddenError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromForbiddenError overwrites any union data inside the GetPaymentSchedulesError as the provided ForbiddenError
func (t *GetPaymentSchedulesError) FromForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeForbiddenError performs a merge with any union data inside the GetPaymentSchedulesError, using the provided ForbiddenError
func (t *GetPaymentSchedulesError) MergeForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInvalidRequestError returns the union data inside the GetPaymentSchedulesError as a InvalidRequestError
func (t GetPaymentSchedulesError) AsInvalidRequestError() (InvalidRequestError, error) {
	var body InvalidRequestError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInvalidRequestError overwrites any union data inside the GetPaymentSchedulesError as the provided InvalidRequestError
func (t *GetPaymentSchedulesError) FromInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInvalidRequestError performs a merge with any union data inside the GetPaymentSchedulesError, using the provided InvalidRequestError
func (t *GetPaymentSchedulesError) MergeInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUnauthorizedError returns the union data inside the GetPaymentSchedulesError as a UnauthorizedError
func (t GetPaymentSchedulesError) AsUnauthorizedError() (UnauthorizedError, error) {
	var body UnauthorizedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUnauthorizedError overwrites any union data inside the GetPaymentSchedulesError as the provided UnauthorizedError
func (t *GetPaymentSchedulesError) FromUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUnauthorizedError performs a merge with any union data inside the GetPaymentSchedulesError, using the provided UnauthorizedError
func (t *GetPaymentSchedulesError) MergeUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t GetPaymentSchedulesError) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t GetPaymentSchedulesError) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "FORBIDDEN":
		return t.AsForbiddenError()
	case "INVALID_REQUEST":
		return t.AsInvalidRequestError()
	case "UNAUTHORIZED":
		return t.AsUnauthorizedError()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t GetPaymentSchedulesError) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *GetPaymentSchedulesError) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsForbiddenError returns the union data inside the GetPaymentTransactionsError as a ForbiddenError
func (t GetPaymentTransactionsError) AsForbiddenError() (ForbiddenError, error) {
	var body ForbiddenError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromForbiddenError overwrites any union data inside the GetPaymentTransactionsError as the provided ForbiddenError
func (t *GetPaymentTransactionsError) FromForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeForbiddenError performs a merge with any union data inside the GetPaymentTransactionsError, using the provided ForbiddenError
func (t *GetPaymentTransactionsError) MergeForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInvalidRequestError returns the union data inside the GetPaymentTransactionsError as a InvalidRequestError
func (t GetPaymentTransactionsError) AsInvalidRequestError() (InvalidRequestError, error) {
	var body InvalidRequestError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInvalidRequestError overwrites any union data inside the GetPaymentTransactionsError as the provided InvalidRequestError
func (t *GetPaymentTransactionsError) FromInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInvalidRequestError performs a merge with any union data inside the GetPaymentTransactionsError, using the provided InvalidRequestError
func (t *GetPaymentTransactionsError) MergeInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPaymentNotFoundError returns the union data inside the GetPaymentTransactionsError as a PaymentNotFoundError
func (t GetPaymentTransactionsError) AsPaymentNotFoundError() (PaymentNotFoundError, error) {
	var body PaymentNotFoundError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPaymentNotFoundError overwrites any union data inside the GetPaymentTransactionsError as the provided PaymentNotFoundError
func (t *GetPaymentTransactionsError) FromPaymentNotFoundError(v PaymentNotFoundError) error {
	v.Type = "PAYMENT_NOT_FOUND"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePaymentNotFoundError performs a merge with any union data inside the GetPaymentTransactionsError, using the provided PaymentNotFoundError
func (t *GetPaymentTransactionsError) MergePaymentNotFoundError(v PaymentNotFoundError) error {
	v.Type = "PAYMENT_NOT_FOUND"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUnauthorizedError returns the union data inside the GetPaymentTransactionsError as a UnauthorizedError
func (t GetPaymentTransactionsError) AsUnauthorizedError() (UnauthorizedError, error) {
	var body UnauthorizedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUnauthorizedError overwrites any union data inside the GetPaymentTransactionsError as the provided UnauthorizedError
func (t *GetPaymentTransactionsError) FromUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUnauthorizedError performs a merge with any union data inside the GetPaymentTransactionsError, using the provided UnauthorizedError
func (t *GetPaymentTransactionsError) MergeUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t GetPaymentTransactionsError) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t GetPaymentTransactionsError) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "FORBIDDEN":
		return t.AsForbiddenError()
	case "INVALID_REQUEST":
		return t.AsInvalidRequestError()
	case "PAYMENT_NOT_FOUND":
		return t.AsPaymentNotFoundError()
	case "UNAUTHORIZED":
		return t.AsUnauthorizedError()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t GetPaymentTransactionsError) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *GetPaymentTransactionsError) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsForbiddenError returns the union data inside the GetPaymentsError as a ForbiddenError
func (t GetPaymentsError) AsForbiddenError() (ForbiddenError, error) {
	var body ForbiddenError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromForbiddenError overwrites any union data inside the GetPaymentsError as the provided ForbiddenError
func (t *GetPaymentsError) FromForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeForbiddenError performs a merge with any union data inside the GetPaymentsError, using the provided ForbiddenError
func (t *GetPaymentsError) MergeForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInvalidRequestError returns the union data inside the GetPaymentsError as a InvalidRequestError
func (t GetPaymentsError) AsInvalidRequestError() (InvalidRequestError, error) {
	var body InvalidRequestError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInvalidRequestError overwrites any union data inside the GetPaymentsError as the provided InvalidRequestError
func (t *GetPaymentsError) FromInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInvalidRequestError performs a merge with any union data inside the GetPaymentsError, using the provided InvalidRequestError
func (t *GetPaymentsError) MergeInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUnauthorizedError returns the union data inside the GetPaymentsError as a UnauthorizedError
func (t GetPaymentsError) AsUnauthorizedError() (UnauthorizedError, error) {
	var body UnauthorizedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUnauthorizedError overwrites any union data inside the GetPaymentsError as the provided UnauthorizedError
func (t *GetPaymentsError) FromUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUnauthorizedError performs a merge with any union data inside the GetPaymentsError, using the provided UnauthorizedError
func (t *GetPaymentsError) MergeUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t GetPaymentsError) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t GetPaymentsError) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "FORBIDDEN":
		return t.AsForbiddenError()
	case "INVALID_REQUEST":
		return t.AsInvalidRequestError()
	case "UNAUTHORIZED":
		return t.AsUnauthorizedError()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t GetPaymentsError) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *GetPaymentsError) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsForbiddenError returns the union data inside the GetPlatformAccountHolderError as a ForbiddenError
func (t GetPlatformAccountHolderError) AsForbiddenError() (ForbiddenError, error) {
	var body ForbiddenError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromForbiddenError overwrites any union data inside the GetPlatformAccountHolderError as the provided ForbiddenError
func (t *GetPlatformAccountHolderError) FromForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeForbiddenError performs a merge with any union data inside the GetPlatformAccountHolderError, using the provided ForbiddenError
func (t *GetPlatformAccountHolderError) MergeForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInvalidRequestError returns the union data inside the GetPlatformAccountHolderError as a InvalidRequestError
func (t GetPlatformAccountHolderError) AsInvalidRequestError() (InvalidRequestError, error) {
	var body InvalidRequestError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInvalidRequestError overwrites any union data inside the GetPlatformAccountHolderError as the provided InvalidRequestError
func (t *GetPlatformAccountHolderError) FromInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInvalidRequestError performs a merge with any union data inside the GetPlatformAccountHolderError, using the provided InvalidRequestError
func (t *GetPlatformAccountHolderError) MergeInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformExternalApiFailedError returns the union data inside the GetPlatformAccountHolderError as a PlatformExternalApiFailedError
func (t GetPlatformAccountHolderError) AsPlatformExternalApiFailedError() (PlatformExternalApiFailedError, error) {
	var body PlatformExternalApiFailedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformExternalApiFailedError overwrites any union data inside the GetPlatformAccountHolderError as the provided PlatformExternalApiFailedError
func (t *GetPlatformAccountHolderError) FromPlatformExternalApiFailedError(v PlatformExternalApiFailedError) error {
	v.Type = "PLATFORM_EXTERNAL_API_FAILED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformExternalApiFailedError performs a merge with any union data inside the GetPlatformAccountHolderError, using the provided PlatformExternalApiFailedError
func (t *GetPlatformAccountHolderError) MergePlatformExternalApiFailedError(v PlatformExternalApiFailedError) error {
	v.Type = "PLATFORM_EXTERNAL_API_FAILED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformExternalApiTemporarilyFailedError returns the union data inside the GetPlatformAccountHolderError as a PlatformExternalApiTemporarilyFailedError
func (t GetPlatformAccountHolderError) AsPlatformExternalApiTemporarilyFailedError() (PlatformExternalApiTemporarilyFailedError, error) {
	var body PlatformExternalApiTemporarilyFailedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformExternalApiTemporarilyFailedError overwrites any union data inside the GetPlatformAccountHolderError as the provided PlatformExternalApiTemporarilyFailedError
func (t *GetPlatformAccountHolderError) FromPlatformExternalApiTemporarilyFailedError(v PlatformExternalApiTemporarilyFailedError) error {
	v.Type = "PLATFORM_EXTERNAL_API_TEMPORARILY_FAILED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformExternalApiTemporarilyFailedError performs a merge with any union data inside the GetPlatformAccountHolderError, using the provided PlatformExternalApiTemporarilyFailedError
func (t *GetPlatformAccountHolderError) MergePlatformExternalApiTemporarilyFailedError(v PlatformExternalApiTemporarilyFailedError) error {
	v.Type = "PLATFORM_EXTERNAL_API_TEMPORARILY_FAILED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformNotEnabledError returns the union data inside the GetPlatformAccountHolderError as a PlatformNotEnabledError
func (t GetPlatformAccountHolderError) AsPlatformNotEnabledError() (PlatformNotEnabledError, error) {
	var body PlatformNotEnabledError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformNotEnabledError overwrites any union data inside the GetPlatformAccountHolderError as the provided PlatformNotEnabledError
func (t *GetPlatformAccountHolderError) FromPlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformNotEnabledError performs a merge with any union data inside the GetPlatformAccountHolderError, using the provided PlatformNotEnabledError
func (t *GetPlatformAccountHolderError) MergePlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformNotSupportedBankError returns the union data inside the GetPlatformAccountHolderError as a PlatformNotSupportedBankError
func (t GetPlatformAccountHolderError) AsPlatformNotSupportedBankError() (PlatformNotSupportedBankError, error) {
	var body PlatformNotSupportedBankError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformNotSupportedBankError overwrites any union data inside the GetPlatformAccountHolderError as the provided PlatformNotSupportedBankError
func (t *GetPlatformAccountHolderError) FromPlatformNotSupportedBankError(v PlatformNotSupportedBankError) error {
	v.Type = "PLATFORM_NOT_SUPPORTED_BANK"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformNotSupportedBankError performs a merge with any union data inside the GetPlatformAccountHolderError, using the provided PlatformNotSupportedBankError
func (t *GetPlatformAccountHolderError) MergePlatformNotSupportedBankError(v PlatformNotSupportedBankError) error {
	v.Type = "PLATFORM_NOT_SUPPORTED_BANK"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUnauthorizedError returns the union data inside the GetPlatformAccountHolderError as a UnauthorizedError
func (t GetPlatformAccountHolderError) AsUnauthorizedError() (UnauthorizedError, error) {
	var body UnauthorizedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUnauthorizedError overwrites any union data inside the GetPlatformAccountHolderError as the provided UnauthorizedError
func (t *GetPlatformAccountHolderError) FromUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUnauthorizedError performs a merge with any union data inside the GetPlatformAccountHolderError, using the provided UnauthorizedError
func (t *GetPlatformAccountHolderError) MergeUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t GetPlatformAccountHolderError) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t GetPlatformAccountHolderError) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "FORBIDDEN":
		return t.AsForbiddenError()
	case "INVALID_REQUEST":
		return t.AsInvalidRequestError()
	case "PLATFORM_EXTERNAL_API_FAILED":
		return t.AsPlatformExternalApiFailedError()
	case "PLATFORM_EXTERNAL_API_TEMPORARILY_FAILED":
		return t.AsPlatformExternalApiTemporarilyFailedError()
	case "PLATFORM_NOT_ENABLED":
		return t.AsPlatformNotEnabledError()
	case "PLATFORM_NOT_SUPPORTED_BANK":
		return t.AsPlatformNotSupportedBankError()
	case "UNAUTHORIZED":
		return t.AsUnauthorizedError()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t GetPlatformAccountHolderError) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *GetPlatformAccountHolderError) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsForbiddenError returns the union data inside the GetPlatformAccountTransfersError as a ForbiddenError
func (t GetPlatformAccountTransfersError) AsForbiddenError() (ForbiddenError, error) {
	var body ForbiddenError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromForbiddenError overwrites any union data inside the GetPlatformAccountTransfersError as the provided ForbiddenError
func (t *GetPlatformAccountTransfersError) FromForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeForbiddenError performs a merge with any union data inside the GetPlatformAccountTransfersError, using the provided ForbiddenError
func (t *GetPlatformAccountTransfersError) MergeForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInvalidRequestError returns the union data inside the GetPlatformAccountTransfersError as a InvalidRequestError
func (t GetPlatformAccountTransfersError) AsInvalidRequestError() (InvalidRequestError, error) {
	var body InvalidRequestError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInvalidRequestError overwrites any union data inside the GetPlatformAccountTransfersError as the provided InvalidRequestError
func (t *GetPlatformAccountTransfersError) FromInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInvalidRequestError performs a merge with any union data inside the GetPlatformAccountTransfersError, using the provided InvalidRequestError
func (t *GetPlatformAccountTransfersError) MergeInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformNotEnabledError returns the union data inside the GetPlatformAccountTransfersError as a PlatformNotEnabledError
func (t GetPlatformAccountTransfersError) AsPlatformNotEnabledError() (PlatformNotEnabledError, error) {
	var body PlatformNotEnabledError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformNotEnabledError overwrites any union data inside the GetPlatformAccountTransfersError as the provided PlatformNotEnabledError
func (t *GetPlatformAccountTransfersError) FromPlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformNotEnabledError performs a merge with any union data inside the GetPlatformAccountTransfersError, using the provided PlatformNotEnabledError
func (t *GetPlatformAccountTransfersError) MergePlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUnauthorizedError returns the union data inside the GetPlatformAccountTransfersError as a UnauthorizedError
func (t GetPlatformAccountTransfersError) AsUnauthorizedError() (UnauthorizedError, error) {
	var body UnauthorizedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUnauthorizedError overwrites any union data inside the GetPlatformAccountTransfersError as the provided UnauthorizedError
func (t *GetPlatformAccountTransfersError) FromUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUnauthorizedError performs a merge with any union data inside the GetPlatformAccountTransfersError, using the provided UnauthorizedError
func (t *GetPlatformAccountTransfersError) MergeUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t GetPlatformAccountTransfersError) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t GetPlatformAccountTransfersError) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "FORBIDDEN":
		return t.AsForbiddenError()
	case "INVALID_REQUEST":
		return t.AsInvalidRequestError()
	case "PLATFORM_NOT_ENABLED":
		return t.AsPlatformNotEnabledError()
	case "UNAUTHORIZED":
		return t.AsUnauthorizedError()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t GetPlatformAccountTransfersError) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *GetPlatformAccountTransfersError) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsForbiddenError returns the union data inside the GetPlatformAdditionalFeePoliciesError as a ForbiddenError
func (t GetPlatformAdditionalFeePoliciesError) AsForbiddenError() (ForbiddenError, error) {
	var body ForbiddenError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromForbiddenError overwrites any union data inside the GetPlatformAdditionalFeePoliciesError as the provided ForbiddenError
func (t *GetPlatformAdditionalFeePoliciesError) FromForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeForbiddenError performs a merge with any union data inside the GetPlatformAdditionalFeePoliciesError, using the provided ForbiddenError
func (t *GetPlatformAdditionalFeePoliciesError) MergeForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInvalidRequestError returns the union data inside the GetPlatformAdditionalFeePoliciesError as a InvalidRequestError
func (t GetPlatformAdditionalFeePoliciesError) AsInvalidRequestError() (InvalidRequestError, error) {
	var body InvalidRequestError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInvalidRequestError overwrites any union data inside the GetPlatformAdditionalFeePoliciesError as the provided InvalidRequestError
func (t *GetPlatformAdditionalFeePoliciesError) FromInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInvalidRequestError performs a merge with any union data inside the GetPlatformAdditionalFeePoliciesError, using the provided InvalidRequestError
func (t *GetPlatformAdditionalFeePoliciesError) MergeInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformNotEnabledError returns the union data inside the GetPlatformAdditionalFeePoliciesError as a PlatformNotEnabledError
func (t GetPlatformAdditionalFeePoliciesError) AsPlatformNotEnabledError() (PlatformNotEnabledError, error) {
	var body PlatformNotEnabledError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformNotEnabledError overwrites any union data inside the GetPlatformAdditionalFeePoliciesError as the provided PlatformNotEnabledError
func (t *GetPlatformAdditionalFeePoliciesError) FromPlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformNotEnabledError performs a merge with any union data inside the GetPlatformAdditionalFeePoliciesError, using the provided PlatformNotEnabledError
func (t *GetPlatformAdditionalFeePoliciesError) MergePlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUnauthorizedError returns the union data inside the GetPlatformAdditionalFeePoliciesError as a UnauthorizedError
func (t GetPlatformAdditionalFeePoliciesError) AsUnauthorizedError() (UnauthorizedError, error) {
	var body UnauthorizedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUnauthorizedError overwrites any union data inside the GetPlatformAdditionalFeePoliciesError as the provided UnauthorizedError
func (t *GetPlatformAdditionalFeePoliciesError) FromUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUnauthorizedError performs a merge with any union data inside the GetPlatformAdditionalFeePoliciesError, using the provided UnauthorizedError
func (t *GetPlatformAdditionalFeePoliciesError) MergeUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t GetPlatformAdditionalFeePoliciesError) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t GetPlatformAdditionalFeePoliciesError) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "FORBIDDEN":
		return t.AsForbiddenError()
	case "INVALID_REQUEST":
		return t.AsInvalidRequestError()
	case "PLATFORM_NOT_ENABLED":
		return t.AsPlatformNotEnabledError()
	case "UNAUTHORIZED":
		return t.AsUnauthorizedError()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t GetPlatformAdditionalFeePoliciesError) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *GetPlatformAdditionalFeePoliciesError) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsForbiddenError returns the union data inside the GetPlatformAdditionalFeePolicyError as a ForbiddenError
func (t GetPlatformAdditionalFeePolicyError) AsForbiddenError() (ForbiddenError, error) {
	var body ForbiddenError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromForbiddenError overwrites any union data inside the GetPlatformAdditionalFeePolicyError as the provided ForbiddenError
func (t *GetPlatformAdditionalFeePolicyError) FromForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeForbiddenError performs a merge with any union data inside the GetPlatformAdditionalFeePolicyError, using the provided ForbiddenError
func (t *GetPlatformAdditionalFeePolicyError) MergeForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInvalidRequestError returns the union data inside the GetPlatformAdditionalFeePolicyError as a InvalidRequestError
func (t GetPlatformAdditionalFeePolicyError) AsInvalidRequestError() (InvalidRequestError, error) {
	var body InvalidRequestError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInvalidRequestError overwrites any union data inside the GetPlatformAdditionalFeePolicyError as the provided InvalidRequestError
func (t *GetPlatformAdditionalFeePolicyError) FromInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInvalidRequestError performs a merge with any union data inside the GetPlatformAdditionalFeePolicyError, using the provided InvalidRequestError
func (t *GetPlatformAdditionalFeePolicyError) MergeInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformAdditionalFeePolicyNotFoundError returns the union data inside the GetPlatformAdditionalFeePolicyError as a PlatformAdditionalFeePolicyNotFoundError
func (t GetPlatformAdditionalFeePolicyError) AsPlatformAdditionalFeePolicyNotFoundError() (PlatformAdditionalFeePolicyNotFoundError, error) {
	var body PlatformAdditionalFeePolicyNotFoundError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformAdditionalFeePolicyNotFoundError overwrites any union data inside the GetPlatformAdditionalFeePolicyError as the provided PlatformAdditionalFeePolicyNotFoundError
func (t *GetPlatformAdditionalFeePolicyError) FromPlatformAdditionalFeePolicyNotFoundError(v PlatformAdditionalFeePolicyNotFoundError) error {
	v.Type = "PLATFORM_ADDITIONAL_FEE_POLICY_NOT_FOUND"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformAdditionalFeePolicyNotFoundError performs a merge with any union data inside the GetPlatformAdditionalFeePolicyError, using the provided PlatformAdditionalFeePolicyNotFoundError
func (t *GetPlatformAdditionalFeePolicyError) MergePlatformAdditionalFeePolicyNotFoundError(v PlatformAdditionalFeePolicyNotFoundError) error {
	v.Type = "PLATFORM_ADDITIONAL_FEE_POLICY_NOT_FOUND"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformNotEnabledError returns the union data inside the GetPlatformAdditionalFeePolicyError as a PlatformNotEnabledError
func (t GetPlatformAdditionalFeePolicyError) AsPlatformNotEnabledError() (PlatformNotEnabledError, error) {
	var body PlatformNotEnabledError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformNotEnabledError overwrites any union data inside the GetPlatformAdditionalFeePolicyError as the provided PlatformNotEnabledError
func (t *GetPlatformAdditionalFeePolicyError) FromPlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformNotEnabledError performs a merge with any union data inside the GetPlatformAdditionalFeePolicyError, using the provided PlatformNotEnabledError
func (t *GetPlatformAdditionalFeePolicyError) MergePlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUnauthorizedError returns the union data inside the GetPlatformAdditionalFeePolicyError as a UnauthorizedError
func (t GetPlatformAdditionalFeePolicyError) AsUnauthorizedError() (UnauthorizedError, error) {
	var body UnauthorizedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUnauthorizedError overwrites any union data inside the GetPlatformAdditionalFeePolicyError as the provided UnauthorizedError
func (t *GetPlatformAdditionalFeePolicyError) FromUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUnauthorizedError performs a merge with any union data inside the GetPlatformAdditionalFeePolicyError, using the provided UnauthorizedError
func (t *GetPlatformAdditionalFeePolicyError) MergeUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t GetPlatformAdditionalFeePolicyError) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t GetPlatformAdditionalFeePolicyError) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "FORBIDDEN":
		return t.AsForbiddenError()
	case "INVALID_REQUEST":
		return t.AsInvalidRequestError()
	case "PLATFORM_ADDITIONAL_FEE_POLICY_NOT_FOUND":
		return t.AsPlatformAdditionalFeePolicyNotFoundError()
	case "PLATFORM_NOT_ENABLED":
		return t.AsPlatformNotEnabledError()
	case "UNAUTHORIZED":
		return t.AsUnauthorizedError()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t GetPlatformAdditionalFeePolicyError) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *GetPlatformAdditionalFeePolicyError) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsForbiddenError returns the union data inside the GetPlatformAdditionalFeePolicyScheduleError as a ForbiddenError
func (t GetPlatformAdditionalFeePolicyScheduleError) AsForbiddenError() (ForbiddenError, error) {
	var body ForbiddenError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromForbiddenError overwrites any union data inside the GetPlatformAdditionalFeePolicyScheduleError as the provided ForbiddenError
func (t *GetPlatformAdditionalFeePolicyScheduleError) FromForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeForbiddenError performs a merge with any union data inside the GetPlatformAdditionalFeePolicyScheduleError, using the provided ForbiddenError
func (t *GetPlatformAdditionalFeePolicyScheduleError) MergeForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInvalidRequestError returns the union data inside the GetPlatformAdditionalFeePolicyScheduleError as a InvalidRequestError
func (t GetPlatformAdditionalFeePolicyScheduleError) AsInvalidRequestError() (InvalidRequestError, error) {
	var body InvalidRequestError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInvalidRequestError overwrites any union data inside the GetPlatformAdditionalFeePolicyScheduleError as the provided InvalidRequestError
func (t *GetPlatformAdditionalFeePolicyScheduleError) FromInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInvalidRequestError performs a merge with any union data inside the GetPlatformAdditionalFeePolicyScheduleError, using the provided InvalidRequestError
func (t *GetPlatformAdditionalFeePolicyScheduleError) MergeInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformAdditionalFeePolicyNotFoundError returns the union data inside the GetPlatformAdditionalFeePolicyScheduleError as a PlatformAdditionalFeePolicyNotFoundError
func (t GetPlatformAdditionalFeePolicyScheduleError) AsPlatformAdditionalFeePolicyNotFoundError() (PlatformAdditionalFeePolicyNotFoundError, error) {
	var body PlatformAdditionalFeePolicyNotFoundError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformAdditionalFeePolicyNotFoundError overwrites any union data inside the GetPlatformAdditionalFeePolicyScheduleError as the provided PlatformAdditionalFeePolicyNotFoundError
func (t *GetPlatformAdditionalFeePolicyScheduleError) FromPlatformAdditionalFeePolicyNotFoundError(v PlatformAdditionalFeePolicyNotFoundError) error {
	v.Type = "PLATFORM_ADDITIONAL_FEE_POLICY_NOT_FOUND"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformAdditionalFeePolicyNotFoundError performs a merge with any union data inside the GetPlatformAdditionalFeePolicyScheduleError, using the provided PlatformAdditionalFeePolicyNotFoundError
func (t *GetPlatformAdditionalFeePolicyScheduleError) MergePlatformAdditionalFeePolicyNotFoundError(v PlatformAdditionalFeePolicyNotFoundError) error {
	v.Type = "PLATFORM_ADDITIONAL_FEE_POLICY_NOT_FOUND"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformNotEnabledError returns the union data inside the GetPlatformAdditionalFeePolicyScheduleError as a PlatformNotEnabledError
func (t GetPlatformAdditionalFeePolicyScheduleError) AsPlatformNotEnabledError() (PlatformNotEnabledError, error) {
	var body PlatformNotEnabledError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformNotEnabledError overwrites any union data inside the GetPlatformAdditionalFeePolicyScheduleError as the provided PlatformNotEnabledError
func (t *GetPlatformAdditionalFeePolicyScheduleError) FromPlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformNotEnabledError performs a merge with any union data inside the GetPlatformAdditionalFeePolicyScheduleError, using the provided PlatformNotEnabledError
func (t *GetPlatformAdditionalFeePolicyScheduleError) MergePlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUnauthorizedError returns the union data inside the GetPlatformAdditionalFeePolicyScheduleError as a UnauthorizedError
func (t GetPlatformAdditionalFeePolicyScheduleError) AsUnauthorizedError() (UnauthorizedError, error) {
	var body UnauthorizedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUnauthorizedError overwrites any union data inside the GetPlatformAdditionalFeePolicyScheduleError as the provided UnauthorizedError
func (t *GetPlatformAdditionalFeePolicyScheduleError) FromUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUnauthorizedError performs a merge with any union data inside the GetPlatformAdditionalFeePolicyScheduleError, using the provided UnauthorizedError
func (t *GetPlatformAdditionalFeePolicyScheduleError) MergeUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t GetPlatformAdditionalFeePolicyScheduleError) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t GetPlatformAdditionalFeePolicyScheduleError) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "FORBIDDEN":
		return t.AsForbiddenError()
	case "INVALID_REQUEST":
		return t.AsInvalidRequestError()
	case "PLATFORM_ADDITIONAL_FEE_POLICY_NOT_FOUND":
		return t.AsPlatformAdditionalFeePolicyNotFoundError()
	case "PLATFORM_NOT_ENABLED":
		return t.AsPlatformNotEnabledError()
	case "UNAUTHORIZED":
		return t.AsUnauthorizedError()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t GetPlatformAdditionalFeePolicyScheduleError) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *GetPlatformAdditionalFeePolicyScheduleError) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsForbiddenError returns the union data inside the GetPlatformBulkPayoutsError as a ForbiddenError
func (t GetPlatformBulkPayoutsError) AsForbiddenError() (ForbiddenError, error) {
	var body ForbiddenError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromForbiddenError overwrites any union data inside the GetPlatformBulkPayoutsError as the provided ForbiddenError
func (t *GetPlatformBulkPayoutsError) FromForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeForbiddenError performs a merge with any union data inside the GetPlatformBulkPayoutsError, using the provided ForbiddenError
func (t *GetPlatformBulkPayoutsError) MergeForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInvalidRequestError returns the union data inside the GetPlatformBulkPayoutsError as a InvalidRequestError
func (t GetPlatformBulkPayoutsError) AsInvalidRequestError() (InvalidRequestError, error) {
	var body InvalidRequestError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInvalidRequestError overwrites any union data inside the GetPlatformBulkPayoutsError as the provided InvalidRequestError
func (t *GetPlatformBulkPayoutsError) FromInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInvalidRequestError performs a merge with any union data inside the GetPlatformBulkPayoutsError, using the provided InvalidRequestError
func (t *GetPlatformBulkPayoutsError) MergeInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformNotEnabledError returns the union data inside the GetPlatformBulkPayoutsError as a PlatformNotEnabledError
func (t GetPlatformBulkPayoutsError) AsPlatformNotEnabledError() (PlatformNotEnabledError, error) {
	var body PlatformNotEnabledError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformNotEnabledError overwrites any union data inside the GetPlatformBulkPayoutsError as the provided PlatformNotEnabledError
func (t *GetPlatformBulkPayoutsError) FromPlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformNotEnabledError performs a merge with any union data inside the GetPlatformBulkPayoutsError, using the provided PlatformNotEnabledError
func (t *GetPlatformBulkPayoutsError) MergePlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUnauthorizedError returns the union data inside the GetPlatformBulkPayoutsError as a UnauthorizedError
func (t GetPlatformBulkPayoutsError) AsUnauthorizedError() (UnauthorizedError, error) {
	var body UnauthorizedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUnauthorizedError overwrites any union data inside the GetPlatformBulkPayoutsError as the provided UnauthorizedError
func (t *GetPlatformBulkPayoutsError) FromUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUnauthorizedError performs a merge with any union data inside the GetPlatformBulkPayoutsError, using the provided UnauthorizedError
func (t *GetPlatformBulkPayoutsError) MergeUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t GetPlatformBulkPayoutsError) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t GetPlatformBulkPayoutsError) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "FORBIDDEN":
		return t.AsForbiddenError()
	case "INVALID_REQUEST":
		return t.AsInvalidRequestError()
	case "PLATFORM_NOT_ENABLED":
		return t.AsPlatformNotEnabledError()
	case "UNAUTHORIZED":
		return t.AsUnauthorizedError()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t GetPlatformBulkPayoutsError) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *GetPlatformBulkPayoutsError) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsForbiddenError returns the union data inside the GetPlatformCompanyStateError as a ForbiddenError
func (t GetPlatformCompanyStateError) AsForbiddenError() (ForbiddenError, error) {
	var body ForbiddenError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromForbiddenError overwrites any union data inside the GetPlatformCompanyStateError as the provided ForbiddenError
func (t *GetPlatformCompanyStateError) FromForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeForbiddenError performs a merge with any union data inside the GetPlatformCompanyStateError, using the provided ForbiddenError
func (t *GetPlatformCompanyStateError) MergeForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInvalidRequestError returns the union data inside the GetPlatformCompanyStateError as a InvalidRequestError
func (t GetPlatformCompanyStateError) AsInvalidRequestError() (InvalidRequestError, error) {
	var body InvalidRequestError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInvalidRequestError overwrites any union data inside the GetPlatformCompanyStateError as the provided InvalidRequestError
func (t *GetPlatformCompanyStateError) FromInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInvalidRequestError performs a merge with any union data inside the GetPlatformCompanyStateError, using the provided InvalidRequestError
func (t *GetPlatformCompanyStateError) MergeInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformCompanyNotFoundError returns the union data inside the GetPlatformCompanyStateError as a PlatformCompanyNotFoundError
func (t GetPlatformCompanyStateError) AsPlatformCompanyNotFoundError() (PlatformCompanyNotFoundError, error) {
	var body PlatformCompanyNotFoundError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformCompanyNotFoundError overwrites any union data inside the GetPlatformCompanyStateError as the provided PlatformCompanyNotFoundError
func (t *GetPlatformCompanyStateError) FromPlatformCompanyNotFoundError(v PlatformCompanyNotFoundError) error {
	v.Type = "PLATFORM_COMPANY_NOT_FOUND"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformCompanyNotFoundError performs a merge with any union data inside the GetPlatformCompanyStateError, using the provided PlatformCompanyNotFoundError
func (t *GetPlatformCompanyStateError) MergePlatformCompanyNotFoundError(v PlatformCompanyNotFoundError) error {
	v.Type = "PLATFORM_COMPANY_NOT_FOUND"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformExternalApiFailedError returns the union data inside the GetPlatformCompanyStateError as a PlatformExternalApiFailedError
func (t GetPlatformCompanyStateError) AsPlatformExternalApiFailedError() (PlatformExternalApiFailedError, error) {
	var body PlatformExternalApiFailedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformExternalApiFailedError overwrites any union data inside the GetPlatformCompanyStateError as the provided PlatformExternalApiFailedError
func (t *GetPlatformCompanyStateError) FromPlatformExternalApiFailedError(v PlatformExternalApiFailedError) error {
	v.Type = "PLATFORM_EXTERNAL_API_FAILED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformExternalApiFailedError performs a merge with any union data inside the GetPlatformCompanyStateError, using the provided PlatformExternalApiFailedError
func (t *GetPlatformCompanyStateError) MergePlatformExternalApiFailedError(v PlatformExternalApiFailedError) error {
	v.Type = "PLATFORM_EXTERNAL_API_FAILED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformNotEnabledError returns the union data inside the GetPlatformCompanyStateError as a PlatformNotEnabledError
func (t GetPlatformCompanyStateError) AsPlatformNotEnabledError() (PlatformNotEnabledError, error) {
	var body PlatformNotEnabledError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformNotEnabledError overwrites any union data inside the GetPlatformCompanyStateError as the provided PlatformNotEnabledError
func (t *GetPlatformCompanyStateError) FromPlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformNotEnabledError performs a merge with any union data inside the GetPlatformCompanyStateError, using the provided PlatformNotEnabledError
func (t *GetPlatformCompanyStateError) MergePlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUnauthorizedError returns the union data inside the GetPlatformCompanyStateError as a UnauthorizedError
func (t GetPlatformCompanyStateError) AsUnauthorizedError() (UnauthorizedError, error) {
	var body UnauthorizedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUnauthorizedError overwrites any union data inside the GetPlatformCompanyStateError as the provided UnauthorizedError
func (t *GetPlatformCompanyStateError) FromUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUnauthorizedError performs a merge with any union data inside the GetPlatformCompanyStateError, using the provided UnauthorizedError
func (t *GetPlatformCompanyStateError) MergeUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t GetPlatformCompanyStateError) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t GetPlatformCompanyStateError) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "FORBIDDEN":
		return t.AsForbiddenError()
	case "INVALID_REQUEST":
		return t.AsInvalidRequestError()
	case "PLATFORM_COMPANY_NOT_FOUND":
		return t.AsPlatformCompanyNotFoundError()
	case "PLATFORM_EXTERNAL_API_FAILED":
		return t.AsPlatformExternalApiFailedError()
	case "PLATFORM_NOT_ENABLED":
		return t.AsPlatformNotEnabledError()
	case "UNAUTHORIZED":
		return t.AsUnauthorizedError()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t GetPlatformCompanyStateError) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *GetPlatformCompanyStateError) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsForbiddenError returns the union data inside the GetPlatformContractError as a ForbiddenError
func (t GetPlatformContractError) AsForbiddenError() (ForbiddenError, error) {
	var body ForbiddenError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromForbiddenError overwrites any union data inside the GetPlatformContractError as the provided ForbiddenError
func (t *GetPlatformContractError) FromForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeForbiddenError performs a merge with any union data inside the GetPlatformContractError, using the provided ForbiddenError
func (t *GetPlatformContractError) MergeForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInvalidRequestError returns the union data inside the GetPlatformContractError as a InvalidRequestError
func (t GetPlatformContractError) AsInvalidRequestError() (InvalidRequestError, error) {
	var body InvalidRequestError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInvalidRequestError overwrites any union data inside the GetPlatformContractError as the provided InvalidRequestError
func (t *GetPlatformContractError) FromInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInvalidRequestError performs a merge with any union data inside the GetPlatformContractError, using the provided InvalidRequestError
func (t *GetPlatformContractError) MergeInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformContractNotFoundError returns the union data inside the GetPlatformContractError as a PlatformContractNotFoundError
func (t GetPlatformContractError) AsPlatformContractNotFoundError() (PlatformContractNotFoundError, error) {
	var body PlatformContractNotFoundError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformContractNotFoundError overwrites any union data inside the GetPlatformContractError as the provided PlatformContractNotFoundError
func (t *GetPlatformContractError) FromPlatformContractNotFoundError(v PlatformContractNotFoundError) error {
	v.Type = "PLATFORM_CONTRACT_NOT_FOUND"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformContractNotFoundError performs a merge with any union data inside the GetPlatformContractError, using the provided PlatformContractNotFoundError
func (t *GetPlatformContractError) MergePlatformContractNotFoundError(v PlatformContractNotFoundError) error {
	v.Type = "PLATFORM_CONTRACT_NOT_FOUND"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformNotEnabledError returns the union data inside the GetPlatformContractError as a PlatformNotEnabledError
func (t GetPlatformContractError) AsPlatformNotEnabledError() (PlatformNotEnabledError, error) {
	var body PlatformNotEnabledError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformNotEnabledError overwrites any union data inside the GetPlatformContractError as the provided PlatformNotEnabledError
func (t *GetPlatformContractError) FromPlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformNotEnabledError performs a merge with any union data inside the GetPlatformContractError, using the provided PlatformNotEnabledError
func (t *GetPlatformContractError) MergePlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUnauthorizedError returns the union data inside the GetPlatformContractError as a UnauthorizedError
func (t GetPlatformContractError) AsUnauthorizedError() (UnauthorizedError, error) {
	var body UnauthorizedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUnauthorizedError overwrites any union data inside the GetPlatformContractError as the provided UnauthorizedError
func (t *GetPlatformContractError) FromUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUnauthorizedError performs a merge with any union data inside the GetPlatformContractError, using the provided UnauthorizedError
func (t *GetPlatformContractError) MergeUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t GetPlatformContractError) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t GetPlatformContractError) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "FORBIDDEN":
		return t.AsForbiddenError()
	case "INVALID_REQUEST":
		return t.AsInvalidRequestError()
	case "PLATFORM_CONTRACT_NOT_FOUND":
		return t.AsPlatformContractNotFoundError()
	case "PLATFORM_NOT_ENABLED":
		return t.AsPlatformNotEnabledError()
	case "UNAUTHORIZED":
		return t.AsUnauthorizedError()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t GetPlatformContractError) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *GetPlatformContractError) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsForbiddenError returns the union data inside the GetPlatformContractScheduleError as a ForbiddenError
func (t GetPlatformContractScheduleError) AsForbiddenError() (ForbiddenError, error) {
	var body ForbiddenError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromForbiddenError overwrites any union data inside the GetPlatformContractScheduleError as the provided ForbiddenError
func (t *GetPlatformContractScheduleError) FromForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeForbiddenError performs a merge with any union data inside the GetPlatformContractScheduleError, using the provided ForbiddenError
func (t *GetPlatformContractScheduleError) MergeForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInvalidRequestError returns the union data inside the GetPlatformContractScheduleError as a InvalidRequestError
func (t GetPlatformContractScheduleError) AsInvalidRequestError() (InvalidRequestError, error) {
	var body InvalidRequestError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInvalidRequestError overwrites any union data inside the GetPlatformContractScheduleError as the provided InvalidRequestError
func (t *GetPlatformContractScheduleError) FromInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInvalidRequestError performs a merge with any union data inside the GetPlatformContractScheduleError, using the provided InvalidRequestError
func (t *GetPlatformContractScheduleError) MergeInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformContractNotFoundError returns the union data inside the GetPlatformContractScheduleError as a PlatformContractNotFoundError
func (t GetPlatformContractScheduleError) AsPlatformContractNotFoundError() (PlatformContractNotFoundError, error) {
	var body PlatformContractNotFoundError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformContractNotFoundError overwrites any union data inside the GetPlatformContractScheduleError as the provided PlatformContractNotFoundError
func (t *GetPlatformContractScheduleError) FromPlatformContractNotFoundError(v PlatformContractNotFoundError) error {
	v.Type = "PLATFORM_CONTRACT_NOT_FOUND"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformContractNotFoundError performs a merge with any union data inside the GetPlatformContractScheduleError, using the provided PlatformContractNotFoundError
func (t *GetPlatformContractScheduleError) MergePlatformContractNotFoundError(v PlatformContractNotFoundError) error {
	v.Type = "PLATFORM_CONTRACT_NOT_FOUND"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformNotEnabledError returns the union data inside the GetPlatformContractScheduleError as a PlatformNotEnabledError
func (t GetPlatformContractScheduleError) AsPlatformNotEnabledError() (PlatformNotEnabledError, error) {
	var body PlatformNotEnabledError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformNotEnabledError overwrites any union data inside the GetPlatformContractScheduleError as the provided PlatformNotEnabledError
func (t *GetPlatformContractScheduleError) FromPlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformNotEnabledError performs a merge with any union data inside the GetPlatformContractScheduleError, using the provided PlatformNotEnabledError
func (t *GetPlatformContractScheduleError) MergePlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUnauthorizedError returns the union data inside the GetPlatformContractScheduleError as a UnauthorizedError
func (t GetPlatformContractScheduleError) AsUnauthorizedError() (UnauthorizedError, error) {
	var body UnauthorizedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUnauthorizedError overwrites any union data inside the GetPlatformContractScheduleError as the provided UnauthorizedError
func (t *GetPlatformContractScheduleError) FromUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUnauthorizedError performs a merge with any union data inside the GetPlatformContractScheduleError, using the provided UnauthorizedError
func (t *GetPlatformContractScheduleError) MergeUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t GetPlatformContractScheduleError) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t GetPlatformContractScheduleError) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "FORBIDDEN":
		return t.AsForbiddenError()
	case "INVALID_REQUEST":
		return t.AsInvalidRequestError()
	case "PLATFORM_CONTRACT_NOT_FOUND":
		return t.AsPlatformContractNotFoundError()
	case "PLATFORM_NOT_ENABLED":
		return t.AsPlatformNotEnabledError()
	case "UNAUTHORIZED":
		return t.AsUnauthorizedError()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t GetPlatformContractScheduleError) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *GetPlatformContractScheduleError) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsForbiddenError returns the union data inside the GetPlatformContractsError as a ForbiddenError
func (t GetPlatformContractsError) AsForbiddenError() (ForbiddenError, error) {
	var body ForbiddenError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromForbiddenError overwrites any union data inside the GetPlatformContractsError as the provided ForbiddenError
func (t *GetPlatformContractsError) FromForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeForbiddenError performs a merge with any union data inside the GetPlatformContractsError, using the provided ForbiddenError
func (t *GetPlatformContractsError) MergeForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInvalidRequestError returns the union data inside the GetPlatformContractsError as a InvalidRequestError
func (t GetPlatformContractsError) AsInvalidRequestError() (InvalidRequestError, error) {
	var body InvalidRequestError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInvalidRequestError overwrites any union data inside the GetPlatformContractsError as the provided InvalidRequestError
func (t *GetPlatformContractsError) FromInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInvalidRequestError performs a merge with any union data inside the GetPlatformContractsError, using the provided InvalidRequestError
func (t *GetPlatformContractsError) MergeInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformNotEnabledError returns the union data inside the GetPlatformContractsError as a PlatformNotEnabledError
func (t GetPlatformContractsError) AsPlatformNotEnabledError() (PlatformNotEnabledError, error) {
	var body PlatformNotEnabledError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformNotEnabledError overwrites any union data inside the GetPlatformContractsError as the provided PlatformNotEnabledError
func (t *GetPlatformContractsError) FromPlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformNotEnabledError performs a merge with any union data inside the GetPlatformContractsError, using the provided PlatformNotEnabledError
func (t *GetPlatformContractsError) MergePlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUnauthorizedError returns the union data inside the GetPlatformContractsError as a UnauthorizedError
func (t GetPlatformContractsError) AsUnauthorizedError() (UnauthorizedError, error) {
	var body UnauthorizedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUnauthorizedError overwrites any union data inside the GetPlatformContractsError as the provided UnauthorizedError
func (t *GetPlatformContractsError) FromUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUnauthorizedError performs a merge with any union data inside the GetPlatformContractsError, using the provided UnauthorizedError
func (t *GetPlatformContractsError) MergeUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t GetPlatformContractsError) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t GetPlatformContractsError) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "FORBIDDEN":
		return t.AsForbiddenError()
	case "INVALID_REQUEST":
		return t.AsInvalidRequestError()
	case "PLATFORM_NOT_ENABLED":
		return t.AsPlatformNotEnabledError()
	case "UNAUTHORIZED":
		return t.AsUnauthorizedError()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t GetPlatformContractsError) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *GetPlatformContractsError) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsForbiddenError returns the union data inside the GetPlatformDiscountSharePoliciesError as a ForbiddenError
func (t GetPlatformDiscountSharePoliciesError) AsForbiddenError() (ForbiddenError, error) {
	var body ForbiddenError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromForbiddenError overwrites any union data inside the GetPlatformDiscountSharePoliciesError as the provided ForbiddenError
func (t *GetPlatformDiscountSharePoliciesError) FromForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeForbiddenError performs a merge with any union data inside the GetPlatformDiscountSharePoliciesError, using the provided ForbiddenError
func (t *GetPlatformDiscountSharePoliciesError) MergeForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInvalidRequestError returns the union data inside the GetPlatformDiscountSharePoliciesError as a InvalidRequestError
func (t GetPlatformDiscountSharePoliciesError) AsInvalidRequestError() (InvalidRequestError, error) {
	var body InvalidRequestError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInvalidRequestError overwrites any union data inside the GetPlatformDiscountSharePoliciesError as the provided InvalidRequestError
func (t *GetPlatformDiscountSharePoliciesError) FromInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInvalidRequestError performs a merge with any union data inside the GetPlatformDiscountSharePoliciesError, using the provided InvalidRequestError
func (t *GetPlatformDiscountSharePoliciesError) MergeInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformNotEnabledError returns the union data inside the GetPlatformDiscountSharePoliciesError as a PlatformNotEnabledError
func (t GetPlatformDiscountSharePoliciesError) AsPlatformNotEnabledError() (PlatformNotEnabledError, error) {
	var body PlatformNotEnabledError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformNotEnabledError overwrites any union data inside the GetPlatformDiscountSharePoliciesError as the provided PlatformNotEnabledError
func (t *GetPlatformDiscountSharePoliciesError) FromPlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformNotEnabledError performs a merge with any union data inside the GetPlatformDiscountSharePoliciesError, using the provided PlatformNotEnabledError
func (t *GetPlatformDiscountSharePoliciesError) MergePlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUnauthorizedError returns the union data inside the GetPlatformDiscountSharePoliciesError as a UnauthorizedError
func (t GetPlatformDiscountSharePoliciesError) AsUnauthorizedError() (UnauthorizedError, error) {
	var body UnauthorizedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUnauthorizedError overwrites any union data inside the GetPlatformDiscountSharePoliciesError as the provided UnauthorizedError
func (t *GetPlatformDiscountSharePoliciesError) FromUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUnauthorizedError performs a merge with any union data inside the GetPlatformDiscountSharePoliciesError, using the provided UnauthorizedError
func (t *GetPlatformDiscountSharePoliciesError) MergeUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t GetPlatformDiscountSharePoliciesError) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t GetPlatformDiscountSharePoliciesError) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "FORBIDDEN":
		return t.AsForbiddenError()
	case "INVALID_REQUEST":
		return t.AsInvalidRequestError()
	case "PLATFORM_NOT_ENABLED":
		return t.AsPlatformNotEnabledError()
	case "UNAUTHORIZED":
		return t.AsUnauthorizedError()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t GetPlatformDiscountSharePoliciesError) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *GetPlatformDiscountSharePoliciesError) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsForbiddenError returns the union data inside the GetPlatformDiscountSharePolicyError as a ForbiddenError
func (t GetPlatformDiscountSharePolicyError) AsForbiddenError() (ForbiddenError, error) {
	var body ForbiddenError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromForbiddenError overwrites any union data inside the GetPlatformDiscountSharePolicyError as the provided ForbiddenError
func (t *GetPlatformDiscountSharePolicyError) FromForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeForbiddenError performs a merge with any union data inside the GetPlatformDiscountSharePolicyError, using the provided ForbiddenError
func (t *GetPlatformDiscountSharePolicyError) MergeForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInvalidRequestError returns the union data inside the GetPlatformDiscountSharePolicyError as a InvalidRequestError
func (t GetPlatformDiscountSharePolicyError) AsInvalidRequestError() (InvalidRequestError, error) {
	var body InvalidRequestError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInvalidRequestError overwrites any union data inside the GetPlatformDiscountSharePolicyError as the provided InvalidRequestError
func (t *GetPlatformDiscountSharePolicyError) FromInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInvalidRequestError performs a merge with any union data inside the GetPlatformDiscountSharePolicyError, using the provided InvalidRequestError
func (t *GetPlatformDiscountSharePolicyError) MergeInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformDiscountSharePolicyNotFoundError returns the union data inside the GetPlatformDiscountSharePolicyError as a PlatformDiscountSharePolicyNotFoundError
func (t GetPlatformDiscountSharePolicyError) AsPlatformDiscountSharePolicyNotFoundError() (PlatformDiscountSharePolicyNotFoundError, error) {
	var body PlatformDiscountSharePolicyNotFoundError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformDiscountSharePolicyNotFoundError overwrites any union data inside the GetPlatformDiscountSharePolicyError as the provided PlatformDiscountSharePolicyNotFoundError
func (t *GetPlatformDiscountSharePolicyError) FromPlatformDiscountSharePolicyNotFoundError(v PlatformDiscountSharePolicyNotFoundError) error {
	v.Type = "PLATFORM_DISCOUNT_SHARE_POLICY_NOT_FOUND"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformDiscountSharePolicyNotFoundError performs a merge with any union data inside the GetPlatformDiscountSharePolicyError, using the provided PlatformDiscountSharePolicyNotFoundError
func (t *GetPlatformDiscountSharePolicyError) MergePlatformDiscountSharePolicyNotFoundError(v PlatformDiscountSharePolicyNotFoundError) error {
	v.Type = "PLATFORM_DISCOUNT_SHARE_POLICY_NOT_FOUND"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformNotEnabledError returns the union data inside the GetPlatformDiscountSharePolicyError as a PlatformNotEnabledError
func (t GetPlatformDiscountSharePolicyError) AsPlatformNotEnabledError() (PlatformNotEnabledError, error) {
	var body PlatformNotEnabledError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformNotEnabledError overwrites any union data inside the GetPlatformDiscountSharePolicyError as the provided PlatformNotEnabledError
func (t *GetPlatformDiscountSharePolicyError) FromPlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformNotEnabledError performs a merge with any union data inside the GetPlatformDiscountSharePolicyError, using the provided PlatformNotEnabledError
func (t *GetPlatformDiscountSharePolicyError) MergePlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUnauthorizedError returns the union data inside the GetPlatformDiscountSharePolicyError as a UnauthorizedError
func (t GetPlatformDiscountSharePolicyError) AsUnauthorizedError() (UnauthorizedError, error) {
	var body UnauthorizedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUnauthorizedError overwrites any union data inside the GetPlatformDiscountSharePolicyError as the provided UnauthorizedError
func (t *GetPlatformDiscountSharePolicyError) FromUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUnauthorizedError performs a merge with any union data inside the GetPlatformDiscountSharePolicyError, using the provided UnauthorizedError
func (t *GetPlatformDiscountSharePolicyError) MergeUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t GetPlatformDiscountSharePolicyError) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t GetPlatformDiscountSharePolicyError) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "FORBIDDEN":
		return t.AsForbiddenError()
	case "INVALID_REQUEST":
		return t.AsInvalidRequestError()
	case "PLATFORM_DISCOUNT_SHARE_POLICY_NOT_FOUND":
		return t.AsPlatformDiscountSharePolicyNotFoundError()
	case "PLATFORM_NOT_ENABLED":
		return t.AsPlatformNotEnabledError()
	case "UNAUTHORIZED":
		return t.AsUnauthorizedError()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t GetPlatformDiscountSharePolicyError) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *GetPlatformDiscountSharePolicyError) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsForbiddenError returns the union data inside the GetPlatformDiscountSharePolicyFilterOptionsError as a ForbiddenError
func (t GetPlatformDiscountSharePolicyFilterOptionsError) AsForbiddenError() (ForbiddenError, error) {
	var body ForbiddenError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromForbiddenError overwrites any union data inside the GetPlatformDiscountSharePolicyFilterOptionsError as the provided ForbiddenError
func (t *GetPlatformDiscountSharePolicyFilterOptionsError) FromForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeForbiddenError performs a merge with any union data inside the GetPlatformDiscountSharePolicyFilterOptionsError, using the provided ForbiddenError
func (t *GetPlatformDiscountSharePolicyFilterOptionsError) MergeForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInvalidRequestError returns the union data inside the GetPlatformDiscountSharePolicyFilterOptionsError as a InvalidRequestError
func (t GetPlatformDiscountSharePolicyFilterOptionsError) AsInvalidRequestError() (InvalidRequestError, error) {
	var body InvalidRequestError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInvalidRequestError overwrites any union data inside the GetPlatformDiscountSharePolicyFilterOptionsError as the provided InvalidRequestError
func (t *GetPlatformDiscountSharePolicyFilterOptionsError) FromInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInvalidRequestError performs a merge with any union data inside the GetPlatformDiscountSharePolicyFilterOptionsError, using the provided InvalidRequestError
func (t *GetPlatformDiscountSharePolicyFilterOptionsError) MergeInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformNotEnabledError returns the union data inside the GetPlatformDiscountSharePolicyFilterOptionsError as a PlatformNotEnabledError
func (t GetPlatformDiscountSharePolicyFilterOptionsError) AsPlatformNotEnabledError() (PlatformNotEnabledError, error) {
	var body PlatformNotEnabledError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformNotEnabledError overwrites any union data inside the GetPlatformDiscountSharePolicyFilterOptionsError as the provided PlatformNotEnabledError
func (t *GetPlatformDiscountSharePolicyFilterOptionsError) FromPlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformNotEnabledError performs a merge with any union data inside the GetPlatformDiscountSharePolicyFilterOptionsError, using the provided PlatformNotEnabledError
func (t *GetPlatformDiscountSharePolicyFilterOptionsError) MergePlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUnauthorizedError returns the union data inside the GetPlatformDiscountSharePolicyFilterOptionsError as a UnauthorizedError
func (t GetPlatformDiscountSharePolicyFilterOptionsError) AsUnauthorizedError() (UnauthorizedError, error) {
	var body UnauthorizedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUnauthorizedError overwrites any union data inside the GetPlatformDiscountSharePolicyFilterOptionsError as the provided UnauthorizedError
func (t *GetPlatformDiscountSharePolicyFilterOptionsError) FromUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUnauthorizedError performs a merge with any union data inside the GetPlatformDiscountSharePolicyFilterOptionsError, using the provided UnauthorizedError
func (t *GetPlatformDiscountSharePolicyFilterOptionsError) MergeUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t GetPlatformDiscountSharePolicyFilterOptionsError) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t GetPlatformDiscountSharePolicyFilterOptionsError) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "FORBIDDEN":
		return t.AsForbiddenError()
	case "INVALID_REQUEST":
		return t.AsInvalidRequestError()
	case "PLATFORM_NOT_ENABLED":
		return t.AsPlatformNotEnabledError()
	case "UNAUTHORIZED":
		return t.AsUnauthorizedError()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t GetPlatformDiscountSharePolicyFilterOptionsError) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *GetPlatformDiscountSharePolicyFilterOptionsError) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsForbiddenError returns the union data inside the GetPlatformDiscountSharePolicyScheduleError as a ForbiddenError
func (t GetPlatformDiscountSharePolicyScheduleError) AsForbiddenError() (ForbiddenError, error) {
	var body ForbiddenError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromForbiddenError overwrites any union data inside the GetPlatformDiscountSharePolicyScheduleError as the provided ForbiddenError
func (t *GetPlatformDiscountSharePolicyScheduleError) FromForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeForbiddenError performs a merge with any union data inside the GetPlatformDiscountSharePolicyScheduleError, using the provided ForbiddenError
func (t *GetPlatformDiscountSharePolicyScheduleError) MergeForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInvalidRequestError returns the union data inside the GetPlatformDiscountSharePolicyScheduleError as a InvalidRequestError
func (t GetPlatformDiscountSharePolicyScheduleError) AsInvalidRequestError() (InvalidRequestError, error) {
	var body InvalidRequestError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInvalidRequestError overwrites any union data inside the GetPlatformDiscountSharePolicyScheduleError as the provided InvalidRequestError
func (t *GetPlatformDiscountSharePolicyScheduleError) FromInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInvalidRequestError performs a merge with any union data inside the GetPlatformDiscountSharePolicyScheduleError, using the provided InvalidRequestError
func (t *GetPlatformDiscountSharePolicyScheduleError) MergeInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformDiscountSharePolicyNotFoundError returns the union data inside the GetPlatformDiscountSharePolicyScheduleError as a PlatformDiscountSharePolicyNotFoundError
func (t GetPlatformDiscountSharePolicyScheduleError) AsPlatformDiscountSharePolicyNotFoundError() (PlatformDiscountSharePolicyNotFoundError, error) {
	var body PlatformDiscountSharePolicyNotFoundError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformDiscountSharePolicyNotFoundError overwrites any union data inside the GetPlatformDiscountSharePolicyScheduleError as the provided PlatformDiscountSharePolicyNotFoundError
func (t *GetPlatformDiscountSharePolicyScheduleError) FromPlatformDiscountSharePolicyNotFoundError(v PlatformDiscountSharePolicyNotFoundError) error {
	v.Type = "PLATFORM_DISCOUNT_SHARE_POLICY_NOT_FOUND"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformDiscountSharePolicyNotFoundError performs a merge with any union data inside the GetPlatformDiscountSharePolicyScheduleError, using the provided PlatformDiscountSharePolicyNotFoundError
func (t *GetPlatformDiscountSharePolicyScheduleError) MergePlatformDiscountSharePolicyNotFoundError(v PlatformDiscountSharePolicyNotFoundError) error {
	v.Type = "PLATFORM_DISCOUNT_SHARE_POLICY_NOT_FOUND"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformNotEnabledError returns the union data inside the GetPlatformDiscountSharePolicyScheduleError as a PlatformNotEnabledError
func (t GetPlatformDiscountSharePolicyScheduleError) AsPlatformNotEnabledError() (PlatformNotEnabledError, error) {
	var body PlatformNotEnabledError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformNotEnabledError overwrites any union data inside the GetPlatformDiscountSharePolicyScheduleError as the provided PlatformNotEnabledError
func (t *GetPlatformDiscountSharePolicyScheduleError) FromPlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformNotEnabledError performs a merge with any union data inside the GetPlatformDiscountSharePolicyScheduleError, using the provided PlatformNotEnabledError
func (t *GetPlatformDiscountSharePolicyScheduleError) MergePlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUnauthorizedError returns the union data inside the GetPlatformDiscountSharePolicyScheduleError as a UnauthorizedError
func (t GetPlatformDiscountSharePolicyScheduleError) AsUnauthorizedError() (UnauthorizedError, error) {
	var body UnauthorizedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUnauthorizedError overwrites any union data inside the GetPlatformDiscountSharePolicyScheduleError as the provided UnauthorizedError
func (t *GetPlatformDiscountSharePolicyScheduleError) FromUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUnauthorizedError performs a merge with any union data inside the GetPlatformDiscountSharePolicyScheduleError, using the provided UnauthorizedError
func (t *GetPlatformDiscountSharePolicyScheduleError) MergeUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t GetPlatformDiscountSharePolicyScheduleError) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t GetPlatformDiscountSharePolicyScheduleError) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "FORBIDDEN":
		return t.AsForbiddenError()
	case "INVALID_REQUEST":
		return t.AsInvalidRequestError()
	case "PLATFORM_DISCOUNT_SHARE_POLICY_NOT_FOUND":
		return t.AsPlatformDiscountSharePolicyNotFoundError()
	case "PLATFORM_NOT_ENABLED":
		return t.AsPlatformNotEnabledError()
	case "UNAUTHORIZED":
		return t.AsUnauthorizedError()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t GetPlatformDiscountSharePolicyScheduleError) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *GetPlatformDiscountSharePolicyScheduleError) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsInvalidRequestError returns the union data inside the GetPlatformError as a InvalidRequestError
func (t GetPlatformError) AsInvalidRequestError() (InvalidRequestError, error) {
	var body InvalidRequestError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInvalidRequestError overwrites any union data inside the GetPlatformError as the provided InvalidRequestError
func (t *GetPlatformError) FromInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInvalidRequestError performs a merge with any union data inside the GetPlatformError, using the provided InvalidRequestError
func (t *GetPlatformError) MergeInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformNotEnabledError returns the union data inside the GetPlatformError as a PlatformNotEnabledError
func (t GetPlatformError) AsPlatformNotEnabledError() (PlatformNotEnabledError, error) {
	var body PlatformNotEnabledError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformNotEnabledError overwrites any union data inside the GetPlatformError as the provided PlatformNotEnabledError
func (t *GetPlatformError) FromPlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformNotEnabledError performs a merge with any union data inside the GetPlatformError, using the provided PlatformNotEnabledError
func (t *GetPlatformError) MergePlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUnauthorizedError returns the union data inside the GetPlatformError as a UnauthorizedError
func (t GetPlatformError) AsUnauthorizedError() (UnauthorizedError, error) {
	var body UnauthorizedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUnauthorizedError overwrites any union data inside the GetPlatformError as the provided UnauthorizedError
func (t *GetPlatformError) FromUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUnauthorizedError performs a merge with any union data inside the GetPlatformError, using the provided UnauthorizedError
func (t *GetPlatformError) MergeUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t GetPlatformError) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t GetPlatformError) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "INVALID_REQUEST":
		return t.AsInvalidRequestError()
	case "PLATFORM_NOT_ENABLED":
		return t.AsPlatformNotEnabledError()
	case "UNAUTHORIZED":
		return t.AsUnauthorizedError()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t GetPlatformError) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *GetPlatformError) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsForbiddenError returns the union data inside the GetPlatformPartnerError as a ForbiddenError
func (t GetPlatformPartnerError) AsForbiddenError() (ForbiddenError, error) {
	var body ForbiddenError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromForbiddenError overwrites any union data inside the GetPlatformPartnerError as the provided ForbiddenError
func (t *GetPlatformPartnerError) FromForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeForbiddenError performs a merge with any union data inside the GetPlatformPartnerError, using the provided ForbiddenError
func (t *GetPlatformPartnerError) MergeForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInvalidRequestError returns the union data inside the GetPlatformPartnerError as a InvalidRequestError
func (t GetPlatformPartnerError) AsInvalidRequestError() (InvalidRequestError, error) {
	var body InvalidRequestError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInvalidRequestError overwrites any union data inside the GetPlatformPartnerError as the provided InvalidRequestError
func (t *GetPlatformPartnerError) FromInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInvalidRequestError performs a merge with any union data inside the GetPlatformPartnerError, using the provided InvalidRequestError
func (t *GetPlatformPartnerError) MergeInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformNotEnabledError returns the union data inside the GetPlatformPartnerError as a PlatformNotEnabledError
func (t GetPlatformPartnerError) AsPlatformNotEnabledError() (PlatformNotEnabledError, error) {
	var body PlatformNotEnabledError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformNotEnabledError overwrites any union data inside the GetPlatformPartnerError as the provided PlatformNotEnabledError
func (t *GetPlatformPartnerError) FromPlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformNotEnabledError performs a merge with any union data inside the GetPlatformPartnerError, using the provided PlatformNotEnabledError
func (t *GetPlatformPartnerError) MergePlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformPartnerNotFoundError returns the union data inside the GetPlatformPartnerError as a PlatformPartnerNotFoundError
func (t GetPlatformPartnerError) AsPlatformPartnerNotFoundError() (PlatformPartnerNotFoundError, error) {
	var body PlatformPartnerNotFoundError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformPartnerNotFoundError overwrites any union data inside the GetPlatformPartnerError as the provided PlatformPartnerNotFoundError
func (t *GetPlatformPartnerError) FromPlatformPartnerNotFoundError(v PlatformPartnerNotFoundError) error {
	v.Type = "PLATFORM_PARTNER_NOT_FOUND"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformPartnerNotFoundError performs a merge with any union data inside the GetPlatformPartnerError, using the provided PlatformPartnerNotFoundError
func (t *GetPlatformPartnerError) MergePlatformPartnerNotFoundError(v PlatformPartnerNotFoundError) error {
	v.Type = "PLATFORM_PARTNER_NOT_FOUND"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUnauthorizedError returns the union data inside the GetPlatformPartnerError as a UnauthorizedError
func (t GetPlatformPartnerError) AsUnauthorizedError() (UnauthorizedError, error) {
	var body UnauthorizedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUnauthorizedError overwrites any union data inside the GetPlatformPartnerError as the provided UnauthorizedError
func (t *GetPlatformPartnerError) FromUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUnauthorizedError performs a merge with any union data inside the GetPlatformPartnerError, using the provided UnauthorizedError
func (t *GetPlatformPartnerError) MergeUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t GetPlatformPartnerError) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t GetPlatformPartnerError) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "FORBIDDEN":
		return t.AsForbiddenError()
	case "INVALID_REQUEST":
		return t.AsInvalidRequestError()
	case "PLATFORM_NOT_ENABLED":
		return t.AsPlatformNotEnabledError()
	case "PLATFORM_PARTNER_NOT_FOUND":
		return t.AsPlatformPartnerNotFoundError()
	case "UNAUTHORIZED":
		return t.AsUnauthorizedError()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t GetPlatformPartnerError) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *GetPlatformPartnerError) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsForbiddenError returns the union data inside the GetPlatformPartnerFilterOptionsError as a ForbiddenError
func (t GetPlatformPartnerFilterOptionsError) AsForbiddenError() (ForbiddenError, error) {
	var body ForbiddenError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromForbiddenError overwrites any union data inside the GetPlatformPartnerFilterOptionsError as the provided ForbiddenError
func (t *GetPlatformPartnerFilterOptionsError) FromForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeForbiddenError performs a merge with any union data inside the GetPlatformPartnerFilterOptionsError, using the provided ForbiddenError
func (t *GetPlatformPartnerFilterOptionsError) MergeForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInvalidRequestError returns the union data inside the GetPlatformPartnerFilterOptionsError as a InvalidRequestError
func (t GetPlatformPartnerFilterOptionsError) AsInvalidRequestError() (InvalidRequestError, error) {
	var body InvalidRequestError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInvalidRequestError overwrites any union data inside the GetPlatformPartnerFilterOptionsError as the provided InvalidRequestError
func (t *GetPlatformPartnerFilterOptionsError) FromInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInvalidRequestError performs a merge with any union data inside the GetPlatformPartnerFilterOptionsError, using the provided InvalidRequestError
func (t *GetPlatformPartnerFilterOptionsError) MergeInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformNotEnabledError returns the union data inside the GetPlatformPartnerFilterOptionsError as a PlatformNotEnabledError
func (t GetPlatformPartnerFilterOptionsError) AsPlatformNotEnabledError() (PlatformNotEnabledError, error) {
	var body PlatformNotEnabledError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformNotEnabledError overwrites any union data inside the GetPlatformPartnerFilterOptionsError as the provided PlatformNotEnabledError
func (t *GetPlatformPartnerFilterOptionsError) FromPlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformNotEnabledError performs a merge with any union data inside the GetPlatformPartnerFilterOptionsError, using the provided PlatformNotEnabledError
func (t *GetPlatformPartnerFilterOptionsError) MergePlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUnauthorizedError returns the union data inside the GetPlatformPartnerFilterOptionsError as a UnauthorizedError
func (t GetPlatformPartnerFilterOptionsError) AsUnauthorizedError() (UnauthorizedError, error) {
	var body UnauthorizedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUnauthorizedError overwrites any union data inside the GetPlatformPartnerFilterOptionsError as the provided UnauthorizedError
func (t *GetPlatformPartnerFilterOptionsError) FromUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUnauthorizedError performs a merge with any union data inside the GetPlatformPartnerFilterOptionsError, using the provided UnauthorizedError
func (t *GetPlatformPartnerFilterOptionsError) MergeUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t GetPlatformPartnerFilterOptionsError) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t GetPlatformPartnerFilterOptionsError) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "FORBIDDEN":
		return t.AsForbiddenError()
	case "INVALID_REQUEST":
		return t.AsInvalidRequestError()
	case "PLATFORM_NOT_ENABLED":
		return t.AsPlatformNotEnabledError()
	case "UNAUTHORIZED":
		return t.AsUnauthorizedError()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t GetPlatformPartnerFilterOptionsError) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *GetPlatformPartnerFilterOptionsError) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsForbiddenError returns the union data inside the GetPlatformPartnerScheduleError as a ForbiddenError
func (t GetPlatformPartnerScheduleError) AsForbiddenError() (ForbiddenError, error) {
	var body ForbiddenError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromForbiddenError overwrites any union data inside the GetPlatformPartnerScheduleError as the provided ForbiddenError
func (t *GetPlatformPartnerScheduleError) FromForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeForbiddenError performs a merge with any union data inside the GetPlatformPartnerScheduleError, using the provided ForbiddenError
func (t *GetPlatformPartnerScheduleError) MergeForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInvalidRequestError returns the union data inside the GetPlatformPartnerScheduleError as a InvalidRequestError
func (t GetPlatformPartnerScheduleError) AsInvalidRequestError() (InvalidRequestError, error) {
	var body InvalidRequestError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInvalidRequestError overwrites any union data inside the GetPlatformPartnerScheduleError as the provided InvalidRequestError
func (t *GetPlatformPartnerScheduleError) FromInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInvalidRequestError performs a merge with any union data inside the GetPlatformPartnerScheduleError, using the provided InvalidRequestError
func (t *GetPlatformPartnerScheduleError) MergeInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformNotEnabledError returns the union data inside the GetPlatformPartnerScheduleError as a PlatformNotEnabledError
func (t GetPlatformPartnerScheduleError) AsPlatformNotEnabledError() (PlatformNotEnabledError, error) {
	var body PlatformNotEnabledError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformNotEnabledError overwrites any union data inside the GetPlatformPartnerScheduleError as the provided PlatformNotEnabledError
func (t *GetPlatformPartnerScheduleError) FromPlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformNotEnabledError performs a merge with any union data inside the GetPlatformPartnerScheduleError, using the provided PlatformNotEnabledError
func (t *GetPlatformPartnerScheduleError) MergePlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformPartnerNotFoundError returns the union data inside the GetPlatformPartnerScheduleError as a PlatformPartnerNotFoundError
func (t GetPlatformPartnerScheduleError) AsPlatformPartnerNotFoundError() (PlatformPartnerNotFoundError, error) {
	var body PlatformPartnerNotFoundError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformPartnerNotFoundError overwrites any union data inside the GetPlatformPartnerScheduleError as the provided PlatformPartnerNotFoundError
func (t *GetPlatformPartnerScheduleError) FromPlatformPartnerNotFoundError(v PlatformPartnerNotFoundError) error {
	v.Type = "PLATFORM_PARTNER_NOT_FOUND"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformPartnerNotFoundError performs a merge with any union data inside the GetPlatformPartnerScheduleError, using the provided PlatformPartnerNotFoundError
func (t *GetPlatformPartnerScheduleError) MergePlatformPartnerNotFoundError(v PlatformPartnerNotFoundError) error {
	v.Type = "PLATFORM_PARTNER_NOT_FOUND"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUnauthorizedError returns the union data inside the GetPlatformPartnerScheduleError as a UnauthorizedError
func (t GetPlatformPartnerScheduleError) AsUnauthorizedError() (UnauthorizedError, error) {
	var body UnauthorizedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUnauthorizedError overwrites any union data inside the GetPlatformPartnerScheduleError as the provided UnauthorizedError
func (t *GetPlatformPartnerScheduleError) FromUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUnauthorizedError performs a merge with any union data inside the GetPlatformPartnerScheduleError, using the provided UnauthorizedError
func (t *GetPlatformPartnerScheduleError) MergeUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t GetPlatformPartnerScheduleError) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t GetPlatformPartnerScheduleError) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "FORBIDDEN":
		return t.AsForbiddenError()
	case "INVALID_REQUEST":
		return t.AsInvalidRequestError()
	case "PLATFORM_NOT_ENABLED":
		return t.AsPlatformNotEnabledError()
	case "PLATFORM_PARTNER_NOT_FOUND":
		return t.AsPlatformPartnerNotFoundError()
	case "UNAUTHORIZED":
		return t.AsUnauthorizedError()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t GetPlatformPartnerScheduleError) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *GetPlatformPartnerScheduleError) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsForbiddenError returns the union data inside the GetPlatformPartnerSettlementsError as a ForbiddenError
func (t GetPlatformPartnerSettlementsError) AsForbiddenError() (ForbiddenError, error) {
	var body ForbiddenError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromForbiddenError overwrites any union data inside the GetPlatformPartnerSettlementsError as the provided ForbiddenError
func (t *GetPlatformPartnerSettlementsError) FromForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeForbiddenError performs a merge with any union data inside the GetPlatformPartnerSettlementsError, using the provided ForbiddenError
func (t *GetPlatformPartnerSettlementsError) MergeForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInvalidRequestError returns the union data inside the GetPlatformPartnerSettlementsError as a InvalidRequestError
func (t GetPlatformPartnerSettlementsError) AsInvalidRequestError() (InvalidRequestError, error) {
	var body InvalidRequestError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInvalidRequestError overwrites any union data inside the GetPlatformPartnerSettlementsError as the provided InvalidRequestError
func (t *GetPlatformPartnerSettlementsError) FromInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInvalidRequestError performs a merge with any union data inside the GetPlatformPartnerSettlementsError, using the provided InvalidRequestError
func (t *GetPlatformPartnerSettlementsError) MergeInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformNotEnabledError returns the union data inside the GetPlatformPartnerSettlementsError as a PlatformNotEnabledError
func (t GetPlatformPartnerSettlementsError) AsPlatformNotEnabledError() (PlatformNotEnabledError, error) {
	var body PlatformNotEnabledError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformNotEnabledError overwrites any union data inside the GetPlatformPartnerSettlementsError as the provided PlatformNotEnabledError
func (t *GetPlatformPartnerSettlementsError) FromPlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformNotEnabledError performs a merge with any union data inside the GetPlatformPartnerSettlementsError, using the provided PlatformNotEnabledError
func (t *GetPlatformPartnerSettlementsError) MergePlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUnauthorizedError returns the union data inside the GetPlatformPartnerSettlementsError as a UnauthorizedError
func (t GetPlatformPartnerSettlementsError) AsUnauthorizedError() (UnauthorizedError, error) {
	var body UnauthorizedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUnauthorizedError overwrites any union data inside the GetPlatformPartnerSettlementsError as the provided UnauthorizedError
func (t *GetPlatformPartnerSettlementsError) FromUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUnauthorizedError performs a merge with any union data inside the GetPlatformPartnerSettlementsError, using the provided UnauthorizedError
func (t *GetPlatformPartnerSettlementsError) MergeUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t GetPlatformPartnerSettlementsError) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t GetPlatformPartnerSettlementsError) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "FORBIDDEN":
		return t.AsForbiddenError()
	case "INVALID_REQUEST":
		return t.AsInvalidRequestError()
	case "PLATFORM_NOT_ENABLED":
		return t.AsPlatformNotEnabledError()
	case "UNAUTHORIZED":
		return t.AsUnauthorizedError()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t GetPlatformPartnerSettlementsError) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *GetPlatformPartnerSettlementsError) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsForbiddenError returns the union data inside the GetPlatformPartnersError as a ForbiddenError
func (t GetPlatformPartnersError) AsForbiddenError() (ForbiddenError, error) {
	var body ForbiddenError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromForbiddenError overwrites any union data inside the GetPlatformPartnersError as the provided ForbiddenError
func (t *GetPlatformPartnersError) FromForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeForbiddenError performs a merge with any union data inside the GetPlatformPartnersError, using the provided ForbiddenError
func (t *GetPlatformPartnersError) MergeForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInvalidRequestError returns the union data inside the GetPlatformPartnersError as a InvalidRequestError
func (t GetPlatformPartnersError) AsInvalidRequestError() (InvalidRequestError, error) {
	var body InvalidRequestError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInvalidRequestError overwrites any union data inside the GetPlatformPartnersError as the provided InvalidRequestError
func (t *GetPlatformPartnersError) FromInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInvalidRequestError performs a merge with any union data inside the GetPlatformPartnersError, using the provided InvalidRequestError
func (t *GetPlatformPartnersError) MergeInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformNotEnabledError returns the union data inside the GetPlatformPartnersError as a PlatformNotEnabledError
func (t GetPlatformPartnersError) AsPlatformNotEnabledError() (PlatformNotEnabledError, error) {
	var body PlatformNotEnabledError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformNotEnabledError overwrites any union data inside the GetPlatformPartnersError as the provided PlatformNotEnabledError
func (t *GetPlatformPartnersError) FromPlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformNotEnabledError performs a merge with any union data inside the GetPlatformPartnersError, using the provided PlatformNotEnabledError
func (t *GetPlatformPartnersError) MergePlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUnauthorizedError returns the union data inside the GetPlatformPartnersError as a UnauthorizedError
func (t GetPlatformPartnersError) AsUnauthorizedError() (UnauthorizedError, error) {
	var body UnauthorizedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUnauthorizedError overwrites any union data inside the GetPlatformPartnersError as the provided UnauthorizedError
func (t *GetPlatformPartnersError) FromUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUnauthorizedError performs a merge with any union data inside the GetPlatformPartnersError, using the provided UnauthorizedError
func (t *GetPlatformPartnersError) MergeUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t GetPlatformPartnersError) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t GetPlatformPartnersError) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "FORBIDDEN":
		return t.AsForbiddenError()
	case "INVALID_REQUEST":
		return t.AsInvalidRequestError()
	case "PLATFORM_NOT_ENABLED":
		return t.AsPlatformNotEnabledError()
	case "UNAUTHORIZED":
		return t.AsUnauthorizedError()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t GetPlatformPartnersError) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *GetPlatformPartnersError) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsForbiddenError returns the union data inside the GetPlatformPayoutsError as a ForbiddenError
func (t GetPlatformPayoutsError) AsForbiddenError() (ForbiddenError, error) {
	var body ForbiddenError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromForbiddenError overwrites any union data inside the GetPlatformPayoutsError as the provided ForbiddenError
func (t *GetPlatformPayoutsError) FromForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeForbiddenError performs a merge with any union data inside the GetPlatformPayoutsError, using the provided ForbiddenError
func (t *GetPlatformPayoutsError) MergeForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInvalidRequestError returns the union data inside the GetPlatformPayoutsError as a InvalidRequestError
func (t GetPlatformPayoutsError) AsInvalidRequestError() (InvalidRequestError, error) {
	var body InvalidRequestError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInvalidRequestError overwrites any union data inside the GetPlatformPayoutsError as the provided InvalidRequestError
func (t *GetPlatformPayoutsError) FromInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInvalidRequestError performs a merge with any union data inside the GetPlatformPayoutsError, using the provided InvalidRequestError
func (t *GetPlatformPayoutsError) MergeInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformNotEnabledError returns the union data inside the GetPlatformPayoutsError as a PlatformNotEnabledError
func (t GetPlatformPayoutsError) AsPlatformNotEnabledError() (PlatformNotEnabledError, error) {
	var body PlatformNotEnabledError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformNotEnabledError overwrites any union data inside the GetPlatformPayoutsError as the provided PlatformNotEnabledError
func (t *GetPlatformPayoutsError) FromPlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformNotEnabledError performs a merge with any union data inside the GetPlatformPayoutsError, using the provided PlatformNotEnabledError
func (t *GetPlatformPayoutsError) MergePlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUnauthorizedError returns the union data inside the GetPlatformPayoutsError as a UnauthorizedError
func (t GetPlatformPayoutsError) AsUnauthorizedError() (UnauthorizedError, error) {
	var body UnauthorizedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUnauthorizedError overwrites any union data inside the GetPlatformPayoutsError as the provided UnauthorizedError
func (t *GetPlatformPayoutsError) FromUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUnauthorizedError performs a merge with any union data inside the GetPlatformPayoutsError, using the provided UnauthorizedError
func (t *GetPlatformPayoutsError) MergeUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t GetPlatformPayoutsError) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t GetPlatformPayoutsError) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "FORBIDDEN":
		return t.AsForbiddenError()
	case "INVALID_REQUEST":
		return t.AsInvalidRequestError()
	case "PLATFORM_NOT_ENABLED":
		return t.AsPlatformNotEnabledError()
	case "UNAUTHORIZED":
		return t.AsUnauthorizedError()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t GetPlatformPayoutsError) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *GetPlatformPayoutsError) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsForbiddenError returns the union data inside the GetPlatformSettingError as a ForbiddenError
func (t GetPlatformSettingError) AsForbiddenError() (ForbiddenError, error) {
	var body ForbiddenError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromForbiddenError overwrites any union data inside the GetPlatformSettingError as the provided ForbiddenError
func (t *GetPlatformSettingError) FromForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeForbiddenError performs a merge with any union data inside the GetPlatformSettingError, using the provided ForbiddenError
func (t *GetPlatformSettingError) MergeForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInvalidRequestError returns the union data inside the GetPlatformSettingError as a InvalidRequestError
func (t GetPlatformSettingError) AsInvalidRequestError() (InvalidRequestError, error) {
	var body InvalidRequestError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInvalidRequestError overwrites any union data inside the GetPlatformSettingError as the provided InvalidRequestError
func (t *GetPlatformSettingError) FromInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInvalidRequestError performs a merge with any union data inside the GetPlatformSettingError, using the provided InvalidRequestError
func (t *GetPlatformSettingError) MergeInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformNotEnabledError returns the union data inside the GetPlatformSettingError as a PlatformNotEnabledError
func (t GetPlatformSettingError) AsPlatformNotEnabledError() (PlatformNotEnabledError, error) {
	var body PlatformNotEnabledError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformNotEnabledError overwrites any union data inside the GetPlatformSettingError as the provided PlatformNotEnabledError
func (t *GetPlatformSettingError) FromPlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformNotEnabledError performs a merge with any union data inside the GetPlatformSettingError, using the provided PlatformNotEnabledError
func (t *GetPlatformSettingError) MergePlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUnauthorizedError returns the union data inside the GetPlatformSettingError as a UnauthorizedError
func (t GetPlatformSettingError) AsUnauthorizedError() (UnauthorizedError, error) {
	var body UnauthorizedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUnauthorizedError overwrites any union data inside the GetPlatformSettingError as the provided UnauthorizedError
func (t *GetPlatformSettingError) FromUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUnauthorizedError performs a merge with any union data inside the GetPlatformSettingError, using the provided UnauthorizedError
func (t *GetPlatformSettingError) MergeUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t GetPlatformSettingError) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t GetPlatformSettingError) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "FORBIDDEN":
		return t.AsForbiddenError()
	case "INVALID_REQUEST":
		return t.AsInvalidRequestError()
	case "PLATFORM_NOT_ENABLED":
		return t.AsPlatformNotEnabledError()
	case "UNAUTHORIZED":
		return t.AsUnauthorizedError()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t GetPlatformSettingError) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *GetPlatformSettingError) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsForbiddenError returns the union data inside the GetPlatformTransferError as a ForbiddenError
func (t GetPlatformTransferError) AsForbiddenError() (ForbiddenError, error) {
	var body ForbiddenError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromForbiddenError overwrites any union data inside the GetPlatformTransferError as the provided ForbiddenError
func (t *GetPlatformTransferError) FromForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeForbiddenError performs a merge with any union data inside the GetPlatformTransferError, using the provided ForbiddenError
func (t *GetPlatformTransferError) MergeForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInvalidRequestError returns the union data inside the GetPlatformTransferError as a InvalidRequestError
func (t GetPlatformTransferError) AsInvalidRequestError() (InvalidRequestError, error) {
	var body InvalidRequestError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInvalidRequestError overwrites any union data inside the GetPlatformTransferError as the provided InvalidRequestError
func (t *GetPlatformTransferError) FromInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInvalidRequestError performs a merge with any union data inside the GetPlatformTransferError, using the provided InvalidRequestError
func (t *GetPlatformTransferError) MergeInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformNotEnabledError returns the union data inside the GetPlatformTransferError as a PlatformNotEnabledError
func (t GetPlatformTransferError) AsPlatformNotEnabledError() (PlatformNotEnabledError, error) {
	var body PlatformNotEnabledError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformNotEnabledError overwrites any union data inside the GetPlatformTransferError as the provided PlatformNotEnabledError
func (t *GetPlatformTransferError) FromPlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformNotEnabledError performs a merge with any union data inside the GetPlatformTransferError, using the provided PlatformNotEnabledError
func (t *GetPlatformTransferError) MergePlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformTransferNotFoundError returns the union data inside the GetPlatformTransferError as a PlatformTransferNotFoundError
func (t GetPlatformTransferError) AsPlatformTransferNotFoundError() (PlatformTransferNotFoundError, error) {
	var body PlatformTransferNotFoundError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformTransferNotFoundError overwrites any union data inside the GetPlatformTransferError as the provided PlatformTransferNotFoundError
func (t *GetPlatformTransferError) FromPlatformTransferNotFoundError(v PlatformTransferNotFoundError) error {
	v.Type = "PLATFORM_TRANSFER_NOT_FOUND"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformTransferNotFoundError performs a merge with any union data inside the GetPlatformTransferError, using the provided PlatformTransferNotFoundError
func (t *GetPlatformTransferError) MergePlatformTransferNotFoundError(v PlatformTransferNotFoundError) error {
	v.Type = "PLATFORM_TRANSFER_NOT_FOUND"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUnauthorizedError returns the union data inside the GetPlatformTransferError as a UnauthorizedError
func (t GetPlatformTransferError) AsUnauthorizedError() (UnauthorizedError, error) {
	var body UnauthorizedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUnauthorizedError overwrites any union data inside the GetPlatformTransferError as the provided UnauthorizedError
func (t *GetPlatformTransferError) FromUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUnauthorizedError performs a merge with any union data inside the GetPlatformTransferError, using the provided UnauthorizedError
func (t *GetPlatformTransferError) MergeUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t GetPlatformTransferError) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t GetPlatformTransferError) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "FORBIDDEN":
		return t.AsForbiddenError()
	case "INVALID_REQUEST":
		return t.AsInvalidRequestError()
	case "PLATFORM_NOT_ENABLED":
		return t.AsPlatformNotEnabledError()
	case "PLATFORM_TRANSFER_NOT_FOUND":
		return t.AsPlatformTransferNotFoundError()
	case "UNAUTHORIZED":
		return t.AsUnauthorizedError()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t GetPlatformTransferError) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *GetPlatformTransferError) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsForbiddenError returns the union data inside the GetPlatformTransferSummariesError as a ForbiddenError
func (t GetPlatformTransferSummariesError) AsForbiddenError() (ForbiddenError, error) {
	var body ForbiddenError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromForbiddenError overwrites any union data inside the GetPlatformTransferSummariesError as the provided ForbiddenError
func (t *GetPlatformTransferSummariesError) FromForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeForbiddenError performs a merge with any union data inside the GetPlatformTransferSummariesError, using the provided ForbiddenError
func (t *GetPlatformTransferSummariesError) MergeForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInvalidRequestError returns the union data inside the GetPlatformTransferSummariesError as a InvalidRequestError
func (t GetPlatformTransferSummariesError) AsInvalidRequestError() (InvalidRequestError, error) {
	var body InvalidRequestError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInvalidRequestError overwrites any union data inside the GetPlatformTransferSummariesError as the provided InvalidRequestError
func (t *GetPlatformTransferSummariesError) FromInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInvalidRequestError performs a merge with any union data inside the GetPlatformTransferSummariesError, using the provided InvalidRequestError
func (t *GetPlatformTransferSummariesError) MergeInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformNotEnabledError returns the union data inside the GetPlatformTransferSummariesError as a PlatformNotEnabledError
func (t GetPlatformTransferSummariesError) AsPlatformNotEnabledError() (PlatformNotEnabledError, error) {
	var body PlatformNotEnabledError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformNotEnabledError overwrites any union data inside the GetPlatformTransferSummariesError as the provided PlatformNotEnabledError
func (t *GetPlatformTransferSummariesError) FromPlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformNotEnabledError performs a merge with any union data inside the GetPlatformTransferSummariesError, using the provided PlatformNotEnabledError
func (t *GetPlatformTransferSummariesError) MergePlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUnauthorizedError returns the union data inside the GetPlatformTransferSummariesError as a UnauthorizedError
func (t GetPlatformTransferSummariesError) AsUnauthorizedError() (UnauthorizedError, error) {
	var body UnauthorizedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUnauthorizedError overwrites any union data inside the GetPlatformTransferSummariesError as the provided UnauthorizedError
func (t *GetPlatformTransferSummariesError) FromUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUnauthorizedError performs a merge with any union data inside the GetPlatformTransferSummariesError, using the provided UnauthorizedError
func (t *GetPlatformTransferSummariesError) MergeUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t GetPlatformTransferSummariesError) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t GetPlatformTransferSummariesError) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "FORBIDDEN":
		return t.AsForbiddenError()
	case "INVALID_REQUEST":
		return t.AsInvalidRequestError()
	case "PLATFORM_NOT_ENABLED":
		return t.AsPlatformNotEnabledError()
	case "UNAUTHORIZED":
		return t.AsUnauthorizedError()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t GetPlatformTransferSummariesError) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *GetPlatformTransferSummariesError) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsForbiddenError returns the union data inside the GetPromotionError as a ForbiddenError
func (t GetPromotionError) AsForbiddenError() (ForbiddenError, error) {
	var body ForbiddenError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromForbiddenError overwrites any union data inside the GetPromotionError as the provided ForbiddenError
func (t *GetPromotionError) FromForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeForbiddenError performs a merge with any union data inside the GetPromotionError, using the provided ForbiddenError
func (t *GetPromotionError) MergeForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInvalidRequestError returns the union data inside the GetPromotionError as a InvalidRequestError
func (t GetPromotionError) AsInvalidRequestError() (InvalidRequestError, error) {
	var body InvalidRequestError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInvalidRequestError overwrites any union data inside the GetPromotionError as the provided InvalidRequestError
func (t *GetPromotionError) FromInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInvalidRequestError performs a merge with any union data inside the GetPromotionError, using the provided InvalidRequestError
func (t *GetPromotionError) MergeInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPromotionNotFoundError returns the union data inside the GetPromotionError as a PromotionNotFoundError
func (t GetPromotionError) AsPromotionNotFoundError() (PromotionNotFoundError, error) {
	var body PromotionNotFoundError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPromotionNotFoundError overwrites any union data inside the GetPromotionError as the provided PromotionNotFoundError
func (t *GetPromotionError) FromPromotionNotFoundError(v PromotionNotFoundError) error {
	v.Type = "PROMOTION_NOT_FOUND"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePromotionNotFoundError performs a merge with any union data inside the GetPromotionError, using the provided PromotionNotFoundError
func (t *GetPromotionError) MergePromotionNotFoundError(v PromotionNotFoundError) error {
	v.Type = "PROMOTION_NOT_FOUND"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUnauthorizedError returns the union data inside the GetPromotionError as a UnauthorizedError
func (t GetPromotionError) AsUnauthorizedError() (UnauthorizedError, error) {
	var body UnauthorizedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUnauthorizedError overwrites any union data inside the GetPromotionError as the provided UnauthorizedError
func (t *GetPromotionError) FromUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUnauthorizedError performs a merge with any union data inside the GetPromotionError, using the provided UnauthorizedError
func (t *GetPromotionError) MergeUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t GetPromotionError) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t GetPromotionError) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "FORBIDDEN":
		return t.AsForbiddenError()
	case "INVALID_REQUEST":
		return t.AsInvalidRequestError()
	case "PROMOTION_NOT_FOUND":
		return t.AsPromotionNotFoundError()
	case "UNAUTHORIZED":
		return t.AsUnauthorizedError()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t GetPromotionError) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *GetPromotionError) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsFailedIdentityVerification returns the union data inside the IdentityVerification as a FailedIdentityVerification
func (t IdentityVerification) AsFailedIdentityVerification() (FailedIdentityVerification, error) {
	var body FailedIdentityVerification
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFailedIdentityVerification overwrites any union data inside the IdentityVerification as the provided FailedIdentityVerification
func (t *IdentityVerification) FromFailedIdentityVerification(v FailedIdentityVerification) error {
	v.Status = "FAILED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFailedIdentityVerification performs a merge with any union data inside the IdentityVerification, using the provided FailedIdentityVerification
func (t *IdentityVerification) MergeFailedIdentityVerification(v FailedIdentityVerification) error {
	v.Status = "FAILED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsReadyIdentityVerification returns the union data inside the IdentityVerification as a ReadyIdentityVerification
func (t IdentityVerification) AsReadyIdentityVerification() (ReadyIdentityVerification, error) {
	var body ReadyIdentityVerification
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromReadyIdentityVerification overwrites any union data inside the IdentityVerification as the provided ReadyIdentityVerification
func (t *IdentityVerification) FromReadyIdentityVerification(v ReadyIdentityVerification) error {
	v.Status = "READY"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeReadyIdentityVerification performs a merge with any union data inside the IdentityVerification, using the provided ReadyIdentityVerification
func (t *IdentityVerification) MergeReadyIdentityVerification(v ReadyIdentityVerification) error {
	v.Status = "READY"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsVerifiedIdentityVerification returns the union data inside the IdentityVerification as a VerifiedIdentityVerification
func (t IdentityVerification) AsVerifiedIdentityVerification() (VerifiedIdentityVerification, error) {
	var body VerifiedIdentityVerification
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVerifiedIdentityVerification overwrites any union data inside the IdentityVerification as the provided VerifiedIdentityVerification
func (t *IdentityVerification) FromVerifiedIdentityVerification(v VerifiedIdentityVerification) error {
	v.Status = "VERIFIED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVerifiedIdentityVerification performs a merge with any union data inside the IdentityVerification, using the provided VerifiedIdentityVerification
func (t *IdentityVerification) MergeVerifiedIdentityVerification(v VerifiedIdentityVerification) error {
	v.Status = "VERIFIED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t IdentityVerification) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"status"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t IdentityVerification) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "FAILED":
		return t.AsFailedIdentityVerification()
	case "READY":
		return t.AsReadyIdentityVerification()
	case "VERIFIED":
		return t.AsVerifiedIdentityVerification()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t IdentityVerification) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *IdentityVerification) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsChannelNotFoundError returns the union data inside the IssueBillingKeyError as a ChannelNotFoundError
func (t IssueBillingKeyError) AsChannelNotFoundError() (ChannelNotFoundError, error) {
	var body ChannelNotFoundError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromChannelNotFoundError overwrites any union data inside the IssueBillingKeyError as the provided ChannelNotFoundError
func (t *IssueBillingKeyError) FromChannelNotFoundError(v ChannelNotFoundError) error {
	v.Type = "CHANNEL_NOT_FOUND"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeChannelNotFoundError performs a merge with any union data inside the IssueBillingKeyError, using the provided ChannelNotFoundError
func (t *IssueBillingKeyError) MergeChannelNotFoundError(v ChannelNotFoundError) error {
	v.Type = "CHANNEL_NOT_FOUND"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsChannelSpecificError returns the union data inside the IssueBillingKeyError as a ChannelSpecificError
func (t IssueBillingKeyError) AsChannelSpecificError() (ChannelSpecificError, error) {
	var body ChannelSpecificError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromChannelSpecificError overwrites any union data inside the IssueBillingKeyError as the provided ChannelSpecificError
func (t *IssueBillingKeyError) FromChannelSpecificError(v ChannelSpecificError) error {
	v.Type = "CHANNEL_SPECIFIC"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeChannelSpecificError performs a merge with any union data inside the IssueBillingKeyError, using the provided ChannelSpecificError
func (t *IssueBillingKeyError) MergeChannelSpecificError(v ChannelSpecificError) error {
	v.Type = "CHANNEL_SPECIFIC"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsForbiddenError returns the union data inside the IssueBillingKeyError as a ForbiddenError
func (t IssueBillingKeyError) AsForbiddenError() (ForbiddenError, error) {
	var body ForbiddenError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromForbiddenError overwrites any union data inside the IssueBillingKeyError as the provided ForbiddenError
func (t *IssueBillingKeyError) FromForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeForbiddenError performs a merge with any union data inside the IssueBillingKeyError, using the provided ForbiddenError
func (t *IssueBillingKeyError) MergeForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInvalidRequestError returns the union data inside the IssueBillingKeyError as a InvalidRequestError
func (t IssueBillingKeyError) AsInvalidRequestError() (InvalidRequestError, error) {
	var body InvalidRequestError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInvalidRequestError overwrites any union data inside the IssueBillingKeyError as the provided InvalidRequestError
func (t *IssueBillingKeyError) FromInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInvalidRequestError performs a merge with any union data inside the IssueBillingKeyError, using the provided InvalidRequestError
func (t *IssueBillingKeyError) MergeInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPgProviderError returns the union data inside the IssueBillingKeyError as a PgProviderError
func (t IssueBillingKeyError) AsPgProviderError() (PgProviderError, error) {
	var body PgProviderError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPgProviderError overwrites any union data inside the IssueBillingKeyError as the provided PgProviderError
func (t *IssueBillingKeyError) FromPgProviderError(v PgProviderError) error {
	v.Type = "PG_PROVIDER"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePgProviderError performs a merge with any union data inside the IssueBillingKeyError, using the provided PgProviderError
func (t *IssueBillingKeyError) MergePgProviderError(v PgProviderError) error {
	v.Type = "PG_PROVIDER"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUnauthorizedError returns the union data inside the IssueBillingKeyError as a UnauthorizedError
func (t IssueBillingKeyError) AsUnauthorizedError() (UnauthorizedError, error) {
	var body UnauthorizedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUnauthorizedError overwrites any union data inside the IssueBillingKeyError as the provided UnauthorizedError
func (t *IssueBillingKeyError) FromUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUnauthorizedError performs a merge with any union data inside the IssueBillingKeyError, using the provided UnauthorizedError
func (t *IssueBillingKeyError) MergeUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t IssueBillingKeyError) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t IssueBillingKeyError) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "CHANNEL_NOT_FOUND":
		return t.AsChannelNotFoundError()
	case "CHANNEL_SPECIFIC":
		return t.AsChannelSpecificError()
	case "FORBIDDEN":
		return t.AsForbiddenError()
	case "INVALID_REQUEST":
		return t.AsInvalidRequestError()
	case "PG_PROVIDER":
		return t.AsPgProviderError()
	case "UNAUTHORIZED":
		return t.AsUnauthorizedError()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t IssueBillingKeyError) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *IssueBillingKeyError) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsCashReceiptAlreadyIssuedError returns the union data inside the IssueCashReceiptError as a CashReceiptAlreadyIssuedError
func (t IssueCashReceiptError) AsCashReceiptAlreadyIssuedError() (CashReceiptAlreadyIssuedError, error) {
	var body CashReceiptAlreadyIssuedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCashReceiptAlreadyIssuedError overwrites any union data inside the IssueCashReceiptError as the provided CashReceiptAlreadyIssuedError
func (t *IssueCashReceiptError) FromCashReceiptAlreadyIssuedError(v CashReceiptAlreadyIssuedError) error {
	v.Type = "CASH_RECEIPT_ALREADY_ISSUED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCashReceiptAlreadyIssuedError performs a merge with any union data inside the IssueCashReceiptError, using the provided CashReceiptAlreadyIssuedError
func (t *IssueCashReceiptError) MergeCashReceiptAlreadyIssuedError(v CashReceiptAlreadyIssuedError) error {
	v.Type = "CASH_RECEIPT_ALREADY_ISSUED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsChannelNotFoundError returns the union data inside the IssueCashReceiptError as a ChannelNotFoundError
func (t IssueCashReceiptError) AsChannelNotFoundError() (ChannelNotFoundError, error) {
	var body ChannelNotFoundError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromChannelNotFoundError overwrites any union data inside the IssueCashReceiptError as the provided ChannelNotFoundError
func (t *IssueCashReceiptError) FromChannelNotFoundError(v ChannelNotFoundError) error {
	v.Type = "CHANNEL_NOT_FOUND"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeChannelNotFoundError performs a merge with any union data inside the IssueCashReceiptError, using the provided ChannelNotFoundError
func (t *IssueCashReceiptError) MergeChannelNotFoundError(v ChannelNotFoundError) error {
	v.Type = "CHANNEL_NOT_FOUND"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsForbiddenError returns the union data inside the IssueCashReceiptError as a ForbiddenError
func (t IssueCashReceiptError) AsForbiddenError() (ForbiddenError, error) {
	var body ForbiddenError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromForbiddenError overwrites any union data inside the IssueCashReceiptError as the provided ForbiddenError
func (t *IssueCashReceiptError) FromForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeForbiddenError performs a merge with any union data inside the IssueCashReceiptError, using the provided ForbiddenError
func (t *IssueCashReceiptError) MergeForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInvalidRequestError returns the union data inside the IssueCashReceiptError as a InvalidRequestError
func (t IssueCashReceiptError) AsInvalidRequestError() (InvalidRequestError, error) {
	var body InvalidRequestError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInvalidRequestError overwrites any union data inside the IssueCashReceiptError as the provided InvalidRequestError
func (t *IssueCashReceiptError) FromInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInvalidRequestError performs a merge with any union data inside the IssueCashReceiptError, using the provided InvalidRequestError
func (t *IssueCashReceiptError) MergeInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPgProviderError returns the union data inside the IssueCashReceiptError as a PgProviderError
func (t IssueCashReceiptError) AsPgProviderError() (PgProviderError, error) {
	var body PgProviderError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPgProviderError overwrites any union data inside the IssueCashReceiptError as the provided PgProviderError
func (t *IssueCashReceiptError) FromPgProviderError(v PgProviderError) error {
	v.Type = "PG_PROVIDER"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePgProviderError performs a merge with any union data inside the IssueCashReceiptError, using the provided PgProviderError
func (t *IssueCashReceiptError) MergePgProviderError(v PgProviderError) error {
	v.Type = "PG_PROVIDER"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUnauthorizedError returns the union data inside the IssueCashReceiptError as a UnauthorizedError
func (t IssueCashReceiptError) AsUnauthorizedError() (UnauthorizedError, error) {
	var body UnauthorizedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUnauthorizedError overwrites any union data inside the IssueCashReceiptError as the provided UnauthorizedError
func (t *IssueCashReceiptError) FromUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUnauthorizedError performs a merge with any union data inside the IssueCashReceiptError, using the provided UnauthorizedError
func (t *IssueCashReceiptError) MergeUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t IssueCashReceiptError) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t IssueCashReceiptError) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "CASH_RECEIPT_ALREADY_ISSUED":
		return t.AsCashReceiptAlreadyIssuedError()
	case "CHANNEL_NOT_FOUND":
		return t.AsChannelNotFoundError()
	case "FORBIDDEN":
		return t.AsForbiddenError()
	case "INVALID_REQUEST":
		return t.AsInvalidRequestError()
	case "PG_PROVIDER":
		return t.AsPgProviderError()
	case "UNAUTHORIZED":
		return t.AsUnauthorizedError()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t IssueCashReceiptError) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *IssueCashReceiptError) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsInvalidRequestError returns the union data inside the LoginViaApiSecretError as a InvalidRequestError
func (t LoginViaApiSecretError) AsInvalidRequestError() (InvalidRequestError, error) {
	var body InvalidRequestError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInvalidRequestError overwrites any union data inside the LoginViaApiSecretError as the provided InvalidRequestError
func (t *LoginViaApiSecretError) FromInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInvalidRequestError performs a merge with any union data inside the LoginViaApiSecretError, using the provided InvalidRequestError
func (t *LoginViaApiSecretError) MergeInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUnauthorizedError returns the union data inside the LoginViaApiSecretError as a UnauthorizedError
func (t LoginViaApiSecretError) AsUnauthorizedError() (UnauthorizedError, error) {
	var body UnauthorizedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUnauthorizedError overwrites any union data inside the LoginViaApiSecretError as the provided UnauthorizedError
func (t *LoginViaApiSecretError) FromUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUnauthorizedError performs a merge with any union data inside the LoginViaApiSecretError, using the provided UnauthorizedError
func (t *LoginViaApiSecretError) MergeUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t LoginViaApiSecretError) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t LoginViaApiSecretError) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "INVALID_REQUEST":
		return t.AsInvalidRequestError()
	case "UNAUTHORIZED":
		return t.AsUnauthorizedError()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t LoginViaApiSecretError) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *LoginViaApiSecretError) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsForbiddenError returns the union data inside the ModifyEscrowLogisticsError as a ForbiddenError
func (t ModifyEscrowLogisticsError) AsForbiddenError() (ForbiddenError, error) {
	var body ForbiddenError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromForbiddenError overwrites any union data inside the ModifyEscrowLogisticsError as the provided ForbiddenError
func (t *ModifyEscrowLogisticsError) FromForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeForbiddenError performs a merge with any union data inside the ModifyEscrowLogisticsError, using the provided ForbiddenError
func (t *ModifyEscrowLogisticsError) MergeForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInvalidRequestError returns the union data inside the ModifyEscrowLogisticsError as a InvalidRequestError
func (t ModifyEscrowLogisticsError) AsInvalidRequestError() (InvalidRequestError, error) {
	var body InvalidRequestError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInvalidRequestError overwrites any union data inside the ModifyEscrowLogisticsError as the provided InvalidRequestError
func (t *ModifyEscrowLogisticsError) FromInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInvalidRequestError performs a merge with any union data inside the ModifyEscrowLogisticsError, using the provided InvalidRequestError
func (t *ModifyEscrowLogisticsError) MergeInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPaymentNotFoundError returns the union data inside the ModifyEscrowLogisticsError as a PaymentNotFoundError
func (t ModifyEscrowLogisticsError) AsPaymentNotFoundError() (PaymentNotFoundError, error) {
	var body PaymentNotFoundError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPaymentNotFoundError overwrites any union data inside the ModifyEscrowLogisticsError as the provided PaymentNotFoundError
func (t *ModifyEscrowLogisticsError) FromPaymentNotFoundError(v PaymentNotFoundError) error {
	v.Type = "PAYMENT_NOT_FOUND"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePaymentNotFoundError performs a merge with any union data inside the ModifyEscrowLogisticsError, using the provided PaymentNotFoundError
func (t *ModifyEscrowLogisticsError) MergePaymentNotFoundError(v PaymentNotFoundError) error {
	v.Type = "PAYMENT_NOT_FOUND"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPaymentNotPaidError returns the union data inside the ModifyEscrowLogisticsError as a PaymentNotPaidError
func (t ModifyEscrowLogisticsError) AsPaymentNotPaidError() (PaymentNotPaidError, error) {
	var body PaymentNotPaidError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPaymentNotPaidError overwrites any union data inside the ModifyEscrowLogisticsError as the provided PaymentNotPaidError
func (t *ModifyEscrowLogisticsError) FromPaymentNotPaidError(v PaymentNotPaidError) error {
	v.Type = "PAYMENT_NOT_PAID"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePaymentNotPaidError performs a merge with any union data inside the ModifyEscrowLogisticsError, using the provided PaymentNotPaidError
func (t *ModifyEscrowLogisticsError) MergePaymentNotPaidError(v PaymentNotPaidError) error {
	v.Type = "PAYMENT_NOT_PAID"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPgProviderError returns the union data inside the ModifyEscrowLogisticsError as a PgProviderError
func (t ModifyEscrowLogisticsError) AsPgProviderError() (PgProviderError, error) {
	var body PgProviderError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPgProviderError overwrites any union data inside the ModifyEscrowLogisticsError as the provided PgProviderError
func (t *ModifyEscrowLogisticsError) FromPgProviderError(v PgProviderError) error {
	v.Type = "PG_PROVIDER"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePgProviderError performs a merge with any union data inside the ModifyEscrowLogisticsError, using the provided PgProviderError
func (t *ModifyEscrowLogisticsError) MergePgProviderError(v PgProviderError) error {
	v.Type = "PG_PROVIDER"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUnauthorizedError returns the union data inside the ModifyEscrowLogisticsError as a UnauthorizedError
func (t ModifyEscrowLogisticsError) AsUnauthorizedError() (UnauthorizedError, error) {
	var body UnauthorizedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUnauthorizedError overwrites any union data inside the ModifyEscrowLogisticsError as the provided UnauthorizedError
func (t *ModifyEscrowLogisticsError) FromUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUnauthorizedError performs a merge with any union data inside the ModifyEscrowLogisticsError, using the provided UnauthorizedError
func (t *ModifyEscrowLogisticsError) MergeUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ModifyEscrowLogisticsError) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t ModifyEscrowLogisticsError) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "FORBIDDEN":
		return t.AsForbiddenError()
	case "INVALID_REQUEST":
		return t.AsInvalidRequestError()
	case "PAYMENT_NOT_FOUND":
		return t.AsPaymentNotFoundError()
	case "PAYMENT_NOT_PAID":
		return t.AsPaymentNotPaidError()
	case "PG_PROVIDER":
		return t.AsPgProviderError()
	case "UNAUTHORIZED":
		return t.AsUnauthorizedError()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t ModifyEscrowLogisticsError) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ModifyEscrowLogisticsError) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsAlreadyPaidError returns the union data inside the PayInstantlyError as a AlreadyPaidError
func (t PayInstantlyError) AsAlreadyPaidError() (AlreadyPaidError, error) {
	var body AlreadyPaidError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAlreadyPaidError overwrites any union data inside the PayInstantlyError as the provided AlreadyPaidError
func (t *PayInstantlyError) FromAlreadyPaidError(v AlreadyPaidError) error {
	v.Type = "ALREADY_PAID"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAlreadyPaidError performs a merge with any union data inside the PayInstantlyError, using the provided AlreadyPaidError
func (t *PayInstantlyError) MergeAlreadyPaidError(v AlreadyPaidError) error {
	v.Type = "ALREADY_PAID"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsChannelNotFoundError returns the union data inside the PayInstantlyError as a ChannelNotFoundError
func (t PayInstantlyError) AsChannelNotFoundError() (ChannelNotFoundError, error) {
	var body ChannelNotFoundError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromChannelNotFoundError overwrites any union data inside the PayInstantlyError as the provided ChannelNotFoundError
func (t *PayInstantlyError) FromChannelNotFoundError(v ChannelNotFoundError) error {
	v.Type = "CHANNEL_NOT_FOUND"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeChannelNotFoundError performs a merge with any union data inside the PayInstantlyError, using the provided ChannelNotFoundError
func (t *PayInstantlyError) MergeChannelNotFoundError(v ChannelNotFoundError) error {
	v.Type = "CHANNEL_NOT_FOUND"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDiscountAmountExceedsTotalAmountError returns the union data inside the PayInstantlyError as a DiscountAmountExceedsTotalAmountError
func (t PayInstantlyError) AsDiscountAmountExceedsTotalAmountError() (DiscountAmountExceedsTotalAmountError, error) {
	var body DiscountAmountExceedsTotalAmountError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDiscountAmountExceedsTotalAmountError overwrites any union data inside the PayInstantlyError as the provided DiscountAmountExceedsTotalAmountError
func (t *PayInstantlyError) FromDiscountAmountExceedsTotalAmountError(v DiscountAmountExceedsTotalAmountError) error {
	v.Type = "DISCOUNT_AMOUNT_EXCEEDS_TOTAL_AMOUNT"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDiscountAmountExceedsTotalAmountError performs a merge with any union data inside the PayInstantlyError, using the provided DiscountAmountExceedsTotalAmountError
func (t *PayInstantlyError) MergeDiscountAmountExceedsTotalAmountError(v DiscountAmountExceedsTotalAmountError) error {
	v.Type = "DISCOUNT_AMOUNT_EXCEEDS_TOTAL_AMOUNT"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsForbiddenError returns the union data inside the PayInstantlyError as a ForbiddenError
func (t PayInstantlyError) AsForbiddenError() (ForbiddenError, error) {
	var body ForbiddenError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromForbiddenError overwrites any union data inside the PayInstantlyError as the provided ForbiddenError
func (t *PayInstantlyError) FromForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeForbiddenError performs a merge with any union data inside the PayInstantlyError, using the provided ForbiddenError
func (t *PayInstantlyError) MergeForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInvalidRequestError returns the union data inside the PayInstantlyError as a InvalidRequestError
func (t PayInstantlyError) AsInvalidRequestError() (InvalidRequestError, error) {
	var body InvalidRequestError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInvalidRequestError overwrites any union data inside the PayInstantlyError as the provided InvalidRequestError
func (t *PayInstantlyError) FromInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInvalidRequestError performs a merge with any union data inside the PayInstantlyError, using the provided InvalidRequestError
func (t *PayInstantlyError) MergeInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsMaxTransactionCountReachedError returns the union data inside the PayInstantlyError as a MaxTransactionCountReachedError
func (t PayInstantlyError) AsMaxTransactionCountReachedError() (MaxTransactionCountReachedError, error) {
	var body MaxTransactionCountReachedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMaxTransactionCountReachedError overwrites any union data inside the PayInstantlyError as the provided MaxTransactionCountReachedError
func (t *PayInstantlyError) FromMaxTransactionCountReachedError(v MaxTransactionCountReachedError) error {
	v.Type = "MAX_TRANSACTION_COUNT_REACHED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMaxTransactionCountReachedError performs a merge with any union data inside the PayInstantlyError, using the provided MaxTransactionCountReachedError
func (t *PayInstantlyError) MergeMaxTransactionCountReachedError(v MaxTransactionCountReachedError) error {
	v.Type = "MAX_TRANSACTION_COUNT_REACHED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPaymentScheduleAlreadyExistsError returns the union data inside the PayInstantlyError as a PaymentScheduleAlreadyExistsError
func (t PayInstantlyError) AsPaymentScheduleAlreadyExistsError() (PaymentScheduleAlreadyExistsError, error) {
	var body PaymentScheduleAlreadyExistsError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPaymentScheduleAlreadyExistsError overwrites any union data inside the PayInstantlyError as the provided PaymentScheduleAlreadyExistsError
func (t *PayInstantlyError) FromPaymentScheduleAlreadyExistsError(v PaymentScheduleAlreadyExistsError) error {
	v.Type = "PAYMENT_SCHEDULE_ALREADY_EXISTS"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePaymentScheduleAlreadyExistsError performs a merge with any union data inside the PayInstantlyError, using the provided PaymentScheduleAlreadyExistsError
func (t *PayInstantlyError) MergePaymentScheduleAlreadyExistsError(v PaymentScheduleAlreadyExistsError) error {
	v.Type = "PAYMENT_SCHEDULE_ALREADY_EXISTS"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPgProviderError returns the union data inside the PayInstantlyError as a PgProviderError
func (t PayInstantlyError) AsPgProviderError() (PgProviderError, error) {
	var body PgProviderError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPgProviderError overwrites any union data inside the PayInstantlyError as the provided PgProviderError
func (t *PayInstantlyError) FromPgProviderError(v PgProviderError) error {
	v.Type = "PG_PROVIDER"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePgProviderError performs a merge with any union data inside the PayInstantlyError, using the provided PgProviderError
func (t *PayInstantlyError) MergePgProviderError(v PgProviderError) error {
	v.Type = "PG_PROVIDER"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPromotionPayMethodDoesNotMatchError returns the union data inside the PayInstantlyError as a PromotionPayMethodDoesNotMatchError
func (t PayInstantlyError) AsPromotionPayMethodDoesNotMatchError() (PromotionPayMethodDoesNotMatchError, error) {
	var body PromotionPayMethodDoesNotMatchError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPromotionPayMethodDoesNotMatchError overwrites any union data inside the PayInstantlyError as the provided PromotionPayMethodDoesNotMatchError
func (t *PayInstantlyError) FromPromotionPayMethodDoesNotMatchError(v PromotionPayMethodDoesNotMatchError) error {
	v.Type = "PROMOTION_PAY_METHOD_DOES_NOT_MATCH"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePromotionPayMethodDoesNotMatchError performs a merge with any union data inside the PayInstantlyError, using the provided PromotionPayMethodDoesNotMatchError
func (t *PayInstantlyError) MergePromotionPayMethodDoesNotMatchError(v PromotionPayMethodDoesNotMatchError) error {
	v.Type = "PROMOTION_PAY_METHOD_DOES_NOT_MATCH"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSumOfPartsExceedsTotalAmountError returns the union data inside the PayInstantlyError as a SumOfPartsExceedsTotalAmountError
func (t PayInstantlyError) AsSumOfPartsExceedsTotalAmountError() (SumOfPartsExceedsTotalAmountError, error) {
	var body SumOfPartsExceedsTotalAmountError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSumOfPartsExceedsTotalAmountError overwrites any union data inside the PayInstantlyError as the provided SumOfPartsExceedsTotalAmountError
func (t *PayInstantlyError) FromSumOfPartsExceedsTotalAmountError(v SumOfPartsExceedsTotalAmountError) error {
	v.Type = "SUM_OF_PARTS_EXCEEDS_TOTAL_AMOUNT"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSumOfPartsExceedsTotalAmountError performs a merge with any union data inside the PayInstantlyError, using the provided SumOfPartsExceedsTotalAmountError
func (t *PayInstantlyError) MergeSumOfPartsExceedsTotalAmountError(v SumOfPartsExceedsTotalAmountError) error {
	v.Type = "SUM_OF_PARTS_EXCEEDS_TOTAL_AMOUNT"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUnauthorizedError returns the union data inside the PayInstantlyError as a UnauthorizedError
func (t PayInstantlyError) AsUnauthorizedError() (UnauthorizedError, error) {
	var body UnauthorizedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUnauthorizedError overwrites any union data inside the PayInstantlyError as the provided UnauthorizedError
func (t *PayInstantlyError) FromUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUnauthorizedError performs a merge with any union data inside the PayInstantlyError, using the provided UnauthorizedError
func (t *PayInstantlyError) MergeUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PayInstantlyError) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t PayInstantlyError) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "ALREADY_PAID":
		return t.AsAlreadyPaidError()
	case "CHANNEL_NOT_FOUND":
		return t.AsChannelNotFoundError()
	case "DISCOUNT_AMOUNT_EXCEEDS_TOTAL_AMOUNT":
		return t.AsDiscountAmountExceedsTotalAmountError()
	case "FORBIDDEN":
		return t.AsForbiddenError()
	case "INVALID_REQUEST":
		return t.AsInvalidRequestError()
	case "MAX_TRANSACTION_COUNT_REACHED":
		return t.AsMaxTransactionCountReachedError()
	case "PAYMENT_SCHEDULE_ALREADY_EXISTS":
		return t.AsPaymentScheduleAlreadyExistsError()
	case "PG_PROVIDER":
		return t.AsPgProviderError()
	case "PROMOTION_PAY_METHOD_DOES_NOT_MATCH":
		return t.AsPromotionPayMethodDoesNotMatchError()
	case "SUM_OF_PARTS_EXCEEDS_TOTAL_AMOUNT":
		return t.AsSumOfPartsExceedsTotalAmountError()
	case "UNAUTHORIZED":
		return t.AsUnauthorizedError()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t PayInstantlyError) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PayInstantlyError) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsAlreadyPaidError returns the union data inside the PayWithBillingKeyError as a AlreadyPaidError
func (t PayWithBillingKeyError) AsAlreadyPaidError() (AlreadyPaidError, error) {
	var body AlreadyPaidError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAlreadyPaidError overwrites any union data inside the PayWithBillingKeyError as the provided AlreadyPaidError
func (t *PayWithBillingKeyError) FromAlreadyPaidError(v AlreadyPaidError) error {
	v.Type = "ALREADY_PAID"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAlreadyPaidError performs a merge with any union data inside the PayWithBillingKeyError, using the provided AlreadyPaidError
func (t *PayWithBillingKeyError) MergeAlreadyPaidError(v AlreadyPaidError) error {
	v.Type = "ALREADY_PAID"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsBillingKeyAlreadyDeletedError returns the union data inside the PayWithBillingKeyError as a BillingKeyAlreadyDeletedError
func (t PayWithBillingKeyError) AsBillingKeyAlreadyDeletedError() (BillingKeyAlreadyDeletedError, error) {
	var body BillingKeyAlreadyDeletedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBillingKeyAlreadyDeletedError overwrites any union data inside the PayWithBillingKeyError as the provided BillingKeyAlreadyDeletedError
func (t *PayWithBillingKeyError) FromBillingKeyAlreadyDeletedError(v BillingKeyAlreadyDeletedError) error {
	v.Type = "BILLING_KEY_ALREADY_DELETED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBillingKeyAlreadyDeletedError performs a merge with any union data inside the PayWithBillingKeyError, using the provided BillingKeyAlreadyDeletedError
func (t *PayWithBillingKeyError) MergeBillingKeyAlreadyDeletedError(v BillingKeyAlreadyDeletedError) error {
	v.Type = "BILLING_KEY_ALREADY_DELETED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsBillingKeyNotFoundError returns the union data inside the PayWithBillingKeyError as a BillingKeyNotFoundError
func (t PayWithBillingKeyError) AsBillingKeyNotFoundError() (BillingKeyNotFoundError, error) {
	var body BillingKeyNotFoundError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBillingKeyNotFoundError overwrites any union data inside the PayWithBillingKeyError as the provided BillingKeyNotFoundError
func (t *PayWithBillingKeyError) FromBillingKeyNotFoundError(v BillingKeyNotFoundError) error {
	v.Type = "BILLING_KEY_NOT_FOUND"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBillingKeyNotFoundError performs a merge with any union data inside the PayWithBillingKeyError, using the provided BillingKeyNotFoundError
func (t *PayWithBillingKeyError) MergeBillingKeyNotFoundError(v BillingKeyNotFoundError) error {
	v.Type = "BILLING_KEY_NOT_FOUND"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsChannelNotFoundError returns the union data inside the PayWithBillingKeyError as a ChannelNotFoundError
func (t PayWithBillingKeyError) AsChannelNotFoundError() (ChannelNotFoundError, error) {
	var body ChannelNotFoundError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromChannelNotFoundError overwrites any union data inside the PayWithBillingKeyError as the provided ChannelNotFoundError
func (t *PayWithBillingKeyError) FromChannelNotFoundError(v ChannelNotFoundError) error {
	v.Type = "CHANNEL_NOT_FOUND"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeChannelNotFoundError performs a merge with any union data inside the PayWithBillingKeyError, using the provided ChannelNotFoundError
func (t *PayWithBillingKeyError) MergeChannelNotFoundError(v ChannelNotFoundError) error {
	v.Type = "CHANNEL_NOT_FOUND"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDiscountAmountExceedsTotalAmountError returns the union data inside the PayWithBillingKeyError as a DiscountAmountExceedsTotalAmountError
func (t PayWithBillingKeyError) AsDiscountAmountExceedsTotalAmountError() (DiscountAmountExceedsTotalAmountError, error) {
	var body DiscountAmountExceedsTotalAmountError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDiscountAmountExceedsTotalAmountError overwrites any union data inside the PayWithBillingKeyError as the provided DiscountAmountExceedsTotalAmountError
func (t *PayWithBillingKeyError) FromDiscountAmountExceedsTotalAmountError(v DiscountAmountExceedsTotalAmountError) error {
	v.Type = "DISCOUNT_AMOUNT_EXCEEDS_TOTAL_AMOUNT"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDiscountAmountExceedsTotalAmountError performs a merge with any union data inside the PayWithBillingKeyError, using the provided DiscountAmountExceedsTotalAmountError
func (t *PayWithBillingKeyError) MergeDiscountAmountExceedsTotalAmountError(v DiscountAmountExceedsTotalAmountError) error {
	v.Type = "DISCOUNT_AMOUNT_EXCEEDS_TOTAL_AMOUNT"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsForbiddenError returns the union data inside the PayWithBillingKeyError as a ForbiddenError
func (t PayWithBillingKeyError) AsForbiddenError() (ForbiddenError, error) {
	var body ForbiddenError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromForbiddenError overwrites any union data inside the PayWithBillingKeyError as the provided ForbiddenError
func (t *PayWithBillingKeyError) FromForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeForbiddenError performs a merge with any union data inside the PayWithBillingKeyError, using the provided ForbiddenError
func (t *PayWithBillingKeyError) MergeForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInvalidRequestError returns the union data inside the PayWithBillingKeyError as a InvalidRequestError
func (t PayWithBillingKeyError) AsInvalidRequestError() (InvalidRequestError, error) {
	var body InvalidRequestError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInvalidRequestError overwrites any union data inside the PayWithBillingKeyError as the provided InvalidRequestError
func (t *PayWithBillingKeyError) FromInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInvalidRequestError performs a merge with any union data inside the PayWithBillingKeyError, using the provided InvalidRequestError
func (t *PayWithBillingKeyError) MergeInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsMaxTransactionCountReachedError returns the union data inside the PayWithBillingKeyError as a MaxTransactionCountReachedError
func (t PayWithBillingKeyError) AsMaxTransactionCountReachedError() (MaxTransactionCountReachedError, error) {
	var body MaxTransactionCountReachedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMaxTransactionCountReachedError overwrites any union data inside the PayWithBillingKeyError as the provided MaxTransactionCountReachedError
func (t *PayWithBillingKeyError) FromMaxTransactionCountReachedError(v MaxTransactionCountReachedError) error {
	v.Type = "MAX_TRANSACTION_COUNT_REACHED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMaxTransactionCountReachedError performs a merge with any union data inside the PayWithBillingKeyError, using the provided MaxTransactionCountReachedError
func (t *PayWithBillingKeyError) MergeMaxTransactionCountReachedError(v MaxTransactionCountReachedError) error {
	v.Type = "MAX_TRANSACTION_COUNT_REACHED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPaymentScheduleAlreadyExistsError returns the union data inside the PayWithBillingKeyError as a PaymentScheduleAlreadyExistsError
func (t PayWithBillingKeyError) AsPaymentScheduleAlreadyExistsError() (PaymentScheduleAlreadyExistsError, error) {
	var body PaymentScheduleAlreadyExistsError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPaymentScheduleAlreadyExistsError overwrites any union data inside the PayWithBillingKeyError as the provided PaymentScheduleAlreadyExistsError
func (t *PayWithBillingKeyError) FromPaymentScheduleAlreadyExistsError(v PaymentScheduleAlreadyExistsError) error {
	v.Type = "PAYMENT_SCHEDULE_ALREADY_EXISTS"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePaymentScheduleAlreadyExistsError performs a merge with any union data inside the PayWithBillingKeyError, using the provided PaymentScheduleAlreadyExistsError
func (t *PayWithBillingKeyError) MergePaymentScheduleAlreadyExistsError(v PaymentScheduleAlreadyExistsError) error {
	v.Type = "PAYMENT_SCHEDULE_ALREADY_EXISTS"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPgProviderError returns the union data inside the PayWithBillingKeyError as a PgProviderError
func (t PayWithBillingKeyError) AsPgProviderError() (PgProviderError, error) {
	var body PgProviderError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPgProviderError overwrites any union data inside the PayWithBillingKeyError as the provided PgProviderError
func (t *PayWithBillingKeyError) FromPgProviderError(v PgProviderError) error {
	v.Type = "PG_PROVIDER"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePgProviderError performs a merge with any union data inside the PayWithBillingKeyError, using the provided PgProviderError
func (t *PayWithBillingKeyError) MergePgProviderError(v PgProviderError) error {
	v.Type = "PG_PROVIDER"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPromotionPayMethodDoesNotMatchError returns the union data inside the PayWithBillingKeyError as a PromotionPayMethodDoesNotMatchError
func (t PayWithBillingKeyError) AsPromotionPayMethodDoesNotMatchError() (PromotionPayMethodDoesNotMatchError, error) {
	var body PromotionPayMethodDoesNotMatchError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPromotionPayMethodDoesNotMatchError overwrites any union data inside the PayWithBillingKeyError as the provided PromotionPayMethodDoesNotMatchError
func (t *PayWithBillingKeyError) FromPromotionPayMethodDoesNotMatchError(v PromotionPayMethodDoesNotMatchError) error {
	v.Type = "PROMOTION_PAY_METHOD_DOES_NOT_MATCH"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePromotionPayMethodDoesNotMatchError performs a merge with any union data inside the PayWithBillingKeyError, using the provided PromotionPayMethodDoesNotMatchError
func (t *PayWithBillingKeyError) MergePromotionPayMethodDoesNotMatchError(v PromotionPayMethodDoesNotMatchError) error {
	v.Type = "PROMOTION_PAY_METHOD_DOES_NOT_MATCH"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSumOfPartsExceedsTotalAmountError returns the union data inside the PayWithBillingKeyError as a SumOfPartsExceedsTotalAmountError
func (t PayWithBillingKeyError) AsSumOfPartsExceedsTotalAmountError() (SumOfPartsExceedsTotalAmountError, error) {
	var body SumOfPartsExceedsTotalAmountError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSumOfPartsExceedsTotalAmountError overwrites any union data inside the PayWithBillingKeyError as the provided SumOfPartsExceedsTotalAmountError
func (t *PayWithBillingKeyError) FromSumOfPartsExceedsTotalAmountError(v SumOfPartsExceedsTotalAmountError) error {
	v.Type = "SUM_OF_PARTS_EXCEEDS_TOTAL_AMOUNT"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSumOfPartsExceedsTotalAmountError performs a merge with any union data inside the PayWithBillingKeyError, using the provided SumOfPartsExceedsTotalAmountError
func (t *PayWithBillingKeyError) MergeSumOfPartsExceedsTotalAmountError(v SumOfPartsExceedsTotalAmountError) error {
	v.Type = "SUM_OF_PARTS_EXCEEDS_TOTAL_AMOUNT"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUnauthorizedError returns the union data inside the PayWithBillingKeyError as a UnauthorizedError
func (t PayWithBillingKeyError) AsUnauthorizedError() (UnauthorizedError, error) {
	var body UnauthorizedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUnauthorizedError overwrites any union data inside the PayWithBillingKeyError as the provided UnauthorizedError
func (t *PayWithBillingKeyError) FromUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUnauthorizedError performs a merge with any union data inside the PayWithBillingKeyError, using the provided UnauthorizedError
func (t *PayWithBillingKeyError) MergeUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PayWithBillingKeyError) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t PayWithBillingKeyError) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "ALREADY_PAID":
		return t.AsAlreadyPaidError()
	case "BILLING_KEY_ALREADY_DELETED":
		return t.AsBillingKeyAlreadyDeletedError()
	case "BILLING_KEY_NOT_FOUND":
		return t.AsBillingKeyNotFoundError()
	case "CHANNEL_NOT_FOUND":
		return t.AsChannelNotFoundError()
	case "DISCOUNT_AMOUNT_EXCEEDS_TOTAL_AMOUNT":
		return t.AsDiscountAmountExceedsTotalAmountError()
	case "FORBIDDEN":
		return t.AsForbiddenError()
	case "INVALID_REQUEST":
		return t.AsInvalidRequestError()
	case "MAX_TRANSACTION_COUNT_REACHED":
		return t.AsMaxTransactionCountReachedError()
	case "PAYMENT_SCHEDULE_ALREADY_EXISTS":
		return t.AsPaymentScheduleAlreadyExistsError()
	case "PG_PROVIDER":
		return t.AsPgProviderError()
	case "PROMOTION_PAY_METHOD_DOES_NOT_MATCH":
		return t.AsPromotionPayMethodDoesNotMatchError()
	case "SUM_OF_PARTS_EXCEEDS_TOTAL_AMOUNT":
		return t.AsSumOfPartsExceedsTotalAmountError()
	case "UNAUTHORIZED":
		return t.AsUnauthorizedError()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t PayWithBillingKeyError) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PayWithBillingKeyError) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsCancelledPayment returns the union data inside the Payment as a CancelledPayment
func (t Payment) AsCancelledPayment() (CancelledPayment, error) {
	var body CancelledPayment
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCancelledPayment overwrites any union data inside the Payment as the provided CancelledPayment
func (t *Payment) FromCancelledPayment(v CancelledPayment) error {
	v.Status = "CANCELLED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCancelledPayment performs a merge with any union data inside the Payment, using the provided CancelledPayment
func (t *Payment) MergeCancelledPayment(v CancelledPayment) error {
	v.Status = "CANCELLED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsFailedPayment returns the union data inside the Payment as a FailedPayment
func (t Payment) AsFailedPayment() (FailedPayment, error) {
	var body FailedPayment
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFailedPayment overwrites any union data inside the Payment as the provided FailedPayment
func (t *Payment) FromFailedPayment(v FailedPayment) error {
	v.Status = "FAILED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFailedPayment performs a merge with any union data inside the Payment, using the provided FailedPayment
func (t *Payment) MergeFailedPayment(v FailedPayment) error {
	v.Status = "FAILED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPaidPayment returns the union data inside the Payment as a PaidPayment
func (t Payment) AsPaidPayment() (PaidPayment, error) {
	var body PaidPayment
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPaidPayment overwrites any union data inside the Payment as the provided PaidPayment
func (t *Payment) FromPaidPayment(v PaidPayment) error {
	v.Status = "PAID"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePaidPayment performs a merge with any union data inside the Payment, using the provided PaidPayment
func (t *Payment) MergePaidPayment(v PaidPayment) error {
	v.Status = "PAID"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPartialCancelledPayment returns the union data inside the Payment as a PartialCancelledPayment
func (t Payment) AsPartialCancelledPayment() (PartialCancelledPayment, error) {
	var body PartialCancelledPayment
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPartialCancelledPayment overwrites any union data inside the Payment as the provided PartialCancelledPayment
func (t *Payment) FromPartialCancelledPayment(v PartialCancelledPayment) error {
	v.Status = "PARTIAL_CANCELLED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePartialCancelledPayment performs a merge with any union data inside the Payment, using the provided PartialCancelledPayment
func (t *Payment) MergePartialCancelledPayment(v PartialCancelledPayment) error {
	v.Status = "PARTIAL_CANCELLED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPayPendingPayment returns the union data inside the Payment as a PayPendingPayment
func (t Payment) AsPayPendingPayment() (PayPendingPayment, error) {
	var body PayPendingPayment
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPayPendingPayment overwrites any union data inside the Payment as the provided PayPendingPayment
func (t *Payment) FromPayPendingPayment(v PayPendingPayment) error {
	v.Status = "PAY_PENDING"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePayPendingPayment performs a merge with any union data inside the Payment, using the provided PayPendingPayment
func (t *Payment) MergePayPendingPayment(v PayPendingPayment) error {
	v.Status = "PAY_PENDING"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsReadyPayment returns the union data inside the Payment as a ReadyPayment
func (t Payment) AsReadyPayment() (ReadyPayment, error) {
	var body ReadyPayment
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromReadyPayment overwrites any union data inside the Payment as the provided ReadyPayment
func (t *Payment) FromReadyPayment(v ReadyPayment) error {
	v.Status = "READY"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeReadyPayment performs a merge with any union data inside the Payment, using the provided ReadyPayment
func (t *Payment) MergeReadyPayment(v ReadyPayment) error {
	v.Status = "READY"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsVirtualAccountIssuedPayment returns the union data inside the Payment as a VirtualAccountIssuedPayment
func (t Payment) AsVirtualAccountIssuedPayment() (VirtualAccountIssuedPayment, error) {
	var body VirtualAccountIssuedPayment
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVirtualAccountIssuedPayment overwrites any union data inside the Payment as the provided VirtualAccountIssuedPayment
func (t *Payment) FromVirtualAccountIssuedPayment(v VirtualAccountIssuedPayment) error {
	v.Status = "VIRTUAL_ACCOUNT_ISSUED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVirtualAccountIssuedPayment performs a merge with any union data inside the Payment, using the provided VirtualAccountIssuedPayment
func (t *Payment) MergeVirtualAccountIssuedPayment(v VirtualAccountIssuedPayment) error {
	v.Status = "VIRTUAL_ACCOUNT_ISSUED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Payment) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"status"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t Payment) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "CANCELLED":
		return t.AsCancelledPayment()
	case "FAILED":
		return t.AsFailedPayment()
	case "PAID":
		return t.AsPaidPayment()
	case "PARTIAL_CANCELLED":
		return t.AsPartialCancelledPayment()
	case "PAY_PENDING":
		return t.AsPayPendingPayment()
	case "READY":
		return t.AsReadyPayment()
	case "VIRTUAL_ACCOUNT_ISSUED":
		return t.AsVirtualAccountIssuedPayment()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t Payment) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Payment) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsFailedPaymentCancellation returns the union data inside the PaymentCancellation as a FailedPaymentCancellation
func (t PaymentCancellation) AsFailedPaymentCancellation() (FailedPaymentCancellation, error) {
	var body FailedPaymentCancellation
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFailedPaymentCancellation overwrites any union data inside the PaymentCancellation as the provided FailedPaymentCancellation
func (t *PaymentCancellation) FromFailedPaymentCancellation(v FailedPaymentCancellation) error {
	v.Status = "FAILED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFailedPaymentCancellation performs a merge with any union data inside the PaymentCancellation, using the provided FailedPaymentCancellation
func (t *PaymentCancellation) MergeFailedPaymentCancellation(v FailedPaymentCancellation) error {
	v.Status = "FAILED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRequestedPaymentCancellation returns the union data inside the PaymentCancellation as a RequestedPaymentCancellation
func (t PaymentCancellation) AsRequestedPaymentCancellation() (RequestedPaymentCancellation, error) {
	var body RequestedPaymentCancellation
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRequestedPaymentCancellation overwrites any union data inside the PaymentCancellation as the provided RequestedPaymentCancellation
func (t *PaymentCancellation) FromRequestedPaymentCancellation(v RequestedPaymentCancellation) error {
	v.Status = "REQUESTED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRequestedPaymentCancellation performs a merge with any union data inside the PaymentCancellation, using the provided RequestedPaymentCancellation
func (t *PaymentCancellation) MergeRequestedPaymentCancellation(v RequestedPaymentCancellation) error {
	v.Status = "REQUESTED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSucceededPaymentCancellation returns the union data inside the PaymentCancellation as a SucceededPaymentCancellation
func (t PaymentCancellation) AsSucceededPaymentCancellation() (SucceededPaymentCancellation, error) {
	var body SucceededPaymentCancellation
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSucceededPaymentCancellation overwrites any union data inside the PaymentCancellation as the provided SucceededPaymentCancellation
func (t *PaymentCancellation) FromSucceededPaymentCancellation(v SucceededPaymentCancellation) error {
	v.Status = "SUCCEEDED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSucceededPaymentCancellation performs a merge with any union data inside the PaymentCancellation, using the provided SucceededPaymentCancellation
func (t *PaymentCancellation) MergeSucceededPaymentCancellation(v SucceededPaymentCancellation) error {
	v.Status = "SUCCEEDED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PaymentCancellation) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"status"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t PaymentCancellation) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "FAILED":
		return t.AsFailedPaymentCancellation()
	case "REQUESTED":
		return t.AsRequestedPaymentCancellation()
	case "SUCCEEDED":
		return t.AsSucceededPaymentCancellation()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t PaymentCancellation) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PaymentCancellation) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsCancelledPaymentCashReceipt returns the union data inside the PaymentCashReceipt as a CancelledPaymentCashReceipt
func (t PaymentCashReceipt) AsCancelledPaymentCashReceipt() (CancelledPaymentCashReceipt, error) {
	var body CancelledPaymentCashReceipt
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCancelledPaymentCashReceipt overwrites any union data inside the PaymentCashReceipt as the provided CancelledPaymentCashReceipt
func (t *PaymentCashReceipt) FromCancelledPaymentCashReceipt(v CancelledPaymentCashReceipt) error {
	v.Status = "CANCELLED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCancelledPaymentCashReceipt performs a merge with any union data inside the PaymentCashReceipt, using the provided CancelledPaymentCashReceipt
func (t *PaymentCashReceipt) MergeCancelledPaymentCashReceipt(v CancelledPaymentCashReceipt) error {
	v.Status = "CANCELLED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsIssuedPaymentCashReceipt returns the union data inside the PaymentCashReceipt as a IssuedPaymentCashReceipt
func (t PaymentCashReceipt) AsIssuedPaymentCashReceipt() (IssuedPaymentCashReceipt, error) {
	var body IssuedPaymentCashReceipt
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromIssuedPaymentCashReceipt overwrites any union data inside the PaymentCashReceipt as the provided IssuedPaymentCashReceipt
func (t *PaymentCashReceipt) FromIssuedPaymentCashReceipt(v IssuedPaymentCashReceipt) error {
	v.Status = "ISSUED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeIssuedPaymentCashReceipt performs a merge with any union data inside the PaymentCashReceipt, using the provided IssuedPaymentCashReceipt
func (t *PaymentCashReceipt) MergeIssuedPaymentCashReceipt(v IssuedPaymentCashReceipt) error {
	v.Status = "ISSUED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PaymentCashReceipt) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"status"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t PaymentCashReceipt) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "CANCELLED":
		return t.AsCancelledPaymentCashReceipt()
	case "ISSUED":
		return t.AsIssuedPaymentCashReceipt()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t PaymentCashReceipt) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PaymentCashReceipt) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsBeforeRegisteredPaymentEscrow returns the union data inside the PaymentEscrow as a BeforeRegisteredPaymentEscrow
func (t PaymentEscrow) AsBeforeRegisteredPaymentEscrow() (BeforeRegisteredPaymentEscrow, error) {
	var body BeforeRegisteredPaymentEscrow
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBeforeRegisteredPaymentEscrow overwrites any union data inside the PaymentEscrow as the provided BeforeRegisteredPaymentEscrow
func (t *PaymentEscrow) FromBeforeRegisteredPaymentEscrow(v BeforeRegisteredPaymentEscrow) error {
	v.Status = "BEFORE_REGISTERED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBeforeRegisteredPaymentEscrow performs a merge with any union data inside the PaymentEscrow, using the provided BeforeRegisteredPaymentEscrow
func (t *PaymentEscrow) MergeBeforeRegisteredPaymentEscrow(v BeforeRegisteredPaymentEscrow) error {
	v.Status = "BEFORE_REGISTERED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCancelledPaymentEscrow returns the union data inside the PaymentEscrow as a CancelledPaymentEscrow
func (t PaymentEscrow) AsCancelledPaymentEscrow() (CancelledPaymentEscrow, error) {
	var body CancelledPaymentEscrow
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCancelledPaymentEscrow overwrites any union data inside the PaymentEscrow as the provided CancelledPaymentEscrow
func (t *PaymentEscrow) FromCancelledPaymentEscrow(v CancelledPaymentEscrow) error {
	v.Status = "CANCELLED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCancelledPaymentEscrow performs a merge with any union data inside the PaymentEscrow, using the provided CancelledPaymentEscrow
func (t *PaymentEscrow) MergeCancelledPaymentEscrow(v CancelledPaymentEscrow) error {
	v.Status = "CANCELLED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsConfirmedPaymentEscrow returns the union data inside the PaymentEscrow as a ConfirmedPaymentEscrow
func (t PaymentEscrow) AsConfirmedPaymentEscrow() (ConfirmedPaymentEscrow, error) {
	var body ConfirmedPaymentEscrow
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromConfirmedPaymentEscrow overwrites any union data inside the PaymentEscrow as the provided ConfirmedPaymentEscrow
func (t *PaymentEscrow) FromConfirmedPaymentEscrow(v ConfirmedPaymentEscrow) error {
	v.Status = "CONFIRMED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeConfirmedPaymentEscrow performs a merge with any union data inside the PaymentEscrow, using the provided ConfirmedPaymentEscrow
func (t *PaymentEscrow) MergeConfirmedPaymentEscrow(v ConfirmedPaymentEscrow) error {
	v.Status = "CONFIRMED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDeliveredPaymentEscrow returns the union data inside the PaymentEscrow as a DeliveredPaymentEscrow
func (t PaymentEscrow) AsDeliveredPaymentEscrow() (DeliveredPaymentEscrow, error) {
	var body DeliveredPaymentEscrow
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDeliveredPaymentEscrow overwrites any union data inside the PaymentEscrow as the provided DeliveredPaymentEscrow
func (t *PaymentEscrow) FromDeliveredPaymentEscrow(v DeliveredPaymentEscrow) error {
	v.Status = "DELIVERED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDeliveredPaymentEscrow performs a merge with any union data inside the PaymentEscrow, using the provided DeliveredPaymentEscrow
func (t *PaymentEscrow) MergeDeliveredPaymentEscrow(v DeliveredPaymentEscrow) error {
	v.Status = "DELIVERED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRegisteredPaymentEscrow returns the union data inside the PaymentEscrow as a RegisteredPaymentEscrow
func (t PaymentEscrow) AsRegisteredPaymentEscrow() (RegisteredPaymentEscrow, error) {
	var body RegisteredPaymentEscrow
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRegisteredPaymentEscrow overwrites any union data inside the PaymentEscrow as the provided RegisteredPaymentEscrow
func (t *PaymentEscrow) FromRegisteredPaymentEscrow(v RegisteredPaymentEscrow) error {
	v.Status = "REGISTERED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRegisteredPaymentEscrow performs a merge with any union data inside the PaymentEscrow, using the provided RegisteredPaymentEscrow
func (t *PaymentEscrow) MergeRegisteredPaymentEscrow(v RegisteredPaymentEscrow) error {
	v.Status = "REGISTERED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRejectConfirmedPaymentEscrow returns the union data inside the PaymentEscrow as a RejectConfirmedPaymentEscrow
func (t PaymentEscrow) AsRejectConfirmedPaymentEscrow() (RejectConfirmedPaymentEscrow, error) {
	var body RejectConfirmedPaymentEscrow
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRejectConfirmedPaymentEscrow overwrites any union data inside the PaymentEscrow as the provided RejectConfirmedPaymentEscrow
func (t *PaymentEscrow) FromRejectConfirmedPaymentEscrow(v RejectConfirmedPaymentEscrow) error {
	v.Status = "REJECT_CONFIRMED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRejectConfirmedPaymentEscrow performs a merge with any union data inside the PaymentEscrow, using the provided RejectConfirmedPaymentEscrow
func (t *PaymentEscrow) MergeRejectConfirmedPaymentEscrow(v RejectConfirmedPaymentEscrow) error {
	v.Status = "REJECT_CONFIRMED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRejectedPaymentEscrow returns the union data inside the PaymentEscrow as a RejectedPaymentEscrow
func (t PaymentEscrow) AsRejectedPaymentEscrow() (RejectedPaymentEscrow, error) {
	var body RejectedPaymentEscrow
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRejectedPaymentEscrow overwrites any union data inside the PaymentEscrow as the provided RejectedPaymentEscrow
func (t *PaymentEscrow) FromRejectedPaymentEscrow(v RejectedPaymentEscrow) error {
	v.Status = "REJECTED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRejectedPaymentEscrow performs a merge with any union data inside the PaymentEscrow, using the provided RejectedPaymentEscrow
func (t *PaymentEscrow) MergeRejectedPaymentEscrow(v RejectedPaymentEscrow) error {
	v.Status = "REJECTED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PaymentEscrow) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"status"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t PaymentEscrow) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "BEFORE_REGISTERED":
		return t.AsBeforeRegisteredPaymentEscrow()
	case "CANCELLED":
		return t.AsCancelledPaymentEscrow()
	case "CONFIRMED":
		return t.AsConfirmedPaymentEscrow()
	case "DELIVERED":
		return t.AsDeliveredPaymentEscrow()
	case "REGISTERED":
		return t.AsRegisteredPaymentEscrow()
	case "REJECTED":
		return t.AsRejectedPaymentEscrow()
	case "REJECT_CONFIRMED":
		return t.AsRejectConfirmedPaymentEscrow()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t PaymentEscrow) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PaymentEscrow) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPaymentMethodCard returns the union data inside the PaymentMethod as a PaymentMethodCard
func (t PaymentMethod) AsPaymentMethodCard() (PaymentMethodCard, error) {
	var body PaymentMethodCard
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPaymentMethodCard overwrites any union data inside the PaymentMethod as the provided PaymentMethodCard
func (t *PaymentMethod) FromPaymentMethodCard(v PaymentMethodCard) error {
	v.Type = "PaymentMethodCard"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePaymentMethodCard performs a merge with any union data inside the PaymentMethod, using the provided PaymentMethodCard
func (t *PaymentMethod) MergePaymentMethodCard(v PaymentMethodCard) error {
	v.Type = "PaymentMethodCard"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPaymentMethodEasyPay returns the union data inside the PaymentMethod as a PaymentMethodEasyPay
func (t PaymentMethod) AsPaymentMethodEasyPay() (PaymentMethodEasyPay, error) {
	var body PaymentMethodEasyPay
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPaymentMethodEasyPay overwrites any union data inside the PaymentMethod as the provided PaymentMethodEasyPay
func (t *PaymentMethod) FromPaymentMethodEasyPay(v PaymentMethodEasyPay) error {
	v.Type = "PaymentMethodEasyPay"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePaymentMethodEasyPay performs a merge with any union data inside the PaymentMethod, using the provided PaymentMethodEasyPay
func (t *PaymentMethod) MergePaymentMethodEasyPay(v PaymentMethodEasyPay) error {
	v.Type = "PaymentMethodEasyPay"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPaymentMethodGiftCertificate returns the union data inside the PaymentMethod as a PaymentMethodGiftCertificate
func (t PaymentMethod) AsPaymentMethodGiftCertificate() (PaymentMethodGiftCertificate, error) {
	var body PaymentMethodGiftCertificate
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPaymentMethodGiftCertificate overwrites any union data inside the PaymentMethod as the provided PaymentMethodGiftCertificate
func (t *PaymentMethod) FromPaymentMethodGiftCertificate(v PaymentMethodGiftCertificate) error {
	v.Type = "PaymentMethodGiftCertificate"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePaymentMethodGiftCertificate performs a merge with any union data inside the PaymentMethod, using the provided PaymentMethodGiftCertificate
func (t *PaymentMethod) MergePaymentMethodGiftCertificate(v PaymentMethodGiftCertificate) error {
	v.Type = "PaymentMethodGiftCertificate"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPaymentMethodMobile returns the union data inside the PaymentMethod as a PaymentMethodMobile
func (t PaymentMethod) AsPaymentMethodMobile() (PaymentMethodMobile, error) {
	var body PaymentMethodMobile
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPaymentMethodMobile overwrites any union data inside the PaymentMethod as the provided PaymentMethodMobile
func (t *PaymentMethod) FromPaymentMethodMobile(v PaymentMethodMobile) error {
	v.Type = "PaymentMethodMobile"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePaymentMethodMobile performs a merge with any union data inside the PaymentMethod, using the provided PaymentMethodMobile
func (t *PaymentMethod) MergePaymentMethodMobile(v PaymentMethodMobile) error {
	v.Type = "PaymentMethodMobile"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPaymentMethodTransfer returns the union data inside the PaymentMethod as a PaymentMethodTransfer
func (t PaymentMethod) AsPaymentMethodTransfer() (PaymentMethodTransfer, error) {
	var body PaymentMethodTransfer
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPaymentMethodTransfer overwrites any union data inside the PaymentMethod as the provided PaymentMethodTransfer
func (t *PaymentMethod) FromPaymentMethodTransfer(v PaymentMethodTransfer) error {
	v.Type = "PaymentMethodTransfer"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePaymentMethodTransfer performs a merge with any union data inside the PaymentMethod, using the provided PaymentMethodTransfer
func (t *PaymentMethod) MergePaymentMethodTransfer(v PaymentMethodTransfer) error {
	v.Type = "PaymentMethodTransfer"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPaymentMethodVirtualAccount returns the union data inside the PaymentMethod as a PaymentMethodVirtualAccount
func (t PaymentMethod) AsPaymentMethodVirtualAccount() (PaymentMethodVirtualAccount, error) {
	var body PaymentMethodVirtualAccount
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPaymentMethodVirtualAccount overwrites any union data inside the PaymentMethod as the provided PaymentMethodVirtualAccount
func (t *PaymentMethod) FromPaymentMethodVirtualAccount(v PaymentMethodVirtualAccount) error {
	v.Type = "PaymentMethodVirtualAccount"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePaymentMethodVirtualAccount performs a merge with any union data inside the PaymentMethod, using the provided PaymentMethodVirtualAccount
func (t *PaymentMethod) MergePaymentMethodVirtualAccount(v PaymentMethodVirtualAccount) error {
	v.Type = "PaymentMethodVirtualAccount"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PaymentMethod) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t PaymentMethod) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "PaymentMethodCard":
		return t.AsPaymentMethodCard()
	case "PaymentMethodEasyPay":
		return t.AsPaymentMethodEasyPay()
	case "PaymentMethodGiftCertificate":
		return t.AsPaymentMethodGiftCertificate()
	case "PaymentMethodMobile":
		return t.AsPaymentMethodMobile()
	case "PaymentMethodTransfer":
		return t.AsPaymentMethodTransfer()
	case "PaymentMethodVirtualAccount":
		return t.AsPaymentMethodVirtualAccount()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t PaymentMethod) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PaymentMethod) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPaymentMethodCard returns the union data inside the PaymentMethodEasyPayMethod as a PaymentMethodCard
func (t PaymentMethodEasyPayMethod) AsPaymentMethodCard() (PaymentMethodCard, error) {
	var body PaymentMethodCard
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPaymentMethodCard overwrites any union data inside the PaymentMethodEasyPayMethod as the provided PaymentMethodCard
func (t *PaymentMethodEasyPayMethod) FromPaymentMethodCard(v PaymentMethodCard) error {
	v.Type = "PaymentMethodCard"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePaymentMethodCard performs a merge with any union data inside the PaymentMethodEasyPayMethod, using the provided PaymentMethodCard
func (t *PaymentMethodEasyPayMethod) MergePaymentMethodCard(v PaymentMethodCard) error {
	v.Type = "PaymentMethodCard"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPaymentMethodEasyPayMethodCharge returns the union data inside the PaymentMethodEasyPayMethod as a PaymentMethodEasyPayMethodCharge
func (t PaymentMethodEasyPayMethod) AsPaymentMethodEasyPayMethodCharge() (PaymentMethodEasyPayMethodCharge, error) {
	var body PaymentMethodEasyPayMethodCharge
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPaymentMethodEasyPayMethodCharge overwrites any union data inside the PaymentMethodEasyPayMethod as the provided PaymentMethodEasyPayMethodCharge
func (t *PaymentMethodEasyPayMethod) FromPaymentMethodEasyPayMethodCharge(v PaymentMethodEasyPayMethodCharge) error {
	v.Type = "PaymentMethodEasyPayMethodCharge"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePaymentMethodEasyPayMethodCharge performs a merge with any union data inside the PaymentMethodEasyPayMethod, using the provided PaymentMethodEasyPayMethodCharge
func (t *PaymentMethodEasyPayMethod) MergePaymentMethodEasyPayMethodCharge(v PaymentMethodEasyPayMethodCharge) error {
	v.Type = "PaymentMethodEasyPayMethodCharge"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPaymentMethodTransfer returns the union data inside the PaymentMethodEasyPayMethod as a PaymentMethodTransfer
func (t PaymentMethodEasyPayMethod) AsPaymentMethodTransfer() (PaymentMethodTransfer, error) {
	var body PaymentMethodTransfer
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPaymentMethodTransfer overwrites any union data inside the PaymentMethodEasyPayMethod as the provided PaymentMethodTransfer
func (t *PaymentMethodEasyPayMethod) FromPaymentMethodTransfer(v PaymentMethodTransfer) error {
	v.Type = "PaymentMethodTransfer"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePaymentMethodTransfer performs a merge with any union data inside the PaymentMethodEasyPayMethod, using the provided PaymentMethodTransfer
func (t *PaymentMethodEasyPayMethod) MergePaymentMethodTransfer(v PaymentMethodTransfer) error {
	v.Type = "PaymentMethodTransfer"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PaymentMethodEasyPayMethod) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t PaymentMethodEasyPayMethod) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "PaymentMethodCard":
		return t.AsPaymentMethodCard()
	case "PaymentMethodEasyPayMethodCharge":
		return t.AsPaymentMethodEasyPayMethodCharge()
	case "PaymentMethodTransfer":
		return t.AsPaymentMethodTransfer()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t PaymentMethodEasyPayMethod) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PaymentMethodEasyPayMethod) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsFailedPaymentSchedule returns the union data inside the PaymentSchedule as a FailedPaymentSchedule
func (t PaymentSchedule) AsFailedPaymentSchedule() (FailedPaymentSchedule, error) {
	var body FailedPaymentSchedule
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFailedPaymentSchedule overwrites any union data inside the PaymentSchedule as the provided FailedPaymentSchedule
func (t *PaymentSchedule) FromFailedPaymentSchedule(v FailedPaymentSchedule) error {
	v.Status = "FAILED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFailedPaymentSchedule performs a merge with any union data inside the PaymentSchedule, using the provided FailedPaymentSchedule
func (t *PaymentSchedule) MergeFailedPaymentSchedule(v FailedPaymentSchedule) error {
	v.Status = "FAILED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPendingPaymentSchedule returns the union data inside the PaymentSchedule as a PendingPaymentSchedule
func (t PaymentSchedule) AsPendingPaymentSchedule() (PendingPaymentSchedule, error) {
	var body PendingPaymentSchedule
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPendingPaymentSchedule overwrites any union data inside the PaymentSchedule as the provided PendingPaymentSchedule
func (t *PaymentSchedule) FromPendingPaymentSchedule(v PendingPaymentSchedule) error {
	v.Status = "PENDING"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePendingPaymentSchedule performs a merge with any union data inside the PaymentSchedule, using the provided PendingPaymentSchedule
func (t *PaymentSchedule) MergePendingPaymentSchedule(v PendingPaymentSchedule) error {
	v.Status = "PENDING"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRevokedPaymentSchedule returns the union data inside the PaymentSchedule as a RevokedPaymentSchedule
func (t PaymentSchedule) AsRevokedPaymentSchedule() (RevokedPaymentSchedule, error) {
	var body RevokedPaymentSchedule
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRevokedPaymentSchedule overwrites any union data inside the PaymentSchedule as the provided RevokedPaymentSchedule
func (t *PaymentSchedule) FromRevokedPaymentSchedule(v RevokedPaymentSchedule) error {
	v.Status = "REVOKED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRevokedPaymentSchedule performs a merge with any union data inside the PaymentSchedule, using the provided RevokedPaymentSchedule
func (t *PaymentSchedule) MergeRevokedPaymentSchedule(v RevokedPaymentSchedule) error {
	v.Status = "REVOKED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsScheduledPaymentSchedule returns the union data inside the PaymentSchedule as a ScheduledPaymentSchedule
func (t PaymentSchedule) AsScheduledPaymentSchedule() (ScheduledPaymentSchedule, error) {
	var body ScheduledPaymentSchedule
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromScheduledPaymentSchedule overwrites any union data inside the PaymentSchedule as the provided ScheduledPaymentSchedule
func (t *PaymentSchedule) FromScheduledPaymentSchedule(v ScheduledPaymentSchedule) error {
	v.Status = "SCHEDULED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeScheduledPaymentSchedule performs a merge with any union data inside the PaymentSchedule, using the provided ScheduledPaymentSchedule
func (t *PaymentSchedule) MergeScheduledPaymentSchedule(v ScheduledPaymentSchedule) error {
	v.Status = "SCHEDULED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsStartedPaymentSchedule returns the union data inside the PaymentSchedule as a StartedPaymentSchedule
func (t PaymentSchedule) AsStartedPaymentSchedule() (StartedPaymentSchedule, error) {
	var body StartedPaymentSchedule
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStartedPaymentSchedule overwrites any union data inside the PaymentSchedule as the provided StartedPaymentSchedule
func (t *PaymentSchedule) FromStartedPaymentSchedule(v StartedPaymentSchedule) error {
	v.Status = "STARTED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStartedPaymentSchedule performs a merge with any union data inside the PaymentSchedule, using the provided StartedPaymentSchedule
func (t *PaymentSchedule) MergeStartedPaymentSchedule(v StartedPaymentSchedule) error {
	v.Status = "STARTED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSucceededPaymentSchedule returns the union data inside the PaymentSchedule as a SucceededPaymentSchedule
func (t PaymentSchedule) AsSucceededPaymentSchedule() (SucceededPaymentSchedule, error) {
	var body SucceededPaymentSchedule
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSucceededPaymentSchedule overwrites any union data inside the PaymentSchedule as the provided SucceededPaymentSchedule
func (t *PaymentSchedule) FromSucceededPaymentSchedule(v SucceededPaymentSchedule) error {
	v.Status = "SUCCEEDED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSucceededPaymentSchedule performs a merge with any union data inside the PaymentSchedule, using the provided SucceededPaymentSchedule
func (t *PaymentSchedule) MergeSucceededPaymentSchedule(v SucceededPaymentSchedule) error {
	v.Status = "SUCCEEDED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PaymentSchedule) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"status"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t PaymentSchedule) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "FAILED":
		return t.AsFailedPaymentSchedule()
	case "PENDING":
		return t.AsPendingPaymentSchedule()
	case "REVOKED":
		return t.AsRevokedPaymentSchedule()
	case "SCHEDULED":
		return t.AsScheduledPaymentSchedule()
	case "STARTED":
		return t.AsStartedPaymentSchedule()
	case "SUCCEEDED":
		return t.AsSucceededPaymentSchedule()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t PaymentSchedule) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PaymentSchedule) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsCancelledPaymentTransaction returns the union data inside the PaymentTransaction as a CancelledPaymentTransaction
func (t PaymentTransaction) AsCancelledPaymentTransaction() (CancelledPaymentTransaction, error) {
	var body CancelledPaymentTransaction
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCancelledPaymentTransaction overwrites any union data inside the PaymentTransaction as the provided CancelledPaymentTransaction
func (t *PaymentTransaction) FromCancelledPaymentTransaction(v CancelledPaymentTransaction) error {
	v.Status = "CANCELLED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCancelledPaymentTransaction performs a merge with any union data inside the PaymentTransaction, using the provided CancelledPaymentTransaction
func (t *PaymentTransaction) MergeCancelledPaymentTransaction(v CancelledPaymentTransaction) error {
	v.Status = "CANCELLED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsFailedPaymentTransaction returns the union data inside the PaymentTransaction as a FailedPaymentTransaction
func (t PaymentTransaction) AsFailedPaymentTransaction() (FailedPaymentTransaction, error) {
	var body FailedPaymentTransaction
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFailedPaymentTransaction overwrites any union data inside the PaymentTransaction as the provided FailedPaymentTransaction
func (t *PaymentTransaction) FromFailedPaymentTransaction(v FailedPaymentTransaction) error {
	v.Status = "FAILED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFailedPaymentTransaction performs a merge with any union data inside the PaymentTransaction, using the provided FailedPaymentTransaction
func (t *PaymentTransaction) MergeFailedPaymentTransaction(v FailedPaymentTransaction) error {
	v.Status = "FAILED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPaidPaymentTransaction returns the union data inside the PaymentTransaction as a PaidPaymentTransaction
func (t PaymentTransaction) AsPaidPaymentTransaction() (PaidPaymentTransaction, error) {
	var body PaidPaymentTransaction
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPaidPaymentTransaction overwrites any union data inside the PaymentTransaction as the provided PaidPaymentTransaction
func (t *PaymentTransaction) FromPaidPaymentTransaction(v PaidPaymentTransaction) error {
	v.Status = "PAID"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePaidPaymentTransaction performs a merge with any union data inside the PaymentTransaction, using the provided PaidPaymentTransaction
func (t *PaymentTransaction) MergePaidPaymentTransaction(v PaidPaymentTransaction) error {
	v.Status = "PAID"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPartialCancelledPaymentTransaction returns the union data inside the PaymentTransaction as a PartialCancelledPaymentTransaction
func (t PaymentTransaction) AsPartialCancelledPaymentTransaction() (PartialCancelledPaymentTransaction, error) {
	var body PartialCancelledPaymentTransaction
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPartialCancelledPaymentTransaction overwrites any union data inside the PaymentTransaction as the provided PartialCancelledPaymentTransaction
func (t *PaymentTransaction) FromPartialCancelledPaymentTransaction(v PartialCancelledPaymentTransaction) error {
	v.Status = "PARTIAL_CANCELLED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePartialCancelledPaymentTransaction performs a merge with any union data inside the PaymentTransaction, using the provided PartialCancelledPaymentTransaction
func (t *PaymentTransaction) MergePartialCancelledPaymentTransaction(v PartialCancelledPaymentTransaction) error {
	v.Status = "PARTIAL_CANCELLED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPayPendingPaymentTransaction returns the union data inside the PaymentTransaction as a PayPendingPaymentTransaction
func (t PaymentTransaction) AsPayPendingPaymentTransaction() (PayPendingPaymentTransaction, error) {
	var body PayPendingPaymentTransaction
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPayPendingPaymentTransaction overwrites any union data inside the PaymentTransaction as the provided PayPendingPaymentTransaction
func (t *PaymentTransaction) FromPayPendingPaymentTransaction(v PayPendingPaymentTransaction) error {
	v.Status = "PAY_PENDING"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePayPendingPaymentTransaction performs a merge with any union data inside the PaymentTransaction, using the provided PayPendingPaymentTransaction
func (t *PaymentTransaction) MergePayPendingPaymentTransaction(v PayPendingPaymentTransaction) error {
	v.Status = "PAY_PENDING"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsReadyPaymentTransaction returns the union data inside the PaymentTransaction as a ReadyPaymentTransaction
func (t PaymentTransaction) AsReadyPaymentTransaction() (ReadyPaymentTransaction, error) {
	var body ReadyPaymentTransaction
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromReadyPaymentTransaction overwrites any union data inside the PaymentTransaction as the provided ReadyPaymentTransaction
func (t *PaymentTransaction) FromReadyPaymentTransaction(v ReadyPaymentTransaction) error {
	v.Status = "READY"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeReadyPaymentTransaction performs a merge with any union data inside the PaymentTransaction, using the provided ReadyPaymentTransaction
func (t *PaymentTransaction) MergeReadyPaymentTransaction(v ReadyPaymentTransaction) error {
	v.Status = "READY"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsVirtualAccountIssuedPaymentTransaction returns the union data inside the PaymentTransaction as a VirtualAccountIssuedPaymentTransaction
func (t PaymentTransaction) AsVirtualAccountIssuedPaymentTransaction() (VirtualAccountIssuedPaymentTransaction, error) {
	var body VirtualAccountIssuedPaymentTransaction
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVirtualAccountIssuedPaymentTransaction overwrites any union data inside the PaymentTransaction as the provided VirtualAccountIssuedPaymentTransaction
func (t *PaymentTransaction) FromVirtualAccountIssuedPaymentTransaction(v VirtualAccountIssuedPaymentTransaction) error {
	v.Status = "VIRTUAL_ACCOUNT_ISSUED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVirtualAccountIssuedPaymentTransaction performs a merge with any union data inside the PaymentTransaction, using the provided VirtualAccountIssuedPaymentTransaction
func (t *PaymentTransaction) MergeVirtualAccountIssuedPaymentTransaction(v VirtualAccountIssuedPaymentTransaction) error {
	v.Status = "VIRTUAL_ACCOUNT_ISSUED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PaymentTransaction) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"status"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t PaymentTransaction) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "CANCELLED":
		return t.AsCancelledPaymentTransaction()
	case "FAILED":
		return t.AsFailedPaymentTransaction()
	case "PAID":
		return t.AsPaidPaymentTransaction()
	case "PARTIAL_CANCELLED":
		return t.AsPartialCancelledPaymentTransaction()
	case "PAY_PENDING":
		return t.AsPayPendingPaymentTransaction()
	case "READY":
		return t.AsReadyPaymentTransaction()
	case "VIRTUAL_ACCOUNT_ISSUED":
		return t.AsVirtualAccountIssuedPaymentTransaction()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t PaymentTransaction) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PaymentTransaction) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsFailedPgBillingKeyIssueResponse returns the union data inside the PgBillingKeyIssueResponse as a FailedPgBillingKeyIssueResponse
func (t PgBillingKeyIssueResponse) AsFailedPgBillingKeyIssueResponse() (FailedPgBillingKeyIssueResponse, error) {
	var body FailedPgBillingKeyIssueResponse
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFailedPgBillingKeyIssueResponse overwrites any union data inside the PgBillingKeyIssueResponse as the provided FailedPgBillingKeyIssueResponse
func (t *PgBillingKeyIssueResponse) FromFailedPgBillingKeyIssueResponse(v FailedPgBillingKeyIssueResponse) error {
	v.Type = "FAILED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFailedPgBillingKeyIssueResponse performs a merge with any union data inside the PgBillingKeyIssueResponse, using the provided FailedPgBillingKeyIssueResponse
func (t *PgBillingKeyIssueResponse) MergeFailedPgBillingKeyIssueResponse(v FailedPgBillingKeyIssueResponse) error {
	v.Type = "FAILED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsIssuedPgBillingKeyIssueResponse returns the union data inside the PgBillingKeyIssueResponse as a IssuedPgBillingKeyIssueResponse
func (t PgBillingKeyIssueResponse) AsIssuedPgBillingKeyIssueResponse() (IssuedPgBillingKeyIssueResponse, error) {
	var body IssuedPgBillingKeyIssueResponse
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromIssuedPgBillingKeyIssueResponse overwrites any union data inside the PgBillingKeyIssueResponse as the provided IssuedPgBillingKeyIssueResponse
func (t *PgBillingKeyIssueResponse) FromIssuedPgBillingKeyIssueResponse(v IssuedPgBillingKeyIssueResponse) error {
	v.Type = "ISSUED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeIssuedPgBillingKeyIssueResponse performs a merge with any union data inside the PgBillingKeyIssueResponse, using the provided IssuedPgBillingKeyIssueResponse
func (t *PgBillingKeyIssueResponse) MergeIssuedPgBillingKeyIssueResponse(v IssuedPgBillingKeyIssueResponse) error {
	v.Type = "ISSUED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PgBillingKeyIssueResponse) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t PgBillingKeyIssueResponse) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "FAILED":
		return t.AsFailedPgBillingKeyIssueResponse()
	case "ISSUED":
		return t.AsIssuedPgBillingKeyIssueResponse()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t PgBillingKeyIssueResponse) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PgBillingKeyIssueResponse) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPlatformDepositAccountTransfer returns the union data inside the PlatformAccountTransfer as a PlatformDepositAccountTransfer
func (t PlatformAccountTransfer) AsPlatformDepositAccountTransfer() (PlatformDepositAccountTransfer, error) {
	var body PlatformDepositAccountTransfer
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformDepositAccountTransfer overwrites any union data inside the PlatformAccountTransfer as the provided PlatformDepositAccountTransfer
func (t *PlatformAccountTransfer) FromPlatformDepositAccountTransfer(v PlatformDepositAccountTransfer) error {
	v.Type = "DEPOSIT"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformDepositAccountTransfer performs a merge with any union data inside the PlatformAccountTransfer, using the provided PlatformDepositAccountTransfer
func (t *PlatformAccountTransfer) MergePlatformDepositAccountTransfer(v PlatformDepositAccountTransfer) error {
	v.Type = "DEPOSIT"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformPartnerPayoutAccountTransfer returns the union data inside the PlatformAccountTransfer as a PlatformPartnerPayoutAccountTransfer
func (t PlatformAccountTransfer) AsPlatformPartnerPayoutAccountTransfer() (PlatformPartnerPayoutAccountTransfer, error) {
	var body PlatformPartnerPayoutAccountTransfer
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformPartnerPayoutAccountTransfer overwrites any union data inside the PlatformAccountTransfer as the provided PlatformPartnerPayoutAccountTransfer
func (t *PlatformAccountTransfer) FromPlatformPartnerPayoutAccountTransfer(v PlatformPartnerPayoutAccountTransfer) error {
	v.Type = "PARTNER_PAYOUT"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformPartnerPayoutAccountTransfer performs a merge with any union data inside the PlatformAccountTransfer, using the provided PlatformPartnerPayoutAccountTransfer
func (t *PlatformAccountTransfer) MergePlatformPartnerPayoutAccountTransfer(v PlatformPartnerPayoutAccountTransfer) error {
	v.Type = "PARTNER_PAYOUT"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformRemitAccountTransfer returns the union data inside the PlatformAccountTransfer as a PlatformRemitAccountTransfer
func (t PlatformAccountTransfer) AsPlatformRemitAccountTransfer() (PlatformRemitAccountTransfer, error) {
	var body PlatformRemitAccountTransfer
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformRemitAccountTransfer overwrites any union data inside the PlatformAccountTransfer as the provided PlatformRemitAccountTransfer
func (t *PlatformAccountTransfer) FromPlatformRemitAccountTransfer(v PlatformRemitAccountTransfer) error {
	v.Type = "REMIT"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformRemitAccountTransfer performs a merge with any union data inside the PlatformAccountTransfer, using the provided PlatformRemitAccountTransfer
func (t *PlatformAccountTransfer) MergePlatformRemitAccountTransfer(v PlatformRemitAccountTransfer) error {
	v.Type = "REMIT"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PlatformAccountTransfer) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t PlatformAccountTransfer) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "DEPOSIT":
		return t.AsPlatformDepositAccountTransfer()
	case "PARTNER_PAYOUT":
		return t.AsPlatformPartnerPayoutAccountTransfer()
	case "REMIT":
		return t.AsPlatformRemitAccountTransfer()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t PlatformAccountTransfer) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PlatformAccountTransfer) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPlatformFixedAmountFee returns the union data inside the PlatformFee as a PlatformFixedAmountFee
func (t PlatformFee) AsPlatformFixedAmountFee() (PlatformFixedAmountFee, error) {
	var body PlatformFixedAmountFee
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformFixedAmountFee overwrites any union data inside the PlatformFee as the provided PlatformFixedAmountFee
func (t *PlatformFee) FromPlatformFixedAmountFee(v PlatformFixedAmountFee) error {
	v.Type = "FIXED_AMOUNT"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformFixedAmountFee performs a merge with any union data inside the PlatformFee, using the provided PlatformFixedAmountFee
func (t *PlatformFee) MergePlatformFixedAmountFee(v PlatformFixedAmountFee) error {
	v.Type = "FIXED_AMOUNT"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformFixedRateFee returns the union data inside the PlatformFee as a PlatformFixedRateFee
func (t PlatformFee) AsPlatformFixedRateFee() (PlatformFixedRateFee, error) {
	var body PlatformFixedRateFee
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformFixedRateFee overwrites any union data inside the PlatformFee as the provided PlatformFixedRateFee
func (t *PlatformFee) FromPlatformFixedRateFee(v PlatformFixedRateFee) error {
	v.Type = "FIXED_RATE"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformFixedRateFee performs a merge with any union data inside the PlatformFee, using the provided PlatformFixedRateFee
func (t *PlatformFee) MergePlatformFixedRateFee(v PlatformFixedRateFee) error {
	v.Type = "FIXED_RATE"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PlatformFee) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t PlatformFee) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "FIXED_AMOUNT":
		return t.AsPlatformFixedAmountFee()
	case "FIXED_RATE":
		return t.AsPlatformFixedRateFee()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t PlatformFee) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PlatformFee) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPlatformPartnerManualSettlement returns the union data inside the PlatformPartnerSettlement as a PlatformPartnerManualSettlement
func (t PlatformPartnerSettlement) AsPlatformPartnerManualSettlement() (PlatformPartnerManualSettlement, error) {
	var body PlatformPartnerManualSettlement
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformPartnerManualSettlement overwrites any union data inside the PlatformPartnerSettlement as the provided PlatformPartnerManualSettlement
func (t *PlatformPartnerSettlement) FromPlatformPartnerManualSettlement(v PlatformPartnerManualSettlement) error {
	v.Type = "MANUAL"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformPartnerManualSettlement performs a merge with any union data inside the PlatformPartnerSettlement, using the provided PlatformPartnerManualSettlement
func (t *PlatformPartnerSettlement) MergePlatformPartnerManualSettlement(v PlatformPartnerManualSettlement) error {
	v.Type = "MANUAL"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformPartnerOrderCancelSettlement returns the union data inside the PlatformPartnerSettlement as a PlatformPartnerOrderCancelSettlement
func (t PlatformPartnerSettlement) AsPlatformPartnerOrderCancelSettlement() (PlatformPartnerOrderCancelSettlement, error) {
	var body PlatformPartnerOrderCancelSettlement
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformPartnerOrderCancelSettlement overwrites any union data inside the PlatformPartnerSettlement as the provided PlatformPartnerOrderCancelSettlement
func (t *PlatformPartnerSettlement) FromPlatformPartnerOrderCancelSettlement(v PlatformPartnerOrderCancelSettlement) error {
	v.Type = "ORDER_CANCEL"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformPartnerOrderCancelSettlement performs a merge with any union data inside the PlatformPartnerSettlement, using the provided PlatformPartnerOrderCancelSettlement
func (t *PlatformPartnerSettlement) MergePlatformPartnerOrderCancelSettlement(v PlatformPartnerOrderCancelSettlement) error {
	v.Type = "ORDER_CANCEL"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformPartnerOrderSettlement returns the union data inside the PlatformPartnerSettlement as a PlatformPartnerOrderSettlement
func (t PlatformPartnerSettlement) AsPlatformPartnerOrderSettlement() (PlatformPartnerOrderSettlement, error) {
	var body PlatformPartnerOrderSettlement
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformPartnerOrderSettlement overwrites any union data inside the PlatformPartnerSettlement as the provided PlatformPartnerOrderSettlement
func (t *PlatformPartnerSettlement) FromPlatformPartnerOrderSettlement(v PlatformPartnerOrderSettlement) error {
	v.Type = "ORDER"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformPartnerOrderSettlement performs a merge with any union data inside the PlatformPartnerSettlement, using the provided PlatformPartnerOrderSettlement
func (t *PlatformPartnerSettlement) MergePlatformPartnerOrderSettlement(v PlatformPartnerOrderSettlement) error {
	v.Type = "ORDER"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PlatformPartnerSettlement) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t PlatformPartnerSettlement) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "MANUAL":
		return t.AsPlatformPartnerManualSettlement()
	case "ORDER":
		return t.AsPlatformPartnerOrderSettlement()
	case "ORDER_CANCEL":
		return t.AsPlatformPartnerOrderCancelSettlement()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t PlatformPartnerSettlement) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PlatformPartnerSettlement) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPlatformPartnerTypeBusiness returns the union data inside the PlatformPartnerType as a PlatformPartnerTypeBusiness
func (t PlatformPartnerType) AsPlatformPartnerTypeBusiness() (PlatformPartnerTypeBusiness, error) {
	var body PlatformPartnerTypeBusiness
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformPartnerTypeBusiness overwrites any union data inside the PlatformPartnerType as the provided PlatformPartnerTypeBusiness
func (t *PlatformPartnerType) FromPlatformPartnerTypeBusiness(v PlatformPartnerTypeBusiness) error {
	v.Type = "BUSINESS"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformPartnerTypeBusiness performs a merge with any union data inside the PlatformPartnerType, using the provided PlatformPartnerTypeBusiness
func (t *PlatformPartnerType) MergePlatformPartnerTypeBusiness(v PlatformPartnerTypeBusiness) error {
	v.Type = "BUSINESS"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformPartnerTypeNonWhtPayer returns the union data inside the PlatformPartnerType as a PlatformPartnerTypeNonWhtPayer
func (t PlatformPartnerType) AsPlatformPartnerTypeNonWhtPayer() (PlatformPartnerTypeNonWhtPayer, error) {
	var body PlatformPartnerTypeNonWhtPayer
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformPartnerTypeNonWhtPayer overwrites any union data inside the PlatformPartnerType as the provided PlatformPartnerTypeNonWhtPayer
func (t *PlatformPartnerType) FromPlatformPartnerTypeNonWhtPayer(v PlatformPartnerTypeNonWhtPayer) error {
	v.Type = "NON_WHT_PAYER"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformPartnerTypeNonWhtPayer performs a merge with any union data inside the PlatformPartnerType, using the provided PlatformPartnerTypeNonWhtPayer
func (t *PlatformPartnerType) MergePlatformPartnerTypeNonWhtPayer(v PlatformPartnerTypeNonWhtPayer) error {
	v.Type = "NON_WHT_PAYER"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformPartnerTypeWhtPayer returns the union data inside the PlatformPartnerType as a PlatformPartnerTypeWhtPayer
func (t PlatformPartnerType) AsPlatformPartnerTypeWhtPayer() (PlatformPartnerTypeWhtPayer, error) {
	var body PlatformPartnerTypeWhtPayer
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformPartnerTypeWhtPayer overwrites any union data inside the PlatformPartnerType as the provided PlatformPartnerTypeWhtPayer
func (t *PlatformPartnerType) FromPlatformPartnerTypeWhtPayer(v PlatformPartnerTypeWhtPayer) error {
	v.Type = "WHT_PAYER"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformPartnerTypeWhtPayer performs a merge with any union data inside the PlatformPartnerType, using the provided PlatformPartnerTypeWhtPayer
func (t *PlatformPartnerType) MergePlatformPartnerTypeWhtPayer(v PlatformPartnerTypeWhtPayer) error {
	v.Type = "WHT_PAYER"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PlatformPartnerType) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t PlatformPartnerType) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "BUSINESS":
		return t.AsPlatformPartnerTypeBusiness()
	case "NON_WHT_PAYER":
		return t.AsPlatformPartnerTypeNonWhtPayer()
	case "WHT_PAYER":
		return t.AsPlatformPartnerTypeWhtPayer()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t PlatformPartnerType) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PlatformPartnerType) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPlatformExternalPayment returns the union data inside the PlatformPayment as a PlatformExternalPayment
func (t PlatformPayment) AsPlatformExternalPayment() (PlatformExternalPayment, error) {
	var body PlatformExternalPayment
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformExternalPayment overwrites any union data inside the PlatformPayment as the provided PlatformExternalPayment
func (t *PlatformPayment) FromPlatformExternalPayment(v PlatformExternalPayment) error {
	v.Type = "EXTERNAL"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformExternalPayment performs a merge with any union data inside the PlatformPayment, using the provided PlatformExternalPayment
func (t *PlatformPayment) MergePlatformExternalPayment(v PlatformExternalPayment) error {
	v.Type = "EXTERNAL"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformPortOnePayment returns the union data inside the PlatformPayment as a PlatformPortOnePayment
func (t PlatformPayment) AsPlatformPortOnePayment() (PlatformPortOnePayment, error) {
	var body PlatformPortOnePayment
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformPortOnePayment overwrites any union data inside the PlatformPayment as the provided PlatformPortOnePayment
func (t *PlatformPayment) FromPlatformPortOnePayment(v PlatformPortOnePayment) error {
	v.Type = "PORT_ONE"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformPortOnePayment performs a merge with any union data inside the PlatformPayment, using the provided PlatformPortOnePayment
func (t *PlatformPayment) MergePlatformPortOnePayment(v PlatformPortOnePayment) error {
	v.Type = "PORT_ONE"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PlatformPayment) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t PlatformPayment) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "EXTERNAL":
		return t.AsPlatformExternalPayment()
	case "PORT_ONE":
		return t.AsPlatformPortOnePayment()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t PlatformPayment) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PlatformPayment) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPlatformPaymentMethodCard returns the union data inside the PlatformPaymentMethod as a PlatformPaymentMethodCard
func (t PlatformPaymentMethod) AsPlatformPaymentMethodCard() (PlatformPaymentMethodCard, error) {
	var body PlatformPaymentMethodCard
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformPaymentMethodCard overwrites any union data inside the PlatformPaymentMethod as the provided PlatformPaymentMethodCard
func (t *PlatformPaymentMethod) FromPlatformPaymentMethodCard(v PlatformPaymentMethodCard) error {
	v.Type = "CARD"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformPaymentMethodCard performs a merge with any union data inside the PlatformPaymentMethod, using the provided PlatformPaymentMethodCard
func (t *PlatformPaymentMethod) MergePlatformPaymentMethodCard(v PlatformPaymentMethodCard) error {
	v.Type = "CARD"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformPaymentMethodEasyPay returns the union data inside the PlatformPaymentMethod as a PlatformPaymentMethodEasyPay
func (t PlatformPaymentMethod) AsPlatformPaymentMethodEasyPay() (PlatformPaymentMethodEasyPay, error) {
	var body PlatformPaymentMethodEasyPay
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformPaymentMethodEasyPay overwrites any union data inside the PlatformPaymentMethod as the provided PlatformPaymentMethodEasyPay
func (t *PlatformPaymentMethod) FromPlatformPaymentMethodEasyPay(v PlatformPaymentMethodEasyPay) error {
	v.Type = "EASY_PAY"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformPaymentMethodEasyPay performs a merge with any union data inside the PlatformPaymentMethod, using the provided PlatformPaymentMethodEasyPay
func (t *PlatformPaymentMethod) MergePlatformPaymentMethodEasyPay(v PlatformPaymentMethodEasyPay) error {
	v.Type = "EASY_PAY"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformPaymentMethodGiftCertificate returns the union data inside the PlatformPaymentMethod as a PlatformPaymentMethodGiftCertificate
func (t PlatformPaymentMethod) AsPlatformPaymentMethodGiftCertificate() (PlatformPaymentMethodGiftCertificate, error) {
	var body PlatformPaymentMethodGiftCertificate
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformPaymentMethodGiftCertificate overwrites any union data inside the PlatformPaymentMethod as the provided PlatformPaymentMethodGiftCertificate
func (t *PlatformPaymentMethod) FromPlatformPaymentMethodGiftCertificate(v PlatformPaymentMethodGiftCertificate) error {
	v.Type = "GIFT_CERTIFICATE"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformPaymentMethodGiftCertificate performs a merge with any union data inside the PlatformPaymentMethod, using the provided PlatformPaymentMethodGiftCertificate
func (t *PlatformPaymentMethod) MergePlatformPaymentMethodGiftCertificate(v PlatformPaymentMethodGiftCertificate) error {
	v.Type = "GIFT_CERTIFICATE"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformPaymentMethodMobile returns the union data inside the PlatformPaymentMethod as a PlatformPaymentMethodMobile
func (t PlatformPaymentMethod) AsPlatformPaymentMethodMobile() (PlatformPaymentMethodMobile, error) {
	var body PlatformPaymentMethodMobile
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformPaymentMethodMobile overwrites any union data inside the PlatformPaymentMethod as the provided PlatformPaymentMethodMobile
func (t *PlatformPaymentMethod) FromPlatformPaymentMethodMobile(v PlatformPaymentMethodMobile) error {
	v.Type = "MOBILE"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformPaymentMethodMobile performs a merge with any union data inside the PlatformPaymentMethod, using the provided PlatformPaymentMethodMobile
func (t *PlatformPaymentMethod) MergePlatformPaymentMethodMobile(v PlatformPaymentMethodMobile) error {
	v.Type = "MOBILE"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformPaymentMethodTransfer returns the union data inside the PlatformPaymentMethod as a PlatformPaymentMethodTransfer
func (t PlatformPaymentMethod) AsPlatformPaymentMethodTransfer() (PlatformPaymentMethodTransfer, error) {
	var body PlatformPaymentMethodTransfer
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformPaymentMethodTransfer overwrites any union data inside the PlatformPaymentMethod as the provided PlatformPaymentMethodTransfer
func (t *PlatformPaymentMethod) FromPlatformPaymentMethodTransfer(v PlatformPaymentMethodTransfer) error {
	v.Type = "TRANSFER"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformPaymentMethodTransfer performs a merge with any union data inside the PlatformPaymentMethod, using the provided PlatformPaymentMethodTransfer
func (t *PlatformPaymentMethod) MergePlatformPaymentMethodTransfer(v PlatformPaymentMethodTransfer) error {
	v.Type = "TRANSFER"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformPaymentMethodVirtualAccount returns the union data inside the PlatformPaymentMethod as a PlatformPaymentMethodVirtualAccount
func (t PlatformPaymentMethod) AsPlatformPaymentMethodVirtualAccount() (PlatformPaymentMethodVirtualAccount, error) {
	var body PlatformPaymentMethodVirtualAccount
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformPaymentMethodVirtualAccount overwrites any union data inside the PlatformPaymentMethod as the provided PlatformPaymentMethodVirtualAccount
func (t *PlatformPaymentMethod) FromPlatformPaymentMethodVirtualAccount(v PlatformPaymentMethodVirtualAccount) error {
	v.Type = "VIRTUAL_ACCOUNT"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformPaymentMethodVirtualAccount performs a merge with any union data inside the PlatformPaymentMethod, using the provided PlatformPaymentMethodVirtualAccount
func (t *PlatformPaymentMethod) MergePlatformPaymentMethodVirtualAccount(v PlatformPaymentMethodVirtualAccount) error {
	v.Type = "VIRTUAL_ACCOUNT"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PlatformPaymentMethod) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t PlatformPaymentMethod) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "CARD":
		return t.AsPlatformPaymentMethodCard()
	case "EASY_PAY":
		return t.AsPlatformPaymentMethodEasyPay()
	case "GIFT_CERTIFICATE":
		return t.AsPlatformPaymentMethodGiftCertificate()
	case "MOBILE":
		return t.AsPlatformPaymentMethodMobile()
	case "TRANSFER":
		return t.AsPlatformPaymentMethodTransfer()
	case "VIRTUAL_ACCOUNT":
		return t.AsPlatformPaymentMethodVirtualAccount()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t PlatformPaymentMethod) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PlatformPaymentMethod) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPlatformSettlementCycleMethodDaily returns the union data inside the PlatformSettlementCycleMethod as a PlatformSettlementCycleMethodDaily
func (t PlatformSettlementCycleMethod) AsPlatformSettlementCycleMethodDaily() (PlatformSettlementCycleMethodDaily, error) {
	var body PlatformSettlementCycleMethodDaily
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformSettlementCycleMethodDaily overwrites any union data inside the PlatformSettlementCycleMethod as the provided PlatformSettlementCycleMethodDaily
func (t *PlatformSettlementCycleMethod) FromPlatformSettlementCycleMethodDaily(v PlatformSettlementCycleMethodDaily) error {
	v.Type = "DAILY"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformSettlementCycleMethodDaily performs a merge with any union data inside the PlatformSettlementCycleMethod, using the provided PlatformSettlementCycleMethodDaily
func (t *PlatformSettlementCycleMethod) MergePlatformSettlementCycleMethodDaily(v PlatformSettlementCycleMethodDaily) error {
	v.Type = "DAILY"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformSettlementCycleMethodManualDates returns the union data inside the PlatformSettlementCycleMethod as a PlatformSettlementCycleMethodManualDates
func (t PlatformSettlementCycleMethod) AsPlatformSettlementCycleMethodManualDates() (PlatformSettlementCycleMethodManualDates, error) {
	var body PlatformSettlementCycleMethodManualDates
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformSettlementCycleMethodManualDates overwrites any union data inside the PlatformSettlementCycleMethod as the provided PlatformSettlementCycleMethodManualDates
func (t *PlatformSettlementCycleMethod) FromPlatformSettlementCycleMethodManualDates(v PlatformSettlementCycleMethodManualDates) error {
	v.Type = "MANUAL_DATES"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformSettlementCycleMethodManualDates performs a merge with any union data inside the PlatformSettlementCycleMethod, using the provided PlatformSettlementCycleMethodManualDates
func (t *PlatformSettlementCycleMethod) MergePlatformSettlementCycleMethodManualDates(v PlatformSettlementCycleMethodManualDates) error {
	v.Type = "MANUAL_DATES"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformSettlementCycleMethodMonthly returns the union data inside the PlatformSettlementCycleMethod as a PlatformSettlementCycleMethodMonthly
func (t PlatformSettlementCycleMethod) AsPlatformSettlementCycleMethodMonthly() (PlatformSettlementCycleMethodMonthly, error) {
	var body PlatformSettlementCycleMethodMonthly
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformSettlementCycleMethodMonthly overwrites any union data inside the PlatformSettlementCycleMethod as the provided PlatformSettlementCycleMethodMonthly
func (t *PlatformSettlementCycleMethod) FromPlatformSettlementCycleMethodMonthly(v PlatformSettlementCycleMethodMonthly) error {
	v.Type = "MONTHLY"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformSettlementCycleMethodMonthly performs a merge with any union data inside the PlatformSettlementCycleMethod, using the provided PlatformSettlementCycleMethodMonthly
func (t *PlatformSettlementCycleMethod) MergePlatformSettlementCycleMethodMonthly(v PlatformSettlementCycleMethodMonthly) error {
	v.Type = "MONTHLY"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformSettlementCycleMethodWeekly returns the union data inside the PlatformSettlementCycleMethod as a PlatformSettlementCycleMethodWeekly
func (t PlatformSettlementCycleMethod) AsPlatformSettlementCycleMethodWeekly() (PlatformSettlementCycleMethodWeekly, error) {
	var body PlatformSettlementCycleMethodWeekly
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformSettlementCycleMethodWeekly overwrites any union data inside the PlatformSettlementCycleMethod as the provided PlatformSettlementCycleMethodWeekly
func (t *PlatformSettlementCycleMethod) FromPlatformSettlementCycleMethodWeekly(v PlatformSettlementCycleMethodWeekly) error {
	v.Type = "WEEKLY"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformSettlementCycleMethodWeekly performs a merge with any union data inside the PlatformSettlementCycleMethod, using the provided PlatformSettlementCycleMethodWeekly
func (t *PlatformSettlementCycleMethod) MergePlatformSettlementCycleMethodWeekly(v PlatformSettlementCycleMethodWeekly) error {
	v.Type = "WEEKLY"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PlatformSettlementCycleMethod) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t PlatformSettlementCycleMethod) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "DAILY":
		return t.AsPlatformSettlementCycleMethodDaily()
	case "MANUAL_DATES":
		return t.AsPlatformSettlementCycleMethodManualDates()
	case "MONTHLY":
		return t.AsPlatformSettlementCycleMethodMonthly()
	case "WEEKLY":
		return t.AsPlatformSettlementCycleMethodWeekly()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t PlatformSettlementCycleMethod) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PlatformSettlementCycleMethod) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPlatformSettlementFormulaInvalidFunction returns the union data inside the PlatformSettlementFormulaError as a PlatformSettlementFormulaInvalidFunction
func (t PlatformSettlementFormulaError) AsPlatformSettlementFormulaInvalidFunction() (PlatformSettlementFormulaInvalidFunction, error) {
	var body PlatformSettlementFormulaInvalidFunction
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformSettlementFormulaInvalidFunction overwrites any union data inside the PlatformSettlementFormulaError as the provided PlatformSettlementFormulaInvalidFunction
func (t *PlatformSettlementFormulaError) FromPlatformSettlementFormulaInvalidFunction(v PlatformSettlementFormulaInvalidFunction) error {
	v.Type = "INVALID_FUNCTION"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformSettlementFormulaInvalidFunction performs a merge with any union data inside the PlatformSettlementFormulaError, using the provided PlatformSettlementFormulaInvalidFunction
func (t *PlatformSettlementFormulaError) MergePlatformSettlementFormulaInvalidFunction(v PlatformSettlementFormulaInvalidFunction) error {
	v.Type = "INVALID_FUNCTION"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformSettlementFormulaInvalidOperator returns the union data inside the PlatformSettlementFormulaError as a PlatformSettlementFormulaInvalidOperator
func (t PlatformSettlementFormulaError) AsPlatformSettlementFormulaInvalidOperator() (PlatformSettlementFormulaInvalidOperator, error) {
	var body PlatformSettlementFormulaInvalidOperator
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformSettlementFormulaInvalidOperator overwrites any union data inside the PlatformSettlementFormulaError as the provided PlatformSettlementFormulaInvalidOperator
func (t *PlatformSettlementFormulaError) FromPlatformSettlementFormulaInvalidOperator(v PlatformSettlementFormulaInvalidOperator) error {
	v.Type = "INVALID_OPERATOR"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformSettlementFormulaInvalidOperator performs a merge with any union data inside the PlatformSettlementFormulaError, using the provided PlatformSettlementFormulaInvalidOperator
func (t *PlatformSettlementFormulaError) MergePlatformSettlementFormulaInvalidOperator(v PlatformSettlementFormulaInvalidOperator) error {
	v.Type = "INVALID_OPERATOR"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformSettlementFormulaInvalidSyntax returns the union data inside the PlatformSettlementFormulaError as a PlatformSettlementFormulaInvalidSyntax
func (t PlatformSettlementFormulaError) AsPlatformSettlementFormulaInvalidSyntax() (PlatformSettlementFormulaInvalidSyntax, error) {
	var body PlatformSettlementFormulaInvalidSyntax
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformSettlementFormulaInvalidSyntax overwrites any union data inside the PlatformSettlementFormulaError as the provided PlatformSettlementFormulaInvalidSyntax
func (t *PlatformSettlementFormulaError) FromPlatformSettlementFormulaInvalidSyntax(v PlatformSettlementFormulaInvalidSyntax) error {
	v.Type = "INVALID_SYNTAX"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformSettlementFormulaInvalidSyntax performs a merge with any union data inside the PlatformSettlementFormulaError, using the provided PlatformSettlementFormulaInvalidSyntax
func (t *PlatformSettlementFormulaError) MergePlatformSettlementFormulaInvalidSyntax(v PlatformSettlementFormulaInvalidSyntax) error {
	v.Type = "INVALID_SYNTAX"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformSettlementFormulaInvalidVariable returns the union data inside the PlatformSettlementFormulaError as a PlatformSettlementFormulaInvalidVariable
func (t PlatformSettlementFormulaError) AsPlatformSettlementFormulaInvalidVariable() (PlatformSettlementFormulaInvalidVariable, error) {
	var body PlatformSettlementFormulaInvalidVariable
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformSettlementFormulaInvalidVariable overwrites any union data inside the PlatformSettlementFormulaError as the provided PlatformSettlementFormulaInvalidVariable
func (t *PlatformSettlementFormulaError) FromPlatformSettlementFormulaInvalidVariable(v PlatformSettlementFormulaInvalidVariable) error {
	v.Type = "INVALID_VARIABLE"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformSettlementFormulaInvalidVariable performs a merge with any union data inside the PlatformSettlementFormulaError, using the provided PlatformSettlementFormulaInvalidVariable
func (t *PlatformSettlementFormulaError) MergePlatformSettlementFormulaInvalidVariable(v PlatformSettlementFormulaInvalidVariable) error {
	v.Type = "INVALID_VARIABLE"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformSettlementFormulaUnexpectedFunctionArguments returns the union data inside the PlatformSettlementFormulaError as a PlatformSettlementFormulaUnexpectedFunctionArguments
func (t PlatformSettlementFormulaError) AsPlatformSettlementFormulaUnexpectedFunctionArguments() (PlatformSettlementFormulaUnexpectedFunctionArguments, error) {
	var body PlatformSettlementFormulaUnexpectedFunctionArguments
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformSettlementFormulaUnexpectedFunctionArguments overwrites any union data inside the PlatformSettlementFormulaError as the provided PlatformSettlementFormulaUnexpectedFunctionArguments
func (t *PlatformSettlementFormulaError) FromPlatformSettlementFormulaUnexpectedFunctionArguments(v PlatformSettlementFormulaUnexpectedFunctionArguments) error {
	v.Type = "UNEXPECTED_FUNCTION_ARGUMENTS"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformSettlementFormulaUnexpectedFunctionArguments performs a merge with any union data inside the PlatformSettlementFormulaError, using the provided PlatformSettlementFormulaUnexpectedFunctionArguments
func (t *PlatformSettlementFormulaError) MergePlatformSettlementFormulaUnexpectedFunctionArguments(v PlatformSettlementFormulaUnexpectedFunctionArguments) error {
	v.Type = "UNEXPECTED_FUNCTION_ARGUMENTS"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformSettlementFormulaUnknownError returns the union data inside the PlatformSettlementFormulaError as a PlatformSettlementFormulaUnknownError
func (t PlatformSettlementFormulaError) AsPlatformSettlementFormulaUnknownError() (PlatformSettlementFormulaUnknownError, error) {
	var body PlatformSettlementFormulaUnknownError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformSettlementFormulaUnknownError overwrites any union data inside the PlatformSettlementFormulaError as the provided PlatformSettlementFormulaUnknownError
func (t *PlatformSettlementFormulaError) FromPlatformSettlementFormulaUnknownError(v PlatformSettlementFormulaUnknownError) error {
	v.Type = "UNKNOWN_ERROR"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformSettlementFormulaUnknownError performs a merge with any union data inside the PlatformSettlementFormulaError, using the provided PlatformSettlementFormulaUnknownError
func (t *PlatformSettlementFormulaError) MergePlatformSettlementFormulaUnknownError(v PlatformSettlementFormulaUnknownError) error {
	v.Type = "UNKNOWN_ERROR"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformSettlementFormulaUnsupportedVariable returns the union data inside the PlatformSettlementFormulaError as a PlatformSettlementFormulaUnsupportedVariable
func (t PlatformSettlementFormulaError) AsPlatformSettlementFormulaUnsupportedVariable() (PlatformSettlementFormulaUnsupportedVariable, error) {
	var body PlatformSettlementFormulaUnsupportedVariable
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformSettlementFormulaUnsupportedVariable overwrites any union data inside the PlatformSettlementFormulaError as the provided PlatformSettlementFormulaUnsupportedVariable
func (t *PlatformSettlementFormulaError) FromPlatformSettlementFormulaUnsupportedVariable(v PlatformSettlementFormulaUnsupportedVariable) error {
	v.Type = "UNSUPPORTED_VARIABLE"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformSettlementFormulaUnsupportedVariable performs a merge with any union data inside the PlatformSettlementFormulaError, using the provided PlatformSettlementFormulaUnsupportedVariable
func (t *PlatformSettlementFormulaError) MergePlatformSettlementFormulaUnsupportedVariable(v PlatformSettlementFormulaUnsupportedVariable) error {
	v.Type = "UNSUPPORTED_VARIABLE"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PlatformSettlementFormulaError) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t PlatformSettlementFormulaError) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "INVALID_FUNCTION":
		return t.AsPlatformSettlementFormulaInvalidFunction()
	case "INVALID_OPERATOR":
		return t.AsPlatformSettlementFormulaInvalidOperator()
	case "INVALID_SYNTAX":
		return t.AsPlatformSettlementFormulaInvalidSyntax()
	case "INVALID_VARIABLE":
		return t.AsPlatformSettlementFormulaInvalidVariable()
	case "UNEXPECTED_FUNCTION_ARGUMENTS":
		return t.AsPlatformSettlementFormulaUnexpectedFunctionArguments()
	case "UNKNOWN_ERROR":
		return t.AsPlatformSettlementFormulaUnknownError()
	case "UNSUPPORTED_VARIABLE":
		return t.AsPlatformSettlementFormulaUnsupportedVariable()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t PlatformSettlementFormulaError) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PlatformSettlementFormulaError) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPlatformManualTransfer returns the union data inside the PlatformTransfer as a PlatformManualTransfer
func (t PlatformTransfer) AsPlatformManualTransfer() (PlatformManualTransfer, error) {
	var body PlatformManualTransfer
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformManualTransfer overwrites any union data inside the PlatformTransfer as the provided PlatformManualTransfer
func (t *PlatformTransfer) FromPlatformManualTransfer(v PlatformManualTransfer) error {
	v.Type = "MANUAL"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformManualTransfer performs a merge with any union data inside the PlatformTransfer, using the provided PlatformManualTransfer
func (t *PlatformTransfer) MergePlatformManualTransfer(v PlatformManualTransfer) error {
	v.Type = "MANUAL"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformOrderCancelTransfer returns the union data inside the PlatformTransfer as a PlatformOrderCancelTransfer
func (t PlatformTransfer) AsPlatformOrderCancelTransfer() (PlatformOrderCancelTransfer, error) {
	var body PlatformOrderCancelTransfer
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformOrderCancelTransfer overwrites any union data inside the PlatformTransfer as the provided PlatformOrderCancelTransfer
func (t *PlatformTransfer) FromPlatformOrderCancelTransfer(v PlatformOrderCancelTransfer) error {
	v.Type = "ORDER_CANCEL"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformOrderCancelTransfer performs a merge with any union data inside the PlatformTransfer, using the provided PlatformOrderCancelTransfer
func (t *PlatformTransfer) MergePlatformOrderCancelTransfer(v PlatformOrderCancelTransfer) error {
	v.Type = "ORDER_CANCEL"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformOrderTransfer returns the union data inside the PlatformTransfer as a PlatformOrderTransfer
func (t PlatformTransfer) AsPlatformOrderTransfer() (PlatformOrderTransfer, error) {
	var body PlatformOrderTransfer
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformOrderTransfer overwrites any union data inside the PlatformTransfer as the provided PlatformOrderTransfer
func (t *PlatformTransfer) FromPlatformOrderTransfer(v PlatformOrderTransfer) error {
	v.Type = "ORDER"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformOrderTransfer performs a merge with any union data inside the PlatformTransfer, using the provided PlatformOrderTransfer
func (t *PlatformTransfer) MergePlatformOrderTransfer(v PlatformOrderTransfer) error {
	v.Type = "ORDER"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PlatformTransfer) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t PlatformTransfer) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "MANUAL":
		return t.AsPlatformManualTransfer()
	case "ORDER":
		return t.AsPlatformOrderTransfer()
	case "ORDER_CANCEL":
		return t.AsPlatformOrderCancelTransfer()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t PlatformTransfer) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PlatformTransfer) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPlatformManualTransferSummary returns the union data inside the PlatformTransferSummary as a PlatformManualTransferSummary
func (t PlatformTransferSummary) AsPlatformManualTransferSummary() (PlatformManualTransferSummary, error) {
	var body PlatformManualTransferSummary
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformManualTransferSummary overwrites any union data inside the PlatformTransferSummary as the provided PlatformManualTransferSummary
func (t *PlatformTransferSummary) FromPlatformManualTransferSummary(v PlatformManualTransferSummary) error {
	v.Type = "MANUAL"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformManualTransferSummary performs a merge with any union data inside the PlatformTransferSummary, using the provided PlatformManualTransferSummary
func (t *PlatformTransferSummary) MergePlatformManualTransferSummary(v PlatformManualTransferSummary) error {
	v.Type = "MANUAL"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformOrderCancelTransferSummary returns the union data inside the PlatformTransferSummary as a PlatformOrderCancelTransferSummary
func (t PlatformTransferSummary) AsPlatformOrderCancelTransferSummary() (PlatformOrderCancelTransferSummary, error) {
	var body PlatformOrderCancelTransferSummary
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformOrderCancelTransferSummary overwrites any union data inside the PlatformTransferSummary as the provided PlatformOrderCancelTransferSummary
func (t *PlatformTransferSummary) FromPlatformOrderCancelTransferSummary(v PlatformOrderCancelTransferSummary) error {
	v.Type = "ORDER_CANCEL"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformOrderCancelTransferSummary performs a merge with any union data inside the PlatformTransferSummary, using the provided PlatformOrderCancelTransferSummary
func (t *PlatformTransferSummary) MergePlatformOrderCancelTransferSummary(v PlatformOrderCancelTransferSummary) error {
	v.Type = "ORDER_CANCEL"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformOrderTransferSummary returns the union data inside the PlatformTransferSummary as a PlatformOrderTransferSummary
func (t PlatformTransferSummary) AsPlatformOrderTransferSummary() (PlatformOrderTransferSummary, error) {
	var body PlatformOrderTransferSummary
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformOrderTransferSummary overwrites any union data inside the PlatformTransferSummary as the provided PlatformOrderTransferSummary
func (t *PlatformTransferSummary) FromPlatformOrderTransferSummary(v PlatformOrderTransferSummary) error {
	v.Type = "ORDER"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformOrderTransferSummary performs a merge with any union data inside the PlatformTransferSummary, using the provided PlatformOrderTransferSummary
func (t *PlatformTransferSummary) MergePlatformOrderTransferSummary(v PlatformOrderTransferSummary) error {
	v.Type = "ORDER"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PlatformTransferSummary) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t PlatformTransferSummary) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "MANUAL":
		return t.AsPlatformManualTransferSummary()
	case "ORDER":
		return t.AsPlatformOrderTransferSummary()
	case "ORDER_CANCEL":
		return t.AsPlatformOrderCancelTransferSummary()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t PlatformTransferSummary) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PlatformTransferSummary) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPlatformTransferSummaryExternalPayment returns the union data inside the PlatformTransferSummaryPayment as a PlatformTransferSummaryExternalPayment
func (t PlatformTransferSummaryPayment) AsPlatformTransferSummaryExternalPayment() (PlatformTransferSummaryExternalPayment, error) {
	var body PlatformTransferSummaryExternalPayment
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformTransferSummaryExternalPayment overwrites any union data inside the PlatformTransferSummaryPayment as the provided PlatformTransferSummaryExternalPayment
func (t *PlatformTransferSummaryPayment) FromPlatformTransferSummaryExternalPayment(v PlatformTransferSummaryExternalPayment) error {
	v.Type = "EXTERNAL"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformTransferSummaryExternalPayment performs a merge with any union data inside the PlatformTransferSummaryPayment, using the provided PlatformTransferSummaryExternalPayment
func (t *PlatformTransferSummaryPayment) MergePlatformTransferSummaryExternalPayment(v PlatformTransferSummaryExternalPayment) error {
	v.Type = "EXTERNAL"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformTransferSummaryPortOnePayment returns the union data inside the PlatformTransferSummaryPayment as a PlatformTransferSummaryPortOnePayment
func (t PlatformTransferSummaryPayment) AsPlatformTransferSummaryPortOnePayment() (PlatformTransferSummaryPortOnePayment, error) {
	var body PlatformTransferSummaryPortOnePayment
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformTransferSummaryPortOnePayment overwrites any union data inside the PlatformTransferSummaryPayment as the provided PlatformTransferSummaryPortOnePayment
func (t *PlatformTransferSummaryPayment) FromPlatformTransferSummaryPortOnePayment(v PlatformTransferSummaryPortOnePayment) error {
	v.Type = "PORT_ONE"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformTransferSummaryPortOnePayment performs a merge with any union data inside the PlatformTransferSummaryPayment, using the provided PlatformTransferSummaryPortOnePayment
func (t *PlatformTransferSummaryPayment) MergePlatformTransferSummaryPortOnePayment(v PlatformTransferSummaryPortOnePayment) error {
	v.Type = "PORT_ONE"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PlatformTransferSummaryPayment) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t PlatformTransferSummaryPayment) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "EXTERNAL":
		return t.AsPlatformTransferSummaryExternalPayment()
	case "PORT_ONE":
		return t.AsPlatformTransferSummaryPortOnePayment()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t PlatformTransferSummaryPayment) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PlatformTransferSummaryPayment) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsAlreadyPaidError returns the union data inside the PreRegisterPaymentError as a AlreadyPaidError
func (t PreRegisterPaymentError) AsAlreadyPaidError() (AlreadyPaidError, error) {
	var body AlreadyPaidError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAlreadyPaidError overwrites any union data inside the PreRegisterPaymentError as the provided AlreadyPaidError
func (t *PreRegisterPaymentError) FromAlreadyPaidError(v AlreadyPaidError) error {
	v.Type = "ALREADY_PAID"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAlreadyPaidError performs a merge with any union data inside the PreRegisterPaymentError, using the provided AlreadyPaidError
func (t *PreRegisterPaymentError) MergeAlreadyPaidError(v AlreadyPaidError) error {
	v.Type = "ALREADY_PAID"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsForbiddenError returns the union data inside the PreRegisterPaymentError as a ForbiddenError
func (t PreRegisterPaymentError) AsForbiddenError() (ForbiddenError, error) {
	var body ForbiddenError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromForbiddenError overwrites any union data inside the PreRegisterPaymentError as the provided ForbiddenError
func (t *PreRegisterPaymentError) FromForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeForbiddenError performs a merge with any union data inside the PreRegisterPaymentError, using the provided ForbiddenError
func (t *PreRegisterPaymentError) MergeForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInvalidRequestError returns the union data inside the PreRegisterPaymentError as a InvalidRequestError
func (t PreRegisterPaymentError) AsInvalidRequestError() (InvalidRequestError, error) {
	var body InvalidRequestError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInvalidRequestError overwrites any union data inside the PreRegisterPaymentError as the provided InvalidRequestError
func (t *PreRegisterPaymentError) FromInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInvalidRequestError performs a merge with any union data inside the PreRegisterPaymentError, using the provided InvalidRequestError
func (t *PreRegisterPaymentError) MergeInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUnauthorizedError returns the union data inside the PreRegisterPaymentError as a UnauthorizedError
func (t PreRegisterPaymentError) AsUnauthorizedError() (UnauthorizedError, error) {
	var body UnauthorizedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUnauthorizedError overwrites any union data inside the PreRegisterPaymentError as the provided UnauthorizedError
func (t *PreRegisterPaymentError) FromUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUnauthorizedError performs a merge with any union data inside the PreRegisterPaymentError, using the provided UnauthorizedError
func (t *PreRegisterPaymentError) MergeUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PreRegisterPaymentError) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t PreRegisterPaymentError) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "ALREADY_PAID":
		return t.AsAlreadyPaidError()
	case "FORBIDDEN":
		return t.AsForbiddenError()
	case "INVALID_REQUEST":
		return t.AsInvalidRequestError()
	case "UNAUTHORIZED":
		return t.AsUnauthorizedError()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t PreRegisterPaymentError) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PreRegisterPaymentError) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsCardPromotion returns the union data inside the Promotion as a CardPromotion
func (t Promotion) AsCardPromotion() (CardPromotion, error) {
	var body CardPromotion
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCardPromotion overwrites any union data inside the Promotion as the provided CardPromotion
func (t *Promotion) FromCardPromotion(v CardPromotion) error {
	v.Type = "CARD"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCardPromotion performs a merge with any union data inside the Promotion, using the provided CardPromotion
func (t *Promotion) MergeCardPromotion(v CardPromotion) error {
	v.Type = "CARD"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Promotion) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t Promotion) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "CARD":
		return t.AsCardPromotion()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t Promotion) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Promotion) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPromotionAmountDiscountScheme returns the union data inside the PromotionDiscountScheme as a PromotionAmountDiscountScheme
func (t PromotionDiscountScheme) AsPromotionAmountDiscountScheme() (PromotionAmountDiscountScheme, error) {
	var body PromotionAmountDiscountScheme
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPromotionAmountDiscountScheme overwrites any union data inside the PromotionDiscountScheme as the provided PromotionAmountDiscountScheme
func (t *PromotionDiscountScheme) FromPromotionAmountDiscountScheme(v PromotionAmountDiscountScheme) error {
	v.Type = "AMOUNT"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePromotionAmountDiscountScheme performs a merge with any union data inside the PromotionDiscountScheme, using the provided PromotionAmountDiscountScheme
func (t *PromotionDiscountScheme) MergePromotionAmountDiscountScheme(v PromotionAmountDiscountScheme) error {
	v.Type = "AMOUNT"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPromotionPercentDiscountScheme returns the union data inside the PromotionDiscountScheme as a PromotionPercentDiscountScheme
func (t PromotionDiscountScheme) AsPromotionPercentDiscountScheme() (PromotionPercentDiscountScheme, error) {
	var body PromotionPercentDiscountScheme
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPromotionPercentDiscountScheme overwrites any union data inside the PromotionDiscountScheme as the provided PromotionPercentDiscountScheme
func (t *PromotionDiscountScheme) FromPromotionPercentDiscountScheme(v PromotionPercentDiscountScheme) error {
	v.Type = "PERCENT"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePromotionPercentDiscountScheme performs a merge with any union data inside the PromotionDiscountScheme, using the provided PromotionPercentDiscountScheme
func (t *PromotionDiscountScheme) MergePromotionPercentDiscountScheme(v PromotionPercentDiscountScheme) error {
	v.Type = "PERCENT"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PromotionDiscountScheme) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t PromotionDiscountScheme) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "AMOUNT":
		return t.AsPromotionAmountDiscountScheme()
	case "PERCENT":
		return t.AsPromotionPercentDiscountScheme()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t PromotionDiscountScheme) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PromotionDiscountScheme) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPromotionRecoverOptionNoRecover returns the union data inside the PromotionRecoverOption as a PromotionRecoverOptionNoRecover
func (t PromotionRecoverOption) AsPromotionRecoverOptionNoRecover() (PromotionRecoverOptionNoRecover, error) {
	var body PromotionRecoverOptionNoRecover
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPromotionRecoverOptionNoRecover overwrites any union data inside the PromotionRecoverOption as the provided PromotionRecoverOptionNoRecover
func (t *PromotionRecoverOption) FromPromotionRecoverOptionNoRecover(v PromotionRecoverOptionNoRecover) error {
	v.Type = "NO_RECOVER"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePromotionRecoverOptionNoRecover performs a merge with any union data inside the PromotionRecoverOption, using the provided PromotionRecoverOptionNoRecover
func (t *PromotionRecoverOption) MergePromotionRecoverOptionNoRecover(v PromotionRecoverOptionNoRecover) error {
	v.Type = "NO_RECOVER"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPromotionRecoverOptionRecover returns the union data inside the PromotionRecoverOption as a PromotionRecoverOptionRecover
func (t PromotionRecoverOption) AsPromotionRecoverOptionRecover() (PromotionRecoverOptionRecover, error) {
	var body PromotionRecoverOptionRecover
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPromotionRecoverOptionRecover overwrites any union data inside the PromotionRecoverOption as the provided PromotionRecoverOptionRecover
func (t *PromotionRecoverOption) FromPromotionRecoverOptionRecover(v PromotionRecoverOptionRecover) error {
	v.Type = "RECOVER"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePromotionRecoverOptionRecover performs a merge with any union data inside the PromotionRecoverOption, using the provided PromotionRecoverOptionRecover
func (t *PromotionRecoverOption) MergePromotionRecoverOptionRecover(v PromotionRecoverOptionRecover) error {
	v.Type = "RECOVER"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PromotionRecoverOption) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t PromotionRecoverOption) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "NO_RECOVER":
		return t.AsPromotionRecoverOptionNoRecover()
	case "RECOVER":
		return t.AsPromotionRecoverOptionRecover()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t PromotionRecoverOption) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PromotionRecoverOption) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPromotionSpareBudgetAmount returns the union data inside the PromotionSpareBudget as a PromotionSpareBudgetAmount
func (t PromotionSpareBudget) AsPromotionSpareBudgetAmount() (PromotionSpareBudgetAmount, error) {
	var body PromotionSpareBudgetAmount
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPromotionSpareBudgetAmount overwrites any union data inside the PromotionSpareBudget as the provided PromotionSpareBudgetAmount
func (t *PromotionSpareBudget) FromPromotionSpareBudgetAmount(v PromotionSpareBudgetAmount) error {
	v.Type = "AMOUNT"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePromotionSpareBudgetAmount performs a merge with any union data inside the PromotionSpareBudget, using the provided PromotionSpareBudgetAmount
func (t *PromotionSpareBudget) MergePromotionSpareBudgetAmount(v PromotionSpareBudgetAmount) error {
	v.Type = "AMOUNT"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPromotionSpareBudgetPercent returns the union data inside the PromotionSpareBudget as a PromotionSpareBudgetPercent
func (t PromotionSpareBudget) AsPromotionSpareBudgetPercent() (PromotionSpareBudgetPercent, error) {
	var body PromotionSpareBudgetPercent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPromotionSpareBudgetPercent overwrites any union data inside the PromotionSpareBudget as the provided PromotionSpareBudgetPercent
func (t *PromotionSpareBudget) FromPromotionSpareBudgetPercent(v PromotionSpareBudgetPercent) error {
	v.Type = "PERCENT"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePromotionSpareBudgetPercent performs a merge with any union data inside the PromotionSpareBudget, using the provided PromotionSpareBudgetPercent
func (t *PromotionSpareBudget) MergePromotionSpareBudgetPercent(v PromotionSpareBudgetPercent) error {
	v.Type = "PERCENT"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PromotionSpareBudget) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t PromotionSpareBudget) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "AMOUNT":
		return t.AsPromotionSpareBudgetAmount()
	case "PERCENT":
		return t.AsPromotionSpareBudgetPercent()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t PromotionSpareBudget) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PromotionSpareBudget) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsForbiddenError returns the union data inside the RecoverPlatformAdditionalFeePolicyError as a ForbiddenError
func (t RecoverPlatformAdditionalFeePolicyError) AsForbiddenError() (ForbiddenError, error) {
	var body ForbiddenError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromForbiddenError overwrites any union data inside the RecoverPlatformAdditionalFeePolicyError as the provided ForbiddenError
func (t *RecoverPlatformAdditionalFeePolicyError) FromForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeForbiddenError performs a merge with any union data inside the RecoverPlatformAdditionalFeePolicyError, using the provided ForbiddenError
func (t *RecoverPlatformAdditionalFeePolicyError) MergeForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInvalidRequestError returns the union data inside the RecoverPlatformAdditionalFeePolicyError as a InvalidRequestError
func (t RecoverPlatformAdditionalFeePolicyError) AsInvalidRequestError() (InvalidRequestError, error) {
	var body InvalidRequestError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInvalidRequestError overwrites any union data inside the RecoverPlatformAdditionalFeePolicyError as the provided InvalidRequestError
func (t *RecoverPlatformAdditionalFeePolicyError) FromInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInvalidRequestError performs a merge with any union data inside the RecoverPlatformAdditionalFeePolicyError, using the provided InvalidRequestError
func (t *RecoverPlatformAdditionalFeePolicyError) MergeInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformAdditionalFeePolicyNotFoundError returns the union data inside the RecoverPlatformAdditionalFeePolicyError as a PlatformAdditionalFeePolicyNotFoundError
func (t RecoverPlatformAdditionalFeePolicyError) AsPlatformAdditionalFeePolicyNotFoundError() (PlatformAdditionalFeePolicyNotFoundError, error) {
	var body PlatformAdditionalFeePolicyNotFoundError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformAdditionalFeePolicyNotFoundError overwrites any union data inside the RecoverPlatformAdditionalFeePolicyError as the provided PlatformAdditionalFeePolicyNotFoundError
func (t *RecoverPlatformAdditionalFeePolicyError) FromPlatformAdditionalFeePolicyNotFoundError(v PlatformAdditionalFeePolicyNotFoundError) error {
	v.Type = "PLATFORM_ADDITIONAL_FEE_POLICY_NOT_FOUND"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformAdditionalFeePolicyNotFoundError performs a merge with any union data inside the RecoverPlatformAdditionalFeePolicyError, using the provided PlatformAdditionalFeePolicyNotFoundError
func (t *RecoverPlatformAdditionalFeePolicyError) MergePlatformAdditionalFeePolicyNotFoundError(v PlatformAdditionalFeePolicyNotFoundError) error {
	v.Type = "PLATFORM_ADDITIONAL_FEE_POLICY_NOT_FOUND"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformNotEnabledError returns the union data inside the RecoverPlatformAdditionalFeePolicyError as a PlatformNotEnabledError
func (t RecoverPlatformAdditionalFeePolicyError) AsPlatformNotEnabledError() (PlatformNotEnabledError, error) {
	var body PlatformNotEnabledError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformNotEnabledError overwrites any union data inside the RecoverPlatformAdditionalFeePolicyError as the provided PlatformNotEnabledError
func (t *RecoverPlatformAdditionalFeePolicyError) FromPlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformNotEnabledError performs a merge with any union data inside the RecoverPlatformAdditionalFeePolicyError, using the provided PlatformNotEnabledError
func (t *RecoverPlatformAdditionalFeePolicyError) MergePlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUnauthorizedError returns the union data inside the RecoverPlatformAdditionalFeePolicyError as a UnauthorizedError
func (t RecoverPlatformAdditionalFeePolicyError) AsUnauthorizedError() (UnauthorizedError, error) {
	var body UnauthorizedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUnauthorizedError overwrites any union data inside the RecoverPlatformAdditionalFeePolicyError as the provided UnauthorizedError
func (t *RecoverPlatformAdditionalFeePolicyError) FromUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUnauthorizedError performs a merge with any union data inside the RecoverPlatformAdditionalFeePolicyError, using the provided UnauthorizedError
func (t *RecoverPlatformAdditionalFeePolicyError) MergeUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t RecoverPlatformAdditionalFeePolicyError) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t RecoverPlatformAdditionalFeePolicyError) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "FORBIDDEN":
		return t.AsForbiddenError()
	case "INVALID_REQUEST":
		return t.AsInvalidRequestError()
	case "PLATFORM_ADDITIONAL_FEE_POLICY_NOT_FOUND":
		return t.AsPlatformAdditionalFeePolicyNotFoundError()
	case "PLATFORM_NOT_ENABLED":
		return t.AsPlatformNotEnabledError()
	case "UNAUTHORIZED":
		return t.AsUnauthorizedError()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t RecoverPlatformAdditionalFeePolicyError) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *RecoverPlatformAdditionalFeePolicyError) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsForbiddenError returns the union data inside the RecoverPlatformContractError as a ForbiddenError
func (t RecoverPlatformContractError) AsForbiddenError() (ForbiddenError, error) {
	var body ForbiddenError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromForbiddenError overwrites any union data inside the RecoverPlatformContractError as the provided ForbiddenError
func (t *RecoverPlatformContractError) FromForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeForbiddenError performs a merge with any union data inside the RecoverPlatformContractError, using the provided ForbiddenError
func (t *RecoverPlatformContractError) MergeForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInvalidRequestError returns the union data inside the RecoverPlatformContractError as a InvalidRequestError
func (t RecoverPlatformContractError) AsInvalidRequestError() (InvalidRequestError, error) {
	var body InvalidRequestError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInvalidRequestError overwrites any union data inside the RecoverPlatformContractError as the provided InvalidRequestError
func (t *RecoverPlatformContractError) FromInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInvalidRequestError performs a merge with any union data inside the RecoverPlatformContractError, using the provided InvalidRequestError
func (t *RecoverPlatformContractError) MergeInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformContractNotFoundError returns the union data inside the RecoverPlatformContractError as a PlatformContractNotFoundError
func (t RecoverPlatformContractError) AsPlatformContractNotFoundError() (PlatformContractNotFoundError, error) {
	var body PlatformContractNotFoundError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformContractNotFoundError overwrites any union data inside the RecoverPlatformContractError as the provided PlatformContractNotFoundError
func (t *RecoverPlatformContractError) FromPlatformContractNotFoundError(v PlatformContractNotFoundError) error {
	v.Type = "PLATFORM_CONTRACT_NOT_FOUND"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformContractNotFoundError performs a merge with any union data inside the RecoverPlatformContractError, using the provided PlatformContractNotFoundError
func (t *RecoverPlatformContractError) MergePlatformContractNotFoundError(v PlatformContractNotFoundError) error {
	v.Type = "PLATFORM_CONTRACT_NOT_FOUND"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformNotEnabledError returns the union data inside the RecoverPlatformContractError as a PlatformNotEnabledError
func (t RecoverPlatformContractError) AsPlatformNotEnabledError() (PlatformNotEnabledError, error) {
	var body PlatformNotEnabledError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformNotEnabledError overwrites any union data inside the RecoverPlatformContractError as the provided PlatformNotEnabledError
func (t *RecoverPlatformContractError) FromPlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformNotEnabledError performs a merge with any union data inside the RecoverPlatformContractError, using the provided PlatformNotEnabledError
func (t *RecoverPlatformContractError) MergePlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUnauthorizedError returns the union data inside the RecoverPlatformContractError as a UnauthorizedError
func (t RecoverPlatformContractError) AsUnauthorizedError() (UnauthorizedError, error) {
	var body UnauthorizedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUnauthorizedError overwrites any union data inside the RecoverPlatformContractError as the provided UnauthorizedError
func (t *RecoverPlatformContractError) FromUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUnauthorizedError performs a merge with any union data inside the RecoverPlatformContractError, using the provided UnauthorizedError
func (t *RecoverPlatformContractError) MergeUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t RecoverPlatformContractError) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t RecoverPlatformContractError) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "FORBIDDEN":
		return t.AsForbiddenError()
	case "INVALID_REQUEST":
		return t.AsInvalidRequestError()
	case "PLATFORM_CONTRACT_NOT_FOUND":
		return t.AsPlatformContractNotFoundError()
	case "PLATFORM_NOT_ENABLED":
		return t.AsPlatformNotEnabledError()
	case "UNAUTHORIZED":
		return t.AsUnauthorizedError()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t RecoverPlatformContractError) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *RecoverPlatformContractError) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsForbiddenError returns the union data inside the RecoverPlatformDiscountSharePolicyError as a ForbiddenError
func (t RecoverPlatformDiscountSharePolicyError) AsForbiddenError() (ForbiddenError, error) {
	var body ForbiddenError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromForbiddenError overwrites any union data inside the RecoverPlatformDiscountSharePolicyError as the provided ForbiddenError
func (t *RecoverPlatformDiscountSharePolicyError) FromForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeForbiddenError performs a merge with any union data inside the RecoverPlatformDiscountSharePolicyError, using the provided ForbiddenError
func (t *RecoverPlatformDiscountSharePolicyError) MergeForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInvalidRequestError returns the union data inside the RecoverPlatformDiscountSharePolicyError as a InvalidRequestError
func (t RecoverPlatformDiscountSharePolicyError) AsInvalidRequestError() (InvalidRequestError, error) {
	var body InvalidRequestError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInvalidRequestError overwrites any union data inside the RecoverPlatformDiscountSharePolicyError as the provided InvalidRequestError
func (t *RecoverPlatformDiscountSharePolicyError) FromInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInvalidRequestError performs a merge with any union data inside the RecoverPlatformDiscountSharePolicyError, using the provided InvalidRequestError
func (t *RecoverPlatformDiscountSharePolicyError) MergeInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformDiscountSharePolicyNotFoundError returns the union data inside the RecoverPlatformDiscountSharePolicyError as a PlatformDiscountSharePolicyNotFoundError
func (t RecoverPlatformDiscountSharePolicyError) AsPlatformDiscountSharePolicyNotFoundError() (PlatformDiscountSharePolicyNotFoundError, error) {
	var body PlatformDiscountSharePolicyNotFoundError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformDiscountSharePolicyNotFoundError overwrites any union data inside the RecoverPlatformDiscountSharePolicyError as the provided PlatformDiscountSharePolicyNotFoundError
func (t *RecoverPlatformDiscountSharePolicyError) FromPlatformDiscountSharePolicyNotFoundError(v PlatformDiscountSharePolicyNotFoundError) error {
	v.Type = "PLATFORM_DISCOUNT_SHARE_POLICY_NOT_FOUND"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformDiscountSharePolicyNotFoundError performs a merge with any union data inside the RecoverPlatformDiscountSharePolicyError, using the provided PlatformDiscountSharePolicyNotFoundError
func (t *RecoverPlatformDiscountSharePolicyError) MergePlatformDiscountSharePolicyNotFoundError(v PlatformDiscountSharePolicyNotFoundError) error {
	v.Type = "PLATFORM_DISCOUNT_SHARE_POLICY_NOT_FOUND"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformNotEnabledError returns the union data inside the RecoverPlatformDiscountSharePolicyError as a PlatformNotEnabledError
func (t RecoverPlatformDiscountSharePolicyError) AsPlatformNotEnabledError() (PlatformNotEnabledError, error) {
	var body PlatformNotEnabledError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformNotEnabledError overwrites any union data inside the RecoverPlatformDiscountSharePolicyError as the provided PlatformNotEnabledError
func (t *RecoverPlatformDiscountSharePolicyError) FromPlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformNotEnabledError performs a merge with any union data inside the RecoverPlatformDiscountSharePolicyError, using the provided PlatformNotEnabledError
func (t *RecoverPlatformDiscountSharePolicyError) MergePlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUnauthorizedError returns the union data inside the RecoverPlatformDiscountSharePolicyError as a UnauthorizedError
func (t RecoverPlatformDiscountSharePolicyError) AsUnauthorizedError() (UnauthorizedError, error) {
	var body UnauthorizedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUnauthorizedError overwrites any union data inside the RecoverPlatformDiscountSharePolicyError as the provided UnauthorizedError
func (t *RecoverPlatformDiscountSharePolicyError) FromUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUnauthorizedError performs a merge with any union data inside the RecoverPlatformDiscountSharePolicyError, using the provided UnauthorizedError
func (t *RecoverPlatformDiscountSharePolicyError) MergeUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t RecoverPlatformDiscountSharePolicyError) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t RecoverPlatformDiscountSharePolicyError) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "FORBIDDEN":
		return t.AsForbiddenError()
	case "INVALID_REQUEST":
		return t.AsInvalidRequestError()
	case "PLATFORM_DISCOUNT_SHARE_POLICY_NOT_FOUND":
		return t.AsPlatformDiscountSharePolicyNotFoundError()
	case "PLATFORM_NOT_ENABLED":
		return t.AsPlatformNotEnabledError()
	case "UNAUTHORIZED":
		return t.AsUnauthorizedError()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t RecoverPlatformDiscountSharePolicyError) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *RecoverPlatformDiscountSharePolicyError) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsForbiddenError returns the union data inside the RecoverPlatformPartnerError as a ForbiddenError
func (t RecoverPlatformPartnerError) AsForbiddenError() (ForbiddenError, error) {
	var body ForbiddenError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromForbiddenError overwrites any union data inside the RecoverPlatformPartnerError as the provided ForbiddenError
func (t *RecoverPlatformPartnerError) FromForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeForbiddenError performs a merge with any union data inside the RecoverPlatformPartnerError, using the provided ForbiddenError
func (t *RecoverPlatformPartnerError) MergeForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInvalidRequestError returns the union data inside the RecoverPlatformPartnerError as a InvalidRequestError
func (t RecoverPlatformPartnerError) AsInvalidRequestError() (InvalidRequestError, error) {
	var body InvalidRequestError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInvalidRequestError overwrites any union data inside the RecoverPlatformPartnerError as the provided InvalidRequestError
func (t *RecoverPlatformPartnerError) FromInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInvalidRequestError performs a merge with any union data inside the RecoverPlatformPartnerError, using the provided InvalidRequestError
func (t *RecoverPlatformPartnerError) MergeInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformNotEnabledError returns the union data inside the RecoverPlatformPartnerError as a PlatformNotEnabledError
func (t RecoverPlatformPartnerError) AsPlatformNotEnabledError() (PlatformNotEnabledError, error) {
	var body PlatformNotEnabledError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformNotEnabledError overwrites any union data inside the RecoverPlatformPartnerError as the provided PlatformNotEnabledError
func (t *RecoverPlatformPartnerError) FromPlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformNotEnabledError performs a merge with any union data inside the RecoverPlatformPartnerError, using the provided PlatformNotEnabledError
func (t *RecoverPlatformPartnerError) MergePlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformPartnerNotFoundError returns the union data inside the RecoverPlatformPartnerError as a PlatformPartnerNotFoundError
func (t RecoverPlatformPartnerError) AsPlatformPartnerNotFoundError() (PlatformPartnerNotFoundError, error) {
	var body PlatformPartnerNotFoundError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformPartnerNotFoundError overwrites any union data inside the RecoverPlatformPartnerError as the provided PlatformPartnerNotFoundError
func (t *RecoverPlatformPartnerError) FromPlatformPartnerNotFoundError(v PlatformPartnerNotFoundError) error {
	v.Type = "PLATFORM_PARTNER_NOT_FOUND"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformPartnerNotFoundError performs a merge with any union data inside the RecoverPlatformPartnerError, using the provided PlatformPartnerNotFoundError
func (t *RecoverPlatformPartnerError) MergePlatformPartnerNotFoundError(v PlatformPartnerNotFoundError) error {
	v.Type = "PLATFORM_PARTNER_NOT_FOUND"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUnauthorizedError returns the union data inside the RecoverPlatformPartnerError as a UnauthorizedError
func (t RecoverPlatformPartnerError) AsUnauthorizedError() (UnauthorizedError, error) {
	var body UnauthorizedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUnauthorizedError overwrites any union data inside the RecoverPlatformPartnerError as the provided UnauthorizedError
func (t *RecoverPlatformPartnerError) FromUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUnauthorizedError performs a merge with any union data inside the RecoverPlatformPartnerError, using the provided UnauthorizedError
func (t *RecoverPlatformPartnerError) MergeUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t RecoverPlatformPartnerError) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t RecoverPlatformPartnerError) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "FORBIDDEN":
		return t.AsForbiddenError()
	case "INVALID_REQUEST":
		return t.AsInvalidRequestError()
	case "PLATFORM_NOT_ENABLED":
		return t.AsPlatformNotEnabledError()
	case "PLATFORM_PARTNER_NOT_FOUND":
		return t.AsPlatformPartnerNotFoundError()
	case "UNAUTHORIZED":
		return t.AsUnauthorizedError()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t RecoverPlatformPartnerError) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *RecoverPlatformPartnerError) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsInvalidRequestError returns the union data inside the RefreshTokenError as a InvalidRequestError
func (t RefreshTokenError) AsInvalidRequestError() (InvalidRequestError, error) {
	var body InvalidRequestError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInvalidRequestError overwrites any union data inside the RefreshTokenError as the provided InvalidRequestError
func (t *RefreshTokenError) FromInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInvalidRequestError performs a merge with any union data inside the RefreshTokenError, using the provided InvalidRequestError
func (t *RefreshTokenError) MergeInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUnauthorizedError returns the union data inside the RefreshTokenError as a UnauthorizedError
func (t RefreshTokenError) AsUnauthorizedError() (UnauthorizedError, error) {
	var body UnauthorizedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUnauthorizedError overwrites any union data inside the RefreshTokenError as the provided UnauthorizedError
func (t *RefreshTokenError) FromUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUnauthorizedError performs a merge with any union data inside the RefreshTokenError, using the provided UnauthorizedError
func (t *RefreshTokenError) MergeUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t RefreshTokenError) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t RefreshTokenError) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "INVALID_REQUEST":
		return t.AsInvalidRequestError()
	case "UNAUTHORIZED":
		return t.AsUnauthorizedError()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t RefreshTokenError) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *RefreshTokenError) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsForbiddenError returns the union data inside the RegisterStoreReceiptError as a ForbiddenError
func (t RegisterStoreReceiptError) AsForbiddenError() (ForbiddenError, error) {
	var body ForbiddenError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromForbiddenError overwrites any union data inside the RegisterStoreReceiptError as the provided ForbiddenError
func (t *RegisterStoreReceiptError) FromForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeForbiddenError performs a merge with any union data inside the RegisterStoreReceiptError, using the provided ForbiddenError
func (t *RegisterStoreReceiptError) MergeForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInvalidRequestError returns the union data inside the RegisterStoreReceiptError as a InvalidRequestError
func (t RegisterStoreReceiptError) AsInvalidRequestError() (InvalidRequestError, error) {
	var body InvalidRequestError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInvalidRequestError overwrites any union data inside the RegisterStoreReceiptError as the provided InvalidRequestError
func (t *RegisterStoreReceiptError) FromInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInvalidRequestError performs a merge with any union data inside the RegisterStoreReceiptError, using the provided InvalidRequestError
func (t *RegisterStoreReceiptError) MergeInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPaymentNotFoundError returns the union data inside the RegisterStoreReceiptError as a PaymentNotFoundError
func (t RegisterStoreReceiptError) AsPaymentNotFoundError() (PaymentNotFoundError, error) {
	var body PaymentNotFoundError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPaymentNotFoundError overwrites any union data inside the RegisterStoreReceiptError as the provided PaymentNotFoundError
func (t *RegisterStoreReceiptError) FromPaymentNotFoundError(v PaymentNotFoundError) error {
	v.Type = "PAYMENT_NOT_FOUND"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePaymentNotFoundError performs a merge with any union data inside the RegisterStoreReceiptError, using the provided PaymentNotFoundError
func (t *RegisterStoreReceiptError) MergePaymentNotFoundError(v PaymentNotFoundError) error {
	v.Type = "PAYMENT_NOT_FOUND"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPaymentNotPaidError returns the union data inside the RegisterStoreReceiptError as a PaymentNotPaidError
func (t RegisterStoreReceiptError) AsPaymentNotPaidError() (PaymentNotPaidError, error) {
	var body PaymentNotPaidError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPaymentNotPaidError overwrites any union data inside the RegisterStoreReceiptError as the provided PaymentNotPaidError
func (t *RegisterStoreReceiptError) FromPaymentNotPaidError(v PaymentNotPaidError) error {
	v.Type = "PAYMENT_NOT_PAID"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePaymentNotPaidError performs a merge with any union data inside the RegisterStoreReceiptError, using the provided PaymentNotPaidError
func (t *RegisterStoreReceiptError) MergePaymentNotPaidError(v PaymentNotPaidError) error {
	v.Type = "PAYMENT_NOT_PAID"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPgProviderError returns the union data inside the RegisterStoreReceiptError as a PgProviderError
func (t RegisterStoreReceiptError) AsPgProviderError() (PgProviderError, error) {
	var body PgProviderError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPgProviderError overwrites any union data inside the RegisterStoreReceiptError as the provided PgProviderError
func (t *RegisterStoreReceiptError) FromPgProviderError(v PgProviderError) error {
	v.Type = "PG_PROVIDER"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePgProviderError performs a merge with any union data inside the RegisterStoreReceiptError, using the provided PgProviderError
func (t *RegisterStoreReceiptError) MergePgProviderError(v PgProviderError) error {
	v.Type = "PG_PROVIDER"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUnauthorizedError returns the union data inside the RegisterStoreReceiptError as a UnauthorizedError
func (t RegisterStoreReceiptError) AsUnauthorizedError() (UnauthorizedError, error) {
	var body UnauthorizedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUnauthorizedError overwrites any union data inside the RegisterStoreReceiptError as the provided UnauthorizedError
func (t *RegisterStoreReceiptError) FromUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUnauthorizedError performs a merge with any union data inside the RegisterStoreReceiptError, using the provided UnauthorizedError
func (t *RegisterStoreReceiptError) MergeUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t RegisterStoreReceiptError) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t RegisterStoreReceiptError) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "FORBIDDEN":
		return t.AsForbiddenError()
	case "INVALID_REQUEST":
		return t.AsInvalidRequestError()
	case "PAYMENT_NOT_FOUND":
		return t.AsPaymentNotFoundError()
	case "PAYMENT_NOT_PAID":
		return t.AsPaymentNotPaidError()
	case "PG_PROVIDER":
		return t.AsPgProviderError()
	case "UNAUTHORIZED":
		return t.AsUnauthorizedError()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t RegisterStoreReceiptError) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *RegisterStoreReceiptError) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsForbiddenError returns the union data inside the RescheduleAdditionalFeePolicyError as a ForbiddenError
func (t RescheduleAdditionalFeePolicyError) AsForbiddenError() (ForbiddenError, error) {
	var body ForbiddenError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromForbiddenError overwrites any union data inside the RescheduleAdditionalFeePolicyError as the provided ForbiddenError
func (t *RescheduleAdditionalFeePolicyError) FromForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeForbiddenError performs a merge with any union data inside the RescheduleAdditionalFeePolicyError, using the provided ForbiddenError
func (t *RescheduleAdditionalFeePolicyError) MergeForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInvalidRequestError returns the union data inside the RescheduleAdditionalFeePolicyError as a InvalidRequestError
func (t RescheduleAdditionalFeePolicyError) AsInvalidRequestError() (InvalidRequestError, error) {
	var body InvalidRequestError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInvalidRequestError overwrites any union data inside the RescheduleAdditionalFeePolicyError as the provided InvalidRequestError
func (t *RescheduleAdditionalFeePolicyError) FromInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInvalidRequestError performs a merge with any union data inside the RescheduleAdditionalFeePolicyError, using the provided InvalidRequestError
func (t *RescheduleAdditionalFeePolicyError) MergeInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformAdditionalFeePolicyNotFoundError returns the union data inside the RescheduleAdditionalFeePolicyError as a PlatformAdditionalFeePolicyNotFoundError
func (t RescheduleAdditionalFeePolicyError) AsPlatformAdditionalFeePolicyNotFoundError() (PlatformAdditionalFeePolicyNotFoundError, error) {
	var body PlatformAdditionalFeePolicyNotFoundError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformAdditionalFeePolicyNotFoundError overwrites any union data inside the RescheduleAdditionalFeePolicyError as the provided PlatformAdditionalFeePolicyNotFoundError
func (t *RescheduleAdditionalFeePolicyError) FromPlatformAdditionalFeePolicyNotFoundError(v PlatformAdditionalFeePolicyNotFoundError) error {
	v.Type = "PLATFORM_ADDITIONAL_FEE_POLICY_NOT_FOUND"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformAdditionalFeePolicyNotFoundError performs a merge with any union data inside the RescheduleAdditionalFeePolicyError, using the provided PlatformAdditionalFeePolicyNotFoundError
func (t *RescheduleAdditionalFeePolicyError) MergePlatformAdditionalFeePolicyNotFoundError(v PlatformAdditionalFeePolicyNotFoundError) error {
	v.Type = "PLATFORM_ADDITIONAL_FEE_POLICY_NOT_FOUND"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformNotEnabledError returns the union data inside the RescheduleAdditionalFeePolicyError as a PlatformNotEnabledError
func (t RescheduleAdditionalFeePolicyError) AsPlatformNotEnabledError() (PlatformNotEnabledError, error) {
	var body PlatformNotEnabledError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformNotEnabledError overwrites any union data inside the RescheduleAdditionalFeePolicyError as the provided PlatformNotEnabledError
func (t *RescheduleAdditionalFeePolicyError) FromPlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformNotEnabledError performs a merge with any union data inside the RescheduleAdditionalFeePolicyError, using the provided PlatformNotEnabledError
func (t *RescheduleAdditionalFeePolicyError) MergePlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUnauthorizedError returns the union data inside the RescheduleAdditionalFeePolicyError as a UnauthorizedError
func (t RescheduleAdditionalFeePolicyError) AsUnauthorizedError() (UnauthorizedError, error) {
	var body UnauthorizedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUnauthorizedError overwrites any union data inside the RescheduleAdditionalFeePolicyError as the provided UnauthorizedError
func (t *RescheduleAdditionalFeePolicyError) FromUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUnauthorizedError performs a merge with any union data inside the RescheduleAdditionalFeePolicyError, using the provided UnauthorizedError
func (t *RescheduleAdditionalFeePolicyError) MergeUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t RescheduleAdditionalFeePolicyError) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t RescheduleAdditionalFeePolicyError) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "FORBIDDEN":
		return t.AsForbiddenError()
	case "INVALID_REQUEST":
		return t.AsInvalidRequestError()
	case "PLATFORM_ADDITIONAL_FEE_POLICY_NOT_FOUND":
		return t.AsPlatformAdditionalFeePolicyNotFoundError()
	case "PLATFORM_NOT_ENABLED":
		return t.AsPlatformNotEnabledError()
	case "UNAUTHORIZED":
		return t.AsUnauthorizedError()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t RescheduleAdditionalFeePolicyError) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *RescheduleAdditionalFeePolicyError) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsForbiddenError returns the union data inside the RescheduleContractError as a ForbiddenError
func (t RescheduleContractError) AsForbiddenError() (ForbiddenError, error) {
	var body ForbiddenError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromForbiddenError overwrites any union data inside the RescheduleContractError as the provided ForbiddenError
func (t *RescheduleContractError) FromForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeForbiddenError performs a merge with any union data inside the RescheduleContractError, using the provided ForbiddenError
func (t *RescheduleContractError) MergeForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInvalidRequestError returns the union data inside the RescheduleContractError as a InvalidRequestError
func (t RescheduleContractError) AsInvalidRequestError() (InvalidRequestError, error) {
	var body InvalidRequestError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInvalidRequestError overwrites any union data inside the RescheduleContractError as the provided InvalidRequestError
func (t *RescheduleContractError) FromInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInvalidRequestError performs a merge with any union data inside the RescheduleContractError, using the provided InvalidRequestError
func (t *RescheduleContractError) MergeInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformContractNotFoundError returns the union data inside the RescheduleContractError as a PlatformContractNotFoundError
func (t RescheduleContractError) AsPlatformContractNotFoundError() (PlatformContractNotFoundError, error) {
	var body PlatformContractNotFoundError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformContractNotFoundError overwrites any union data inside the RescheduleContractError as the provided PlatformContractNotFoundError
func (t *RescheduleContractError) FromPlatformContractNotFoundError(v PlatformContractNotFoundError) error {
	v.Type = "PLATFORM_CONTRACT_NOT_FOUND"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformContractNotFoundError performs a merge with any union data inside the RescheduleContractError, using the provided PlatformContractNotFoundError
func (t *RescheduleContractError) MergePlatformContractNotFoundError(v PlatformContractNotFoundError) error {
	v.Type = "PLATFORM_CONTRACT_NOT_FOUND"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformNotEnabledError returns the union data inside the RescheduleContractError as a PlatformNotEnabledError
func (t RescheduleContractError) AsPlatformNotEnabledError() (PlatformNotEnabledError, error) {
	var body PlatformNotEnabledError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformNotEnabledError overwrites any union data inside the RescheduleContractError as the provided PlatformNotEnabledError
func (t *RescheduleContractError) FromPlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformNotEnabledError performs a merge with any union data inside the RescheduleContractError, using the provided PlatformNotEnabledError
func (t *RescheduleContractError) MergePlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUnauthorizedError returns the union data inside the RescheduleContractError as a UnauthorizedError
func (t RescheduleContractError) AsUnauthorizedError() (UnauthorizedError, error) {
	var body UnauthorizedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUnauthorizedError overwrites any union data inside the RescheduleContractError as the provided UnauthorizedError
func (t *RescheduleContractError) FromUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUnauthorizedError performs a merge with any union data inside the RescheduleContractError, using the provided UnauthorizedError
func (t *RescheduleContractError) MergeUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t RescheduleContractError) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t RescheduleContractError) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "FORBIDDEN":
		return t.AsForbiddenError()
	case "INVALID_REQUEST":
		return t.AsInvalidRequestError()
	case "PLATFORM_CONTRACT_NOT_FOUND":
		return t.AsPlatformContractNotFoundError()
	case "PLATFORM_NOT_ENABLED":
		return t.AsPlatformNotEnabledError()
	case "UNAUTHORIZED":
		return t.AsUnauthorizedError()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t RescheduleContractError) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *RescheduleContractError) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsForbiddenError returns the union data inside the RescheduleDiscountSharePolicyError as a ForbiddenError
func (t RescheduleDiscountSharePolicyError) AsForbiddenError() (ForbiddenError, error) {
	var body ForbiddenError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromForbiddenError overwrites any union data inside the RescheduleDiscountSharePolicyError as the provided ForbiddenError
func (t *RescheduleDiscountSharePolicyError) FromForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeForbiddenError performs a merge with any union data inside the RescheduleDiscountSharePolicyError, using the provided ForbiddenError
func (t *RescheduleDiscountSharePolicyError) MergeForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInvalidRequestError returns the union data inside the RescheduleDiscountSharePolicyError as a InvalidRequestError
func (t RescheduleDiscountSharePolicyError) AsInvalidRequestError() (InvalidRequestError, error) {
	var body InvalidRequestError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInvalidRequestError overwrites any union data inside the RescheduleDiscountSharePolicyError as the provided InvalidRequestError
func (t *RescheduleDiscountSharePolicyError) FromInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInvalidRequestError performs a merge with any union data inside the RescheduleDiscountSharePolicyError, using the provided InvalidRequestError
func (t *RescheduleDiscountSharePolicyError) MergeInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformDiscountSharePolicyNotFoundError returns the union data inside the RescheduleDiscountSharePolicyError as a PlatformDiscountSharePolicyNotFoundError
func (t RescheduleDiscountSharePolicyError) AsPlatformDiscountSharePolicyNotFoundError() (PlatformDiscountSharePolicyNotFoundError, error) {
	var body PlatformDiscountSharePolicyNotFoundError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformDiscountSharePolicyNotFoundError overwrites any union data inside the RescheduleDiscountSharePolicyError as the provided PlatformDiscountSharePolicyNotFoundError
func (t *RescheduleDiscountSharePolicyError) FromPlatformDiscountSharePolicyNotFoundError(v PlatformDiscountSharePolicyNotFoundError) error {
	v.Type = "PLATFORM_DISCOUNT_SHARE_POLICY_NOT_FOUND"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformDiscountSharePolicyNotFoundError performs a merge with any union data inside the RescheduleDiscountSharePolicyError, using the provided PlatformDiscountSharePolicyNotFoundError
func (t *RescheduleDiscountSharePolicyError) MergePlatformDiscountSharePolicyNotFoundError(v PlatformDiscountSharePolicyNotFoundError) error {
	v.Type = "PLATFORM_DISCOUNT_SHARE_POLICY_NOT_FOUND"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformNotEnabledError returns the union data inside the RescheduleDiscountSharePolicyError as a PlatformNotEnabledError
func (t RescheduleDiscountSharePolicyError) AsPlatformNotEnabledError() (PlatformNotEnabledError, error) {
	var body PlatformNotEnabledError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformNotEnabledError overwrites any union data inside the RescheduleDiscountSharePolicyError as the provided PlatformNotEnabledError
func (t *RescheduleDiscountSharePolicyError) FromPlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformNotEnabledError performs a merge with any union data inside the RescheduleDiscountSharePolicyError, using the provided PlatformNotEnabledError
func (t *RescheduleDiscountSharePolicyError) MergePlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUnauthorizedError returns the union data inside the RescheduleDiscountSharePolicyError as a UnauthorizedError
func (t RescheduleDiscountSharePolicyError) AsUnauthorizedError() (UnauthorizedError, error) {
	var body UnauthorizedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUnauthorizedError overwrites any union data inside the RescheduleDiscountSharePolicyError as the provided UnauthorizedError
func (t *RescheduleDiscountSharePolicyError) FromUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUnauthorizedError performs a merge with any union data inside the RescheduleDiscountSharePolicyError, using the provided UnauthorizedError
func (t *RescheduleDiscountSharePolicyError) MergeUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t RescheduleDiscountSharePolicyError) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t RescheduleDiscountSharePolicyError) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "FORBIDDEN":
		return t.AsForbiddenError()
	case "INVALID_REQUEST":
		return t.AsInvalidRequestError()
	case "PLATFORM_DISCOUNT_SHARE_POLICY_NOT_FOUND":
		return t.AsPlatformDiscountSharePolicyNotFoundError()
	case "PLATFORM_NOT_ENABLED":
		return t.AsPlatformNotEnabledError()
	case "UNAUTHORIZED":
		return t.AsUnauthorizedError()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t RescheduleDiscountSharePolicyError) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *RescheduleDiscountSharePolicyError) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsForbiddenError returns the union data inside the ReschedulePartnerError as a ForbiddenError
func (t ReschedulePartnerError) AsForbiddenError() (ForbiddenError, error) {
	var body ForbiddenError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromForbiddenError overwrites any union data inside the ReschedulePartnerError as the provided ForbiddenError
func (t *ReschedulePartnerError) FromForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeForbiddenError performs a merge with any union data inside the ReschedulePartnerError, using the provided ForbiddenError
func (t *ReschedulePartnerError) MergeForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInvalidRequestError returns the union data inside the ReschedulePartnerError as a InvalidRequestError
func (t ReschedulePartnerError) AsInvalidRequestError() (InvalidRequestError, error) {
	var body InvalidRequestError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInvalidRequestError overwrites any union data inside the ReschedulePartnerError as the provided InvalidRequestError
func (t *ReschedulePartnerError) FromInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInvalidRequestError performs a merge with any union data inside the ReschedulePartnerError, using the provided InvalidRequestError
func (t *ReschedulePartnerError) MergeInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformContractNotFoundError returns the union data inside the ReschedulePartnerError as a PlatformContractNotFoundError
func (t ReschedulePartnerError) AsPlatformContractNotFoundError() (PlatformContractNotFoundError, error) {
	var body PlatformContractNotFoundError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformContractNotFoundError overwrites any union data inside the ReschedulePartnerError as the provided PlatformContractNotFoundError
func (t *ReschedulePartnerError) FromPlatformContractNotFoundError(v PlatformContractNotFoundError) error {
	v.Type = "PLATFORM_CONTRACT_NOT_FOUND"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformContractNotFoundError performs a merge with any union data inside the ReschedulePartnerError, using the provided PlatformContractNotFoundError
func (t *ReschedulePartnerError) MergePlatformContractNotFoundError(v PlatformContractNotFoundError) error {
	v.Type = "PLATFORM_CONTRACT_NOT_FOUND"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformMemberCompanyConnectedPartnerCannotBeScheduledError returns the union data inside the ReschedulePartnerError as a PlatformMemberCompanyConnectedPartnerCannotBeScheduledError
func (t ReschedulePartnerError) AsPlatformMemberCompanyConnectedPartnerCannotBeScheduledError() (PlatformMemberCompanyConnectedPartnerCannotBeScheduledError, error) {
	var body PlatformMemberCompanyConnectedPartnerCannotBeScheduledError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformMemberCompanyConnectedPartnerCannotBeScheduledError overwrites any union data inside the ReschedulePartnerError as the provided PlatformMemberCompanyConnectedPartnerCannotBeScheduledError
func (t *ReschedulePartnerError) FromPlatformMemberCompanyConnectedPartnerCannotBeScheduledError(v PlatformMemberCompanyConnectedPartnerCannotBeScheduledError) error {
	v.Type = "PLATFORM_MEMBER_COMPANY_CONNECTED_PARTNER_CANNOT_BE_SCHEDULED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformMemberCompanyConnectedPartnerCannotBeScheduledError performs a merge with any union data inside the ReschedulePartnerError, using the provided PlatformMemberCompanyConnectedPartnerCannotBeScheduledError
func (t *ReschedulePartnerError) MergePlatformMemberCompanyConnectedPartnerCannotBeScheduledError(v PlatformMemberCompanyConnectedPartnerCannotBeScheduledError) error {
	v.Type = "PLATFORM_MEMBER_COMPANY_CONNECTED_PARTNER_CANNOT_BE_SCHEDULED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformNotEnabledError returns the union data inside the ReschedulePartnerError as a PlatformNotEnabledError
func (t ReschedulePartnerError) AsPlatformNotEnabledError() (PlatformNotEnabledError, error) {
	var body PlatformNotEnabledError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformNotEnabledError overwrites any union data inside the ReschedulePartnerError as the provided PlatformNotEnabledError
func (t *ReschedulePartnerError) FromPlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformNotEnabledError performs a merge with any union data inside the ReschedulePartnerError, using the provided PlatformNotEnabledError
func (t *ReschedulePartnerError) MergePlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformPartnerNotFoundError returns the union data inside the ReschedulePartnerError as a PlatformPartnerNotFoundError
func (t ReschedulePartnerError) AsPlatformPartnerNotFoundError() (PlatformPartnerNotFoundError, error) {
	var body PlatformPartnerNotFoundError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformPartnerNotFoundError overwrites any union data inside the ReschedulePartnerError as the provided PlatformPartnerNotFoundError
func (t *ReschedulePartnerError) FromPlatformPartnerNotFoundError(v PlatformPartnerNotFoundError) error {
	v.Type = "PLATFORM_PARTNER_NOT_FOUND"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformPartnerNotFoundError performs a merge with any union data inside the ReschedulePartnerError, using the provided PlatformPartnerNotFoundError
func (t *ReschedulePartnerError) MergePlatformPartnerNotFoundError(v PlatformPartnerNotFoundError) error {
	v.Type = "PLATFORM_PARTNER_NOT_FOUND"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUnauthorizedError returns the union data inside the ReschedulePartnerError as a UnauthorizedError
func (t ReschedulePartnerError) AsUnauthorizedError() (UnauthorizedError, error) {
	var body UnauthorizedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUnauthorizedError overwrites any union data inside the ReschedulePartnerError as the provided UnauthorizedError
func (t *ReschedulePartnerError) FromUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUnauthorizedError performs a merge with any union data inside the ReschedulePartnerError, using the provided UnauthorizedError
func (t *ReschedulePartnerError) MergeUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ReschedulePartnerError) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t ReschedulePartnerError) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "FORBIDDEN":
		return t.AsForbiddenError()
	case "INVALID_REQUEST":
		return t.AsInvalidRequestError()
	case "PLATFORM_CONTRACT_NOT_FOUND":
		return t.AsPlatformContractNotFoundError()
	case "PLATFORM_MEMBER_COMPANY_CONNECTED_PARTNER_CANNOT_BE_SCHEDULED":
		return t.AsPlatformMemberCompanyConnectedPartnerCannotBeScheduledError()
	case "PLATFORM_NOT_ENABLED":
		return t.AsPlatformNotEnabledError()
	case "PLATFORM_PARTNER_NOT_FOUND":
		return t.AsPlatformPartnerNotFoundError()
	case "UNAUTHORIZED":
		return t.AsUnauthorizedError()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t ReschedulePartnerError) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ReschedulePartnerError) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsForbiddenError returns the union data inside the ResendIdentityVerificationError as a ForbiddenError
func (t ResendIdentityVerificationError) AsForbiddenError() (ForbiddenError, error) {
	var body ForbiddenError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromForbiddenError overwrites any union data inside the ResendIdentityVerificationError as the provided ForbiddenError
func (t *ResendIdentityVerificationError) FromForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeForbiddenError performs a merge with any union data inside the ResendIdentityVerificationError, using the provided ForbiddenError
func (t *ResendIdentityVerificationError) MergeForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsIdentityVerificationAlreadyVerifiedError returns the union data inside the ResendIdentityVerificationError as a IdentityVerificationAlreadyVerifiedError
func (t ResendIdentityVerificationError) AsIdentityVerificationAlreadyVerifiedError() (IdentityVerificationAlreadyVerifiedError, error) {
	var body IdentityVerificationAlreadyVerifiedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromIdentityVerificationAlreadyVerifiedError overwrites any union data inside the ResendIdentityVerificationError as the provided IdentityVerificationAlreadyVerifiedError
func (t *ResendIdentityVerificationError) FromIdentityVerificationAlreadyVerifiedError(v IdentityVerificationAlreadyVerifiedError) error {
	v.Type = "IDENTITY_VERIFICATION_ALREADY_VERIFIED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeIdentityVerificationAlreadyVerifiedError performs a merge with any union data inside the ResendIdentityVerificationError, using the provided IdentityVerificationAlreadyVerifiedError
func (t *ResendIdentityVerificationError) MergeIdentityVerificationAlreadyVerifiedError(v IdentityVerificationAlreadyVerifiedError) error {
	v.Type = "IDENTITY_VERIFICATION_ALREADY_VERIFIED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsIdentityVerificationNotFoundError returns the union data inside the ResendIdentityVerificationError as a IdentityVerificationNotFoundError
func (t ResendIdentityVerificationError) AsIdentityVerificationNotFoundError() (IdentityVerificationNotFoundError, error) {
	var body IdentityVerificationNotFoundError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromIdentityVerificationNotFoundError overwrites any union data inside the ResendIdentityVerificationError as the provided IdentityVerificationNotFoundError
func (t *ResendIdentityVerificationError) FromIdentityVerificationNotFoundError(v IdentityVerificationNotFoundError) error {
	v.Type = "IDENTITY_VERIFICATION_NOT_FOUND"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeIdentityVerificationNotFoundError performs a merge with any union data inside the ResendIdentityVerificationError, using the provided IdentityVerificationNotFoundError
func (t *ResendIdentityVerificationError) MergeIdentityVerificationNotFoundError(v IdentityVerificationNotFoundError) error {
	v.Type = "IDENTITY_VERIFICATION_NOT_FOUND"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsIdentityVerificationNotSentError returns the union data inside the ResendIdentityVerificationError as a IdentityVerificationNotSentError
func (t ResendIdentityVerificationError) AsIdentityVerificationNotSentError() (IdentityVerificationNotSentError, error) {
	var body IdentityVerificationNotSentError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromIdentityVerificationNotSentError overwrites any union data inside the ResendIdentityVerificationError as the provided IdentityVerificationNotSentError
func (t *ResendIdentityVerificationError) FromIdentityVerificationNotSentError(v IdentityVerificationNotSentError) error {
	v.Type = "IDENTITY_VERIFICATION_NOT_SENT"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeIdentityVerificationNotSentError performs a merge with any union data inside the ResendIdentityVerificationError, using the provided IdentityVerificationNotSentError
func (t *ResendIdentityVerificationError) MergeIdentityVerificationNotSentError(v IdentityVerificationNotSentError) error {
	v.Type = "IDENTITY_VERIFICATION_NOT_SENT"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInvalidRequestError returns the union data inside the ResendIdentityVerificationError as a InvalidRequestError
func (t ResendIdentityVerificationError) AsInvalidRequestError() (InvalidRequestError, error) {
	var body InvalidRequestError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInvalidRequestError overwrites any union data inside the ResendIdentityVerificationError as the provided InvalidRequestError
func (t *ResendIdentityVerificationError) FromInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInvalidRequestError performs a merge with any union data inside the ResendIdentityVerificationError, using the provided InvalidRequestError
func (t *ResendIdentityVerificationError) MergeInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPgProviderError returns the union data inside the ResendIdentityVerificationError as a PgProviderError
func (t ResendIdentityVerificationError) AsPgProviderError() (PgProviderError, error) {
	var body PgProviderError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPgProviderError overwrites any union data inside the ResendIdentityVerificationError as the provided PgProviderError
func (t *ResendIdentityVerificationError) FromPgProviderError(v PgProviderError) error {
	v.Type = "PG_PROVIDER"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePgProviderError performs a merge with any union data inside the ResendIdentityVerificationError, using the provided PgProviderError
func (t *ResendIdentityVerificationError) MergePgProviderError(v PgProviderError) error {
	v.Type = "PG_PROVIDER"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUnauthorizedError returns the union data inside the ResendIdentityVerificationError as a UnauthorizedError
func (t ResendIdentityVerificationError) AsUnauthorizedError() (UnauthorizedError, error) {
	var body UnauthorizedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUnauthorizedError overwrites any union data inside the ResendIdentityVerificationError as the provided UnauthorizedError
func (t *ResendIdentityVerificationError) FromUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUnauthorizedError performs a merge with any union data inside the ResendIdentityVerificationError, using the provided UnauthorizedError
func (t *ResendIdentityVerificationError) MergeUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ResendIdentityVerificationError) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t ResendIdentityVerificationError) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "FORBIDDEN":
		return t.AsForbiddenError()
	case "IDENTITY_VERIFICATION_ALREADY_VERIFIED":
		return t.AsIdentityVerificationAlreadyVerifiedError()
	case "IDENTITY_VERIFICATION_NOT_FOUND":
		return t.AsIdentityVerificationNotFoundError()
	case "IDENTITY_VERIFICATION_NOT_SENT":
		return t.AsIdentityVerificationNotSentError()
	case "INVALID_REQUEST":
		return t.AsInvalidRequestError()
	case "PG_PROVIDER":
		return t.AsPgProviderError()
	case "UNAUTHORIZED":
		return t.AsUnauthorizedError()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t ResendIdentityVerificationError) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ResendIdentityVerificationError) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsForbiddenError returns the union data inside the ResendWebhookError as a ForbiddenError
func (t ResendWebhookError) AsForbiddenError() (ForbiddenError, error) {
	var body ForbiddenError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromForbiddenError overwrites any union data inside the ResendWebhookError as the provided ForbiddenError
func (t *ResendWebhookError) FromForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeForbiddenError performs a merge with any union data inside the ResendWebhookError, using the provided ForbiddenError
func (t *ResendWebhookError) MergeForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInvalidRequestError returns the union data inside the ResendWebhookError as a InvalidRequestError
func (t ResendWebhookError) AsInvalidRequestError() (InvalidRequestError, error) {
	var body InvalidRequestError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInvalidRequestError overwrites any union data inside the ResendWebhookError as the provided InvalidRequestError
func (t *ResendWebhookError) FromInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInvalidRequestError performs a merge with any union data inside the ResendWebhookError, using the provided InvalidRequestError
func (t *ResendWebhookError) MergeInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsMaxWebhookRetryCountReachedError returns the union data inside the ResendWebhookError as a MaxWebhookRetryCountReachedError
func (t ResendWebhookError) AsMaxWebhookRetryCountReachedError() (MaxWebhookRetryCountReachedError, error) {
	var body MaxWebhookRetryCountReachedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMaxWebhookRetryCountReachedError overwrites any union data inside the ResendWebhookError as the provided MaxWebhookRetryCountReachedError
func (t *ResendWebhookError) FromMaxWebhookRetryCountReachedError(v MaxWebhookRetryCountReachedError) error {
	v.Type = "MAX_WEBHOOK_RETRY_COUNT_REACHED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMaxWebhookRetryCountReachedError performs a merge with any union data inside the ResendWebhookError, using the provided MaxWebhookRetryCountReachedError
func (t *ResendWebhookError) MergeMaxWebhookRetryCountReachedError(v MaxWebhookRetryCountReachedError) error {
	v.Type = "MAX_WEBHOOK_RETRY_COUNT_REACHED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPaymentNotFoundError returns the union data inside the ResendWebhookError as a PaymentNotFoundError
func (t ResendWebhookError) AsPaymentNotFoundError() (PaymentNotFoundError, error) {
	var body PaymentNotFoundError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPaymentNotFoundError overwrites any union data inside the ResendWebhookError as the provided PaymentNotFoundError
func (t *ResendWebhookError) FromPaymentNotFoundError(v PaymentNotFoundError) error {
	v.Type = "PAYMENT_NOT_FOUND"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePaymentNotFoundError performs a merge with any union data inside the ResendWebhookError, using the provided PaymentNotFoundError
func (t *ResendWebhookError) MergePaymentNotFoundError(v PaymentNotFoundError) error {
	v.Type = "PAYMENT_NOT_FOUND"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUnauthorizedError returns the union data inside the ResendWebhookError as a UnauthorizedError
func (t ResendWebhookError) AsUnauthorizedError() (UnauthorizedError, error) {
	var body UnauthorizedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUnauthorizedError overwrites any union data inside the ResendWebhookError as the provided UnauthorizedError
func (t *ResendWebhookError) FromUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUnauthorizedError performs a merge with any union data inside the ResendWebhookError, using the provided UnauthorizedError
func (t *ResendWebhookError) MergeUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsWebhookNotFoundError returns the union data inside the ResendWebhookError as a WebhookNotFoundError
func (t ResendWebhookError) AsWebhookNotFoundError() (WebhookNotFoundError, error) {
	var body WebhookNotFoundError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromWebhookNotFoundError overwrites any union data inside the ResendWebhookError as the provided WebhookNotFoundError
func (t *ResendWebhookError) FromWebhookNotFoundError(v WebhookNotFoundError) error {
	v.Type = "WEBHOOK_NOT_FOUND"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeWebhookNotFoundError performs a merge with any union data inside the ResendWebhookError, using the provided WebhookNotFoundError
func (t *ResendWebhookError) MergeWebhookNotFoundError(v WebhookNotFoundError) error {
	v.Type = "WEBHOOK_NOT_FOUND"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ResendWebhookError) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t ResendWebhookError) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "FORBIDDEN":
		return t.AsForbiddenError()
	case "INVALID_REQUEST":
		return t.AsInvalidRequestError()
	case "MAX_WEBHOOK_RETRY_COUNT_REACHED":
		return t.AsMaxWebhookRetryCountReachedError()
	case "PAYMENT_NOT_FOUND":
		return t.AsPaymentNotFoundError()
	case "UNAUTHORIZED":
		return t.AsUnauthorizedError()
	case "WEBHOOK_NOT_FOUND":
		return t.AsWebhookNotFoundError()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t ResendWebhookError) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ResendWebhookError) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsBillingKeyAlreadyDeletedError returns the union data inside the RevokePaymentSchedulesError as a BillingKeyAlreadyDeletedError
func (t RevokePaymentSchedulesError) AsBillingKeyAlreadyDeletedError() (BillingKeyAlreadyDeletedError, error) {
	var body BillingKeyAlreadyDeletedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBillingKeyAlreadyDeletedError overwrites any union data inside the RevokePaymentSchedulesError as the provided BillingKeyAlreadyDeletedError
func (t *RevokePaymentSchedulesError) FromBillingKeyAlreadyDeletedError(v BillingKeyAlreadyDeletedError) error {
	v.Type = "BILLING_KEY_ALREADY_DELETED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBillingKeyAlreadyDeletedError performs a merge with any union data inside the RevokePaymentSchedulesError, using the provided BillingKeyAlreadyDeletedError
func (t *RevokePaymentSchedulesError) MergeBillingKeyAlreadyDeletedError(v BillingKeyAlreadyDeletedError) error {
	v.Type = "BILLING_KEY_ALREADY_DELETED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsBillingKeyNotFoundError returns the union data inside the RevokePaymentSchedulesError as a BillingKeyNotFoundError
func (t RevokePaymentSchedulesError) AsBillingKeyNotFoundError() (BillingKeyNotFoundError, error) {
	var body BillingKeyNotFoundError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBillingKeyNotFoundError overwrites any union data inside the RevokePaymentSchedulesError as the provided BillingKeyNotFoundError
func (t *RevokePaymentSchedulesError) FromBillingKeyNotFoundError(v BillingKeyNotFoundError) error {
	v.Type = "BILLING_KEY_NOT_FOUND"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBillingKeyNotFoundError performs a merge with any union data inside the RevokePaymentSchedulesError, using the provided BillingKeyNotFoundError
func (t *RevokePaymentSchedulesError) MergeBillingKeyNotFoundError(v BillingKeyNotFoundError) error {
	v.Type = "BILLING_KEY_NOT_FOUND"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsForbiddenError returns the union data inside the RevokePaymentSchedulesError as a ForbiddenError
func (t RevokePaymentSchedulesError) AsForbiddenError() (ForbiddenError, error) {
	var body ForbiddenError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromForbiddenError overwrites any union data inside the RevokePaymentSchedulesError as the provided ForbiddenError
func (t *RevokePaymentSchedulesError) FromForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeForbiddenError performs a merge with any union data inside the RevokePaymentSchedulesError, using the provided ForbiddenError
func (t *RevokePaymentSchedulesError) MergeForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInvalidRequestError returns the union data inside the RevokePaymentSchedulesError as a InvalidRequestError
func (t RevokePaymentSchedulesError) AsInvalidRequestError() (InvalidRequestError, error) {
	var body InvalidRequestError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInvalidRequestError overwrites any union data inside the RevokePaymentSchedulesError as the provided InvalidRequestError
func (t *RevokePaymentSchedulesError) FromInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInvalidRequestError performs a merge with any union data inside the RevokePaymentSchedulesError, using the provided InvalidRequestError
func (t *RevokePaymentSchedulesError) MergeInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPaymentScheduleAlreadyProcessedError returns the union data inside the RevokePaymentSchedulesError as a PaymentScheduleAlreadyProcessedError
func (t RevokePaymentSchedulesError) AsPaymentScheduleAlreadyProcessedError() (PaymentScheduleAlreadyProcessedError, error) {
	var body PaymentScheduleAlreadyProcessedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPaymentScheduleAlreadyProcessedError overwrites any union data inside the RevokePaymentSchedulesError as the provided PaymentScheduleAlreadyProcessedError
func (t *RevokePaymentSchedulesError) FromPaymentScheduleAlreadyProcessedError(v PaymentScheduleAlreadyProcessedError) error {
	v.Type = "PAYMENT_SCHEDULE_ALREADY_PROCESSED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePaymentScheduleAlreadyProcessedError performs a merge with any union data inside the RevokePaymentSchedulesError, using the provided PaymentScheduleAlreadyProcessedError
func (t *RevokePaymentSchedulesError) MergePaymentScheduleAlreadyProcessedError(v PaymentScheduleAlreadyProcessedError) error {
	v.Type = "PAYMENT_SCHEDULE_ALREADY_PROCESSED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPaymentScheduleAlreadyRevokedError returns the union data inside the RevokePaymentSchedulesError as a PaymentScheduleAlreadyRevokedError
func (t RevokePaymentSchedulesError) AsPaymentScheduleAlreadyRevokedError() (PaymentScheduleAlreadyRevokedError, error) {
	var body PaymentScheduleAlreadyRevokedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPaymentScheduleAlreadyRevokedError overwrites any union data inside the RevokePaymentSchedulesError as the provided PaymentScheduleAlreadyRevokedError
func (t *RevokePaymentSchedulesError) FromPaymentScheduleAlreadyRevokedError(v PaymentScheduleAlreadyRevokedError) error {
	v.Type = "PAYMENT_SCHEDULE_ALREADY_REVOKED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePaymentScheduleAlreadyRevokedError performs a merge with any union data inside the RevokePaymentSchedulesError, using the provided PaymentScheduleAlreadyRevokedError
func (t *RevokePaymentSchedulesError) MergePaymentScheduleAlreadyRevokedError(v PaymentScheduleAlreadyRevokedError) error {
	v.Type = "PAYMENT_SCHEDULE_ALREADY_REVOKED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPaymentScheduleNotFoundError returns the union data inside the RevokePaymentSchedulesError as a PaymentScheduleNotFoundError
func (t RevokePaymentSchedulesError) AsPaymentScheduleNotFoundError() (PaymentScheduleNotFoundError, error) {
	var body PaymentScheduleNotFoundError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPaymentScheduleNotFoundError overwrites any union data inside the RevokePaymentSchedulesError as the provided PaymentScheduleNotFoundError
func (t *RevokePaymentSchedulesError) FromPaymentScheduleNotFoundError(v PaymentScheduleNotFoundError) error {
	v.Type = "PAYMENT_SCHEDULE_NOT_FOUND"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePaymentScheduleNotFoundError performs a merge with any union data inside the RevokePaymentSchedulesError, using the provided PaymentScheduleNotFoundError
func (t *RevokePaymentSchedulesError) MergePaymentScheduleNotFoundError(v PaymentScheduleNotFoundError) error {
	v.Type = "PAYMENT_SCHEDULE_NOT_FOUND"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUnauthorizedError returns the union data inside the RevokePaymentSchedulesError as a UnauthorizedError
func (t RevokePaymentSchedulesError) AsUnauthorizedError() (UnauthorizedError, error) {
	var body UnauthorizedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUnauthorizedError overwrites any union data inside the RevokePaymentSchedulesError as the provided UnauthorizedError
func (t *RevokePaymentSchedulesError) FromUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUnauthorizedError performs a merge with any union data inside the RevokePaymentSchedulesError, using the provided UnauthorizedError
func (t *RevokePaymentSchedulesError) MergeUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t RevokePaymentSchedulesError) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t RevokePaymentSchedulesError) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "BILLING_KEY_ALREADY_DELETED":
		return t.AsBillingKeyAlreadyDeletedError()
	case "BILLING_KEY_NOT_FOUND":
		return t.AsBillingKeyNotFoundError()
	case "FORBIDDEN":
		return t.AsForbiddenError()
	case "INVALID_REQUEST":
		return t.AsInvalidRequestError()
	case "PAYMENT_SCHEDULE_ALREADY_PROCESSED":
		return t.AsPaymentScheduleAlreadyProcessedError()
	case "PAYMENT_SCHEDULE_ALREADY_REVOKED":
		return t.AsPaymentScheduleAlreadyRevokedError()
	case "PAYMENT_SCHEDULE_NOT_FOUND":
		return t.AsPaymentScheduleNotFoundError()
	case "UNAUTHORIZED":
		return t.AsUnauthorizedError()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t RevokePaymentSchedulesError) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *RevokePaymentSchedulesError) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsForbiddenError returns the union data inside the ScheduleAdditionalFeePolicyError as a ForbiddenError
func (t ScheduleAdditionalFeePolicyError) AsForbiddenError() (ForbiddenError, error) {
	var body ForbiddenError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromForbiddenError overwrites any union data inside the ScheduleAdditionalFeePolicyError as the provided ForbiddenError
func (t *ScheduleAdditionalFeePolicyError) FromForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeForbiddenError performs a merge with any union data inside the ScheduleAdditionalFeePolicyError, using the provided ForbiddenError
func (t *ScheduleAdditionalFeePolicyError) MergeForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInvalidRequestError returns the union data inside the ScheduleAdditionalFeePolicyError as a InvalidRequestError
func (t ScheduleAdditionalFeePolicyError) AsInvalidRequestError() (InvalidRequestError, error) {
	var body InvalidRequestError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInvalidRequestError overwrites any union data inside the ScheduleAdditionalFeePolicyError as the provided InvalidRequestError
func (t *ScheduleAdditionalFeePolicyError) FromInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInvalidRequestError performs a merge with any union data inside the ScheduleAdditionalFeePolicyError, using the provided InvalidRequestError
func (t *ScheduleAdditionalFeePolicyError) MergeInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformAdditionalFeePolicyNotFoundError returns the union data inside the ScheduleAdditionalFeePolicyError as a PlatformAdditionalFeePolicyNotFoundError
func (t ScheduleAdditionalFeePolicyError) AsPlatformAdditionalFeePolicyNotFoundError() (PlatformAdditionalFeePolicyNotFoundError, error) {
	var body PlatformAdditionalFeePolicyNotFoundError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformAdditionalFeePolicyNotFoundError overwrites any union data inside the ScheduleAdditionalFeePolicyError as the provided PlatformAdditionalFeePolicyNotFoundError
func (t *ScheduleAdditionalFeePolicyError) FromPlatformAdditionalFeePolicyNotFoundError(v PlatformAdditionalFeePolicyNotFoundError) error {
	v.Type = "PLATFORM_ADDITIONAL_FEE_POLICY_NOT_FOUND"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformAdditionalFeePolicyNotFoundError performs a merge with any union data inside the ScheduleAdditionalFeePolicyError, using the provided PlatformAdditionalFeePolicyNotFoundError
func (t *ScheduleAdditionalFeePolicyError) MergePlatformAdditionalFeePolicyNotFoundError(v PlatformAdditionalFeePolicyNotFoundError) error {
	v.Type = "PLATFORM_ADDITIONAL_FEE_POLICY_NOT_FOUND"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformAdditionalFeePolicyScheduleAlreadyExistsError returns the union data inside the ScheduleAdditionalFeePolicyError as a PlatformAdditionalFeePolicyScheduleAlreadyExistsError
func (t ScheduleAdditionalFeePolicyError) AsPlatformAdditionalFeePolicyScheduleAlreadyExistsError() (PlatformAdditionalFeePolicyScheduleAlreadyExistsError, error) {
	var body PlatformAdditionalFeePolicyScheduleAlreadyExistsError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformAdditionalFeePolicyScheduleAlreadyExistsError overwrites any union data inside the ScheduleAdditionalFeePolicyError as the provided PlatformAdditionalFeePolicyScheduleAlreadyExistsError
func (t *ScheduleAdditionalFeePolicyError) FromPlatformAdditionalFeePolicyScheduleAlreadyExistsError(v PlatformAdditionalFeePolicyScheduleAlreadyExistsError) error {
	v.Type = "PLATFORM_ADDITIONAL_FEE_POLICY_SCHEDULE_ALREADY_EXISTS"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformAdditionalFeePolicyScheduleAlreadyExistsError performs a merge with any union data inside the ScheduleAdditionalFeePolicyError, using the provided PlatformAdditionalFeePolicyScheduleAlreadyExistsError
func (t *ScheduleAdditionalFeePolicyError) MergePlatformAdditionalFeePolicyScheduleAlreadyExistsError(v PlatformAdditionalFeePolicyScheduleAlreadyExistsError) error {
	v.Type = "PLATFORM_ADDITIONAL_FEE_POLICY_SCHEDULE_ALREADY_EXISTS"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformArchivedAdditionalFeePolicyError returns the union data inside the ScheduleAdditionalFeePolicyError as a PlatformArchivedAdditionalFeePolicyError
func (t ScheduleAdditionalFeePolicyError) AsPlatformArchivedAdditionalFeePolicyError() (PlatformArchivedAdditionalFeePolicyError, error) {
	var body PlatformArchivedAdditionalFeePolicyError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformArchivedAdditionalFeePolicyError overwrites any union data inside the ScheduleAdditionalFeePolicyError as the provided PlatformArchivedAdditionalFeePolicyError
func (t *ScheduleAdditionalFeePolicyError) FromPlatformArchivedAdditionalFeePolicyError(v PlatformArchivedAdditionalFeePolicyError) error {
	v.Type = "PLATFORM_ARCHIVED_ADDITIONAL_FEE_POLICY"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformArchivedAdditionalFeePolicyError performs a merge with any union data inside the ScheduleAdditionalFeePolicyError, using the provided PlatformArchivedAdditionalFeePolicyError
func (t *ScheduleAdditionalFeePolicyError) MergePlatformArchivedAdditionalFeePolicyError(v PlatformArchivedAdditionalFeePolicyError) error {
	v.Type = "PLATFORM_ARCHIVED_ADDITIONAL_FEE_POLICY"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformNotEnabledError returns the union data inside the ScheduleAdditionalFeePolicyError as a PlatformNotEnabledError
func (t ScheduleAdditionalFeePolicyError) AsPlatformNotEnabledError() (PlatformNotEnabledError, error) {
	var body PlatformNotEnabledError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformNotEnabledError overwrites any union data inside the ScheduleAdditionalFeePolicyError as the provided PlatformNotEnabledError
func (t *ScheduleAdditionalFeePolicyError) FromPlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformNotEnabledError performs a merge with any union data inside the ScheduleAdditionalFeePolicyError, using the provided PlatformNotEnabledError
func (t *ScheduleAdditionalFeePolicyError) MergePlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUnauthorizedError returns the union data inside the ScheduleAdditionalFeePolicyError as a UnauthorizedError
func (t ScheduleAdditionalFeePolicyError) AsUnauthorizedError() (UnauthorizedError, error) {
	var body UnauthorizedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUnauthorizedError overwrites any union data inside the ScheduleAdditionalFeePolicyError as the provided UnauthorizedError
func (t *ScheduleAdditionalFeePolicyError) FromUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUnauthorizedError performs a merge with any union data inside the ScheduleAdditionalFeePolicyError, using the provided UnauthorizedError
func (t *ScheduleAdditionalFeePolicyError) MergeUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ScheduleAdditionalFeePolicyError) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t ScheduleAdditionalFeePolicyError) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "FORBIDDEN":
		return t.AsForbiddenError()
	case "INVALID_REQUEST":
		return t.AsInvalidRequestError()
	case "PLATFORM_ADDITIONAL_FEE_POLICY_NOT_FOUND":
		return t.AsPlatformAdditionalFeePolicyNotFoundError()
	case "PLATFORM_ADDITIONAL_FEE_POLICY_SCHEDULE_ALREADY_EXISTS":
		return t.AsPlatformAdditionalFeePolicyScheduleAlreadyExistsError()
	case "PLATFORM_ARCHIVED_ADDITIONAL_FEE_POLICY":
		return t.AsPlatformArchivedAdditionalFeePolicyError()
	case "PLATFORM_NOT_ENABLED":
		return t.AsPlatformNotEnabledError()
	case "UNAUTHORIZED":
		return t.AsUnauthorizedError()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t ScheduleAdditionalFeePolicyError) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ScheduleAdditionalFeePolicyError) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsForbiddenError returns the union data inside the ScheduleContractError as a ForbiddenError
func (t ScheduleContractError) AsForbiddenError() (ForbiddenError, error) {
	var body ForbiddenError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromForbiddenError overwrites any union data inside the ScheduleContractError as the provided ForbiddenError
func (t *ScheduleContractError) FromForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeForbiddenError performs a merge with any union data inside the ScheduleContractError, using the provided ForbiddenError
func (t *ScheduleContractError) MergeForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInvalidRequestError returns the union data inside the ScheduleContractError as a InvalidRequestError
func (t ScheduleContractError) AsInvalidRequestError() (InvalidRequestError, error) {
	var body InvalidRequestError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInvalidRequestError overwrites any union data inside the ScheduleContractError as the provided InvalidRequestError
func (t *ScheduleContractError) FromInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInvalidRequestError performs a merge with any union data inside the ScheduleContractError, using the provided InvalidRequestError
func (t *ScheduleContractError) MergeInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformArchivedContractError returns the union data inside the ScheduleContractError as a PlatformArchivedContractError
func (t ScheduleContractError) AsPlatformArchivedContractError() (PlatformArchivedContractError, error) {
	var body PlatformArchivedContractError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformArchivedContractError overwrites any union data inside the ScheduleContractError as the provided PlatformArchivedContractError
func (t *ScheduleContractError) FromPlatformArchivedContractError(v PlatformArchivedContractError) error {
	v.Type = "PLATFORM_ARCHIVED_CONTRACT"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformArchivedContractError performs a merge with any union data inside the ScheduleContractError, using the provided PlatformArchivedContractError
func (t *ScheduleContractError) MergePlatformArchivedContractError(v PlatformArchivedContractError) error {
	v.Type = "PLATFORM_ARCHIVED_CONTRACT"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformContractNotFoundError returns the union data inside the ScheduleContractError as a PlatformContractNotFoundError
func (t ScheduleContractError) AsPlatformContractNotFoundError() (PlatformContractNotFoundError, error) {
	var body PlatformContractNotFoundError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformContractNotFoundError overwrites any union data inside the ScheduleContractError as the provided PlatformContractNotFoundError
func (t *ScheduleContractError) FromPlatformContractNotFoundError(v PlatformContractNotFoundError) error {
	v.Type = "PLATFORM_CONTRACT_NOT_FOUND"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformContractNotFoundError performs a merge with any union data inside the ScheduleContractError, using the provided PlatformContractNotFoundError
func (t *ScheduleContractError) MergePlatformContractNotFoundError(v PlatformContractNotFoundError) error {
	v.Type = "PLATFORM_CONTRACT_NOT_FOUND"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformContractScheduleAlreadyExistsError returns the union data inside the ScheduleContractError as a PlatformContractScheduleAlreadyExistsError
func (t ScheduleContractError) AsPlatformContractScheduleAlreadyExistsError() (PlatformContractScheduleAlreadyExistsError, error) {
	var body PlatformContractScheduleAlreadyExistsError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformContractScheduleAlreadyExistsError overwrites any union data inside the ScheduleContractError as the provided PlatformContractScheduleAlreadyExistsError
func (t *ScheduleContractError) FromPlatformContractScheduleAlreadyExistsError(v PlatformContractScheduleAlreadyExistsError) error {
	v.Type = "PLATFORM_CONTRACT_SCHEDULE_ALREADY_EXISTS"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformContractScheduleAlreadyExistsError performs a merge with any union data inside the ScheduleContractError, using the provided PlatformContractScheduleAlreadyExistsError
func (t *ScheduleContractError) MergePlatformContractScheduleAlreadyExistsError(v PlatformContractScheduleAlreadyExistsError) error {
	v.Type = "PLATFORM_CONTRACT_SCHEDULE_ALREADY_EXISTS"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformNotEnabledError returns the union data inside the ScheduleContractError as a PlatformNotEnabledError
func (t ScheduleContractError) AsPlatformNotEnabledError() (PlatformNotEnabledError, error) {
	var body PlatformNotEnabledError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformNotEnabledError overwrites any union data inside the ScheduleContractError as the provided PlatformNotEnabledError
func (t *ScheduleContractError) FromPlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformNotEnabledError performs a merge with any union data inside the ScheduleContractError, using the provided PlatformNotEnabledError
func (t *ScheduleContractError) MergePlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUnauthorizedError returns the union data inside the ScheduleContractError as a UnauthorizedError
func (t ScheduleContractError) AsUnauthorizedError() (UnauthorizedError, error) {
	var body UnauthorizedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUnauthorizedError overwrites any union data inside the ScheduleContractError as the provided UnauthorizedError
func (t *ScheduleContractError) FromUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUnauthorizedError performs a merge with any union data inside the ScheduleContractError, using the provided UnauthorizedError
func (t *ScheduleContractError) MergeUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ScheduleContractError) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t ScheduleContractError) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "FORBIDDEN":
		return t.AsForbiddenError()
	case "INVALID_REQUEST":
		return t.AsInvalidRequestError()
	case "PLATFORM_ARCHIVED_CONTRACT":
		return t.AsPlatformArchivedContractError()
	case "PLATFORM_CONTRACT_NOT_FOUND":
		return t.AsPlatformContractNotFoundError()
	case "PLATFORM_CONTRACT_SCHEDULE_ALREADY_EXISTS":
		return t.AsPlatformContractScheduleAlreadyExistsError()
	case "PLATFORM_NOT_ENABLED":
		return t.AsPlatformNotEnabledError()
	case "UNAUTHORIZED":
		return t.AsUnauthorizedError()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t ScheduleContractError) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ScheduleContractError) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsForbiddenError returns the union data inside the ScheduleDiscountSharePolicyError as a ForbiddenError
func (t ScheduleDiscountSharePolicyError) AsForbiddenError() (ForbiddenError, error) {
	var body ForbiddenError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromForbiddenError overwrites any union data inside the ScheduleDiscountSharePolicyError as the provided ForbiddenError
func (t *ScheduleDiscountSharePolicyError) FromForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeForbiddenError performs a merge with any union data inside the ScheduleDiscountSharePolicyError, using the provided ForbiddenError
func (t *ScheduleDiscountSharePolicyError) MergeForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInvalidRequestError returns the union data inside the ScheduleDiscountSharePolicyError as a InvalidRequestError
func (t ScheduleDiscountSharePolicyError) AsInvalidRequestError() (InvalidRequestError, error) {
	var body InvalidRequestError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInvalidRequestError overwrites any union data inside the ScheduleDiscountSharePolicyError as the provided InvalidRequestError
func (t *ScheduleDiscountSharePolicyError) FromInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInvalidRequestError performs a merge with any union data inside the ScheduleDiscountSharePolicyError, using the provided InvalidRequestError
func (t *ScheduleDiscountSharePolicyError) MergeInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformArchivedDiscountSharePolicyError returns the union data inside the ScheduleDiscountSharePolicyError as a PlatformArchivedDiscountSharePolicyError
func (t ScheduleDiscountSharePolicyError) AsPlatformArchivedDiscountSharePolicyError() (PlatformArchivedDiscountSharePolicyError, error) {
	var body PlatformArchivedDiscountSharePolicyError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformArchivedDiscountSharePolicyError overwrites any union data inside the ScheduleDiscountSharePolicyError as the provided PlatformArchivedDiscountSharePolicyError
func (t *ScheduleDiscountSharePolicyError) FromPlatformArchivedDiscountSharePolicyError(v PlatformArchivedDiscountSharePolicyError) error {
	v.Type = "PLATFORM_ARCHIVED_DISCOUNT_SHARE_POLICY"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformArchivedDiscountSharePolicyError performs a merge with any union data inside the ScheduleDiscountSharePolicyError, using the provided PlatformArchivedDiscountSharePolicyError
func (t *ScheduleDiscountSharePolicyError) MergePlatformArchivedDiscountSharePolicyError(v PlatformArchivedDiscountSharePolicyError) error {
	v.Type = "PLATFORM_ARCHIVED_DISCOUNT_SHARE_POLICY"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformDiscountSharePolicyNotFoundError returns the union data inside the ScheduleDiscountSharePolicyError as a PlatformDiscountSharePolicyNotFoundError
func (t ScheduleDiscountSharePolicyError) AsPlatformDiscountSharePolicyNotFoundError() (PlatformDiscountSharePolicyNotFoundError, error) {
	var body PlatformDiscountSharePolicyNotFoundError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformDiscountSharePolicyNotFoundError overwrites any union data inside the ScheduleDiscountSharePolicyError as the provided PlatformDiscountSharePolicyNotFoundError
func (t *ScheduleDiscountSharePolicyError) FromPlatformDiscountSharePolicyNotFoundError(v PlatformDiscountSharePolicyNotFoundError) error {
	v.Type = "PLATFORM_DISCOUNT_SHARE_POLICY_NOT_FOUND"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformDiscountSharePolicyNotFoundError performs a merge with any union data inside the ScheduleDiscountSharePolicyError, using the provided PlatformDiscountSharePolicyNotFoundError
func (t *ScheduleDiscountSharePolicyError) MergePlatformDiscountSharePolicyNotFoundError(v PlatformDiscountSharePolicyNotFoundError) error {
	v.Type = "PLATFORM_DISCOUNT_SHARE_POLICY_NOT_FOUND"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformDiscountSharePolicyScheduleAlreadyExistsError returns the union data inside the ScheduleDiscountSharePolicyError as a PlatformDiscountSharePolicyScheduleAlreadyExistsError
func (t ScheduleDiscountSharePolicyError) AsPlatformDiscountSharePolicyScheduleAlreadyExistsError() (PlatformDiscountSharePolicyScheduleAlreadyExistsError, error) {
	var body PlatformDiscountSharePolicyScheduleAlreadyExistsError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformDiscountSharePolicyScheduleAlreadyExistsError overwrites any union data inside the ScheduleDiscountSharePolicyError as the provided PlatformDiscountSharePolicyScheduleAlreadyExistsError
func (t *ScheduleDiscountSharePolicyError) FromPlatformDiscountSharePolicyScheduleAlreadyExistsError(v PlatformDiscountSharePolicyScheduleAlreadyExistsError) error {
	v.Type = "PLATFORM_DISCOUNT_SHARE_POLICY_SCHEDULE_ALREADY_EXISTS"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformDiscountSharePolicyScheduleAlreadyExistsError performs a merge with any union data inside the ScheduleDiscountSharePolicyError, using the provided PlatformDiscountSharePolicyScheduleAlreadyExistsError
func (t *ScheduleDiscountSharePolicyError) MergePlatformDiscountSharePolicyScheduleAlreadyExistsError(v PlatformDiscountSharePolicyScheduleAlreadyExistsError) error {
	v.Type = "PLATFORM_DISCOUNT_SHARE_POLICY_SCHEDULE_ALREADY_EXISTS"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformNotEnabledError returns the union data inside the ScheduleDiscountSharePolicyError as a PlatformNotEnabledError
func (t ScheduleDiscountSharePolicyError) AsPlatformNotEnabledError() (PlatformNotEnabledError, error) {
	var body PlatformNotEnabledError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformNotEnabledError overwrites any union data inside the ScheduleDiscountSharePolicyError as the provided PlatformNotEnabledError
func (t *ScheduleDiscountSharePolicyError) FromPlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformNotEnabledError performs a merge with any union data inside the ScheduleDiscountSharePolicyError, using the provided PlatformNotEnabledError
func (t *ScheduleDiscountSharePolicyError) MergePlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUnauthorizedError returns the union data inside the ScheduleDiscountSharePolicyError as a UnauthorizedError
func (t ScheduleDiscountSharePolicyError) AsUnauthorizedError() (UnauthorizedError, error) {
	var body UnauthorizedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUnauthorizedError overwrites any union data inside the ScheduleDiscountSharePolicyError as the provided UnauthorizedError
func (t *ScheduleDiscountSharePolicyError) FromUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUnauthorizedError performs a merge with any union data inside the ScheduleDiscountSharePolicyError, using the provided UnauthorizedError
func (t *ScheduleDiscountSharePolicyError) MergeUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ScheduleDiscountSharePolicyError) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t ScheduleDiscountSharePolicyError) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "FORBIDDEN":
		return t.AsForbiddenError()
	case "INVALID_REQUEST":
		return t.AsInvalidRequestError()
	case "PLATFORM_ARCHIVED_DISCOUNT_SHARE_POLICY":
		return t.AsPlatformArchivedDiscountSharePolicyError()
	case "PLATFORM_DISCOUNT_SHARE_POLICY_NOT_FOUND":
		return t.AsPlatformDiscountSharePolicyNotFoundError()
	case "PLATFORM_DISCOUNT_SHARE_POLICY_SCHEDULE_ALREADY_EXISTS":
		return t.AsPlatformDiscountSharePolicyScheduleAlreadyExistsError()
	case "PLATFORM_NOT_ENABLED":
		return t.AsPlatformNotEnabledError()
	case "UNAUTHORIZED":
		return t.AsUnauthorizedError()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t ScheduleDiscountSharePolicyError) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ScheduleDiscountSharePolicyError) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsForbiddenError returns the union data inside the SchedulePartnerError as a ForbiddenError
func (t SchedulePartnerError) AsForbiddenError() (ForbiddenError, error) {
	var body ForbiddenError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromForbiddenError overwrites any union data inside the SchedulePartnerError as the provided ForbiddenError
func (t *SchedulePartnerError) FromForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeForbiddenError performs a merge with any union data inside the SchedulePartnerError, using the provided ForbiddenError
func (t *SchedulePartnerError) MergeForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInvalidRequestError returns the union data inside the SchedulePartnerError as a InvalidRequestError
func (t SchedulePartnerError) AsInvalidRequestError() (InvalidRequestError, error) {
	var body InvalidRequestError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInvalidRequestError overwrites any union data inside the SchedulePartnerError as the provided InvalidRequestError
func (t *SchedulePartnerError) FromInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInvalidRequestError performs a merge with any union data inside the SchedulePartnerError, using the provided InvalidRequestError
func (t *SchedulePartnerError) MergeInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformAccountVerificationAlreadyUsedError returns the union data inside the SchedulePartnerError as a PlatformAccountVerificationAlreadyUsedError
func (t SchedulePartnerError) AsPlatformAccountVerificationAlreadyUsedError() (PlatformAccountVerificationAlreadyUsedError, error) {
	var body PlatformAccountVerificationAlreadyUsedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformAccountVerificationAlreadyUsedError overwrites any union data inside the SchedulePartnerError as the provided PlatformAccountVerificationAlreadyUsedError
func (t *SchedulePartnerError) FromPlatformAccountVerificationAlreadyUsedError(v PlatformAccountVerificationAlreadyUsedError) error {
	v.Type = "PLATFORM_ACCOUNT_VERIFICATION_ALREADY_USED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformAccountVerificationAlreadyUsedError performs a merge with any union data inside the SchedulePartnerError, using the provided PlatformAccountVerificationAlreadyUsedError
func (t *SchedulePartnerError) MergePlatformAccountVerificationAlreadyUsedError(v PlatformAccountVerificationAlreadyUsedError) error {
	v.Type = "PLATFORM_ACCOUNT_VERIFICATION_ALREADY_USED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformAccountVerificationFailedError returns the union data inside the SchedulePartnerError as a PlatformAccountVerificationFailedError
func (t SchedulePartnerError) AsPlatformAccountVerificationFailedError() (PlatformAccountVerificationFailedError, error) {
	var body PlatformAccountVerificationFailedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformAccountVerificationFailedError overwrites any union data inside the SchedulePartnerError as the provided PlatformAccountVerificationFailedError
func (t *SchedulePartnerError) FromPlatformAccountVerificationFailedError(v PlatformAccountVerificationFailedError) error {
	v.Type = "PLATFORM_ACCOUNT_VERIFICATION_FAILED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformAccountVerificationFailedError performs a merge with any union data inside the SchedulePartnerError, using the provided PlatformAccountVerificationFailedError
func (t *SchedulePartnerError) MergePlatformAccountVerificationFailedError(v PlatformAccountVerificationFailedError) error {
	v.Type = "PLATFORM_ACCOUNT_VERIFICATION_FAILED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformAccountVerificationNotFoundError returns the union data inside the SchedulePartnerError as a PlatformAccountVerificationNotFoundError
func (t SchedulePartnerError) AsPlatformAccountVerificationNotFoundError() (PlatformAccountVerificationNotFoundError, error) {
	var body PlatformAccountVerificationNotFoundError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformAccountVerificationNotFoundError overwrites any union data inside the SchedulePartnerError as the provided PlatformAccountVerificationNotFoundError
func (t *SchedulePartnerError) FromPlatformAccountVerificationNotFoundError(v PlatformAccountVerificationNotFoundError) error {
	v.Type = "PLATFORM_ACCOUNT_VERIFICATION_NOT_FOUND"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformAccountVerificationNotFoundError performs a merge with any union data inside the SchedulePartnerError, using the provided PlatformAccountVerificationNotFoundError
func (t *SchedulePartnerError) MergePlatformAccountVerificationNotFoundError(v PlatformAccountVerificationNotFoundError) error {
	v.Type = "PLATFORM_ACCOUNT_VERIFICATION_NOT_FOUND"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformArchivedPartnerError returns the union data inside the SchedulePartnerError as a PlatformArchivedPartnerError
func (t SchedulePartnerError) AsPlatformArchivedPartnerError() (PlatformArchivedPartnerError, error) {
	var body PlatformArchivedPartnerError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformArchivedPartnerError overwrites any union data inside the SchedulePartnerError as the provided PlatformArchivedPartnerError
func (t *SchedulePartnerError) FromPlatformArchivedPartnerError(v PlatformArchivedPartnerError) error {
	v.Type = "PLATFORM_ARCHIVED_PARTNER"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformArchivedPartnerError performs a merge with any union data inside the SchedulePartnerError, using the provided PlatformArchivedPartnerError
func (t *SchedulePartnerError) MergePlatformArchivedPartnerError(v PlatformArchivedPartnerError) error {
	v.Type = "PLATFORM_ARCHIVED_PARTNER"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformCompanyVerificationAlreadyUsedError returns the union data inside the SchedulePartnerError as a PlatformCompanyVerificationAlreadyUsedError
func (t SchedulePartnerError) AsPlatformCompanyVerificationAlreadyUsedError() (PlatformCompanyVerificationAlreadyUsedError, error) {
	var body PlatformCompanyVerificationAlreadyUsedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformCompanyVerificationAlreadyUsedError overwrites any union data inside the SchedulePartnerError as the provided PlatformCompanyVerificationAlreadyUsedError
func (t *SchedulePartnerError) FromPlatformCompanyVerificationAlreadyUsedError(v PlatformCompanyVerificationAlreadyUsedError) error {
	v.Type = "PLATFORM_COMPANY_VERIFICATION_ALREADY_USED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformCompanyVerificationAlreadyUsedError performs a merge with any union data inside the SchedulePartnerError, using the provided PlatformCompanyVerificationAlreadyUsedError
func (t *SchedulePartnerError) MergePlatformCompanyVerificationAlreadyUsedError(v PlatformCompanyVerificationAlreadyUsedError) error {
	v.Type = "PLATFORM_COMPANY_VERIFICATION_ALREADY_USED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformContractNotFoundError returns the union data inside the SchedulePartnerError as a PlatformContractNotFoundError
func (t SchedulePartnerError) AsPlatformContractNotFoundError() (PlatformContractNotFoundError, error) {
	var body PlatformContractNotFoundError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformContractNotFoundError overwrites any union data inside the SchedulePartnerError as the provided PlatformContractNotFoundError
func (t *SchedulePartnerError) FromPlatformContractNotFoundError(v PlatformContractNotFoundError) error {
	v.Type = "PLATFORM_CONTRACT_NOT_FOUND"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformContractNotFoundError performs a merge with any union data inside the SchedulePartnerError, using the provided PlatformContractNotFoundError
func (t *SchedulePartnerError) MergePlatformContractNotFoundError(v PlatformContractNotFoundError) error {
	v.Type = "PLATFORM_CONTRACT_NOT_FOUND"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformInsufficientDataToChangePartnerTypeError returns the union data inside the SchedulePartnerError as a PlatformInsufficientDataToChangePartnerTypeError
func (t SchedulePartnerError) AsPlatformInsufficientDataToChangePartnerTypeError() (PlatformInsufficientDataToChangePartnerTypeError, error) {
	var body PlatformInsufficientDataToChangePartnerTypeError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformInsufficientDataToChangePartnerTypeError overwrites any union data inside the SchedulePartnerError as the provided PlatformInsufficientDataToChangePartnerTypeError
func (t *SchedulePartnerError) FromPlatformInsufficientDataToChangePartnerTypeError(v PlatformInsufficientDataToChangePartnerTypeError) error {
	v.Type = "PLATFORM_INSUFFICIENT_DATA_TO_CHANGE_PARTNER_TYPE"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformInsufficientDataToChangePartnerTypeError performs a merge with any union data inside the SchedulePartnerError, using the provided PlatformInsufficientDataToChangePartnerTypeError
func (t *SchedulePartnerError) MergePlatformInsufficientDataToChangePartnerTypeError(v PlatformInsufficientDataToChangePartnerTypeError) error {
	v.Type = "PLATFORM_INSUFFICIENT_DATA_TO_CHANGE_PARTNER_TYPE"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformMemberCompanyConnectedPartnerBrnUnchangeableError returns the union data inside the SchedulePartnerError as a PlatformMemberCompanyConnectedPartnerBrnUnchangeableError
func (t SchedulePartnerError) AsPlatformMemberCompanyConnectedPartnerBrnUnchangeableError() (PlatformMemberCompanyConnectedPartnerBrnUnchangeableError, error) {
	var body PlatformMemberCompanyConnectedPartnerBrnUnchangeableError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformMemberCompanyConnectedPartnerBrnUnchangeableError overwrites any union data inside the SchedulePartnerError as the provided PlatformMemberCompanyConnectedPartnerBrnUnchangeableError
func (t *SchedulePartnerError) FromPlatformMemberCompanyConnectedPartnerBrnUnchangeableError(v PlatformMemberCompanyConnectedPartnerBrnUnchangeableError) error {
	v.Type = "PLATFORM_MEMBER_COMPANY_CONNECTED_PARTNER_BRN_UNCHANGEABLE"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformMemberCompanyConnectedPartnerBrnUnchangeableError performs a merge with any union data inside the SchedulePartnerError, using the provided PlatformMemberCompanyConnectedPartnerBrnUnchangeableError
func (t *SchedulePartnerError) MergePlatformMemberCompanyConnectedPartnerBrnUnchangeableError(v PlatformMemberCompanyConnectedPartnerBrnUnchangeableError) error {
	v.Type = "PLATFORM_MEMBER_COMPANY_CONNECTED_PARTNER_BRN_UNCHANGEABLE"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformMemberCompanyConnectedPartnerCannotBeScheduledError returns the union data inside the SchedulePartnerError as a PlatformMemberCompanyConnectedPartnerCannotBeScheduledError
func (t SchedulePartnerError) AsPlatformMemberCompanyConnectedPartnerCannotBeScheduledError() (PlatformMemberCompanyConnectedPartnerCannotBeScheduledError, error) {
	var body PlatformMemberCompanyConnectedPartnerCannotBeScheduledError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformMemberCompanyConnectedPartnerCannotBeScheduledError overwrites any union data inside the SchedulePartnerError as the provided PlatformMemberCompanyConnectedPartnerCannotBeScheduledError
func (t *SchedulePartnerError) FromPlatformMemberCompanyConnectedPartnerCannotBeScheduledError(v PlatformMemberCompanyConnectedPartnerCannotBeScheduledError) error {
	v.Type = "PLATFORM_MEMBER_COMPANY_CONNECTED_PARTNER_CANNOT_BE_SCHEDULED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformMemberCompanyConnectedPartnerCannotBeScheduledError performs a merge with any union data inside the SchedulePartnerError, using the provided PlatformMemberCompanyConnectedPartnerCannotBeScheduledError
func (t *SchedulePartnerError) MergePlatformMemberCompanyConnectedPartnerCannotBeScheduledError(v PlatformMemberCompanyConnectedPartnerCannotBeScheduledError) error {
	v.Type = "PLATFORM_MEMBER_COMPANY_CONNECTED_PARTNER_CANNOT_BE_SCHEDULED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformMemberCompanyConnectedPartnerTypeUnchangeableError returns the union data inside the SchedulePartnerError as a PlatformMemberCompanyConnectedPartnerTypeUnchangeableError
func (t SchedulePartnerError) AsPlatformMemberCompanyConnectedPartnerTypeUnchangeableError() (PlatformMemberCompanyConnectedPartnerTypeUnchangeableError, error) {
	var body PlatformMemberCompanyConnectedPartnerTypeUnchangeableError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformMemberCompanyConnectedPartnerTypeUnchangeableError overwrites any union data inside the SchedulePartnerError as the provided PlatformMemberCompanyConnectedPartnerTypeUnchangeableError
func (t *SchedulePartnerError) FromPlatformMemberCompanyConnectedPartnerTypeUnchangeableError(v PlatformMemberCompanyConnectedPartnerTypeUnchangeableError) error {
	v.Type = "PLATFORM_MEMBER_COMPANY_CONNECTED_PARTNER_TYPE_UNCHANGEABLE"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformMemberCompanyConnectedPartnerTypeUnchangeableError performs a merge with any union data inside the SchedulePartnerError, using the provided PlatformMemberCompanyConnectedPartnerTypeUnchangeableError
func (t *SchedulePartnerError) MergePlatformMemberCompanyConnectedPartnerTypeUnchangeableError(v PlatformMemberCompanyConnectedPartnerTypeUnchangeableError) error {
	v.Type = "PLATFORM_MEMBER_COMPANY_CONNECTED_PARTNER_TYPE_UNCHANGEABLE"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformNotEnabledError returns the union data inside the SchedulePartnerError as a PlatformNotEnabledError
func (t SchedulePartnerError) AsPlatformNotEnabledError() (PlatformNotEnabledError, error) {
	var body PlatformNotEnabledError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformNotEnabledError overwrites any union data inside the SchedulePartnerError as the provided PlatformNotEnabledError
func (t *SchedulePartnerError) FromPlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformNotEnabledError performs a merge with any union data inside the SchedulePartnerError, using the provided PlatformNotEnabledError
func (t *SchedulePartnerError) MergePlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformPartnerNotFoundError returns the union data inside the SchedulePartnerError as a PlatformPartnerNotFoundError
func (t SchedulePartnerError) AsPlatformPartnerNotFoundError() (PlatformPartnerNotFoundError, error) {
	var body PlatformPartnerNotFoundError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformPartnerNotFoundError overwrites any union data inside the SchedulePartnerError as the provided PlatformPartnerNotFoundError
func (t *SchedulePartnerError) FromPlatformPartnerNotFoundError(v PlatformPartnerNotFoundError) error {
	v.Type = "PLATFORM_PARTNER_NOT_FOUND"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformPartnerNotFoundError performs a merge with any union data inside the SchedulePartnerError, using the provided PlatformPartnerNotFoundError
func (t *SchedulePartnerError) MergePlatformPartnerNotFoundError(v PlatformPartnerNotFoundError) error {
	v.Type = "PLATFORM_PARTNER_NOT_FOUND"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformPartnerScheduleAlreadyExistsError returns the union data inside the SchedulePartnerError as a PlatformPartnerScheduleAlreadyExistsError
func (t SchedulePartnerError) AsPlatformPartnerScheduleAlreadyExistsError() (PlatformPartnerScheduleAlreadyExistsError, error) {
	var body PlatformPartnerScheduleAlreadyExistsError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformPartnerScheduleAlreadyExistsError overwrites any union data inside the SchedulePartnerError as the provided PlatformPartnerScheduleAlreadyExistsError
func (t *SchedulePartnerError) FromPlatformPartnerScheduleAlreadyExistsError(v PlatformPartnerScheduleAlreadyExistsError) error {
	v.Type = "PLATFORM_PARTNER_SCHEDULE_ALREADY_EXISTS"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformPartnerScheduleAlreadyExistsError performs a merge with any union data inside the SchedulePartnerError, using the provided PlatformPartnerScheduleAlreadyExistsError
func (t *SchedulePartnerError) MergePlatformPartnerScheduleAlreadyExistsError(v PlatformPartnerScheduleAlreadyExistsError) error {
	v.Type = "PLATFORM_PARTNER_SCHEDULE_ALREADY_EXISTS"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformUserDefinedPropertyNotFoundError returns the union data inside the SchedulePartnerError as a PlatformUserDefinedPropertyNotFoundError
func (t SchedulePartnerError) AsPlatformUserDefinedPropertyNotFoundError() (PlatformUserDefinedPropertyNotFoundError, error) {
	var body PlatformUserDefinedPropertyNotFoundError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformUserDefinedPropertyNotFoundError overwrites any union data inside the SchedulePartnerError as the provided PlatformUserDefinedPropertyNotFoundError
func (t *SchedulePartnerError) FromPlatformUserDefinedPropertyNotFoundError(v PlatformUserDefinedPropertyNotFoundError) error {
	v.Type = "PLATFORM_USER_DEFINED_PROPERTY_NOT_FOUND"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformUserDefinedPropertyNotFoundError performs a merge with any union data inside the SchedulePartnerError, using the provided PlatformUserDefinedPropertyNotFoundError
func (t *SchedulePartnerError) MergePlatformUserDefinedPropertyNotFoundError(v PlatformUserDefinedPropertyNotFoundError) error {
	v.Type = "PLATFORM_USER_DEFINED_PROPERTY_NOT_FOUND"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUnauthorizedError returns the union data inside the SchedulePartnerError as a UnauthorizedError
func (t SchedulePartnerError) AsUnauthorizedError() (UnauthorizedError, error) {
	var body UnauthorizedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUnauthorizedError overwrites any union data inside the SchedulePartnerError as the provided UnauthorizedError
func (t *SchedulePartnerError) FromUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUnauthorizedError performs a merge with any union data inside the SchedulePartnerError, using the provided UnauthorizedError
func (t *SchedulePartnerError) MergeUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t SchedulePartnerError) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t SchedulePartnerError) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "FORBIDDEN":
		return t.AsForbiddenError()
	case "INVALID_REQUEST":
		return t.AsInvalidRequestError()
	case "PLATFORM_ACCOUNT_VERIFICATION_ALREADY_USED":
		return t.AsPlatformAccountVerificationAlreadyUsedError()
	case "PLATFORM_ACCOUNT_VERIFICATION_FAILED":
		return t.AsPlatformAccountVerificationFailedError()
	case "PLATFORM_ACCOUNT_VERIFICATION_NOT_FOUND":
		return t.AsPlatformAccountVerificationNotFoundError()
	case "PLATFORM_ARCHIVED_PARTNER":
		return t.AsPlatformArchivedPartnerError()
	case "PLATFORM_COMPANY_VERIFICATION_ALREADY_USED":
		return t.AsPlatformCompanyVerificationAlreadyUsedError()
	case "PLATFORM_CONTRACT_NOT_FOUND":
		return t.AsPlatformContractNotFoundError()
	case "PLATFORM_INSUFFICIENT_DATA_TO_CHANGE_PARTNER_TYPE":
		return t.AsPlatformInsufficientDataToChangePartnerTypeError()
	case "PLATFORM_MEMBER_COMPANY_CONNECTED_PARTNER_BRN_UNCHANGEABLE":
		return t.AsPlatformMemberCompanyConnectedPartnerBrnUnchangeableError()
	case "PLATFORM_MEMBER_COMPANY_CONNECTED_PARTNER_CANNOT_BE_SCHEDULED":
		return t.AsPlatformMemberCompanyConnectedPartnerCannotBeScheduledError()
	case "PLATFORM_MEMBER_COMPANY_CONNECTED_PARTNER_TYPE_UNCHANGEABLE":
		return t.AsPlatformMemberCompanyConnectedPartnerTypeUnchangeableError()
	case "PLATFORM_NOT_ENABLED":
		return t.AsPlatformNotEnabledError()
	case "PLATFORM_PARTNER_NOT_FOUND":
		return t.AsPlatformPartnerNotFoundError()
	case "PLATFORM_PARTNER_SCHEDULE_ALREADY_EXISTS":
		return t.AsPlatformPartnerScheduleAlreadyExistsError()
	case "PLATFORM_USER_DEFINED_PROPERTY_NOT_FOUND":
		return t.AsPlatformUserDefinedPropertyNotFoundError()
	case "UNAUTHORIZED":
		return t.AsUnauthorizedError()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t SchedulePartnerError) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *SchedulePartnerError) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsForbiddenError returns the union data inside the SchedulePlatformPartnersError as a ForbiddenError
func (t SchedulePlatformPartnersError) AsForbiddenError() (ForbiddenError, error) {
	var body ForbiddenError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromForbiddenError overwrites any union data inside the SchedulePlatformPartnersError as the provided ForbiddenError
func (t *SchedulePlatformPartnersError) FromForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeForbiddenError performs a merge with any union data inside the SchedulePlatformPartnersError, using the provided ForbiddenError
func (t *SchedulePlatformPartnersError) MergeForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInvalidRequestError returns the union data inside the SchedulePlatformPartnersError as a InvalidRequestError
func (t SchedulePlatformPartnersError) AsInvalidRequestError() (InvalidRequestError, error) {
	var body InvalidRequestError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInvalidRequestError overwrites any union data inside the SchedulePlatformPartnersError as the provided InvalidRequestError
func (t *SchedulePlatformPartnersError) FromInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInvalidRequestError performs a merge with any union data inside the SchedulePlatformPartnersError, using the provided InvalidRequestError
func (t *SchedulePlatformPartnersError) MergeInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformArchivedPartnersCannotBeScheduledError returns the union data inside the SchedulePlatformPartnersError as a PlatformArchivedPartnersCannotBeScheduledError
func (t SchedulePlatformPartnersError) AsPlatformArchivedPartnersCannotBeScheduledError() (PlatformArchivedPartnersCannotBeScheduledError, error) {
	var body PlatformArchivedPartnersCannotBeScheduledError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformArchivedPartnersCannotBeScheduledError overwrites any union data inside the SchedulePlatformPartnersError as the provided PlatformArchivedPartnersCannotBeScheduledError
func (t *SchedulePlatformPartnersError) FromPlatformArchivedPartnersCannotBeScheduledError(v PlatformArchivedPartnersCannotBeScheduledError) error {
	v.Type = "PLATFORM_ARCHIVED_PARTNERS_CANNOT_BE_SCHEDULED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformArchivedPartnersCannotBeScheduledError performs a merge with any union data inside the SchedulePlatformPartnersError, using the provided PlatformArchivedPartnersCannotBeScheduledError
func (t *SchedulePlatformPartnersError) MergePlatformArchivedPartnersCannotBeScheduledError(v PlatformArchivedPartnersCannotBeScheduledError) error {
	v.Type = "PLATFORM_ARCHIVED_PARTNERS_CANNOT_BE_SCHEDULED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformContractNotFoundError returns the union data inside the SchedulePlatformPartnersError as a PlatformContractNotFoundError
func (t SchedulePlatformPartnersError) AsPlatformContractNotFoundError() (PlatformContractNotFoundError, error) {
	var body PlatformContractNotFoundError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformContractNotFoundError overwrites any union data inside the SchedulePlatformPartnersError as the provided PlatformContractNotFoundError
func (t *SchedulePlatformPartnersError) FromPlatformContractNotFoundError(v PlatformContractNotFoundError) error {
	v.Type = "PLATFORM_CONTRACT_NOT_FOUND"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformContractNotFoundError performs a merge with any union data inside the SchedulePlatformPartnersError, using the provided PlatformContractNotFoundError
func (t *SchedulePlatformPartnersError) MergePlatformContractNotFoundError(v PlatformContractNotFoundError) error {
	v.Type = "PLATFORM_CONTRACT_NOT_FOUND"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformMemberCompanyConnectedPartnersCannotBeScheduledError returns the union data inside the SchedulePlatformPartnersError as a PlatformMemberCompanyConnectedPartnersCannotBeScheduledError
func (t SchedulePlatformPartnersError) AsPlatformMemberCompanyConnectedPartnersCannotBeScheduledError() (PlatformMemberCompanyConnectedPartnersCannotBeScheduledError, error) {
	var body PlatformMemberCompanyConnectedPartnersCannotBeScheduledError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformMemberCompanyConnectedPartnersCannotBeScheduledError overwrites any union data inside the SchedulePlatformPartnersError as the provided PlatformMemberCompanyConnectedPartnersCannotBeScheduledError
func (t *SchedulePlatformPartnersError) FromPlatformMemberCompanyConnectedPartnersCannotBeScheduledError(v PlatformMemberCompanyConnectedPartnersCannotBeScheduledError) error {
	v.Type = "PLATFORM_MEMBER_COMPANY_CONNECTED_PARTNERS_CANNOT_BE_SCHEDULED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformMemberCompanyConnectedPartnersCannotBeScheduledError performs a merge with any union data inside the SchedulePlatformPartnersError, using the provided PlatformMemberCompanyConnectedPartnersCannotBeScheduledError
func (t *SchedulePlatformPartnersError) MergePlatformMemberCompanyConnectedPartnersCannotBeScheduledError(v PlatformMemberCompanyConnectedPartnersCannotBeScheduledError) error {
	v.Type = "PLATFORM_MEMBER_COMPANY_CONNECTED_PARTNERS_CANNOT_BE_SCHEDULED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformNotEnabledError returns the union data inside the SchedulePlatformPartnersError as a PlatformNotEnabledError
func (t SchedulePlatformPartnersError) AsPlatformNotEnabledError() (PlatformNotEnabledError, error) {
	var body PlatformNotEnabledError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformNotEnabledError overwrites any union data inside the SchedulePlatformPartnersError as the provided PlatformNotEnabledError
func (t *SchedulePlatformPartnersError) FromPlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformNotEnabledError performs a merge with any union data inside the SchedulePlatformPartnersError, using the provided PlatformNotEnabledError
func (t *SchedulePlatformPartnersError) MergePlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformPartnerSchedulesAlreadyExistError returns the union data inside the SchedulePlatformPartnersError as a PlatformPartnerSchedulesAlreadyExistError
func (t SchedulePlatformPartnersError) AsPlatformPartnerSchedulesAlreadyExistError() (PlatformPartnerSchedulesAlreadyExistError, error) {
	var body PlatformPartnerSchedulesAlreadyExistError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformPartnerSchedulesAlreadyExistError overwrites any union data inside the SchedulePlatformPartnersError as the provided PlatformPartnerSchedulesAlreadyExistError
func (t *SchedulePlatformPartnersError) FromPlatformPartnerSchedulesAlreadyExistError(v PlatformPartnerSchedulesAlreadyExistError) error {
	v.Type = "PLATFORM_PARTNER_SCHEDULES_ALREADY_EXIST"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformPartnerSchedulesAlreadyExistError performs a merge with any union data inside the SchedulePlatformPartnersError, using the provided PlatformPartnerSchedulesAlreadyExistError
func (t *SchedulePlatformPartnersError) MergePlatformPartnerSchedulesAlreadyExistError(v PlatformPartnerSchedulesAlreadyExistError) error {
	v.Type = "PLATFORM_PARTNER_SCHEDULES_ALREADY_EXIST"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformUserDefinedPropertyNotFoundError returns the union data inside the SchedulePlatformPartnersError as a PlatformUserDefinedPropertyNotFoundError
func (t SchedulePlatformPartnersError) AsPlatformUserDefinedPropertyNotFoundError() (PlatformUserDefinedPropertyNotFoundError, error) {
	var body PlatformUserDefinedPropertyNotFoundError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformUserDefinedPropertyNotFoundError overwrites any union data inside the SchedulePlatformPartnersError as the provided PlatformUserDefinedPropertyNotFoundError
func (t *SchedulePlatformPartnersError) FromPlatformUserDefinedPropertyNotFoundError(v PlatformUserDefinedPropertyNotFoundError) error {
	v.Type = "PLATFORM_USER_DEFINED_PROPERTY_NOT_FOUND"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformUserDefinedPropertyNotFoundError performs a merge with any union data inside the SchedulePlatformPartnersError, using the provided PlatformUserDefinedPropertyNotFoundError
func (t *SchedulePlatformPartnersError) MergePlatformUserDefinedPropertyNotFoundError(v PlatformUserDefinedPropertyNotFoundError) error {
	v.Type = "PLATFORM_USER_DEFINED_PROPERTY_NOT_FOUND"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUnauthorizedError returns the union data inside the SchedulePlatformPartnersError as a UnauthorizedError
func (t SchedulePlatformPartnersError) AsUnauthorizedError() (UnauthorizedError, error) {
	var body UnauthorizedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUnauthorizedError overwrites any union data inside the SchedulePlatformPartnersError as the provided UnauthorizedError
func (t *SchedulePlatformPartnersError) FromUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUnauthorizedError performs a merge with any union data inside the SchedulePlatformPartnersError, using the provided UnauthorizedError
func (t *SchedulePlatformPartnersError) MergeUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t SchedulePlatformPartnersError) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t SchedulePlatformPartnersError) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "FORBIDDEN":
		return t.AsForbiddenError()
	case "INVALID_REQUEST":
		return t.AsInvalidRequestError()
	case "PLATFORM_ARCHIVED_PARTNERS_CANNOT_BE_SCHEDULED":
		return t.AsPlatformArchivedPartnersCannotBeScheduledError()
	case "PLATFORM_CONTRACT_NOT_FOUND":
		return t.AsPlatformContractNotFoundError()
	case "PLATFORM_MEMBER_COMPANY_CONNECTED_PARTNERS_CANNOT_BE_SCHEDULED":
		return t.AsPlatformMemberCompanyConnectedPartnersCannotBeScheduledError()
	case "PLATFORM_NOT_ENABLED":
		return t.AsPlatformNotEnabledError()
	case "PLATFORM_PARTNER_SCHEDULES_ALREADY_EXIST":
		return t.AsPlatformPartnerSchedulesAlreadyExistError()
	case "PLATFORM_USER_DEFINED_PROPERTY_NOT_FOUND":
		return t.AsPlatformUserDefinedPropertyNotFoundError()
	case "UNAUTHORIZED":
		return t.AsUnauthorizedError()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t SchedulePlatformPartnersError) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *SchedulePlatformPartnersError) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsChannelNotFoundError returns the union data inside the SendIdentityVerificationError as a ChannelNotFoundError
func (t SendIdentityVerificationError) AsChannelNotFoundError() (ChannelNotFoundError, error) {
	var body ChannelNotFoundError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromChannelNotFoundError overwrites any union data inside the SendIdentityVerificationError as the provided ChannelNotFoundError
func (t *SendIdentityVerificationError) FromChannelNotFoundError(v ChannelNotFoundError) error {
	v.Type = "CHANNEL_NOT_FOUND"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeChannelNotFoundError performs a merge with any union data inside the SendIdentityVerificationError, using the provided ChannelNotFoundError
func (t *SendIdentityVerificationError) MergeChannelNotFoundError(v ChannelNotFoundError) error {
	v.Type = "CHANNEL_NOT_FOUND"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsForbiddenError returns the union data inside the SendIdentityVerificationError as a ForbiddenError
func (t SendIdentityVerificationError) AsForbiddenError() (ForbiddenError, error) {
	var body ForbiddenError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromForbiddenError overwrites any union data inside the SendIdentityVerificationError as the provided ForbiddenError
func (t *SendIdentityVerificationError) FromForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeForbiddenError performs a merge with any union data inside the SendIdentityVerificationError, using the provided ForbiddenError
func (t *SendIdentityVerificationError) MergeForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsIdentityVerificationAlreadySentError returns the union data inside the SendIdentityVerificationError as a IdentityVerificationAlreadySentError
func (t SendIdentityVerificationError) AsIdentityVerificationAlreadySentError() (IdentityVerificationAlreadySentError, error) {
	var body IdentityVerificationAlreadySentError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromIdentityVerificationAlreadySentError overwrites any union data inside the SendIdentityVerificationError as the provided IdentityVerificationAlreadySentError
func (t *SendIdentityVerificationError) FromIdentityVerificationAlreadySentError(v IdentityVerificationAlreadySentError) error {
	v.Type = "IDENTITY_VERIFICATION_ALREADY_SENT"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeIdentityVerificationAlreadySentError performs a merge with any union data inside the SendIdentityVerificationError, using the provided IdentityVerificationAlreadySentError
func (t *SendIdentityVerificationError) MergeIdentityVerificationAlreadySentError(v IdentityVerificationAlreadySentError) error {
	v.Type = "IDENTITY_VERIFICATION_ALREADY_SENT"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsIdentityVerificationAlreadyVerifiedError returns the union data inside the SendIdentityVerificationError as a IdentityVerificationAlreadyVerifiedError
func (t SendIdentityVerificationError) AsIdentityVerificationAlreadyVerifiedError() (IdentityVerificationAlreadyVerifiedError, error) {
	var body IdentityVerificationAlreadyVerifiedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromIdentityVerificationAlreadyVerifiedError overwrites any union data inside the SendIdentityVerificationError as the provided IdentityVerificationAlreadyVerifiedError
func (t *SendIdentityVerificationError) FromIdentityVerificationAlreadyVerifiedError(v IdentityVerificationAlreadyVerifiedError) error {
	v.Type = "IDENTITY_VERIFICATION_ALREADY_VERIFIED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeIdentityVerificationAlreadyVerifiedError performs a merge with any union data inside the SendIdentityVerificationError, using the provided IdentityVerificationAlreadyVerifiedError
func (t *SendIdentityVerificationError) MergeIdentityVerificationAlreadyVerifiedError(v IdentityVerificationAlreadyVerifiedError) error {
	v.Type = "IDENTITY_VERIFICATION_ALREADY_VERIFIED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsIdentityVerificationNotFoundError returns the union data inside the SendIdentityVerificationError as a IdentityVerificationNotFoundError
func (t SendIdentityVerificationError) AsIdentityVerificationNotFoundError() (IdentityVerificationNotFoundError, error) {
	var body IdentityVerificationNotFoundError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromIdentityVerificationNotFoundError overwrites any union data inside the SendIdentityVerificationError as the provided IdentityVerificationNotFoundError
func (t *SendIdentityVerificationError) FromIdentityVerificationNotFoundError(v IdentityVerificationNotFoundError) error {
	v.Type = "IDENTITY_VERIFICATION_NOT_FOUND"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeIdentityVerificationNotFoundError performs a merge with any union data inside the SendIdentityVerificationError, using the provided IdentityVerificationNotFoundError
func (t *SendIdentityVerificationError) MergeIdentityVerificationNotFoundError(v IdentityVerificationNotFoundError) error {
	v.Type = "IDENTITY_VERIFICATION_NOT_FOUND"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInvalidRequestError returns the union data inside the SendIdentityVerificationError as a InvalidRequestError
func (t SendIdentityVerificationError) AsInvalidRequestError() (InvalidRequestError, error) {
	var body InvalidRequestError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInvalidRequestError overwrites any union data inside the SendIdentityVerificationError as the provided InvalidRequestError
func (t *SendIdentityVerificationError) FromInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInvalidRequestError performs a merge with any union data inside the SendIdentityVerificationError, using the provided InvalidRequestError
func (t *SendIdentityVerificationError) MergeInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsMaxTransactionCountReachedError returns the union data inside the SendIdentityVerificationError as a MaxTransactionCountReachedError
func (t SendIdentityVerificationError) AsMaxTransactionCountReachedError() (MaxTransactionCountReachedError, error) {
	var body MaxTransactionCountReachedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMaxTransactionCountReachedError overwrites any union data inside the SendIdentityVerificationError as the provided MaxTransactionCountReachedError
func (t *SendIdentityVerificationError) FromMaxTransactionCountReachedError(v MaxTransactionCountReachedError) error {
	v.Type = "MAX_TRANSACTION_COUNT_REACHED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMaxTransactionCountReachedError performs a merge with any union data inside the SendIdentityVerificationError, using the provided MaxTransactionCountReachedError
func (t *SendIdentityVerificationError) MergeMaxTransactionCountReachedError(v MaxTransactionCountReachedError) error {
	v.Type = "MAX_TRANSACTION_COUNT_REACHED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPgProviderError returns the union data inside the SendIdentityVerificationError as a PgProviderError
func (t SendIdentityVerificationError) AsPgProviderError() (PgProviderError, error) {
	var body PgProviderError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPgProviderError overwrites any union data inside the SendIdentityVerificationError as the provided PgProviderError
func (t *SendIdentityVerificationError) FromPgProviderError(v PgProviderError) error {
	v.Type = "PG_PROVIDER"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePgProviderError performs a merge with any union data inside the SendIdentityVerificationError, using the provided PgProviderError
func (t *SendIdentityVerificationError) MergePgProviderError(v PgProviderError) error {
	v.Type = "PG_PROVIDER"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUnauthorizedError returns the union data inside the SendIdentityVerificationError as a UnauthorizedError
func (t SendIdentityVerificationError) AsUnauthorizedError() (UnauthorizedError, error) {
	var body UnauthorizedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUnauthorizedError overwrites any union data inside the SendIdentityVerificationError as the provided UnauthorizedError
func (t *SendIdentityVerificationError) FromUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUnauthorizedError performs a merge with any union data inside the SendIdentityVerificationError, using the provided UnauthorizedError
func (t *SendIdentityVerificationError) MergeUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t SendIdentityVerificationError) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t SendIdentityVerificationError) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "CHANNEL_NOT_FOUND":
		return t.AsChannelNotFoundError()
	case "FORBIDDEN":
		return t.AsForbiddenError()
	case "IDENTITY_VERIFICATION_ALREADY_SENT":
		return t.AsIdentityVerificationAlreadySentError()
	case "IDENTITY_VERIFICATION_ALREADY_VERIFIED":
		return t.AsIdentityVerificationAlreadyVerifiedError()
	case "IDENTITY_VERIFICATION_NOT_FOUND":
		return t.AsIdentityVerificationNotFoundError()
	case "INVALID_REQUEST":
		return t.AsInvalidRequestError()
	case "MAX_TRANSACTION_COUNT_REACHED":
		return t.AsMaxTransactionCountReachedError()
	case "PG_PROVIDER":
		return t.AsPgProviderError()
	case "UNAUTHORIZED":
		return t.AsUnauthorizedError()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t SendIdentityVerificationError) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *SendIdentityVerificationError) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsForbiddenError returns the union data inside the UpdatePlatformAdditionalFeePolicyError as a ForbiddenError
func (t UpdatePlatformAdditionalFeePolicyError) AsForbiddenError() (ForbiddenError, error) {
	var body ForbiddenError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromForbiddenError overwrites any union data inside the UpdatePlatformAdditionalFeePolicyError as the provided ForbiddenError
func (t *UpdatePlatformAdditionalFeePolicyError) FromForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeForbiddenError performs a merge with any union data inside the UpdatePlatformAdditionalFeePolicyError, using the provided ForbiddenError
func (t *UpdatePlatformAdditionalFeePolicyError) MergeForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInvalidRequestError returns the union data inside the UpdatePlatformAdditionalFeePolicyError as a InvalidRequestError
func (t UpdatePlatformAdditionalFeePolicyError) AsInvalidRequestError() (InvalidRequestError, error) {
	var body InvalidRequestError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInvalidRequestError overwrites any union data inside the UpdatePlatformAdditionalFeePolicyError as the provided InvalidRequestError
func (t *UpdatePlatformAdditionalFeePolicyError) FromInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInvalidRequestError performs a merge with any union data inside the UpdatePlatformAdditionalFeePolicyError, using the provided InvalidRequestError
func (t *UpdatePlatformAdditionalFeePolicyError) MergeInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformAdditionalFeePolicyNotFoundError returns the union data inside the UpdatePlatformAdditionalFeePolicyError as a PlatformAdditionalFeePolicyNotFoundError
func (t UpdatePlatformAdditionalFeePolicyError) AsPlatformAdditionalFeePolicyNotFoundError() (PlatformAdditionalFeePolicyNotFoundError, error) {
	var body PlatformAdditionalFeePolicyNotFoundError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformAdditionalFeePolicyNotFoundError overwrites any union data inside the UpdatePlatformAdditionalFeePolicyError as the provided PlatformAdditionalFeePolicyNotFoundError
func (t *UpdatePlatformAdditionalFeePolicyError) FromPlatformAdditionalFeePolicyNotFoundError(v PlatformAdditionalFeePolicyNotFoundError) error {
	v.Type = "PLATFORM_ADDITIONAL_FEE_POLICY_NOT_FOUND"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformAdditionalFeePolicyNotFoundError performs a merge with any union data inside the UpdatePlatformAdditionalFeePolicyError, using the provided PlatformAdditionalFeePolicyNotFoundError
func (t *UpdatePlatformAdditionalFeePolicyError) MergePlatformAdditionalFeePolicyNotFoundError(v PlatformAdditionalFeePolicyNotFoundError) error {
	v.Type = "PLATFORM_ADDITIONAL_FEE_POLICY_NOT_FOUND"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformArchivedAdditionalFeePolicyError returns the union data inside the UpdatePlatformAdditionalFeePolicyError as a PlatformArchivedAdditionalFeePolicyError
func (t UpdatePlatformAdditionalFeePolicyError) AsPlatformArchivedAdditionalFeePolicyError() (PlatformArchivedAdditionalFeePolicyError, error) {
	var body PlatformArchivedAdditionalFeePolicyError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformArchivedAdditionalFeePolicyError overwrites any union data inside the UpdatePlatformAdditionalFeePolicyError as the provided PlatformArchivedAdditionalFeePolicyError
func (t *UpdatePlatformAdditionalFeePolicyError) FromPlatformArchivedAdditionalFeePolicyError(v PlatformArchivedAdditionalFeePolicyError) error {
	v.Type = "PLATFORM_ARCHIVED_ADDITIONAL_FEE_POLICY"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformArchivedAdditionalFeePolicyError performs a merge with any union data inside the UpdatePlatformAdditionalFeePolicyError, using the provided PlatformArchivedAdditionalFeePolicyError
func (t *UpdatePlatformAdditionalFeePolicyError) MergePlatformArchivedAdditionalFeePolicyError(v PlatformArchivedAdditionalFeePolicyError) error {
	v.Type = "PLATFORM_ARCHIVED_ADDITIONAL_FEE_POLICY"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformNotEnabledError returns the union data inside the UpdatePlatformAdditionalFeePolicyError as a PlatformNotEnabledError
func (t UpdatePlatformAdditionalFeePolicyError) AsPlatformNotEnabledError() (PlatformNotEnabledError, error) {
	var body PlatformNotEnabledError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformNotEnabledError overwrites any union data inside the UpdatePlatformAdditionalFeePolicyError as the provided PlatformNotEnabledError
func (t *UpdatePlatformAdditionalFeePolicyError) FromPlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformNotEnabledError performs a merge with any union data inside the UpdatePlatformAdditionalFeePolicyError, using the provided PlatformNotEnabledError
func (t *UpdatePlatformAdditionalFeePolicyError) MergePlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUnauthorizedError returns the union data inside the UpdatePlatformAdditionalFeePolicyError as a UnauthorizedError
func (t UpdatePlatformAdditionalFeePolicyError) AsUnauthorizedError() (UnauthorizedError, error) {
	var body UnauthorizedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUnauthorizedError overwrites any union data inside the UpdatePlatformAdditionalFeePolicyError as the provided UnauthorizedError
func (t *UpdatePlatformAdditionalFeePolicyError) FromUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUnauthorizedError performs a merge with any union data inside the UpdatePlatformAdditionalFeePolicyError, using the provided UnauthorizedError
func (t *UpdatePlatformAdditionalFeePolicyError) MergeUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t UpdatePlatformAdditionalFeePolicyError) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t UpdatePlatformAdditionalFeePolicyError) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "FORBIDDEN":
		return t.AsForbiddenError()
	case "INVALID_REQUEST":
		return t.AsInvalidRequestError()
	case "PLATFORM_ADDITIONAL_FEE_POLICY_NOT_FOUND":
		return t.AsPlatformAdditionalFeePolicyNotFoundError()
	case "PLATFORM_ARCHIVED_ADDITIONAL_FEE_POLICY":
		return t.AsPlatformArchivedAdditionalFeePolicyError()
	case "PLATFORM_NOT_ENABLED":
		return t.AsPlatformNotEnabledError()
	case "UNAUTHORIZED":
		return t.AsUnauthorizedError()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t UpdatePlatformAdditionalFeePolicyError) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *UpdatePlatformAdditionalFeePolicyError) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsForbiddenError returns the union data inside the UpdatePlatformContractError as a ForbiddenError
func (t UpdatePlatformContractError) AsForbiddenError() (ForbiddenError, error) {
	var body ForbiddenError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromForbiddenError overwrites any union data inside the UpdatePlatformContractError as the provided ForbiddenError
func (t *UpdatePlatformContractError) FromForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeForbiddenError performs a merge with any union data inside the UpdatePlatformContractError, using the provided ForbiddenError
func (t *UpdatePlatformContractError) MergeForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInvalidRequestError returns the union data inside the UpdatePlatformContractError as a InvalidRequestError
func (t UpdatePlatformContractError) AsInvalidRequestError() (InvalidRequestError, error) {
	var body InvalidRequestError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInvalidRequestError overwrites any union data inside the UpdatePlatformContractError as the provided InvalidRequestError
func (t *UpdatePlatformContractError) FromInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInvalidRequestError performs a merge with any union data inside the UpdatePlatformContractError, using the provided InvalidRequestError
func (t *UpdatePlatformContractError) MergeInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformArchivedContractError returns the union data inside the UpdatePlatformContractError as a PlatformArchivedContractError
func (t UpdatePlatformContractError) AsPlatformArchivedContractError() (PlatformArchivedContractError, error) {
	var body PlatformArchivedContractError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformArchivedContractError overwrites any union data inside the UpdatePlatformContractError as the provided PlatformArchivedContractError
func (t *UpdatePlatformContractError) FromPlatformArchivedContractError(v PlatformArchivedContractError) error {
	v.Type = "PLATFORM_ARCHIVED_CONTRACT"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformArchivedContractError performs a merge with any union data inside the UpdatePlatformContractError, using the provided PlatformArchivedContractError
func (t *UpdatePlatformContractError) MergePlatformArchivedContractError(v PlatformArchivedContractError) error {
	v.Type = "PLATFORM_ARCHIVED_CONTRACT"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformContractNotFoundError returns the union data inside the UpdatePlatformContractError as a PlatformContractNotFoundError
func (t UpdatePlatformContractError) AsPlatformContractNotFoundError() (PlatformContractNotFoundError, error) {
	var body PlatformContractNotFoundError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformContractNotFoundError overwrites any union data inside the UpdatePlatformContractError as the provided PlatformContractNotFoundError
func (t *UpdatePlatformContractError) FromPlatformContractNotFoundError(v PlatformContractNotFoundError) error {
	v.Type = "PLATFORM_CONTRACT_NOT_FOUND"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformContractNotFoundError performs a merge with any union data inside the UpdatePlatformContractError, using the provided PlatformContractNotFoundError
func (t *UpdatePlatformContractError) MergePlatformContractNotFoundError(v PlatformContractNotFoundError) error {
	v.Type = "PLATFORM_CONTRACT_NOT_FOUND"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformNotEnabledError returns the union data inside the UpdatePlatformContractError as a PlatformNotEnabledError
func (t UpdatePlatformContractError) AsPlatformNotEnabledError() (PlatformNotEnabledError, error) {
	var body PlatformNotEnabledError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformNotEnabledError overwrites any union data inside the UpdatePlatformContractError as the provided PlatformNotEnabledError
func (t *UpdatePlatformContractError) FromPlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformNotEnabledError performs a merge with any union data inside the UpdatePlatformContractError, using the provided PlatformNotEnabledError
func (t *UpdatePlatformContractError) MergePlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUnauthorizedError returns the union data inside the UpdatePlatformContractError as a UnauthorizedError
func (t UpdatePlatformContractError) AsUnauthorizedError() (UnauthorizedError, error) {
	var body UnauthorizedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUnauthorizedError overwrites any union data inside the UpdatePlatformContractError as the provided UnauthorizedError
func (t *UpdatePlatformContractError) FromUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUnauthorizedError performs a merge with any union data inside the UpdatePlatformContractError, using the provided UnauthorizedError
func (t *UpdatePlatformContractError) MergeUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t UpdatePlatformContractError) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t UpdatePlatformContractError) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "FORBIDDEN":
		return t.AsForbiddenError()
	case "INVALID_REQUEST":
		return t.AsInvalidRequestError()
	case "PLATFORM_ARCHIVED_CONTRACT":
		return t.AsPlatformArchivedContractError()
	case "PLATFORM_CONTRACT_NOT_FOUND":
		return t.AsPlatformContractNotFoundError()
	case "PLATFORM_NOT_ENABLED":
		return t.AsPlatformNotEnabledError()
	case "UNAUTHORIZED":
		return t.AsUnauthorizedError()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t UpdatePlatformContractError) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *UpdatePlatformContractError) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsForbiddenError returns the union data inside the UpdatePlatformDiscountSharePolicyError as a ForbiddenError
func (t UpdatePlatformDiscountSharePolicyError) AsForbiddenError() (ForbiddenError, error) {
	var body ForbiddenError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromForbiddenError overwrites any union data inside the UpdatePlatformDiscountSharePolicyError as the provided ForbiddenError
func (t *UpdatePlatformDiscountSharePolicyError) FromForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeForbiddenError performs a merge with any union data inside the UpdatePlatformDiscountSharePolicyError, using the provided ForbiddenError
func (t *UpdatePlatformDiscountSharePolicyError) MergeForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInvalidRequestError returns the union data inside the UpdatePlatformDiscountSharePolicyError as a InvalidRequestError
func (t UpdatePlatformDiscountSharePolicyError) AsInvalidRequestError() (InvalidRequestError, error) {
	var body InvalidRequestError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInvalidRequestError overwrites any union data inside the UpdatePlatformDiscountSharePolicyError as the provided InvalidRequestError
func (t *UpdatePlatformDiscountSharePolicyError) FromInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInvalidRequestError performs a merge with any union data inside the UpdatePlatformDiscountSharePolicyError, using the provided InvalidRequestError
func (t *UpdatePlatformDiscountSharePolicyError) MergeInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformArchivedDiscountSharePolicyError returns the union data inside the UpdatePlatformDiscountSharePolicyError as a PlatformArchivedDiscountSharePolicyError
func (t UpdatePlatformDiscountSharePolicyError) AsPlatformArchivedDiscountSharePolicyError() (PlatformArchivedDiscountSharePolicyError, error) {
	var body PlatformArchivedDiscountSharePolicyError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformArchivedDiscountSharePolicyError overwrites any union data inside the UpdatePlatformDiscountSharePolicyError as the provided PlatformArchivedDiscountSharePolicyError
func (t *UpdatePlatformDiscountSharePolicyError) FromPlatformArchivedDiscountSharePolicyError(v PlatformArchivedDiscountSharePolicyError) error {
	v.Type = "PLATFORM_ARCHIVED_DISCOUNT_SHARE_POLICY"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformArchivedDiscountSharePolicyError performs a merge with any union data inside the UpdatePlatformDiscountSharePolicyError, using the provided PlatformArchivedDiscountSharePolicyError
func (t *UpdatePlatformDiscountSharePolicyError) MergePlatformArchivedDiscountSharePolicyError(v PlatformArchivedDiscountSharePolicyError) error {
	v.Type = "PLATFORM_ARCHIVED_DISCOUNT_SHARE_POLICY"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformDiscountSharePolicyNotFoundError returns the union data inside the UpdatePlatformDiscountSharePolicyError as a PlatformDiscountSharePolicyNotFoundError
func (t UpdatePlatformDiscountSharePolicyError) AsPlatformDiscountSharePolicyNotFoundError() (PlatformDiscountSharePolicyNotFoundError, error) {
	var body PlatformDiscountSharePolicyNotFoundError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformDiscountSharePolicyNotFoundError overwrites any union data inside the UpdatePlatformDiscountSharePolicyError as the provided PlatformDiscountSharePolicyNotFoundError
func (t *UpdatePlatformDiscountSharePolicyError) FromPlatformDiscountSharePolicyNotFoundError(v PlatformDiscountSharePolicyNotFoundError) error {
	v.Type = "PLATFORM_DISCOUNT_SHARE_POLICY_NOT_FOUND"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformDiscountSharePolicyNotFoundError performs a merge with any union data inside the UpdatePlatformDiscountSharePolicyError, using the provided PlatformDiscountSharePolicyNotFoundError
func (t *UpdatePlatformDiscountSharePolicyError) MergePlatformDiscountSharePolicyNotFoundError(v PlatformDiscountSharePolicyNotFoundError) error {
	v.Type = "PLATFORM_DISCOUNT_SHARE_POLICY_NOT_FOUND"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformNotEnabledError returns the union data inside the UpdatePlatformDiscountSharePolicyError as a PlatformNotEnabledError
func (t UpdatePlatformDiscountSharePolicyError) AsPlatformNotEnabledError() (PlatformNotEnabledError, error) {
	var body PlatformNotEnabledError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformNotEnabledError overwrites any union data inside the UpdatePlatformDiscountSharePolicyError as the provided PlatformNotEnabledError
func (t *UpdatePlatformDiscountSharePolicyError) FromPlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformNotEnabledError performs a merge with any union data inside the UpdatePlatformDiscountSharePolicyError, using the provided PlatformNotEnabledError
func (t *UpdatePlatformDiscountSharePolicyError) MergePlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUnauthorizedError returns the union data inside the UpdatePlatformDiscountSharePolicyError as a UnauthorizedError
func (t UpdatePlatformDiscountSharePolicyError) AsUnauthorizedError() (UnauthorizedError, error) {
	var body UnauthorizedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUnauthorizedError overwrites any union data inside the UpdatePlatformDiscountSharePolicyError as the provided UnauthorizedError
func (t *UpdatePlatformDiscountSharePolicyError) FromUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUnauthorizedError performs a merge with any union data inside the UpdatePlatformDiscountSharePolicyError, using the provided UnauthorizedError
func (t *UpdatePlatformDiscountSharePolicyError) MergeUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t UpdatePlatformDiscountSharePolicyError) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t UpdatePlatformDiscountSharePolicyError) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "FORBIDDEN":
		return t.AsForbiddenError()
	case "INVALID_REQUEST":
		return t.AsInvalidRequestError()
	case "PLATFORM_ARCHIVED_DISCOUNT_SHARE_POLICY":
		return t.AsPlatformArchivedDiscountSharePolicyError()
	case "PLATFORM_DISCOUNT_SHARE_POLICY_NOT_FOUND":
		return t.AsPlatformDiscountSharePolicyNotFoundError()
	case "PLATFORM_NOT_ENABLED":
		return t.AsPlatformNotEnabledError()
	case "UNAUTHORIZED":
		return t.AsUnauthorizedError()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t UpdatePlatformDiscountSharePolicyError) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *UpdatePlatformDiscountSharePolicyError) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsForbiddenError returns the union data inside the UpdatePlatformError as a ForbiddenError
func (t UpdatePlatformError) AsForbiddenError() (ForbiddenError, error) {
	var body ForbiddenError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromForbiddenError overwrites any union data inside the UpdatePlatformError as the provided ForbiddenError
func (t *UpdatePlatformError) FromForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeForbiddenError performs a merge with any union data inside the UpdatePlatformError, using the provided ForbiddenError
func (t *UpdatePlatformError) MergeForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInvalidRequestError returns the union data inside the UpdatePlatformError as a InvalidRequestError
func (t UpdatePlatformError) AsInvalidRequestError() (InvalidRequestError, error) {
	var body InvalidRequestError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInvalidRequestError overwrites any union data inside the UpdatePlatformError as the provided InvalidRequestError
func (t *UpdatePlatformError) FromInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInvalidRequestError performs a merge with any union data inside the UpdatePlatformError, using the provided InvalidRequestError
func (t *UpdatePlatformError) MergeInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformInvalidSettlementFormulaError returns the union data inside the UpdatePlatformError as a PlatformInvalidSettlementFormulaError
func (t UpdatePlatformError) AsPlatformInvalidSettlementFormulaError() (PlatformInvalidSettlementFormulaError, error) {
	var body PlatformInvalidSettlementFormulaError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformInvalidSettlementFormulaError overwrites any union data inside the UpdatePlatformError as the provided PlatformInvalidSettlementFormulaError
func (t *UpdatePlatformError) FromPlatformInvalidSettlementFormulaError(v PlatformInvalidSettlementFormulaError) error {
	v.Type = "PLATFORM_INVALID_SETTLEMENT_FORMULA"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformInvalidSettlementFormulaError performs a merge with any union data inside the UpdatePlatformError, using the provided PlatformInvalidSettlementFormulaError
func (t *UpdatePlatformError) MergePlatformInvalidSettlementFormulaError(v PlatformInvalidSettlementFormulaError) error {
	v.Type = "PLATFORM_INVALID_SETTLEMENT_FORMULA"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformNotEnabledError returns the union data inside the UpdatePlatformError as a PlatformNotEnabledError
func (t UpdatePlatformError) AsPlatformNotEnabledError() (PlatformNotEnabledError, error) {
	var body PlatformNotEnabledError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformNotEnabledError overwrites any union data inside the UpdatePlatformError as the provided PlatformNotEnabledError
func (t *UpdatePlatformError) FromPlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformNotEnabledError performs a merge with any union data inside the UpdatePlatformError, using the provided PlatformNotEnabledError
func (t *UpdatePlatformError) MergePlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUnauthorizedError returns the union data inside the UpdatePlatformError as a UnauthorizedError
func (t UpdatePlatformError) AsUnauthorizedError() (UnauthorizedError, error) {
	var body UnauthorizedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUnauthorizedError overwrites any union data inside the UpdatePlatformError as the provided UnauthorizedError
func (t *UpdatePlatformError) FromUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUnauthorizedError performs a merge with any union data inside the UpdatePlatformError, using the provided UnauthorizedError
func (t *UpdatePlatformError) MergeUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t UpdatePlatformError) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t UpdatePlatformError) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "FORBIDDEN":
		return t.AsForbiddenError()
	case "INVALID_REQUEST":
		return t.AsInvalidRequestError()
	case "PLATFORM_INVALID_SETTLEMENT_FORMULA":
		return t.AsPlatformInvalidSettlementFormulaError()
	case "PLATFORM_NOT_ENABLED":
		return t.AsPlatformNotEnabledError()
	case "UNAUTHORIZED":
		return t.AsUnauthorizedError()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t UpdatePlatformError) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *UpdatePlatformError) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsForbiddenError returns the union data inside the UpdatePlatformPartnerError as a ForbiddenError
func (t UpdatePlatformPartnerError) AsForbiddenError() (ForbiddenError, error) {
	var body ForbiddenError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromForbiddenError overwrites any union data inside the UpdatePlatformPartnerError as the provided ForbiddenError
func (t *UpdatePlatformPartnerError) FromForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeForbiddenError performs a merge with any union data inside the UpdatePlatformPartnerError, using the provided ForbiddenError
func (t *UpdatePlatformPartnerError) MergeForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInvalidRequestError returns the union data inside the UpdatePlatformPartnerError as a InvalidRequestError
func (t UpdatePlatformPartnerError) AsInvalidRequestError() (InvalidRequestError, error) {
	var body InvalidRequestError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInvalidRequestError overwrites any union data inside the UpdatePlatformPartnerError as the provided InvalidRequestError
func (t *UpdatePlatformPartnerError) FromInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInvalidRequestError performs a merge with any union data inside the UpdatePlatformPartnerError, using the provided InvalidRequestError
func (t *UpdatePlatformPartnerError) MergeInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformAccountVerificationAlreadyUsedError returns the union data inside the UpdatePlatformPartnerError as a PlatformAccountVerificationAlreadyUsedError
func (t UpdatePlatformPartnerError) AsPlatformAccountVerificationAlreadyUsedError() (PlatformAccountVerificationAlreadyUsedError, error) {
	var body PlatformAccountVerificationAlreadyUsedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformAccountVerificationAlreadyUsedError overwrites any union data inside the UpdatePlatformPartnerError as the provided PlatformAccountVerificationAlreadyUsedError
func (t *UpdatePlatformPartnerError) FromPlatformAccountVerificationAlreadyUsedError(v PlatformAccountVerificationAlreadyUsedError) error {
	v.Type = "PLATFORM_ACCOUNT_VERIFICATION_ALREADY_USED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformAccountVerificationAlreadyUsedError performs a merge with any union data inside the UpdatePlatformPartnerError, using the provided PlatformAccountVerificationAlreadyUsedError
func (t *UpdatePlatformPartnerError) MergePlatformAccountVerificationAlreadyUsedError(v PlatformAccountVerificationAlreadyUsedError) error {
	v.Type = "PLATFORM_ACCOUNT_VERIFICATION_ALREADY_USED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformAccountVerificationFailedError returns the union data inside the UpdatePlatformPartnerError as a PlatformAccountVerificationFailedError
func (t UpdatePlatformPartnerError) AsPlatformAccountVerificationFailedError() (PlatformAccountVerificationFailedError, error) {
	var body PlatformAccountVerificationFailedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformAccountVerificationFailedError overwrites any union data inside the UpdatePlatformPartnerError as the provided PlatformAccountVerificationFailedError
func (t *UpdatePlatformPartnerError) FromPlatformAccountVerificationFailedError(v PlatformAccountVerificationFailedError) error {
	v.Type = "PLATFORM_ACCOUNT_VERIFICATION_FAILED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformAccountVerificationFailedError performs a merge with any union data inside the UpdatePlatformPartnerError, using the provided PlatformAccountVerificationFailedError
func (t *UpdatePlatformPartnerError) MergePlatformAccountVerificationFailedError(v PlatformAccountVerificationFailedError) error {
	v.Type = "PLATFORM_ACCOUNT_VERIFICATION_FAILED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformAccountVerificationNotFoundError returns the union data inside the UpdatePlatformPartnerError as a PlatformAccountVerificationNotFoundError
func (t UpdatePlatformPartnerError) AsPlatformAccountVerificationNotFoundError() (PlatformAccountVerificationNotFoundError, error) {
	var body PlatformAccountVerificationNotFoundError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformAccountVerificationNotFoundError overwrites any union data inside the UpdatePlatformPartnerError as the provided PlatformAccountVerificationNotFoundError
func (t *UpdatePlatformPartnerError) FromPlatformAccountVerificationNotFoundError(v PlatformAccountVerificationNotFoundError) error {
	v.Type = "PLATFORM_ACCOUNT_VERIFICATION_NOT_FOUND"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformAccountVerificationNotFoundError performs a merge with any union data inside the UpdatePlatformPartnerError, using the provided PlatformAccountVerificationNotFoundError
func (t *UpdatePlatformPartnerError) MergePlatformAccountVerificationNotFoundError(v PlatformAccountVerificationNotFoundError) error {
	v.Type = "PLATFORM_ACCOUNT_VERIFICATION_NOT_FOUND"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformArchivedPartnerError returns the union data inside the UpdatePlatformPartnerError as a PlatformArchivedPartnerError
func (t UpdatePlatformPartnerError) AsPlatformArchivedPartnerError() (PlatformArchivedPartnerError, error) {
	var body PlatformArchivedPartnerError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformArchivedPartnerError overwrites any union data inside the UpdatePlatformPartnerError as the provided PlatformArchivedPartnerError
func (t *UpdatePlatformPartnerError) FromPlatformArchivedPartnerError(v PlatformArchivedPartnerError) error {
	v.Type = "PLATFORM_ARCHIVED_PARTNER"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformArchivedPartnerError performs a merge with any union data inside the UpdatePlatformPartnerError, using the provided PlatformArchivedPartnerError
func (t *UpdatePlatformPartnerError) MergePlatformArchivedPartnerError(v PlatformArchivedPartnerError) error {
	v.Type = "PLATFORM_ARCHIVED_PARTNER"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformCompanyVerificationAlreadyUsedError returns the union data inside the UpdatePlatformPartnerError as a PlatformCompanyVerificationAlreadyUsedError
func (t UpdatePlatformPartnerError) AsPlatformCompanyVerificationAlreadyUsedError() (PlatformCompanyVerificationAlreadyUsedError, error) {
	var body PlatformCompanyVerificationAlreadyUsedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformCompanyVerificationAlreadyUsedError overwrites any union data inside the UpdatePlatformPartnerError as the provided PlatformCompanyVerificationAlreadyUsedError
func (t *UpdatePlatformPartnerError) FromPlatformCompanyVerificationAlreadyUsedError(v PlatformCompanyVerificationAlreadyUsedError) error {
	v.Type = "PLATFORM_COMPANY_VERIFICATION_ALREADY_USED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformCompanyVerificationAlreadyUsedError performs a merge with any union data inside the UpdatePlatformPartnerError, using the provided PlatformCompanyVerificationAlreadyUsedError
func (t *UpdatePlatformPartnerError) MergePlatformCompanyVerificationAlreadyUsedError(v PlatformCompanyVerificationAlreadyUsedError) error {
	v.Type = "PLATFORM_COMPANY_VERIFICATION_ALREADY_USED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformContractNotFoundError returns the union data inside the UpdatePlatformPartnerError as a PlatformContractNotFoundError
func (t UpdatePlatformPartnerError) AsPlatformContractNotFoundError() (PlatformContractNotFoundError, error) {
	var body PlatformContractNotFoundError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformContractNotFoundError overwrites any union data inside the UpdatePlatformPartnerError as the provided PlatformContractNotFoundError
func (t *UpdatePlatformPartnerError) FromPlatformContractNotFoundError(v PlatformContractNotFoundError) error {
	v.Type = "PLATFORM_CONTRACT_NOT_FOUND"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformContractNotFoundError performs a merge with any union data inside the UpdatePlatformPartnerError, using the provided PlatformContractNotFoundError
func (t *UpdatePlatformPartnerError) MergePlatformContractNotFoundError(v PlatformContractNotFoundError) error {
	v.Type = "PLATFORM_CONTRACT_NOT_FOUND"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformInsufficientDataToChangePartnerTypeError returns the union data inside the UpdatePlatformPartnerError as a PlatformInsufficientDataToChangePartnerTypeError
func (t UpdatePlatformPartnerError) AsPlatformInsufficientDataToChangePartnerTypeError() (PlatformInsufficientDataToChangePartnerTypeError, error) {
	var body PlatformInsufficientDataToChangePartnerTypeError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformInsufficientDataToChangePartnerTypeError overwrites any union data inside the UpdatePlatformPartnerError as the provided PlatformInsufficientDataToChangePartnerTypeError
func (t *UpdatePlatformPartnerError) FromPlatformInsufficientDataToChangePartnerTypeError(v PlatformInsufficientDataToChangePartnerTypeError) error {
	v.Type = "PLATFORM_INSUFFICIENT_DATA_TO_CHANGE_PARTNER_TYPE"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformInsufficientDataToChangePartnerTypeError performs a merge with any union data inside the UpdatePlatformPartnerError, using the provided PlatformInsufficientDataToChangePartnerTypeError
func (t *UpdatePlatformPartnerError) MergePlatformInsufficientDataToChangePartnerTypeError(v PlatformInsufficientDataToChangePartnerTypeError) error {
	v.Type = "PLATFORM_INSUFFICIENT_DATA_TO_CHANGE_PARTNER_TYPE"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformMemberCompanyConnectedPartnerBrnUnchangeableError returns the union data inside the UpdatePlatformPartnerError as a PlatformMemberCompanyConnectedPartnerBrnUnchangeableError
func (t UpdatePlatformPartnerError) AsPlatformMemberCompanyConnectedPartnerBrnUnchangeableError() (PlatformMemberCompanyConnectedPartnerBrnUnchangeableError, error) {
	var body PlatformMemberCompanyConnectedPartnerBrnUnchangeableError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformMemberCompanyConnectedPartnerBrnUnchangeableError overwrites any union data inside the UpdatePlatformPartnerError as the provided PlatformMemberCompanyConnectedPartnerBrnUnchangeableError
func (t *UpdatePlatformPartnerError) FromPlatformMemberCompanyConnectedPartnerBrnUnchangeableError(v PlatformMemberCompanyConnectedPartnerBrnUnchangeableError) error {
	v.Type = "PLATFORM_MEMBER_COMPANY_CONNECTED_PARTNER_BRN_UNCHANGEABLE"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformMemberCompanyConnectedPartnerBrnUnchangeableError performs a merge with any union data inside the UpdatePlatformPartnerError, using the provided PlatformMemberCompanyConnectedPartnerBrnUnchangeableError
func (t *UpdatePlatformPartnerError) MergePlatformMemberCompanyConnectedPartnerBrnUnchangeableError(v PlatformMemberCompanyConnectedPartnerBrnUnchangeableError) error {
	v.Type = "PLATFORM_MEMBER_COMPANY_CONNECTED_PARTNER_BRN_UNCHANGEABLE"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformMemberCompanyConnectedPartnerTypeUnchangeableError returns the union data inside the UpdatePlatformPartnerError as a PlatformMemberCompanyConnectedPartnerTypeUnchangeableError
func (t UpdatePlatformPartnerError) AsPlatformMemberCompanyConnectedPartnerTypeUnchangeableError() (PlatformMemberCompanyConnectedPartnerTypeUnchangeableError, error) {
	var body PlatformMemberCompanyConnectedPartnerTypeUnchangeableError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformMemberCompanyConnectedPartnerTypeUnchangeableError overwrites any union data inside the UpdatePlatformPartnerError as the provided PlatformMemberCompanyConnectedPartnerTypeUnchangeableError
func (t *UpdatePlatformPartnerError) FromPlatformMemberCompanyConnectedPartnerTypeUnchangeableError(v PlatformMemberCompanyConnectedPartnerTypeUnchangeableError) error {
	v.Type = "PLATFORM_MEMBER_COMPANY_CONNECTED_PARTNER_TYPE_UNCHANGEABLE"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformMemberCompanyConnectedPartnerTypeUnchangeableError performs a merge with any union data inside the UpdatePlatformPartnerError, using the provided PlatformMemberCompanyConnectedPartnerTypeUnchangeableError
func (t *UpdatePlatformPartnerError) MergePlatformMemberCompanyConnectedPartnerTypeUnchangeableError(v PlatformMemberCompanyConnectedPartnerTypeUnchangeableError) error {
	v.Type = "PLATFORM_MEMBER_COMPANY_CONNECTED_PARTNER_TYPE_UNCHANGEABLE"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformNotEnabledError returns the union data inside the UpdatePlatformPartnerError as a PlatformNotEnabledError
func (t UpdatePlatformPartnerError) AsPlatformNotEnabledError() (PlatformNotEnabledError, error) {
	var body PlatformNotEnabledError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformNotEnabledError overwrites any union data inside the UpdatePlatformPartnerError as the provided PlatformNotEnabledError
func (t *UpdatePlatformPartnerError) FromPlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformNotEnabledError performs a merge with any union data inside the UpdatePlatformPartnerError, using the provided PlatformNotEnabledError
func (t *UpdatePlatformPartnerError) MergePlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformPartnerNotFoundError returns the union data inside the UpdatePlatformPartnerError as a PlatformPartnerNotFoundError
func (t UpdatePlatformPartnerError) AsPlatformPartnerNotFoundError() (PlatformPartnerNotFoundError, error) {
	var body PlatformPartnerNotFoundError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformPartnerNotFoundError overwrites any union data inside the UpdatePlatformPartnerError as the provided PlatformPartnerNotFoundError
func (t *UpdatePlatformPartnerError) FromPlatformPartnerNotFoundError(v PlatformPartnerNotFoundError) error {
	v.Type = "PLATFORM_PARTNER_NOT_FOUND"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformPartnerNotFoundError performs a merge with any union data inside the UpdatePlatformPartnerError, using the provided PlatformPartnerNotFoundError
func (t *UpdatePlatformPartnerError) MergePlatformPartnerNotFoundError(v PlatformPartnerNotFoundError) error {
	v.Type = "PLATFORM_PARTNER_NOT_FOUND"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformUserDefinedPropertyNotFoundError returns the union data inside the UpdatePlatformPartnerError as a PlatformUserDefinedPropertyNotFoundError
func (t UpdatePlatformPartnerError) AsPlatformUserDefinedPropertyNotFoundError() (PlatformUserDefinedPropertyNotFoundError, error) {
	var body PlatformUserDefinedPropertyNotFoundError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformUserDefinedPropertyNotFoundError overwrites any union data inside the UpdatePlatformPartnerError as the provided PlatformUserDefinedPropertyNotFoundError
func (t *UpdatePlatformPartnerError) FromPlatformUserDefinedPropertyNotFoundError(v PlatformUserDefinedPropertyNotFoundError) error {
	v.Type = "PLATFORM_USER_DEFINED_PROPERTY_NOT_FOUND"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformUserDefinedPropertyNotFoundError performs a merge with any union data inside the UpdatePlatformPartnerError, using the provided PlatformUserDefinedPropertyNotFoundError
func (t *UpdatePlatformPartnerError) MergePlatformUserDefinedPropertyNotFoundError(v PlatformUserDefinedPropertyNotFoundError) error {
	v.Type = "PLATFORM_USER_DEFINED_PROPERTY_NOT_FOUND"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUnauthorizedError returns the union data inside the UpdatePlatformPartnerError as a UnauthorizedError
func (t UpdatePlatformPartnerError) AsUnauthorizedError() (UnauthorizedError, error) {
	var body UnauthorizedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUnauthorizedError overwrites any union data inside the UpdatePlatformPartnerError as the provided UnauthorizedError
func (t *UpdatePlatformPartnerError) FromUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUnauthorizedError performs a merge with any union data inside the UpdatePlatformPartnerError, using the provided UnauthorizedError
func (t *UpdatePlatformPartnerError) MergeUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t UpdatePlatformPartnerError) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t UpdatePlatformPartnerError) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "FORBIDDEN":
		return t.AsForbiddenError()
	case "INVALID_REQUEST":
		return t.AsInvalidRequestError()
	case "PLATFORM_ACCOUNT_VERIFICATION_ALREADY_USED":
		return t.AsPlatformAccountVerificationAlreadyUsedError()
	case "PLATFORM_ACCOUNT_VERIFICATION_FAILED":
		return t.AsPlatformAccountVerificationFailedError()
	case "PLATFORM_ACCOUNT_VERIFICATION_NOT_FOUND":
		return t.AsPlatformAccountVerificationNotFoundError()
	case "PLATFORM_ARCHIVED_PARTNER":
		return t.AsPlatformArchivedPartnerError()
	case "PLATFORM_COMPANY_VERIFICATION_ALREADY_USED":
		return t.AsPlatformCompanyVerificationAlreadyUsedError()
	case "PLATFORM_CONTRACT_NOT_FOUND":
		return t.AsPlatformContractNotFoundError()
	case "PLATFORM_INSUFFICIENT_DATA_TO_CHANGE_PARTNER_TYPE":
		return t.AsPlatformInsufficientDataToChangePartnerTypeError()
	case "PLATFORM_MEMBER_COMPANY_CONNECTED_PARTNER_BRN_UNCHANGEABLE":
		return t.AsPlatformMemberCompanyConnectedPartnerBrnUnchangeableError()
	case "PLATFORM_MEMBER_COMPANY_CONNECTED_PARTNER_TYPE_UNCHANGEABLE":
		return t.AsPlatformMemberCompanyConnectedPartnerTypeUnchangeableError()
	case "PLATFORM_NOT_ENABLED":
		return t.AsPlatformNotEnabledError()
	case "PLATFORM_PARTNER_NOT_FOUND":
		return t.AsPlatformPartnerNotFoundError()
	case "PLATFORM_USER_DEFINED_PROPERTY_NOT_FOUND":
		return t.AsPlatformUserDefinedPropertyNotFoundError()
	case "UNAUTHORIZED":
		return t.AsUnauthorizedError()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t UpdatePlatformPartnerError) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *UpdatePlatformPartnerError) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsForbiddenError returns the union data inside the UpdatePlatformSettingError as a ForbiddenError
func (t UpdatePlatformSettingError) AsForbiddenError() (ForbiddenError, error) {
	var body ForbiddenError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromForbiddenError overwrites any union data inside the UpdatePlatformSettingError as the provided ForbiddenError
func (t *UpdatePlatformSettingError) FromForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeForbiddenError performs a merge with any union data inside the UpdatePlatformSettingError, using the provided ForbiddenError
func (t *UpdatePlatformSettingError) MergeForbiddenError(v ForbiddenError) error {
	v.Type = "FORBIDDEN"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInvalidRequestError returns the union data inside the UpdatePlatformSettingError as a InvalidRequestError
func (t UpdatePlatformSettingError) AsInvalidRequestError() (InvalidRequestError, error) {
	var body InvalidRequestError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInvalidRequestError overwrites any union data inside the UpdatePlatformSettingError as the provided InvalidRequestError
func (t *UpdatePlatformSettingError) FromInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInvalidRequestError performs a merge with any union data inside the UpdatePlatformSettingError, using the provided InvalidRequestError
func (t *UpdatePlatformSettingError) MergeInvalidRequestError(v InvalidRequestError) error {
	v.Type = "INVALID_REQUEST"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlatformNotEnabledError returns the union data inside the UpdatePlatformSettingError as a PlatformNotEnabledError
func (t UpdatePlatformSettingError) AsPlatformNotEnabledError() (PlatformNotEnabledError, error) {
	var body PlatformNotEnabledError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlatformNotEnabledError overwrites any union data inside the UpdatePlatformSettingError as the provided PlatformNotEnabledError
func (t *UpdatePlatformSettingError) FromPlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlatformNotEnabledError performs a merge with any union data inside the UpdatePlatformSettingError, using the provided PlatformNotEnabledError
func (t *UpdatePlatformSettingError) MergePlatformNotEnabledError(v PlatformNotEnabledError) error {
	v.Type = "PLATFORM_NOT_ENABLED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUnauthorizedError returns the union data inside the UpdatePlatformSettingError as a UnauthorizedError
func (t UpdatePlatformSettingError) AsUnauthorizedError() (UnauthorizedError, error) {
	var body UnauthorizedError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUnauthorizedError overwrites any union data inside the UpdatePlatformSettingError as the provided UnauthorizedError
func (t *UpdatePlatformSettingError) FromUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUnauthorizedError performs a merge with any union data inside the UpdatePlatformSettingError, using the provided UnauthorizedError
func (t *UpdatePlatformSettingError) MergeUnauthorizedError(v UnauthorizedError) error {
	v.Type = "UNAUTHORIZED"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t UpdatePlatformSettingError) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t UpdatePlatformSettingError) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "FORBIDDEN":
		return t.AsForbiddenError()
	case "INVALID_REQUEST":
		return t.AsInvalidRequestError()
	case "PLATFORM_NOT_ENABLED":
		return t.AsPlatformNotEnabledError()
	case "UNAUTHORIZED":
		return t.AsUnauthorizedError()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t UpdatePlatformSettingError) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *UpdatePlatformSettingError) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetBankInfos request
	GetBankInfos(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBillingKeyInfos request
	GetBillingKeyInfos(ctx context.Context, params *GetBillingKeyInfosParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IssueBillingKeyWithBody request with any body
	IssueBillingKeyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	IssueBillingKey(ctx context.Context, body IssueBillingKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteBillingKey request
	DeleteBillingKey(ctx context.Context, billingKey string, params *DeleteBillingKeyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBillingKeyInfo request
	GetBillingKeyInfo(ctx context.Context, billingKey string, params *GetBillingKeyInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// IssueCashReceiptWithBody request with any body
	IssueCashReceiptWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	IssueCashReceipt(ctx context.Context, body IssueCashReceiptJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIdentityVerification request
	GetIdentityVerification(ctx context.Context, identityVerificationId string, params *GetIdentityVerificationParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ConfirmIdentityVerificationWithBody request with any body
	ConfirmIdentityVerificationWithBody(ctx context.Context, identityVerificationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ConfirmIdentityVerification(ctx context.Context, identityVerificationId string, body ConfirmIdentityVerificationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ResendIdentityVerification request
	ResendIdentityVerification(ctx context.Context, identityVerificationId string, params *ResendIdentityVerificationParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SendIdentityVerificationWithBody request with any body
	SendIdentityVerificationWithBody(ctx context.Context, identityVerificationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SendIdentityVerification(ctx context.Context, identityVerificationId string, body SendIdentityVerificationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetKakaopayPaymentOrder request
	GetKakaopayPaymentOrder(ctx context.Context, params *GetKakaopayPaymentOrderParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LoginViaApiSecretWithBody request with any body
	LoginViaApiSecretWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	LoginViaApiSecret(ctx context.Context, body LoginViaApiSecretJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RevokePaymentSchedules request
	RevokePaymentSchedules(ctx context.Context, params *RevokePaymentSchedulesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPaymentSchedules request
	GetPaymentSchedules(ctx context.Context, params *GetPaymentSchedulesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPaymentSchedule request
	GetPaymentSchedule(ctx context.Context, paymentScheduleId string, params *GetPaymentScheduleParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPayments request
	GetPayments(ctx context.Context, params *GetPaymentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllPaymentsByCursor request
	GetAllPaymentsByCursor(ctx context.Context, params *GetAllPaymentsByCursorParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPayment request
	GetPayment(ctx context.Context, paymentId string, params *GetPaymentParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PayWithBillingKeyWithBody request with any body
	PayWithBillingKeyWithBody(ctx context.Context, paymentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PayWithBillingKey(ctx context.Context, paymentId string, body PayWithBillingKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CancelPaymentWithBody request with any body
	CancelPaymentWithBody(ctx context.Context, paymentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CancelPayment(ctx context.Context, paymentId string, body CancelPaymentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCashReceiptByPaymentId request
	GetCashReceiptByPaymentId(ctx context.Context, paymentId string, params *GetCashReceiptByPaymentIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CancelCashReceiptByPaymentId request
	CancelCashReceiptByPaymentId(ctx context.Context, paymentId string, params *CancelCashReceiptByPaymentIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ConfirmEscrowWithBody request with any body
	ConfirmEscrowWithBody(ctx context.Context, paymentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ConfirmEscrow(ctx context.Context, paymentId string, body ConfirmEscrowJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ModifyEscrowLogisticsWithBody request with any body
	ModifyEscrowLogisticsWithBody(ctx context.Context, paymentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ModifyEscrowLogistics(ctx context.Context, paymentId string, body ModifyEscrowLogisticsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApplyEscrowLogisticsWithBody request with any body
	ApplyEscrowLogisticsWithBody(ctx context.Context, paymentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ApplyEscrowLogistics(ctx context.Context, paymentId string, body ApplyEscrowLogisticsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PayInstantlyWithBody request with any body
	PayInstantlyWithBody(ctx context.Context, paymentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PayInstantly(ctx context.Context, paymentId string, body PayInstantlyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PreRegisterPaymentWithBody request with any body
	PreRegisterPaymentWithBody(ctx context.Context, paymentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PreRegisterPayment(ctx context.Context, paymentId string, body PreRegisterPaymentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RegisterStoreReceiptWithBody request with any body
	RegisterStoreReceiptWithBody(ctx context.Context, paymentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RegisterStoreReceipt(ctx context.Context, paymentId string, body RegisterStoreReceiptJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ResendWebhookWithBody request with any body
	ResendWebhookWithBody(ctx context.Context, paymentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ResendWebhook(ctx context.Context, paymentId string, body ResendWebhookJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePaymentScheduleWithBody request with any body
	CreatePaymentScheduleWithBody(ctx context.Context, paymentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreatePaymentSchedule(ctx context.Context, paymentId string, body CreatePaymentScheduleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPaymentTransactions request
	GetPaymentTransactions(ctx context.Context, paymentId string, params *GetPaymentTransactionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CloseVirtualAccount request
	CloseVirtualAccount(ctx context.Context, paymentId string, params *CloseVirtualAccountParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlatform request
	GetPlatform(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePlatformWithBody request with any body
	UpdatePlatformWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdatePlatform(ctx context.Context, body UpdatePlatformJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlatformAccountTransfers request
	GetPlatformAccountTransfers(ctx context.Context, params *GetPlatformAccountTransfersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlatformAdditionalFeePolicies request
	GetPlatformAdditionalFeePolicies(ctx context.Context, params *GetPlatformAdditionalFeePoliciesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePlatformAdditionalFeePolicyWithBody request with any body
	CreatePlatformAdditionalFeePolicyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreatePlatformAdditionalFeePolicy(ctx context.Context, body CreatePlatformAdditionalFeePolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlatformAdditionalFeePolicy request
	GetPlatformAdditionalFeePolicy(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePlatformAdditionalFeePolicyWithBody request with any body
	UpdatePlatformAdditionalFeePolicyWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdatePlatformAdditionalFeePolicy(ctx context.Context, id string, body UpdatePlatformAdditionalFeePolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ArchivePlatformAdditionalFeePolicy request
	ArchivePlatformAdditionalFeePolicy(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RecoverPlatformAdditionalFeePolicy request
	RecoverPlatformAdditionalFeePolicy(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CancelPlatformAdditionalFeePolicySchedule request
	CancelPlatformAdditionalFeePolicySchedule(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlatformAdditionalFeePolicySchedule request
	GetPlatformAdditionalFeePolicySchedule(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ScheduleAdditionalFeePolicyWithBody request with any body
	ScheduleAdditionalFeePolicyWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ScheduleAdditionalFeePolicy(ctx context.Context, id string, body ScheduleAdditionalFeePolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RescheduleAdditionalFeePolicyWithBody request with any body
	RescheduleAdditionalFeePolicyWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RescheduleAdditionalFeePolicy(ctx context.Context, id string, body RescheduleAdditionalFeePolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlatformAccountHolder request
	GetPlatformAccountHolder(ctx context.Context, bank Bank, accountNumber string, params *GetPlatformAccountHolderParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlatformBulkPayouts request
	GetPlatformBulkPayouts(ctx context.Context, params *GetPlatformBulkPayoutsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlatformCompanyState request
	GetPlatformCompanyState(ctx context.Context, businessRegistrationNumber string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlatformContracts request
	GetPlatformContracts(ctx context.Context, params *GetPlatformContractsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePlatformContractWithBody request with any body
	CreatePlatformContractWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreatePlatformContract(ctx context.Context, body CreatePlatformContractJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlatformContract request
	GetPlatformContract(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePlatformContractWithBody request with any body
	UpdatePlatformContractWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdatePlatformContract(ctx context.Context, id string, body UpdatePlatformContractJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ArchivePlatformContract request
	ArchivePlatformContract(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RecoverPlatformContract request
	RecoverPlatformContract(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CancelPlatformContractSchedule request
	CancelPlatformContractSchedule(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlatformContractSchedule request
	GetPlatformContractSchedule(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ScheduleContractWithBody request with any body
	ScheduleContractWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ScheduleContract(ctx context.Context, id string, body ScheduleContractJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RescheduleContractWithBody request with any body
	RescheduleContractWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RescheduleContract(ctx context.Context, id string, body RescheduleContractJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlatformDiscountSharePolicies request
	GetPlatformDiscountSharePolicies(ctx context.Context, params *GetPlatformDiscountSharePoliciesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePlatformDiscountSharePolicyWithBody request with any body
	CreatePlatformDiscountSharePolicyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreatePlatformDiscountSharePolicy(ctx context.Context, body CreatePlatformDiscountSharePolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlatformDiscountSharePolicy request
	GetPlatformDiscountSharePolicy(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePlatformDiscountSharePolicyWithBody request with any body
	UpdatePlatformDiscountSharePolicyWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdatePlatformDiscountSharePolicy(ctx context.Context, id string, body UpdatePlatformDiscountSharePolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ArchivePlatformDiscountSharePolicy request
	ArchivePlatformDiscountSharePolicy(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RecoverPlatformDiscountSharePolicy request
	RecoverPlatformDiscountSharePolicy(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CancelPlatformDiscountSharePolicySchedule request
	CancelPlatformDiscountSharePolicySchedule(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlatformDiscountSharePolicySchedule request
	GetPlatformDiscountSharePolicySchedule(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ScheduleDiscountSharePolicyWithBody request with any body
	ScheduleDiscountSharePolicyWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ScheduleDiscountSharePolicy(ctx context.Context, id string, body ScheduleDiscountSharePolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RescheduleDiscountSharePolicyWithBody request with any body
	RescheduleDiscountSharePolicyWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RescheduleDiscountSharePolicy(ctx context.Context, id string, body RescheduleDiscountSharePolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlatformDiscountSharePolicyFilterOptions request
	GetPlatformDiscountSharePolicyFilterOptions(ctx context.Context, params *GetPlatformDiscountSharePolicyFilterOptionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlatformPartnerFilterOptions request
	GetPlatformPartnerFilterOptions(ctx context.Context, params *GetPlatformPartnerFilterOptionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlatformPartnerSettlements request
	GetPlatformPartnerSettlements(ctx context.Context, params *GetPlatformPartnerSettlementsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlatformPartners request
	GetPlatformPartners(ctx context.Context, params *GetPlatformPartnersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePlatformPartnerWithBody request with any body
	CreatePlatformPartnerWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreatePlatformPartner(ctx context.Context, body CreatePlatformPartnerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePlatformPartnersWithBody request with any body
	CreatePlatformPartnersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreatePlatformPartners(ctx context.Context, body CreatePlatformPartnersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SchedulePlatformPartnersWithBody request with any body
	SchedulePlatformPartnersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SchedulePlatformPartners(ctx context.Context, body SchedulePlatformPartnersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlatformPartner request
	GetPlatformPartner(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePlatformPartnerWithBody request with any body
	UpdatePlatformPartnerWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdatePlatformPartner(ctx context.Context, id string, body UpdatePlatformPartnerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ArchivePlatformPartner request
	ArchivePlatformPartner(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RecoverPlatformPartner request
	RecoverPlatformPartner(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CancelPlatformPartnerSchedule request
	CancelPlatformPartnerSchedule(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlatformPartnerSchedule request
	GetPlatformPartnerSchedule(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SchedulePartnerWithBody request with any body
	SchedulePartnerWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SchedulePartner(ctx context.Context, id string, body SchedulePartnerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReschedulePartnerWithBody request with any body
	ReschedulePartnerWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReschedulePartner(ctx context.Context, id string, body ReschedulePartnerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlatformPayouts request
	GetPlatformPayouts(ctx context.Context, params *GetPlatformPayoutsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlatformSetting request
	GetPlatformSetting(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePlatformSettingWithBody request with any body
	UpdatePlatformSettingWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdatePlatformSetting(ctx context.Context, body UpdatePlatformSettingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlatformTransferSummaries request
	GetPlatformTransferSummaries(ctx context.Context, params *GetPlatformTransferSummariesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DownloadPlatformTransferSheet request
	DownloadPlatformTransferSheet(ctx context.Context, params *DownloadPlatformTransferSheetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePlatformManualTransferWithBody request with any body
	CreatePlatformManualTransferWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreatePlatformManualTransfer(ctx context.Context, body CreatePlatformManualTransferJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePlatformOrderTransferWithBody request with any body
	CreatePlatformOrderTransferWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreatePlatformOrderTransfer(ctx context.Context, body CreatePlatformOrderTransferJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePlatformOrderCancelTransferWithBody request with any body
	CreatePlatformOrderCancelTransferWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreatePlatformOrderCancelTransfer(ctx context.Context, body CreatePlatformOrderCancelTransferJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePlatformTransfer request
	DeletePlatformTransfer(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlatformTransfer request
	GetPlatformTransfer(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPromotion request
	GetPromotion(ctx context.Context, promotionId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RefreshTokenWithBody request with any body
	RefreshTokenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RefreshToken(ctx context.Context, body RefreshTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetBankInfos(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBankInfosRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBillingKeyInfos(ctx context.Context, params *GetBillingKeyInfosParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBillingKeyInfosRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IssueBillingKeyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIssueBillingKeyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IssueBillingKey(ctx context.Context, body IssueBillingKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIssueBillingKeyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteBillingKey(ctx context.Context, billingKey string, params *DeleteBillingKeyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteBillingKeyRequest(c.Server, billingKey, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBillingKeyInfo(ctx context.Context, billingKey string, params *GetBillingKeyInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBillingKeyInfoRequest(c.Server, billingKey, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IssueCashReceiptWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIssueCashReceiptRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IssueCashReceipt(ctx context.Context, body IssueCashReceiptJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIssueCashReceiptRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIdentityVerification(ctx context.Context, identityVerificationId string, params *GetIdentityVerificationParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIdentityVerificationRequest(c.Server, identityVerificationId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConfirmIdentityVerificationWithBody(ctx context.Context, identityVerificationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConfirmIdentityVerificationRequestWithBody(c.Server, identityVerificationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConfirmIdentityVerification(ctx context.Context, identityVerificationId string, body ConfirmIdentityVerificationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConfirmIdentityVerificationRequest(c.Server, identityVerificationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResendIdentityVerification(ctx context.Context, identityVerificationId string, params *ResendIdentityVerificationParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResendIdentityVerificationRequest(c.Server, identityVerificationId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SendIdentityVerificationWithBody(ctx context.Context, identityVerificationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSendIdentityVerificationRequestWithBody(c.Server, identityVerificationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SendIdentityVerification(ctx context.Context, identityVerificationId string, body SendIdentityVerificationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSendIdentityVerificationRequest(c.Server, identityVerificationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetKakaopayPaymentOrder(ctx context.Context, params *GetKakaopayPaymentOrderParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetKakaopayPaymentOrderRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LoginViaApiSecretWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLoginViaApiSecretRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LoginViaApiSecret(ctx context.Context, body LoginViaApiSecretJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLoginViaApiSecretRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RevokePaymentSchedules(ctx context.Context, params *RevokePaymentSchedulesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRevokePaymentSchedulesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPaymentSchedules(ctx context.Context, params *GetPaymentSchedulesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPaymentSchedulesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPaymentSchedule(ctx context.Context, paymentScheduleId string, params *GetPaymentScheduleParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPaymentScheduleRequest(c.Server, paymentScheduleId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPayments(ctx context.Context, params *GetPaymentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPaymentsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllPaymentsByCursor(ctx context.Context, params *GetAllPaymentsByCursorParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllPaymentsByCursorRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPayment(ctx context.Context, paymentId string, params *GetPaymentParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPaymentRequest(c.Server, paymentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PayWithBillingKeyWithBody(ctx context.Context, paymentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPayWithBillingKeyRequestWithBody(c.Server, paymentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PayWithBillingKey(ctx context.Context, paymentId string, body PayWithBillingKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPayWithBillingKeyRequest(c.Server, paymentId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CancelPaymentWithBody(ctx context.Context, paymentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCancelPaymentRequestWithBody(c.Server, paymentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CancelPayment(ctx context.Context, paymentId string, body CancelPaymentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCancelPaymentRequest(c.Server, paymentId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCashReceiptByPaymentId(ctx context.Context, paymentId string, params *GetCashReceiptByPaymentIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCashReceiptByPaymentIdRequest(c.Server, paymentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CancelCashReceiptByPaymentId(ctx context.Context, paymentId string, params *CancelCashReceiptByPaymentIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCancelCashReceiptByPaymentIdRequest(c.Server, paymentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConfirmEscrowWithBody(ctx context.Context, paymentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConfirmEscrowRequestWithBody(c.Server, paymentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConfirmEscrow(ctx context.Context, paymentId string, body ConfirmEscrowJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConfirmEscrowRequest(c.Server, paymentId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModifyEscrowLogisticsWithBody(ctx context.Context, paymentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModifyEscrowLogisticsRequestWithBody(c.Server, paymentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModifyEscrowLogistics(ctx context.Context, paymentId string, body ModifyEscrowLogisticsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModifyEscrowLogisticsRequest(c.Server, paymentId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApplyEscrowLogisticsWithBody(ctx context.Context, paymentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApplyEscrowLogisticsRequestWithBody(c.Server, paymentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApplyEscrowLogistics(ctx context.Context, paymentId string, body ApplyEscrowLogisticsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApplyEscrowLogisticsRequest(c.Server, paymentId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PayInstantlyWithBody(ctx context.Context, paymentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPayInstantlyRequestWithBody(c.Server, paymentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PayInstantly(ctx context.Context, paymentId string, body PayInstantlyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPayInstantlyRequest(c.Server, paymentId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PreRegisterPaymentWithBody(ctx context.Context, paymentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPreRegisterPaymentRequestWithBody(c.Server, paymentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PreRegisterPayment(ctx context.Context, paymentId string, body PreRegisterPaymentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPreRegisterPaymentRequest(c.Server, paymentId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RegisterStoreReceiptWithBody(ctx context.Context, paymentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegisterStoreReceiptRequestWithBody(c.Server, paymentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RegisterStoreReceipt(ctx context.Context, paymentId string, body RegisterStoreReceiptJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegisterStoreReceiptRequest(c.Server, paymentId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResendWebhookWithBody(ctx context.Context, paymentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResendWebhookRequestWithBody(c.Server, paymentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResendWebhook(ctx context.Context, paymentId string, body ResendWebhookJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResendWebhookRequest(c.Server, paymentId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePaymentScheduleWithBody(ctx context.Context, paymentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePaymentScheduleRequestWithBody(c.Server, paymentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePaymentSchedule(ctx context.Context, paymentId string, body CreatePaymentScheduleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePaymentScheduleRequest(c.Server, paymentId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPaymentTransactions(ctx context.Context, paymentId string, params *GetPaymentTransactionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPaymentTransactionsRequest(c.Server, paymentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CloseVirtualAccount(ctx context.Context, paymentId string, params *CloseVirtualAccountParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCloseVirtualAccountRequest(c.Server, paymentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlatform(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlatformRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePlatformWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePlatformRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePlatform(ctx context.Context, body UpdatePlatformJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePlatformRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlatformAccountTransfers(ctx context.Context, params *GetPlatformAccountTransfersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlatformAccountTransfersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlatformAdditionalFeePolicies(ctx context.Context, params *GetPlatformAdditionalFeePoliciesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlatformAdditionalFeePoliciesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePlatformAdditionalFeePolicyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePlatformAdditionalFeePolicyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePlatformAdditionalFeePolicy(ctx context.Context, body CreatePlatformAdditionalFeePolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePlatformAdditionalFeePolicyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlatformAdditionalFeePolicy(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlatformAdditionalFeePolicyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePlatformAdditionalFeePolicyWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePlatformAdditionalFeePolicyRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePlatformAdditionalFeePolicy(ctx context.Context, id string, body UpdatePlatformAdditionalFeePolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePlatformAdditionalFeePolicyRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ArchivePlatformAdditionalFeePolicy(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewArchivePlatformAdditionalFeePolicyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RecoverPlatformAdditionalFeePolicy(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRecoverPlatformAdditionalFeePolicyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CancelPlatformAdditionalFeePolicySchedule(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCancelPlatformAdditionalFeePolicyScheduleRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlatformAdditionalFeePolicySchedule(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlatformAdditionalFeePolicyScheduleRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScheduleAdditionalFeePolicyWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScheduleAdditionalFeePolicyRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScheduleAdditionalFeePolicy(ctx context.Context, id string, body ScheduleAdditionalFeePolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScheduleAdditionalFeePolicyRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RescheduleAdditionalFeePolicyWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRescheduleAdditionalFeePolicyRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RescheduleAdditionalFeePolicy(ctx context.Context, id string, body RescheduleAdditionalFeePolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRescheduleAdditionalFeePolicyRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlatformAccountHolder(ctx context.Context, bank Bank, accountNumber string, params *GetPlatformAccountHolderParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlatformAccountHolderRequest(c.Server, bank, accountNumber, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlatformBulkPayouts(ctx context.Context, params *GetPlatformBulkPayoutsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlatformBulkPayoutsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlatformCompanyState(ctx context.Context, businessRegistrationNumber string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlatformCompanyStateRequest(c.Server, businessRegistrationNumber)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlatformContracts(ctx context.Context, params *GetPlatformContractsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlatformContractsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePlatformContractWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePlatformContractRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePlatformContract(ctx context.Context, body CreatePlatformContractJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePlatformContractRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlatformContract(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlatformContractRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePlatformContractWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePlatformContractRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePlatformContract(ctx context.Context, id string, body UpdatePlatformContractJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePlatformContractRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ArchivePlatformContract(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewArchivePlatformContractRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RecoverPlatformContract(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRecoverPlatformContractRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CancelPlatformContractSchedule(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCancelPlatformContractScheduleRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlatformContractSchedule(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlatformContractScheduleRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScheduleContractWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScheduleContractRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScheduleContract(ctx context.Context, id string, body ScheduleContractJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScheduleContractRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RescheduleContractWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRescheduleContractRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RescheduleContract(ctx context.Context, id string, body RescheduleContractJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRescheduleContractRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlatformDiscountSharePolicies(ctx context.Context, params *GetPlatformDiscountSharePoliciesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlatformDiscountSharePoliciesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePlatformDiscountSharePolicyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePlatformDiscountSharePolicyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePlatformDiscountSharePolicy(ctx context.Context, body CreatePlatformDiscountSharePolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePlatformDiscountSharePolicyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlatformDiscountSharePolicy(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlatformDiscountSharePolicyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePlatformDiscountSharePolicyWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePlatformDiscountSharePolicyRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePlatformDiscountSharePolicy(ctx context.Context, id string, body UpdatePlatformDiscountSharePolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePlatformDiscountSharePolicyRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ArchivePlatformDiscountSharePolicy(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewArchivePlatformDiscountSharePolicyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RecoverPlatformDiscountSharePolicy(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRecoverPlatformDiscountSharePolicyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CancelPlatformDiscountSharePolicySchedule(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCancelPlatformDiscountSharePolicyScheduleRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlatformDiscountSharePolicySchedule(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlatformDiscountSharePolicyScheduleRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScheduleDiscountSharePolicyWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScheduleDiscountSharePolicyRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScheduleDiscountSharePolicy(ctx context.Context, id string, body ScheduleDiscountSharePolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScheduleDiscountSharePolicyRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RescheduleDiscountSharePolicyWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRescheduleDiscountSharePolicyRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RescheduleDiscountSharePolicy(ctx context.Context, id string, body RescheduleDiscountSharePolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRescheduleDiscountSharePolicyRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlatformDiscountSharePolicyFilterOptions(ctx context.Context, params *GetPlatformDiscountSharePolicyFilterOptionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlatformDiscountSharePolicyFilterOptionsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlatformPartnerFilterOptions(ctx context.Context, params *GetPlatformPartnerFilterOptionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlatformPartnerFilterOptionsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlatformPartnerSettlements(ctx context.Context, params *GetPlatformPartnerSettlementsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlatformPartnerSettlementsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlatformPartners(ctx context.Context, params *GetPlatformPartnersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlatformPartnersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePlatformPartnerWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePlatformPartnerRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePlatformPartner(ctx context.Context, body CreatePlatformPartnerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePlatformPartnerRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePlatformPartnersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePlatformPartnersRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePlatformPartners(ctx context.Context, body CreatePlatformPartnersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePlatformPartnersRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SchedulePlatformPartnersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSchedulePlatformPartnersRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SchedulePlatformPartners(ctx context.Context, body SchedulePlatformPartnersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSchedulePlatformPartnersRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlatformPartner(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlatformPartnerRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePlatformPartnerWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePlatformPartnerRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePlatformPartner(ctx context.Context, id string, body UpdatePlatformPartnerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePlatformPartnerRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ArchivePlatformPartner(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewArchivePlatformPartnerRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RecoverPlatformPartner(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRecoverPlatformPartnerRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CancelPlatformPartnerSchedule(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCancelPlatformPartnerScheduleRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlatformPartnerSchedule(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlatformPartnerScheduleRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SchedulePartnerWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSchedulePartnerRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SchedulePartner(ctx context.Context, id string, body SchedulePartnerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSchedulePartnerRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReschedulePartnerWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReschedulePartnerRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReschedulePartner(ctx context.Context, id string, body ReschedulePartnerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReschedulePartnerRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlatformPayouts(ctx context.Context, params *GetPlatformPayoutsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlatformPayoutsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlatformSetting(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlatformSettingRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePlatformSettingWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePlatformSettingRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePlatformSetting(ctx context.Context, body UpdatePlatformSettingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePlatformSettingRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlatformTransferSummaries(ctx context.Context, params *GetPlatformTransferSummariesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlatformTransferSummariesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DownloadPlatformTransferSheet(ctx context.Context, params *DownloadPlatformTransferSheetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDownloadPlatformTransferSheetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePlatformManualTransferWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePlatformManualTransferRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePlatformManualTransfer(ctx context.Context, body CreatePlatformManualTransferJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePlatformManualTransferRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePlatformOrderTransferWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePlatformOrderTransferRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePlatformOrderTransfer(ctx context.Context, body CreatePlatformOrderTransferJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePlatformOrderTransferRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePlatformOrderCancelTransferWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePlatformOrderCancelTransferRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePlatformOrderCancelTransfer(ctx context.Context, body CreatePlatformOrderCancelTransferJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePlatformOrderCancelTransferRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePlatformTransfer(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePlatformTransferRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlatformTransfer(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlatformTransferRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPromotion(ctx context.Context, promotionId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPromotionRequest(c.Server, promotionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RefreshTokenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRefreshTokenRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RefreshToken(ctx context.Context, body RefreshTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRefreshTokenRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetBankInfosRequest generates requests for GetBankInfos
func NewGetBankInfosRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/banks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetBillingKeyInfosRequest generates requests for GetBillingKeyInfos
func NewGetBillingKeyInfosRequest(server string, params *GetBillingKeyInfosParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/billing-keys")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.RequestBody != nil {

			if queryParamBuf, err := json.Marshal(*params.RequestBody); err != nil {
				return nil, err
			} else {
				queryValues.Add("requestBody", string(queryParamBuf))
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewIssueBillingKeyRequest calls the generic IssueBillingKey builder with application/json body
func NewIssueBillingKeyRequest(server string, body IssueBillingKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewIssueBillingKeyRequestWithBody(server, "application/json", bodyReader)
}

// NewIssueBillingKeyRequestWithBody generates requests for IssueBillingKey with any type of body
func NewIssueBillingKeyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/billing-keys")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteBillingKeyRequest generates requests for DeleteBillingKey
func NewDeleteBillingKeyRequest(server string, billingKey string, params *DeleteBillingKeyParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "billingKey", runtime.ParamLocationPath, billingKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/billing-keys/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.StoreId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "storeId", runtime.ParamLocationQuery, *params.StoreId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Reason != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "reason", runtime.ParamLocationQuery, *params.Reason); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetBillingKeyInfoRequest generates requests for GetBillingKeyInfo
func NewGetBillingKeyInfoRequest(server string, billingKey string, params *GetBillingKeyInfoParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "billingKey", runtime.ParamLocationPath, billingKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/billing-keys/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.StoreId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "storeId", runtime.ParamLocationQuery, *params.StoreId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewIssueCashReceiptRequest calls the generic IssueCashReceipt builder with application/json body
func NewIssueCashReceiptRequest(server string, body IssueCashReceiptJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewIssueCashReceiptRequestWithBody(server, "application/json", bodyReader)
}

// NewIssueCashReceiptRequestWithBody generates requests for IssueCashReceipt with any type of body
func NewIssueCashReceiptRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cash-receipts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIdentityVerificationRequest generates requests for GetIdentityVerification
func NewGetIdentityVerificationRequest(server string, identityVerificationId string, params *GetIdentityVerificationParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "identityVerificationId", runtime.ParamLocationPath, identityVerificationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/identity-verifications/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.StoreId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "storeId", runtime.ParamLocationQuery, *params.StoreId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewConfirmIdentityVerificationRequest calls the generic ConfirmIdentityVerification builder with application/json body
func NewConfirmIdentityVerificationRequest(server string, identityVerificationId string, body ConfirmIdentityVerificationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewConfirmIdentityVerificationRequestWithBody(server, identityVerificationId, "application/json", bodyReader)
}

// NewConfirmIdentityVerificationRequestWithBody generates requests for ConfirmIdentityVerification with any type of body
func NewConfirmIdentityVerificationRequestWithBody(server string, identityVerificationId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "identityVerificationId", runtime.ParamLocationPath, identityVerificationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/identity-verifications/%s/confirm", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewResendIdentityVerificationRequest generates requests for ResendIdentityVerification
func NewResendIdentityVerificationRequest(server string, identityVerificationId string, params *ResendIdentityVerificationParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "identityVerificationId", runtime.ParamLocationPath, identityVerificationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/identity-verifications/%s/resend", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.StoreId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "storeId", runtime.ParamLocationQuery, *params.StoreId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSendIdentityVerificationRequest calls the generic SendIdentityVerification builder with application/json body
func NewSendIdentityVerificationRequest(server string, identityVerificationId string, body SendIdentityVerificationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSendIdentityVerificationRequestWithBody(server, identityVerificationId, "application/json", bodyReader)
}

// NewSendIdentityVerificationRequestWithBody generates requests for SendIdentityVerification with any type of body
func NewSendIdentityVerificationRequestWithBody(server string, identityVerificationId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "identityVerificationId", runtime.ParamLocationPath, identityVerificationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/identity-verifications/%s/send", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetKakaopayPaymentOrderRequest generates requests for GetKakaopayPaymentOrder
func NewGetKakaopayPaymentOrderRequest(server string, params *GetKakaopayPaymentOrderParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/kakaopay/payment/order")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pgTxId", runtime.ParamLocationQuery, params.PgTxId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "channelKey", runtime.ParamLocationQuery, params.ChannelKey); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLoginViaApiSecretRequest calls the generic LoginViaApiSecret builder with application/json body
func NewLoginViaApiSecretRequest(server string, body LoginViaApiSecretJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewLoginViaApiSecretRequestWithBody(server, "application/json", bodyReader)
}

// NewLoginViaApiSecretRequestWithBody generates requests for LoginViaApiSecret with any type of body
func NewLoginViaApiSecretRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/login/api-secret")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRevokePaymentSchedulesRequest generates requests for RevokePaymentSchedules
func NewRevokePaymentSchedulesRequest(server string, params *RevokePaymentSchedulesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/payment-schedules")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryParamBuf, err := json.Marshal(params.RequestBody); err != nil {
			return nil, err
		} else {
			queryValues.Add("requestBody", string(queryParamBuf))
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPaymentSchedulesRequest generates requests for GetPaymentSchedules
func NewGetPaymentSchedulesRequest(server string, params *GetPaymentSchedulesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/payment-schedules")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.RequestBody != nil {

			if queryParamBuf, err := json.Marshal(*params.RequestBody); err != nil {
				return nil, err
			} else {
				queryValues.Add("requestBody", string(queryParamBuf))
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPaymentScheduleRequest generates requests for GetPaymentSchedule
func NewGetPaymentScheduleRequest(server string, paymentScheduleId string, params *GetPaymentScheduleParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "paymentScheduleId", runtime.ParamLocationPath, paymentScheduleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/payment-schedules/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.StoreId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "storeId", runtime.ParamLocationQuery, *params.StoreId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPaymentsRequest generates requests for GetPayments
func NewGetPaymentsRequest(server string, params *GetPaymentsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/payments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.RequestBody != nil {

			if queryParamBuf, err := json.Marshal(*params.RequestBody); err != nil {
				return nil, err
			} else {
				queryValues.Add("requestBody", string(queryParamBuf))
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAllPaymentsByCursorRequest generates requests for GetAllPaymentsByCursor
func NewGetAllPaymentsByCursorRequest(server string, params *GetAllPaymentsByCursorParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/payments-by-cursor")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.RequestBody != nil {

			if queryParamBuf, err := json.Marshal(*params.RequestBody); err != nil {
				return nil, err
			} else {
				queryValues.Add("requestBody", string(queryParamBuf))
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPaymentRequest generates requests for GetPayment
func NewGetPaymentRequest(server string, paymentId string, params *GetPaymentParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "paymentId", runtime.ParamLocationPath, paymentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/payments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.StoreId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "storeId", runtime.ParamLocationQuery, *params.StoreId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPayWithBillingKeyRequest calls the generic PayWithBillingKey builder with application/json body
func NewPayWithBillingKeyRequest(server string, paymentId string, body PayWithBillingKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPayWithBillingKeyRequestWithBody(server, paymentId, "application/json", bodyReader)
}

// NewPayWithBillingKeyRequestWithBody generates requests for PayWithBillingKey with any type of body
func NewPayWithBillingKeyRequestWithBody(server string, paymentId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "paymentId", runtime.ParamLocationPath, paymentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/payments/%s/billing-key", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCancelPaymentRequest calls the generic CancelPayment builder with application/json body
func NewCancelPaymentRequest(server string, paymentId string, body CancelPaymentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCancelPaymentRequestWithBody(server, paymentId, "application/json", bodyReader)
}

// NewCancelPaymentRequestWithBody generates requests for CancelPayment with any type of body
func NewCancelPaymentRequestWithBody(server string, paymentId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "paymentId", runtime.ParamLocationPath, paymentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/payments/%s/cancel", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCashReceiptByPaymentIdRequest generates requests for GetCashReceiptByPaymentId
func NewGetCashReceiptByPaymentIdRequest(server string, paymentId string, params *GetCashReceiptByPaymentIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "paymentId", runtime.ParamLocationPath, paymentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/payments/%s/cash-receipt", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.StoreId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "storeId", runtime.ParamLocationQuery, *params.StoreId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCancelCashReceiptByPaymentIdRequest generates requests for CancelCashReceiptByPaymentId
func NewCancelCashReceiptByPaymentIdRequest(server string, paymentId string, params *CancelCashReceiptByPaymentIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "paymentId", runtime.ParamLocationPath, paymentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/payments/%s/cash-receipt/cancel", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.StoreId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "storeId", runtime.ParamLocationQuery, *params.StoreId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewConfirmEscrowRequest calls the generic ConfirmEscrow builder with application/json body
func NewConfirmEscrowRequest(server string, paymentId string, body ConfirmEscrowJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewConfirmEscrowRequestWithBody(server, paymentId, "application/json", bodyReader)
}

// NewConfirmEscrowRequestWithBody generates requests for ConfirmEscrow with any type of body
func NewConfirmEscrowRequestWithBody(server string, paymentId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "paymentId", runtime.ParamLocationPath, paymentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/payments/%s/escrow/complete", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewModifyEscrowLogisticsRequest calls the generic ModifyEscrowLogistics builder with application/json body
func NewModifyEscrowLogisticsRequest(server string, paymentId string, body ModifyEscrowLogisticsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewModifyEscrowLogisticsRequestWithBody(server, paymentId, "application/json", bodyReader)
}

// NewModifyEscrowLogisticsRequestWithBody generates requests for ModifyEscrowLogistics with any type of body
func NewModifyEscrowLogisticsRequestWithBody(server string, paymentId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "paymentId", runtime.ParamLocationPath, paymentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/payments/%s/escrow/logistics", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewApplyEscrowLogisticsRequest calls the generic ApplyEscrowLogistics builder with application/json body
func NewApplyEscrowLogisticsRequest(server string, paymentId string, body ApplyEscrowLogisticsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewApplyEscrowLogisticsRequestWithBody(server, paymentId, "application/json", bodyReader)
}

// NewApplyEscrowLogisticsRequestWithBody generates requests for ApplyEscrowLogistics with any type of body
func NewApplyEscrowLogisticsRequestWithBody(server string, paymentId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "paymentId", runtime.ParamLocationPath, paymentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/payments/%s/escrow/logistics", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPayInstantlyRequest calls the generic PayInstantly builder with application/json body
func NewPayInstantlyRequest(server string, paymentId string, body PayInstantlyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPayInstantlyRequestWithBody(server, paymentId, "application/json", bodyReader)
}

// NewPayInstantlyRequestWithBody generates requests for PayInstantly with any type of body
func NewPayInstantlyRequestWithBody(server string, paymentId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "paymentId", runtime.ParamLocationPath, paymentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/payments/%s/instant", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPreRegisterPaymentRequest calls the generic PreRegisterPayment builder with application/json body
func NewPreRegisterPaymentRequest(server string, paymentId string, body PreRegisterPaymentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPreRegisterPaymentRequestWithBody(server, paymentId, "application/json", bodyReader)
}

// NewPreRegisterPaymentRequestWithBody generates requests for PreRegisterPayment with any type of body
func NewPreRegisterPaymentRequestWithBody(server string, paymentId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "paymentId", runtime.ParamLocationPath, paymentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/payments/%s/pre-register", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRegisterStoreReceiptRequest calls the generic RegisterStoreReceipt builder with application/json body
func NewRegisterStoreReceiptRequest(server string, paymentId string, body RegisterStoreReceiptJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRegisterStoreReceiptRequestWithBody(server, paymentId, "application/json", bodyReader)
}

// NewRegisterStoreReceiptRequestWithBody generates requests for RegisterStoreReceipt with any type of body
func NewRegisterStoreReceiptRequestWithBody(server string, paymentId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "paymentId", runtime.ParamLocationPath, paymentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/payments/%s/register-store-receipt", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewResendWebhookRequest calls the generic ResendWebhook builder with application/json body
func NewResendWebhookRequest(server string, paymentId string, body ResendWebhookJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewResendWebhookRequestWithBody(server, paymentId, "application/json", bodyReader)
}

// NewResendWebhookRequestWithBody generates requests for ResendWebhook with any type of body
func NewResendWebhookRequestWithBody(server string, paymentId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "paymentId", runtime.ParamLocationPath, paymentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/payments/%s/resend-webhook", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreatePaymentScheduleRequest calls the generic CreatePaymentSchedule builder with application/json body
func NewCreatePaymentScheduleRequest(server string, paymentId string, body CreatePaymentScheduleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreatePaymentScheduleRequestWithBody(server, paymentId, "application/json", bodyReader)
}

// NewCreatePaymentScheduleRequestWithBody generates requests for CreatePaymentSchedule with any type of body
func NewCreatePaymentScheduleRequestWithBody(server string, paymentId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "paymentId", runtime.ParamLocationPath, paymentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/payments/%s/schedule", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPaymentTransactionsRequest generates requests for GetPaymentTransactions
func NewGetPaymentTransactionsRequest(server string, paymentId string, params *GetPaymentTransactionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "paymentId", runtime.ParamLocationPath, paymentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/payments/%s/transactions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.StoreId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "storeId", runtime.ParamLocationQuery, *params.StoreId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCloseVirtualAccountRequest generates requests for CloseVirtualAccount
func NewCloseVirtualAccountRequest(server string, paymentId string, params *CloseVirtualAccountParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "paymentId", runtime.ParamLocationPath, paymentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/payments/%s/virtual-account/close", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.StoreId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "storeId", runtime.ParamLocationQuery, *params.StoreId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPlatformRequest generates requests for GetPlatform
func NewGetPlatformRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdatePlatformRequest calls the generic UpdatePlatform builder with application/json body
func NewUpdatePlatformRequest(server string, body UpdatePlatformJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdatePlatformRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdatePlatformRequestWithBody generates requests for UpdatePlatform with any type of body
func NewUpdatePlatformRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPlatformAccountTransfersRequest generates requests for GetPlatformAccountTransfers
func NewGetPlatformAccountTransfersRequest(server string, params *GetPlatformAccountTransfersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/account-transfers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.RequestBody != nil {

			if queryParamBuf, err := json.Marshal(*params.RequestBody); err != nil {
				return nil, err
			} else {
				queryValues.Add("requestBody", string(queryParamBuf))
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPlatformAdditionalFeePoliciesRequest generates requests for GetPlatformAdditionalFeePolicies
func NewGetPlatformAdditionalFeePoliciesRequest(server string, params *GetPlatformAdditionalFeePoliciesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/additional-fee-policies")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.RequestBody != nil {

			if queryParamBuf, err := json.Marshal(*params.RequestBody); err != nil {
				return nil, err
			} else {
				queryValues.Add("requestBody", string(queryParamBuf))
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreatePlatformAdditionalFeePolicyRequest calls the generic CreatePlatformAdditionalFeePolicy builder with application/json body
func NewCreatePlatformAdditionalFeePolicyRequest(server string, body CreatePlatformAdditionalFeePolicyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreatePlatformAdditionalFeePolicyRequestWithBody(server, "application/json", bodyReader)
}

// NewCreatePlatformAdditionalFeePolicyRequestWithBody generates requests for CreatePlatformAdditionalFeePolicy with any type of body
func NewCreatePlatformAdditionalFeePolicyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/additional-fee-policies")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPlatformAdditionalFeePolicyRequest generates requests for GetPlatformAdditionalFeePolicy
func NewGetPlatformAdditionalFeePolicyRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/additional-fee-policies/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdatePlatformAdditionalFeePolicyRequest calls the generic UpdatePlatformAdditionalFeePolicy builder with application/json body
func NewUpdatePlatformAdditionalFeePolicyRequest(server string, id string, body UpdatePlatformAdditionalFeePolicyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdatePlatformAdditionalFeePolicyRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdatePlatformAdditionalFeePolicyRequestWithBody generates requests for UpdatePlatformAdditionalFeePolicy with any type of body
func NewUpdatePlatformAdditionalFeePolicyRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/additional-fee-policies/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewArchivePlatformAdditionalFeePolicyRequest generates requests for ArchivePlatformAdditionalFeePolicy
func NewArchivePlatformAdditionalFeePolicyRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/additional-fee-policies/%s/archive", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRecoverPlatformAdditionalFeePolicyRequest generates requests for RecoverPlatformAdditionalFeePolicy
func NewRecoverPlatformAdditionalFeePolicyRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/additional-fee-policies/%s/recover", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCancelPlatformAdditionalFeePolicyScheduleRequest generates requests for CancelPlatformAdditionalFeePolicySchedule
func NewCancelPlatformAdditionalFeePolicyScheduleRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/additional-fee-policies/%s/schedule", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPlatformAdditionalFeePolicyScheduleRequest generates requests for GetPlatformAdditionalFeePolicySchedule
func NewGetPlatformAdditionalFeePolicyScheduleRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/additional-fee-policies/%s/schedule", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewScheduleAdditionalFeePolicyRequest calls the generic ScheduleAdditionalFeePolicy builder with application/json body
func NewScheduleAdditionalFeePolicyRequest(server string, id string, body ScheduleAdditionalFeePolicyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewScheduleAdditionalFeePolicyRequestWithBody(server, id, "application/json", bodyReader)
}

// NewScheduleAdditionalFeePolicyRequestWithBody generates requests for ScheduleAdditionalFeePolicy with any type of body
func NewScheduleAdditionalFeePolicyRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/additional-fee-policies/%s/schedule", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRescheduleAdditionalFeePolicyRequest calls the generic RescheduleAdditionalFeePolicy builder with application/json body
func NewRescheduleAdditionalFeePolicyRequest(server string, id string, body RescheduleAdditionalFeePolicyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRescheduleAdditionalFeePolicyRequestWithBody(server, id, "application/json", bodyReader)
}

// NewRescheduleAdditionalFeePolicyRequestWithBody generates requests for RescheduleAdditionalFeePolicy with any type of body
func NewRescheduleAdditionalFeePolicyRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/additional-fee-policies/%s/schedule", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPlatformAccountHolderRequest generates requests for GetPlatformAccountHolder
func NewGetPlatformAccountHolderRequest(server string, bank Bank, accountNumber string, params *GetPlatformAccountHolderParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bank", runtime.ParamLocationPath, bank)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "accountNumber", runtime.ParamLocationPath, accountNumber)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/bank-accounts/%s/%s/holder", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Birthdate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "birthdate", runtime.ParamLocationQuery, *params.Birthdate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.BusinessRegistrationNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "businessRegistrationNumber", runtime.ParamLocationQuery, *params.BusinessRegistrationNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPlatformBulkPayoutsRequest generates requests for GetPlatformBulkPayouts
func NewGetPlatformBulkPayoutsRequest(server string, params *GetPlatformBulkPayoutsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/bulk-payouts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.RequestBody != nil {

			if queryParamBuf, err := json.Marshal(*params.RequestBody); err != nil {
				return nil, err
			} else {
				queryValues.Add("requestBody", string(queryParamBuf))
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPlatformCompanyStateRequest generates requests for GetPlatformCompanyState
func NewGetPlatformCompanyStateRequest(server string, businessRegistrationNumber string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "businessRegistrationNumber", runtime.ParamLocationPath, businessRegistrationNumber)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/companies/%s/state", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPlatformContractsRequest generates requests for GetPlatformContracts
func NewGetPlatformContractsRequest(server string, params *GetPlatformContractsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/contracts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.RequestBody != nil {

			if queryParamBuf, err := json.Marshal(*params.RequestBody); err != nil {
				return nil, err
			} else {
				queryValues.Add("requestBody", string(queryParamBuf))
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreatePlatformContractRequest calls the generic CreatePlatformContract builder with application/json body
func NewCreatePlatformContractRequest(server string, body CreatePlatformContractJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreatePlatformContractRequestWithBody(server, "application/json", bodyReader)
}

// NewCreatePlatformContractRequestWithBody generates requests for CreatePlatformContract with any type of body
func NewCreatePlatformContractRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/contracts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPlatformContractRequest generates requests for GetPlatformContract
func NewGetPlatformContractRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/contracts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdatePlatformContractRequest calls the generic UpdatePlatformContract builder with application/json body
func NewUpdatePlatformContractRequest(server string, id string, body UpdatePlatformContractJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdatePlatformContractRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdatePlatformContractRequestWithBody generates requests for UpdatePlatformContract with any type of body
func NewUpdatePlatformContractRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/contracts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewArchivePlatformContractRequest generates requests for ArchivePlatformContract
func NewArchivePlatformContractRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/contracts/%s/archive", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRecoverPlatformContractRequest generates requests for RecoverPlatformContract
func NewRecoverPlatformContractRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/contracts/%s/recover", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCancelPlatformContractScheduleRequest generates requests for CancelPlatformContractSchedule
func NewCancelPlatformContractScheduleRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/contracts/%s/schedule", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPlatformContractScheduleRequest generates requests for GetPlatformContractSchedule
func NewGetPlatformContractScheduleRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/contracts/%s/schedule", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewScheduleContractRequest calls the generic ScheduleContract builder with application/json body
func NewScheduleContractRequest(server string, id string, body ScheduleContractJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewScheduleContractRequestWithBody(server, id, "application/json", bodyReader)
}

// NewScheduleContractRequestWithBody generates requests for ScheduleContract with any type of body
func NewScheduleContractRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/contracts/%s/schedule", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRescheduleContractRequest calls the generic RescheduleContract builder with application/json body
func NewRescheduleContractRequest(server string, id string, body RescheduleContractJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRescheduleContractRequestWithBody(server, id, "application/json", bodyReader)
}

// NewRescheduleContractRequestWithBody generates requests for RescheduleContract with any type of body
func NewRescheduleContractRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/contracts/%s/schedule", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPlatformDiscountSharePoliciesRequest generates requests for GetPlatformDiscountSharePolicies
func NewGetPlatformDiscountSharePoliciesRequest(server string, params *GetPlatformDiscountSharePoliciesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/discount-share-policies")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.RequestBody != nil {

			if queryParamBuf, err := json.Marshal(*params.RequestBody); err != nil {
				return nil, err
			} else {
				queryValues.Add("requestBody", string(queryParamBuf))
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreatePlatformDiscountSharePolicyRequest calls the generic CreatePlatformDiscountSharePolicy builder with application/json body
func NewCreatePlatformDiscountSharePolicyRequest(server string, body CreatePlatformDiscountSharePolicyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreatePlatformDiscountSharePolicyRequestWithBody(server, "application/json", bodyReader)
}

// NewCreatePlatformDiscountSharePolicyRequestWithBody generates requests for CreatePlatformDiscountSharePolicy with any type of body
func NewCreatePlatformDiscountSharePolicyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/discount-share-policies")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPlatformDiscountSharePolicyRequest generates requests for GetPlatformDiscountSharePolicy
func NewGetPlatformDiscountSharePolicyRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/discount-share-policies/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdatePlatformDiscountSharePolicyRequest calls the generic UpdatePlatformDiscountSharePolicy builder with application/json body
func NewUpdatePlatformDiscountSharePolicyRequest(server string, id string, body UpdatePlatformDiscountSharePolicyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdatePlatformDiscountSharePolicyRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdatePlatformDiscountSharePolicyRequestWithBody generates requests for UpdatePlatformDiscountSharePolicy with any type of body
func NewUpdatePlatformDiscountSharePolicyRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/discount-share-policies/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewArchivePlatformDiscountSharePolicyRequest generates requests for ArchivePlatformDiscountSharePolicy
func NewArchivePlatformDiscountSharePolicyRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/discount-share-policies/%s/archive", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRecoverPlatformDiscountSharePolicyRequest generates requests for RecoverPlatformDiscountSharePolicy
func NewRecoverPlatformDiscountSharePolicyRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/discount-share-policies/%s/recover", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCancelPlatformDiscountSharePolicyScheduleRequest generates requests for CancelPlatformDiscountSharePolicySchedule
func NewCancelPlatformDiscountSharePolicyScheduleRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/discount-share-policies/%s/schedule", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPlatformDiscountSharePolicyScheduleRequest generates requests for GetPlatformDiscountSharePolicySchedule
func NewGetPlatformDiscountSharePolicyScheduleRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/discount-share-policies/%s/schedule", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewScheduleDiscountSharePolicyRequest calls the generic ScheduleDiscountSharePolicy builder with application/json body
func NewScheduleDiscountSharePolicyRequest(server string, id string, body ScheduleDiscountSharePolicyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewScheduleDiscountSharePolicyRequestWithBody(server, id, "application/json", bodyReader)
}

// NewScheduleDiscountSharePolicyRequestWithBody generates requests for ScheduleDiscountSharePolicy with any type of body
func NewScheduleDiscountSharePolicyRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/discount-share-policies/%s/schedule", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRescheduleDiscountSharePolicyRequest calls the generic RescheduleDiscountSharePolicy builder with application/json body
func NewRescheduleDiscountSharePolicyRequest(server string, id string, body RescheduleDiscountSharePolicyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRescheduleDiscountSharePolicyRequestWithBody(server, id, "application/json", bodyReader)
}

// NewRescheduleDiscountSharePolicyRequestWithBody generates requests for RescheduleDiscountSharePolicy with any type of body
func NewRescheduleDiscountSharePolicyRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/discount-share-policies/%s/schedule", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPlatformDiscountSharePolicyFilterOptionsRequest generates requests for GetPlatformDiscountSharePolicyFilterOptions
func NewGetPlatformDiscountSharePolicyFilterOptionsRequest(server string, params *GetPlatformDiscountSharePolicyFilterOptionsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/discount-share-policy-filter-options")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.IsArchived != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "isArchived", runtime.ParamLocationQuery, *params.IsArchived); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPlatformPartnerFilterOptionsRequest generates requests for GetPlatformPartnerFilterOptions
func NewGetPlatformPartnerFilterOptionsRequest(server string, params *GetPlatformPartnerFilterOptionsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/partner-filter-options")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.IsArchived != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "isArchived", runtime.ParamLocationQuery, *params.IsArchived); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPlatformPartnerSettlementsRequest generates requests for GetPlatformPartnerSettlements
func NewGetPlatformPartnerSettlementsRequest(server string, params *GetPlatformPartnerSettlementsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/partner-settlements")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.RequestBody != nil {

			if queryParamBuf, err := json.Marshal(*params.RequestBody); err != nil {
				return nil, err
			} else {
				queryValues.Add("requestBody", string(queryParamBuf))
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPlatformPartnersRequest generates requests for GetPlatformPartners
func NewGetPlatformPartnersRequest(server string, params *GetPlatformPartnersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/partners")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.RequestBody != nil {

			if queryParamBuf, err := json.Marshal(*params.RequestBody); err != nil {
				return nil, err
			} else {
				queryValues.Add("requestBody", string(queryParamBuf))
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreatePlatformPartnerRequest calls the generic CreatePlatformPartner builder with application/json body
func NewCreatePlatformPartnerRequest(server string, body CreatePlatformPartnerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreatePlatformPartnerRequestWithBody(server, "application/json", bodyReader)
}

// NewCreatePlatformPartnerRequestWithBody generates requests for CreatePlatformPartner with any type of body
func NewCreatePlatformPartnerRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/partners")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreatePlatformPartnersRequest calls the generic CreatePlatformPartners builder with application/json body
func NewCreatePlatformPartnersRequest(server string, body CreatePlatformPartnersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreatePlatformPartnersRequestWithBody(server, "application/json", bodyReader)
}

// NewCreatePlatformPartnersRequestWithBody generates requests for CreatePlatformPartners with any type of body
func NewCreatePlatformPartnersRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/partners/batch")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSchedulePlatformPartnersRequest calls the generic SchedulePlatformPartners builder with application/json body
func NewSchedulePlatformPartnersRequest(server string, body SchedulePlatformPartnersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSchedulePlatformPartnersRequestWithBody(server, "application/json", bodyReader)
}

// NewSchedulePlatformPartnersRequestWithBody generates requests for SchedulePlatformPartners with any type of body
func NewSchedulePlatformPartnersRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/partners/schedule")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPlatformPartnerRequest generates requests for GetPlatformPartner
func NewGetPlatformPartnerRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/partners/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdatePlatformPartnerRequest calls the generic UpdatePlatformPartner builder with application/json body
func NewUpdatePlatformPartnerRequest(server string, id string, body UpdatePlatformPartnerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdatePlatformPartnerRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdatePlatformPartnerRequestWithBody generates requests for UpdatePlatformPartner with any type of body
func NewUpdatePlatformPartnerRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/partners/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewArchivePlatformPartnerRequest generates requests for ArchivePlatformPartner
func NewArchivePlatformPartnerRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/partners/%s/archive", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRecoverPlatformPartnerRequest generates requests for RecoverPlatformPartner
func NewRecoverPlatformPartnerRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/partners/%s/recover", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCancelPlatformPartnerScheduleRequest generates requests for CancelPlatformPartnerSchedule
func NewCancelPlatformPartnerScheduleRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/partners/%s/schedule", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPlatformPartnerScheduleRequest generates requests for GetPlatformPartnerSchedule
func NewGetPlatformPartnerScheduleRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/partners/%s/schedule", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSchedulePartnerRequest calls the generic SchedulePartner builder with application/json body
func NewSchedulePartnerRequest(server string, id string, body SchedulePartnerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSchedulePartnerRequestWithBody(server, id, "application/json", bodyReader)
}

// NewSchedulePartnerRequestWithBody generates requests for SchedulePartner with any type of body
func NewSchedulePartnerRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/partners/%s/schedule", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewReschedulePartnerRequest calls the generic ReschedulePartner builder with application/json body
func NewReschedulePartnerRequest(server string, id string, body ReschedulePartnerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReschedulePartnerRequestWithBody(server, id, "application/json", bodyReader)
}

// NewReschedulePartnerRequestWithBody generates requests for ReschedulePartner with any type of body
func NewReschedulePartnerRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/partners/%s/schedule", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPlatformPayoutsRequest generates requests for GetPlatformPayouts
func NewGetPlatformPayoutsRequest(server string, params *GetPlatformPayoutsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/payouts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.RequestBody != nil {

			if queryParamBuf, err := json.Marshal(*params.RequestBody); err != nil {
				return nil, err
			} else {
				queryValues.Add("requestBody", string(queryParamBuf))
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPlatformSettingRequest generates requests for GetPlatformSetting
func NewGetPlatformSettingRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/setting")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdatePlatformSettingRequest calls the generic UpdatePlatformSetting builder with application/json body
func NewUpdatePlatformSettingRequest(server string, body UpdatePlatformSettingJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdatePlatformSettingRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdatePlatformSettingRequestWithBody generates requests for UpdatePlatformSetting with any type of body
func NewUpdatePlatformSettingRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/setting")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPlatformTransferSummariesRequest generates requests for GetPlatformTransferSummaries
func NewGetPlatformTransferSummariesRequest(server string, params *GetPlatformTransferSummariesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/transfer-summaries")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.RequestBody != nil {

			if queryParamBuf, err := json.Marshal(*params.RequestBody); err != nil {
				return nil, err
			} else {
				queryValues.Add("requestBody", string(queryParamBuf))
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDownloadPlatformTransferSheetRequest generates requests for DownloadPlatformTransferSheet
func NewDownloadPlatformTransferSheetRequest(server string, params *DownloadPlatformTransferSheetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/transfer-summaries/sheet-file")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryParamBuf, err := json.Marshal(params.RequestBody); err != nil {
			return nil, err
		} else {
			queryValues.Add("requestBody", string(queryParamBuf))
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreatePlatformManualTransferRequest calls the generic CreatePlatformManualTransfer builder with application/json body
func NewCreatePlatformManualTransferRequest(server string, body CreatePlatformManualTransferJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreatePlatformManualTransferRequestWithBody(server, "application/json", bodyReader)
}

// NewCreatePlatformManualTransferRequestWithBody generates requests for CreatePlatformManualTransfer with any type of body
func NewCreatePlatformManualTransferRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/transfers/manual")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreatePlatformOrderTransferRequest calls the generic CreatePlatformOrderTransfer builder with application/json body
func NewCreatePlatformOrderTransferRequest(server string, body CreatePlatformOrderTransferJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreatePlatformOrderTransferRequestWithBody(server, "application/json", bodyReader)
}

// NewCreatePlatformOrderTransferRequestWithBody generates requests for CreatePlatformOrderTransfer with any type of body
func NewCreatePlatformOrderTransferRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/transfers/order")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreatePlatformOrderCancelTransferRequest calls the generic CreatePlatformOrderCancelTransfer builder with application/json body
func NewCreatePlatformOrderCancelTransferRequest(server string, body CreatePlatformOrderCancelTransferJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreatePlatformOrderCancelTransferRequestWithBody(server, "application/json", bodyReader)
}

// NewCreatePlatformOrderCancelTransferRequestWithBody generates requests for CreatePlatformOrderCancelTransfer with any type of body
func NewCreatePlatformOrderCancelTransferRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/transfers/order-cancel")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePlatformTransferRequest generates requests for DeletePlatformTransfer
func NewDeletePlatformTransferRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/transfers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPlatformTransferRequest generates requests for GetPlatformTransfer
func NewGetPlatformTransferRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/transfers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPromotionRequest generates requests for GetPromotion
func NewGetPromotionRequest(server string, promotionId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "promotionId", runtime.ParamLocationPath, promotionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/promotions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRefreshTokenRequest calls the generic RefreshToken builder with application/json body
func NewRefreshTokenRequest(server string, body RefreshTokenJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRefreshTokenRequestWithBody(server, "application/json", bodyReader)
}

// NewRefreshTokenRequestWithBody generates requests for RefreshToken with any type of body
func NewRefreshTokenRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/token/refresh")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetBankInfosWithResponse request
	GetBankInfosWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetBankInfosHTTPResponse, error)

	// GetBillingKeyInfosWithResponse request
	GetBillingKeyInfosWithResponse(ctx context.Context, params *GetBillingKeyInfosParams, reqEditors ...RequestEditorFn) (*GetBillingKeyInfosHTTPResponse, error)

	// IssueBillingKeyWithBodyWithResponse request with any body
	IssueBillingKeyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*IssueBillingKeyHTTPResponse, error)

	IssueBillingKeyWithResponse(ctx context.Context, body IssueBillingKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*IssueBillingKeyHTTPResponse, error)

	// DeleteBillingKeyWithResponse request
	DeleteBillingKeyWithResponse(ctx context.Context, billingKey string, params *DeleteBillingKeyParams, reqEditors ...RequestEditorFn) (*DeleteBillingKeyHTTPResponse, error)

	// GetBillingKeyInfoWithResponse request
	GetBillingKeyInfoWithResponse(ctx context.Context, billingKey string, params *GetBillingKeyInfoParams, reqEditors ...RequestEditorFn) (*GetBillingKeyInfoHTTPResponse, error)

	// IssueCashReceiptWithBodyWithResponse request with any body
	IssueCashReceiptWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*IssueCashReceiptHTTPResponse, error)

	IssueCashReceiptWithResponse(ctx context.Context, body IssueCashReceiptJSONRequestBody, reqEditors ...RequestEditorFn) (*IssueCashReceiptHTTPResponse, error)

	// GetIdentityVerificationWithResponse request
	GetIdentityVerificationWithResponse(ctx context.Context, identityVerificationId string, params *GetIdentityVerificationParams, reqEditors ...RequestEditorFn) (*GetIdentityVerificationHTTPResponse, error)

	// ConfirmIdentityVerificationWithBodyWithResponse request with any body
	ConfirmIdentityVerificationWithBodyWithResponse(ctx context.Context, identityVerificationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ConfirmIdentityVerificationHTTPResponse, error)

	ConfirmIdentityVerificationWithResponse(ctx context.Context, identityVerificationId string, body ConfirmIdentityVerificationJSONRequestBody, reqEditors ...RequestEditorFn) (*ConfirmIdentityVerificationHTTPResponse, error)

	// ResendIdentityVerificationWithResponse request
	ResendIdentityVerificationWithResponse(ctx context.Context, identityVerificationId string, params *ResendIdentityVerificationParams, reqEditors ...RequestEditorFn) (*ResendIdentityVerificationHTTPResponse, error)

	// SendIdentityVerificationWithBodyWithResponse request with any body
	SendIdentityVerificationWithBodyWithResponse(ctx context.Context, identityVerificationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SendIdentityVerificationHTTPResponse, error)

	SendIdentityVerificationWithResponse(ctx context.Context, identityVerificationId string, body SendIdentityVerificationJSONRequestBody, reqEditors ...RequestEditorFn) (*SendIdentityVerificationHTTPResponse, error)

	// GetKakaopayPaymentOrderWithResponse request
	GetKakaopayPaymentOrderWithResponse(ctx context.Context, params *GetKakaopayPaymentOrderParams, reqEditors ...RequestEditorFn) (*GetKakaopayPaymentOrderHTTPResponse, error)

	// LoginViaApiSecretWithBodyWithResponse request with any body
	LoginViaApiSecretWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LoginViaApiSecretHTTPResponse, error)

	LoginViaApiSecretWithResponse(ctx context.Context, body LoginViaApiSecretJSONRequestBody, reqEditors ...RequestEditorFn) (*LoginViaApiSecretHTTPResponse, error)

	// RevokePaymentSchedulesWithResponse request
	RevokePaymentSchedulesWithResponse(ctx context.Context, params *RevokePaymentSchedulesParams, reqEditors ...RequestEditorFn) (*RevokePaymentSchedulesHTTPResponse, error)

	// GetPaymentSchedulesWithResponse request
	GetPaymentSchedulesWithResponse(ctx context.Context, params *GetPaymentSchedulesParams, reqEditors ...RequestEditorFn) (*GetPaymentSchedulesHTTPResponse, error)

	// GetPaymentScheduleWithResponse request
	GetPaymentScheduleWithResponse(ctx context.Context, paymentScheduleId string, params *GetPaymentScheduleParams, reqEditors ...RequestEditorFn) (*GetPaymentScheduleHTTPResponse, error)

	// GetPaymentsWithResponse request
	GetPaymentsWithResponse(ctx context.Context, params *GetPaymentsParams, reqEditors ...RequestEditorFn) (*GetPaymentsHTTPResponse, error)

	// GetAllPaymentsByCursorWithResponse request
	GetAllPaymentsByCursorWithResponse(ctx context.Context, params *GetAllPaymentsByCursorParams, reqEditors ...RequestEditorFn) (*GetAllPaymentsByCursorHTTPResponse, error)

	// GetPaymentWithResponse request
	GetPaymentWithResponse(ctx context.Context, paymentId string, params *GetPaymentParams, reqEditors ...RequestEditorFn) (*GetPaymentHTTPResponse, error)

	// PayWithBillingKeyWithBodyWithResponse request with any body
	PayWithBillingKeyWithBodyWithResponse(ctx context.Context, paymentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PayWithBillingKeyHTTPResponse, error)

	PayWithBillingKeyWithResponse(ctx context.Context, paymentId string, body PayWithBillingKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PayWithBillingKeyHTTPResponse, error)

	// CancelPaymentWithBodyWithResponse request with any body
	CancelPaymentWithBodyWithResponse(ctx context.Context, paymentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CancelPaymentHTTPResponse, error)

	CancelPaymentWithResponse(ctx context.Context, paymentId string, body CancelPaymentJSONRequestBody, reqEditors ...RequestEditorFn) (*CancelPaymentHTTPResponse, error)

	// GetCashReceiptByPaymentIdWithResponse request
	GetCashReceiptByPaymentIdWithResponse(ctx context.Context, paymentId string, params *GetCashReceiptByPaymentIdParams, reqEditors ...RequestEditorFn) (*GetCashReceiptByPaymentIdHTTPResponse, error)

	// CancelCashReceiptByPaymentIdWithResponse request
	CancelCashReceiptByPaymentIdWithResponse(ctx context.Context, paymentId string, params *CancelCashReceiptByPaymentIdParams, reqEditors ...RequestEditorFn) (*CancelCashReceiptByPaymentIdHTTPResponse, error)

	// ConfirmEscrowWithBodyWithResponse request with any body
	ConfirmEscrowWithBodyWithResponse(ctx context.Context, paymentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ConfirmEscrowHTTPResponse, error)

	ConfirmEscrowWithResponse(ctx context.Context, paymentId string, body ConfirmEscrowJSONRequestBody, reqEditors ...RequestEditorFn) (*ConfirmEscrowHTTPResponse, error)

	// ModifyEscrowLogisticsWithBodyWithResponse request with any body
	ModifyEscrowLogisticsWithBodyWithResponse(ctx context.Context, paymentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ModifyEscrowLogisticsHTTPResponse, error)

	ModifyEscrowLogisticsWithResponse(ctx context.Context, paymentId string, body ModifyEscrowLogisticsJSONRequestBody, reqEditors ...RequestEditorFn) (*ModifyEscrowLogisticsHTTPResponse, error)

	// ApplyEscrowLogisticsWithBodyWithResponse request with any body
	ApplyEscrowLogisticsWithBodyWithResponse(ctx context.Context, paymentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ApplyEscrowLogisticsHTTPResponse, error)

	ApplyEscrowLogisticsWithResponse(ctx context.Context, paymentId string, body ApplyEscrowLogisticsJSONRequestBody, reqEditors ...RequestEditorFn) (*ApplyEscrowLogisticsHTTPResponse, error)

	// PayInstantlyWithBodyWithResponse request with any body
	PayInstantlyWithBodyWithResponse(ctx context.Context, paymentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PayInstantlyHTTPResponse, error)

	PayInstantlyWithResponse(ctx context.Context, paymentId string, body PayInstantlyJSONRequestBody, reqEditors ...RequestEditorFn) (*PayInstantlyHTTPResponse, error)

	// PreRegisterPaymentWithBodyWithResponse request with any body
	PreRegisterPaymentWithBodyWithResponse(ctx context.Context, paymentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PreRegisterPaymentHTTPResponse, error)

	PreRegisterPaymentWithResponse(ctx context.Context, paymentId string, body PreRegisterPaymentJSONRequestBody, reqEditors ...RequestEditorFn) (*PreRegisterPaymentHTTPResponse, error)

	// RegisterStoreReceiptWithBodyWithResponse request with any body
	RegisterStoreReceiptWithBodyWithResponse(ctx context.Context, paymentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RegisterStoreReceiptHTTPResponse, error)

	RegisterStoreReceiptWithResponse(ctx context.Context, paymentId string, body RegisterStoreReceiptJSONRequestBody, reqEditors ...RequestEditorFn) (*RegisterStoreReceiptHTTPResponse, error)

	// ResendWebhookWithBodyWithResponse request with any body
	ResendWebhookWithBodyWithResponse(ctx context.Context, paymentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ResendWebhookHTTPResponse, error)

	ResendWebhookWithResponse(ctx context.Context, paymentId string, body ResendWebhookJSONRequestBody, reqEditors ...RequestEditorFn) (*ResendWebhookHTTPResponse, error)

	// CreatePaymentScheduleWithBodyWithResponse request with any body
	CreatePaymentScheduleWithBodyWithResponse(ctx context.Context, paymentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePaymentScheduleHTTPResponse, error)

	CreatePaymentScheduleWithResponse(ctx context.Context, paymentId string, body CreatePaymentScheduleJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePaymentScheduleHTTPResponse, error)

	// GetPaymentTransactionsWithResponse request
	GetPaymentTransactionsWithResponse(ctx context.Context, paymentId string, params *GetPaymentTransactionsParams, reqEditors ...RequestEditorFn) (*GetPaymentTransactionsHTTPResponse, error)

	// CloseVirtualAccountWithResponse request
	CloseVirtualAccountWithResponse(ctx context.Context, paymentId string, params *CloseVirtualAccountParams, reqEditors ...RequestEditorFn) (*CloseVirtualAccountHTTPResponse, error)

	// GetPlatformWithResponse request
	GetPlatformWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPlatformHTTPResponse, error)

	// UpdatePlatformWithBodyWithResponse request with any body
	UpdatePlatformWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePlatformHTTPResponse, error)

	UpdatePlatformWithResponse(ctx context.Context, body UpdatePlatformJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePlatformHTTPResponse, error)

	// GetPlatformAccountTransfersWithResponse request
	GetPlatformAccountTransfersWithResponse(ctx context.Context, params *GetPlatformAccountTransfersParams, reqEditors ...RequestEditorFn) (*GetPlatformAccountTransfersHTTPResponse, error)

	// GetPlatformAdditionalFeePoliciesWithResponse request
	GetPlatformAdditionalFeePoliciesWithResponse(ctx context.Context, params *GetPlatformAdditionalFeePoliciesParams, reqEditors ...RequestEditorFn) (*GetPlatformAdditionalFeePoliciesHTTPResponse, error)

	// CreatePlatformAdditionalFeePolicyWithBodyWithResponse request with any body
	CreatePlatformAdditionalFeePolicyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePlatformAdditionalFeePolicyHTTPResponse, error)

	CreatePlatformAdditionalFeePolicyWithResponse(ctx context.Context, body CreatePlatformAdditionalFeePolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePlatformAdditionalFeePolicyHTTPResponse, error)

	// GetPlatformAdditionalFeePolicyWithResponse request
	GetPlatformAdditionalFeePolicyWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetPlatformAdditionalFeePolicyHTTPResponse, error)

	// UpdatePlatformAdditionalFeePolicyWithBodyWithResponse request with any body
	UpdatePlatformAdditionalFeePolicyWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePlatformAdditionalFeePolicyHTTPResponse, error)

	UpdatePlatformAdditionalFeePolicyWithResponse(ctx context.Context, id string, body UpdatePlatformAdditionalFeePolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePlatformAdditionalFeePolicyHTTPResponse, error)

	// ArchivePlatformAdditionalFeePolicyWithResponse request
	ArchivePlatformAdditionalFeePolicyWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ArchivePlatformAdditionalFeePolicyHTTPResponse, error)

	// RecoverPlatformAdditionalFeePolicyWithResponse request
	RecoverPlatformAdditionalFeePolicyWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*RecoverPlatformAdditionalFeePolicyHTTPResponse, error)

	// CancelPlatformAdditionalFeePolicyScheduleWithResponse request
	CancelPlatformAdditionalFeePolicyScheduleWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*CancelPlatformAdditionalFeePolicyScheduleHTTPResponse, error)

	// GetPlatformAdditionalFeePolicyScheduleWithResponse request
	GetPlatformAdditionalFeePolicyScheduleWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetPlatformAdditionalFeePolicyScheduleHTTPResponse, error)

	// ScheduleAdditionalFeePolicyWithBodyWithResponse request with any body
	ScheduleAdditionalFeePolicyWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ScheduleAdditionalFeePolicyHTTPResponse, error)

	ScheduleAdditionalFeePolicyWithResponse(ctx context.Context, id string, body ScheduleAdditionalFeePolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*ScheduleAdditionalFeePolicyHTTPResponse, error)

	// RescheduleAdditionalFeePolicyWithBodyWithResponse request with any body
	RescheduleAdditionalFeePolicyWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RescheduleAdditionalFeePolicyHTTPResponse, error)

	RescheduleAdditionalFeePolicyWithResponse(ctx context.Context, id string, body RescheduleAdditionalFeePolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*RescheduleAdditionalFeePolicyHTTPResponse, error)

	// GetPlatformAccountHolderWithResponse request
	GetPlatformAccountHolderWithResponse(ctx context.Context, bank Bank, accountNumber string, params *GetPlatformAccountHolderParams, reqEditors ...RequestEditorFn) (*GetPlatformAccountHolderHTTPResponse, error)

	// GetPlatformBulkPayoutsWithResponse request
	GetPlatformBulkPayoutsWithResponse(ctx context.Context, params *GetPlatformBulkPayoutsParams, reqEditors ...RequestEditorFn) (*GetPlatformBulkPayoutsHTTPResponse, error)

	// GetPlatformCompanyStateWithResponse request
	GetPlatformCompanyStateWithResponse(ctx context.Context, businessRegistrationNumber string, reqEditors ...RequestEditorFn) (*GetPlatformCompanyStateHTTPResponse, error)

	// GetPlatformContractsWithResponse request
	GetPlatformContractsWithResponse(ctx context.Context, params *GetPlatformContractsParams, reqEditors ...RequestEditorFn) (*GetPlatformContractsHTTPResponse, error)

	// CreatePlatformContractWithBodyWithResponse request with any body
	CreatePlatformContractWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePlatformContractHTTPResponse, error)

	CreatePlatformContractWithResponse(ctx context.Context, body CreatePlatformContractJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePlatformContractHTTPResponse, error)

	// GetPlatformContractWithResponse request
	GetPlatformContractWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetPlatformContractHTTPResponse, error)

	// UpdatePlatformContractWithBodyWithResponse request with any body
	UpdatePlatformContractWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePlatformContractHTTPResponse, error)

	UpdatePlatformContractWithResponse(ctx context.Context, id string, body UpdatePlatformContractJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePlatformContractHTTPResponse, error)

	// ArchivePlatformContractWithResponse request
	ArchivePlatformContractWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ArchivePlatformContractHTTPResponse, error)

	// RecoverPlatformContractWithResponse request
	RecoverPlatformContractWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*RecoverPlatformContractHTTPResponse, error)

	// CancelPlatformContractScheduleWithResponse request
	CancelPlatformContractScheduleWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*CancelPlatformContractScheduleHTTPResponse, error)

	// GetPlatformContractScheduleWithResponse request
	GetPlatformContractScheduleWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetPlatformContractScheduleHTTPResponse, error)

	// ScheduleContractWithBodyWithResponse request with any body
	ScheduleContractWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ScheduleContractHTTPResponse, error)

	ScheduleContractWithResponse(ctx context.Context, id string, body ScheduleContractJSONRequestBody, reqEditors ...RequestEditorFn) (*ScheduleContractHTTPResponse, error)

	// RescheduleContractWithBodyWithResponse request with any body
	RescheduleContractWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RescheduleContractHTTPResponse, error)

	RescheduleContractWithResponse(ctx context.Context, id string, body RescheduleContractJSONRequestBody, reqEditors ...RequestEditorFn) (*RescheduleContractHTTPResponse, error)

	// GetPlatformDiscountSharePoliciesWithResponse request
	GetPlatformDiscountSharePoliciesWithResponse(ctx context.Context, params *GetPlatformDiscountSharePoliciesParams, reqEditors ...RequestEditorFn) (*GetPlatformDiscountSharePoliciesHTTPResponse, error)

	// CreatePlatformDiscountSharePolicyWithBodyWithResponse request with any body
	CreatePlatformDiscountSharePolicyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePlatformDiscountSharePolicyHTTPResponse, error)

	CreatePlatformDiscountSharePolicyWithResponse(ctx context.Context, body CreatePlatformDiscountSharePolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePlatformDiscountSharePolicyHTTPResponse, error)

	// GetPlatformDiscountSharePolicyWithResponse request
	GetPlatformDiscountSharePolicyWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetPlatformDiscountSharePolicyHTTPResponse, error)

	// UpdatePlatformDiscountSharePolicyWithBodyWithResponse request with any body
	UpdatePlatformDiscountSharePolicyWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePlatformDiscountSharePolicyHTTPResponse, error)

	UpdatePlatformDiscountSharePolicyWithResponse(ctx context.Context, id string, body UpdatePlatformDiscountSharePolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePlatformDiscountSharePolicyHTTPResponse, error)

	// ArchivePlatformDiscountSharePolicyWithResponse request
	ArchivePlatformDiscountSharePolicyWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ArchivePlatformDiscountSharePolicyHTTPResponse, error)

	// RecoverPlatformDiscountSharePolicyWithResponse request
	RecoverPlatformDiscountSharePolicyWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*RecoverPlatformDiscountSharePolicyHTTPResponse, error)

	// CancelPlatformDiscountSharePolicyScheduleWithResponse request
	CancelPlatformDiscountSharePolicyScheduleWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*CancelPlatformDiscountSharePolicyScheduleHTTPResponse, error)

	// GetPlatformDiscountSharePolicyScheduleWithResponse request
	GetPlatformDiscountSharePolicyScheduleWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetPlatformDiscountSharePolicyScheduleHTTPResponse, error)

	// ScheduleDiscountSharePolicyWithBodyWithResponse request with any body
	ScheduleDiscountSharePolicyWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ScheduleDiscountSharePolicyHTTPResponse, error)

	ScheduleDiscountSharePolicyWithResponse(ctx context.Context, id string, body ScheduleDiscountSharePolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*ScheduleDiscountSharePolicyHTTPResponse, error)

	// RescheduleDiscountSharePolicyWithBodyWithResponse request with any body
	RescheduleDiscountSharePolicyWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RescheduleDiscountSharePolicyHTTPResponse, error)

	RescheduleDiscountSharePolicyWithResponse(ctx context.Context, id string, body RescheduleDiscountSharePolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*RescheduleDiscountSharePolicyHTTPResponse, error)

	// GetPlatformDiscountSharePolicyFilterOptionsWithResponse request
	GetPlatformDiscountSharePolicyFilterOptionsWithResponse(ctx context.Context, params *GetPlatformDiscountSharePolicyFilterOptionsParams, reqEditors ...RequestEditorFn) (*GetPlatformDiscountSharePolicyFilterOptionsHTTPResponse, error)

	// GetPlatformPartnerFilterOptionsWithResponse request
	GetPlatformPartnerFilterOptionsWithResponse(ctx context.Context, params *GetPlatformPartnerFilterOptionsParams, reqEditors ...RequestEditorFn) (*GetPlatformPartnerFilterOptionsHTTPResponse, error)

	// GetPlatformPartnerSettlementsWithResponse request
	GetPlatformPartnerSettlementsWithResponse(ctx context.Context, params *GetPlatformPartnerSettlementsParams, reqEditors ...RequestEditorFn) (*GetPlatformPartnerSettlementsHTTPResponse, error)

	// GetPlatformPartnersWithResponse request
	GetPlatformPartnersWithResponse(ctx context.Context, params *GetPlatformPartnersParams, reqEditors ...RequestEditorFn) (*GetPlatformPartnersHTTPResponse, error)

	// CreatePlatformPartnerWithBodyWithResponse request with any body
	CreatePlatformPartnerWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePlatformPartnerHTTPResponse, error)

	CreatePlatformPartnerWithResponse(ctx context.Context, body CreatePlatformPartnerJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePlatformPartnerHTTPResponse, error)

	// CreatePlatformPartnersWithBodyWithResponse request with any body
	CreatePlatformPartnersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePlatformPartnersHTTPResponse, error)

	CreatePlatformPartnersWithResponse(ctx context.Context, body CreatePlatformPartnersJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePlatformPartnersHTTPResponse, error)

	// SchedulePlatformPartnersWithBodyWithResponse request with any body
	SchedulePlatformPartnersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SchedulePlatformPartnersHTTPResponse, error)

	SchedulePlatformPartnersWithResponse(ctx context.Context, body SchedulePlatformPartnersJSONRequestBody, reqEditors ...RequestEditorFn) (*SchedulePlatformPartnersHTTPResponse, error)

	// GetPlatformPartnerWithResponse request
	GetPlatformPartnerWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetPlatformPartnerHTTPResponse, error)

	// UpdatePlatformPartnerWithBodyWithResponse request with any body
	UpdatePlatformPartnerWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePlatformPartnerHTTPResponse, error)

	UpdatePlatformPartnerWithResponse(ctx context.Context, id string, body UpdatePlatformPartnerJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePlatformPartnerHTTPResponse, error)

	// ArchivePlatformPartnerWithResponse request
	ArchivePlatformPartnerWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ArchivePlatformPartnerHTTPResponse, error)

	// RecoverPlatformPartnerWithResponse request
	RecoverPlatformPartnerWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*RecoverPlatformPartnerHTTPResponse, error)

	// CancelPlatformPartnerScheduleWithResponse request
	CancelPlatformPartnerScheduleWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*CancelPlatformPartnerScheduleHTTPResponse, error)

	// GetPlatformPartnerScheduleWithResponse request
	GetPlatformPartnerScheduleWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetPlatformPartnerScheduleHTTPResponse, error)

	// SchedulePartnerWithBodyWithResponse request with any body
	SchedulePartnerWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SchedulePartnerHTTPResponse, error)

	SchedulePartnerWithResponse(ctx context.Context, id string, body SchedulePartnerJSONRequestBody, reqEditors ...RequestEditorFn) (*SchedulePartnerHTTPResponse, error)

	// ReschedulePartnerWithBodyWithResponse request with any body
	ReschedulePartnerWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReschedulePartnerHTTPResponse, error)

	ReschedulePartnerWithResponse(ctx context.Context, id string, body ReschedulePartnerJSONRequestBody, reqEditors ...RequestEditorFn) (*ReschedulePartnerHTTPResponse, error)

	// GetPlatformPayoutsWithResponse request
	GetPlatformPayoutsWithResponse(ctx context.Context, params *GetPlatformPayoutsParams, reqEditors ...RequestEditorFn) (*GetPlatformPayoutsHTTPResponse, error)

	// GetPlatformSettingWithResponse request
	GetPlatformSettingWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPlatformSettingHTTPResponse, error)

	// UpdatePlatformSettingWithBodyWithResponse request with any body
	UpdatePlatformSettingWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePlatformSettingHTTPResponse, error)

	UpdatePlatformSettingWithResponse(ctx context.Context, body UpdatePlatformSettingJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePlatformSettingHTTPResponse, error)

	// GetPlatformTransferSummariesWithResponse request
	GetPlatformTransferSummariesWithResponse(ctx context.Context, params *GetPlatformTransferSummariesParams, reqEditors ...RequestEditorFn) (*GetPlatformTransferSummariesHTTPResponse, error)

	// DownloadPlatformTransferSheetWithResponse request
	DownloadPlatformTransferSheetWithResponse(ctx context.Context, params *DownloadPlatformTransferSheetParams, reqEditors ...RequestEditorFn) (*DownloadPlatformTransferSheetHTTPResponse, error)

	// CreatePlatformManualTransferWithBodyWithResponse request with any body
	CreatePlatformManualTransferWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePlatformManualTransferHTTPResponse, error)

	CreatePlatformManualTransferWithResponse(ctx context.Context, body CreatePlatformManualTransferJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePlatformManualTransferHTTPResponse, error)

	// CreatePlatformOrderTransferWithBodyWithResponse request with any body
	CreatePlatformOrderTransferWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePlatformOrderTransferHTTPResponse, error)

	CreatePlatformOrderTransferWithResponse(ctx context.Context, body CreatePlatformOrderTransferJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePlatformOrderTransferHTTPResponse, error)

	// CreatePlatformOrderCancelTransferWithBodyWithResponse request with any body
	CreatePlatformOrderCancelTransferWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePlatformOrderCancelTransferHTTPResponse, error)

	CreatePlatformOrderCancelTransferWithResponse(ctx context.Context, body CreatePlatformOrderCancelTransferJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePlatformOrderCancelTransferHTTPResponse, error)

	// DeletePlatformTransferWithResponse request
	DeletePlatformTransferWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeletePlatformTransferHTTPResponse, error)

	// GetPlatformTransferWithResponse request
	GetPlatformTransferWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetPlatformTransferHTTPResponse, error)

	// GetPromotionWithResponse request
	GetPromotionWithResponse(ctx context.Context, promotionId string, reqEditors ...RequestEditorFn) (*GetPromotionHTTPResponse, error)

	// RefreshTokenWithBodyWithResponse request with any body
	RefreshTokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RefreshTokenHTTPResponse, error)

	RefreshTokenWithResponse(ctx context.Context, body RefreshTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*RefreshTokenHTTPResponse, error)
}

type GetBankInfosHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetBankInfosResponse
	JSON400      *GetBankInfosError
}

// Status returns HTTPResponse.Status
func (r GetBankInfosHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBankInfosHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBillingKeyInfosHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetBillingKeyInfosResponse
	JSON400      *GetBillingKeyInfosError
	JSON401      *GetBillingKeyInfosError
	JSON403      *GetBillingKeyInfosError
}

// Status returns HTTPResponse.Status
func (r GetBillingKeyInfosHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBillingKeyInfosHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IssueBillingKeyHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IssueBillingKeyResponse
	JSON400      *IssueBillingKeyError
	JSON401      *IssueBillingKeyError
	JSON403      *IssueBillingKeyError
	JSON404      *IssueBillingKeyError
	JSON502      *IssueBillingKeyError
}

// Status returns HTTPResponse.Status
func (r IssueBillingKeyHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IssueBillingKeyHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteBillingKeyHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeleteBillingKeyResponse
	JSON400      *DeleteBillingKeyError
	JSON401      *DeleteBillingKeyError
	JSON403      *DeleteBillingKeyError
	JSON404      *DeleteBillingKeyError
	JSON409      *DeleteBillingKeyError
	JSON502      *DeleteBillingKeyError
}

// Status returns HTTPResponse.Status
func (r DeleteBillingKeyHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteBillingKeyHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBillingKeyInfoHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BillingKeyInfo
	JSON400      *GetBillingKeyInfoError
	JSON401      *GetBillingKeyInfoError
	JSON403      *GetBillingKeyInfoError
	JSON404      *GetBillingKeyInfoError
}

// Status returns HTTPResponse.Status
func (r GetBillingKeyInfoHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBillingKeyInfoHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IssueCashReceiptHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IssueCashReceiptResponse
	JSON400      *IssueCashReceiptError
	JSON401      *IssueCashReceiptError
	JSON403      *IssueCashReceiptError
	JSON404      *IssueCashReceiptError
	JSON409      *IssueCashReceiptError
	JSON502      *IssueCashReceiptError
}

// Status returns HTTPResponse.Status
func (r IssueCashReceiptHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IssueCashReceiptHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIdentityVerificationHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IdentityVerification
	JSON400      *GetIdentityVerificationError
	JSON401      *GetIdentityVerificationError
	JSON403      *GetIdentityVerificationError
	JSON404      *GetIdentityVerificationError
}

// Status returns HTTPResponse.Status
func (r GetIdentityVerificationHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIdentityVerificationHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ConfirmIdentityVerificationHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ConfirmIdentityVerificationResponse
	JSON400      *ConfirmIdentityVerificationError
	JSON401      *ConfirmIdentityVerificationError
	JSON403      *ConfirmIdentityVerificationError
	JSON404      *ConfirmIdentityVerificationError
	JSON409      *ConfirmIdentityVerificationError
	JSON502      *ConfirmIdentityVerificationError
}

// Status returns HTTPResponse.Status
func (r ConfirmIdentityVerificationHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ConfirmIdentityVerificationHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ResendIdentityVerificationHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResendIdentityVerificationResponse
	JSON400      *ResendIdentityVerificationError
	JSON401      *ResendIdentityVerificationError
	JSON403      *ResendIdentityVerificationError
	JSON404      *ResendIdentityVerificationError
	JSON409      *ResendIdentityVerificationError
	JSON502      *ResendIdentityVerificationError
}

// Status returns HTTPResponse.Status
func (r ResendIdentityVerificationHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ResendIdentityVerificationHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SendIdentityVerificationHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SendIdentityVerificationResponse
	JSON400      *SendIdentityVerificationError
	JSON401      *SendIdentityVerificationError
	JSON403      *SendIdentityVerificationError
	JSON404      *SendIdentityVerificationError
	JSON409      *SendIdentityVerificationError
	JSON502      *SendIdentityVerificationError
}

// Status returns HTTPResponse.Status
func (r SendIdentityVerificationHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SendIdentityVerificationHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetKakaopayPaymentOrderHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetKakaopayPaymentOrderResponse
	JSON400      *GetKakaopayPaymentOrderError
	JSON401      *GetKakaopayPaymentOrderError
}

// Status returns HTTPResponse.Status
func (r GetKakaopayPaymentOrderHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetKakaopayPaymentOrderHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LoginViaApiSecretHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LoginViaApiSecretResponse
	JSON400      *LoginViaApiSecretError
	JSON401      *LoginViaApiSecretError
}

// Status returns HTTPResponse.Status
func (r LoginViaApiSecretHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LoginViaApiSecretHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RevokePaymentSchedulesHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RevokePaymentSchedulesResponse
	JSON400      *RevokePaymentSchedulesError
	JSON401      *RevokePaymentSchedulesError
	JSON403      *RevokePaymentSchedulesError
	JSON404      *RevokePaymentSchedulesError
	JSON409      *RevokePaymentSchedulesError
}

// Status returns HTTPResponse.Status
func (r RevokePaymentSchedulesHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RevokePaymentSchedulesHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPaymentSchedulesHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetPaymentSchedulesResponse
	JSON400      *GetPaymentSchedulesError
	JSON401      *GetPaymentSchedulesError
	JSON403      *GetPaymentSchedulesError
}

// Status returns HTTPResponse.Status
func (r GetPaymentSchedulesHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPaymentSchedulesHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPaymentScheduleHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaymentSchedule
	JSON400      *GetPaymentScheduleError
	JSON401      *GetPaymentScheduleError
	JSON403      *GetPaymentScheduleError
	JSON404      *GetPaymentScheduleError
}

// Status returns HTTPResponse.Status
func (r GetPaymentScheduleHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPaymentScheduleHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPaymentsHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetPaymentsResponse
	JSON400      *GetPaymentsError
	JSON401      *GetPaymentsError
	JSON403      *GetPaymentsError
}

// Status returns HTTPResponse.Status
func (r GetPaymentsHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPaymentsHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllPaymentsByCursorHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetAllPaymentsByCursorResponse
	JSON400      *GetAllPaymentsError
	JSON401      *GetAllPaymentsError
	JSON403      *GetAllPaymentsError
}

// Status returns HTTPResponse.Status
func (r GetAllPaymentsByCursorHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllPaymentsByCursorHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPaymentHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Payment
	JSON400      *GetPaymentError
	JSON401      *GetPaymentError
	JSON403      *GetPaymentError
	JSON404      *GetPaymentError
}

// Status returns HTTPResponse.Status
func (r GetPaymentHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPaymentHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PayWithBillingKeyHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PayWithBillingKeyResponse
	JSON400      *PayWithBillingKeyError
	JSON401      *PayWithBillingKeyError
	JSON403      *PayWithBillingKeyError
	JSON404      *PayWithBillingKeyError
	JSON409      *PayWithBillingKeyError
	JSON502      *PayWithBillingKeyError
}

// Status returns HTTPResponse.Status
func (r PayWithBillingKeyHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PayWithBillingKeyHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CancelPaymentHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CancelPaymentResponse
	JSON400      *CancelPaymentError
	JSON401      *CancelPaymentError
	JSON403      *CancelPaymentError
	JSON404      *CancelPaymentError
	JSON409      *CancelPaymentError
	JSON502      *CancelPaymentError
}

// Status returns HTTPResponse.Status
func (r CancelPaymentHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CancelPaymentHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCashReceiptByPaymentIdHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CashReceipt
	JSON400      *GetCashReceiptError
	JSON401      *GetCashReceiptError
	JSON403      *GetCashReceiptError
	JSON404      *GetCashReceiptError
}

// Status returns HTTPResponse.Status
func (r GetCashReceiptByPaymentIdHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCashReceiptByPaymentIdHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CancelCashReceiptByPaymentIdHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CancelCashReceiptResponse
	JSON400      *CancelCashReceiptError
	JSON401      *CancelCashReceiptError
	JSON403      *CancelCashReceiptError
	JSON404      *CancelCashReceiptError
	JSON502      *CancelCashReceiptError
}

// Status returns HTTPResponse.Status
func (r CancelCashReceiptByPaymentIdHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CancelCashReceiptByPaymentIdHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ConfirmEscrowHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ConfirmEscrowResponse
	JSON400      *ConfirmEscrowError
	JSON401      *ConfirmEscrowError
	JSON403      *ConfirmEscrowError
	JSON404      *ConfirmEscrowError
	JSON409      *ConfirmEscrowError
	JSON502      *ConfirmEscrowError
}

// Status returns HTTPResponse.Status
func (r ConfirmEscrowHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ConfirmEscrowHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ModifyEscrowLogisticsHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ModifyEscrowLogisticsResponse
	JSON400      *ModifyEscrowLogisticsError
	JSON401      *ModifyEscrowLogisticsError
	JSON403      *ModifyEscrowLogisticsError
	JSON404      *ModifyEscrowLogisticsError
	JSON409      *ModifyEscrowLogisticsError
	JSON502      *ModifyEscrowLogisticsError
}

// Status returns HTTPResponse.Status
func (r ModifyEscrowLogisticsHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ModifyEscrowLogisticsHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApplyEscrowLogisticsHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApplyEscrowLogisticsResponse
	JSON400      *ApplyEscrowLogisticsError
	JSON401      *ApplyEscrowLogisticsError
	JSON403      *ApplyEscrowLogisticsError
	JSON404      *ApplyEscrowLogisticsError
	JSON409      *ApplyEscrowLogisticsError
	JSON502      *ApplyEscrowLogisticsError
}

// Status returns HTTPResponse.Status
func (r ApplyEscrowLogisticsHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApplyEscrowLogisticsHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PayInstantlyHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PayInstantlyResponse
	JSON400      *PayInstantlyError
	JSON401      *PayInstantlyError
	JSON403      *PayInstantlyError
	JSON404      *PayInstantlyError
	JSON409      *PayInstantlyError
	JSON502      *PayInstantlyError
}

// Status returns HTTPResponse.Status
func (r PayInstantlyHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PayInstantlyHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PreRegisterPaymentHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PreRegisterPaymentResponse
	JSON400      *PreRegisterPaymentError
	JSON401      *PreRegisterPaymentError
	JSON403      *PreRegisterPaymentError
	JSON409      *PreRegisterPaymentError
}

// Status returns HTTPResponse.Status
func (r PreRegisterPaymentHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PreRegisterPaymentHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RegisterStoreReceiptHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RegisterStoreReceiptResponse
	JSON400      *RegisterStoreReceiptError
	JSON401      *RegisterStoreReceiptError
	JSON403      *RegisterStoreReceiptError
	JSON404      *RegisterStoreReceiptError
	JSON409      *RegisterStoreReceiptError
	JSON502      *RegisterStoreReceiptError
}

// Status returns HTTPResponse.Status
func (r RegisterStoreReceiptHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RegisterStoreReceiptHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ResendWebhookHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResendWebhookResponse
	JSON400      *ResendWebhookError
	JSON401      *ResendWebhookError
	JSON403      *ResendWebhookError
	JSON404      *ResendWebhookError
}

// Status returns HTTPResponse.Status
func (r ResendWebhookHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ResendWebhookHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePaymentScheduleHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreatePaymentScheduleResponse
	JSON400      *CreatePaymentScheduleError
	JSON401      *CreatePaymentScheduleError
	JSON403      *CreatePaymentScheduleError
	JSON404      *CreatePaymentScheduleError
	JSON409      *CreatePaymentScheduleError
}

// Status returns HTTPResponse.Status
func (r CreatePaymentScheduleHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePaymentScheduleHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPaymentTransactionsHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetPaymentTransactionsResponse
	JSON400      *GetPaymentTransactionsError
	JSON401      *GetPaymentTransactionsError
	JSON403      *GetPaymentTransactionsError
	JSON404      *GetPaymentTransactionsError
}

// Status returns HTTPResponse.Status
func (r GetPaymentTransactionsHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPaymentTransactionsHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CloseVirtualAccountHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CloseVirtualAccountResponse
	JSON400      *CloseVirtualAccountError
	JSON401      *CloseVirtualAccountError
	JSON403      *CloseVirtualAccountError
	JSON404      *CloseVirtualAccountError
	JSON409      *CloseVirtualAccountError
	JSON502      *CloseVirtualAccountError
}

// Status returns HTTPResponse.Status
func (r CloseVirtualAccountHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CloseVirtualAccountHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlatformHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Platform
	JSON400      *GetPlatformError
	JSON401      *GetPlatformError
	JSON403      *GetPlatformError
}

// Status returns HTTPResponse.Status
func (r GetPlatformHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlatformHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePlatformHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UpdatePlatformResponse
	JSON400      *UpdatePlatformError
	JSON401      *UpdatePlatformError
	JSON403      *UpdatePlatformError
}

// Status returns HTTPResponse.Status
func (r UpdatePlatformHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePlatformHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlatformAccountTransfersHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetPlatformAccountTransfersResponse
	JSON400      *GetPlatformAccountTransfersError
	JSON401      *GetPlatformAccountTransfersError
	JSON403      *GetPlatformAccountTransfersError
}

// Status returns HTTPResponse.Status
func (r GetPlatformAccountTransfersHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlatformAccountTransfersHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlatformAdditionalFeePoliciesHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetPlatformAdditionalFeePoliciesResponse
	JSON400      *GetPlatformAdditionalFeePoliciesError
	JSON401      *GetPlatformAdditionalFeePoliciesError
	JSON403      *GetPlatformAdditionalFeePoliciesError
}

// Status returns HTTPResponse.Status
func (r GetPlatformAdditionalFeePoliciesHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlatformAdditionalFeePoliciesHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePlatformAdditionalFeePolicyHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreatePlatformAdditionalFeePolicyResponse
	JSON400      *CreatePlatformAdditionalFeePolicyError
	JSON401      *CreatePlatformAdditionalFeePolicyError
	JSON403      *CreatePlatformAdditionalFeePolicyError
	JSON409      *CreatePlatformAdditionalFeePolicyError
}

// Status returns HTTPResponse.Status
func (r CreatePlatformAdditionalFeePolicyHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePlatformAdditionalFeePolicyHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlatformAdditionalFeePolicyHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PlatformAdditionalFeePolicy
	JSON400      *GetPlatformAdditionalFeePolicyError
	JSON401      *GetPlatformAdditionalFeePolicyError
	JSON403      *GetPlatformAdditionalFeePolicyError
	JSON404      *GetPlatformAdditionalFeePolicyError
}

// Status returns HTTPResponse.Status
func (r GetPlatformAdditionalFeePolicyHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlatformAdditionalFeePolicyHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePlatformAdditionalFeePolicyHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UpdatePlatformAdditionalFeePolicyResponse
	JSON400      *UpdatePlatformAdditionalFeePolicyError
	JSON401      *UpdatePlatformAdditionalFeePolicyError
	JSON403      *UpdatePlatformAdditionalFeePolicyError
	JSON404      *UpdatePlatformAdditionalFeePolicyError
	JSON409      *UpdatePlatformAdditionalFeePolicyError
}

// Status returns HTTPResponse.Status
func (r UpdatePlatformAdditionalFeePolicyHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePlatformAdditionalFeePolicyHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ArchivePlatformAdditionalFeePolicyHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ArchivePlatformAdditionalFeePolicyResponse
	JSON400      *ArchivePlatformAdditionalFeePolicyError
	JSON401      *ArchivePlatformAdditionalFeePolicyError
	JSON403      *ArchivePlatformAdditionalFeePolicyError
	JSON404      *ArchivePlatformAdditionalFeePolicyError
	JSON409      *ArchivePlatformAdditionalFeePolicyError
}

// Status returns HTTPResponse.Status
func (r ArchivePlatformAdditionalFeePolicyHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ArchivePlatformAdditionalFeePolicyHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RecoverPlatformAdditionalFeePolicyHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RecoverPlatformAdditionalFeePolicyResponse
	JSON400      *RecoverPlatformAdditionalFeePolicyError
	JSON401      *RecoverPlatformAdditionalFeePolicyError
	JSON403      *RecoverPlatformAdditionalFeePolicyError
	JSON404      *RecoverPlatformAdditionalFeePolicyError
}

// Status returns HTTPResponse.Status
func (r RecoverPlatformAdditionalFeePolicyHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RecoverPlatformAdditionalFeePolicyHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CancelPlatformAdditionalFeePolicyScheduleHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CancelPlatformAdditionalFeePolicyScheduleResponse
	JSON400      *CancelPlatformAdditionalFeePolicyScheduleError
	JSON401      *CancelPlatformAdditionalFeePolicyScheduleError
	JSON403      *CancelPlatformAdditionalFeePolicyScheduleError
	JSON404      *CancelPlatformAdditionalFeePolicyScheduleError
}

// Status returns HTTPResponse.Status
func (r CancelPlatformAdditionalFeePolicyScheduleHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CancelPlatformAdditionalFeePolicyScheduleHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlatformAdditionalFeePolicyScheduleHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PlatformAdditionalFeePolicy
	JSON400      *GetPlatformAdditionalFeePolicyScheduleError
	JSON401      *GetPlatformAdditionalFeePolicyScheduleError
	JSON403      *GetPlatformAdditionalFeePolicyScheduleError
	JSON404      *GetPlatformAdditionalFeePolicyScheduleError
}

// Status returns HTTPResponse.Status
func (r GetPlatformAdditionalFeePolicyScheduleHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlatformAdditionalFeePolicyScheduleHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ScheduleAdditionalFeePolicyHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SchedulePlatformAdditionalFeePolicyResponse
	JSON400      *ScheduleAdditionalFeePolicyError
	JSON401      *ScheduleAdditionalFeePolicyError
	JSON403      *ScheduleAdditionalFeePolicyError
	JSON404      *ScheduleAdditionalFeePolicyError
	JSON409      *ScheduleAdditionalFeePolicyError
}

// Status returns HTTPResponse.Status
func (r ScheduleAdditionalFeePolicyHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ScheduleAdditionalFeePolicyHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RescheduleAdditionalFeePolicyHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ReschedulePlatformAdditionalFeePolicyResponse
	JSON400      *RescheduleAdditionalFeePolicyError
	JSON401      *RescheduleAdditionalFeePolicyError
	JSON403      *RescheduleAdditionalFeePolicyError
	JSON404      *RescheduleAdditionalFeePolicyError
}

// Status returns HTTPResponse.Status
func (r RescheduleAdditionalFeePolicyHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RescheduleAdditionalFeePolicyHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlatformAccountHolderHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PlatformAccountHolder
	JSON400      *GetPlatformAccountHolderError
	JSON401      *GetPlatformAccountHolderError
	JSON403      *GetPlatformAccountHolderError
	JSON503      *GetPlatformAccountHolderError
}

// Status returns HTTPResponse.Status
func (r GetPlatformAccountHolderHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlatformAccountHolderHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlatformBulkPayoutsHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetPlatformBulkPayoutsResponse
	JSON400      *GetPlatformBulkPayoutsError
	JSON401      *GetPlatformBulkPayoutsError
	JSON403      *GetPlatformBulkPayoutsError
}

// Status returns HTTPResponse.Status
func (r GetPlatformBulkPayoutsHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlatformBulkPayoutsHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlatformCompanyStateHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetPlatformCompanyStatePayload
	JSON400      *GetPlatformCompanyStateError
	JSON401      *GetPlatformCompanyStateError
	JSON403      *GetPlatformCompanyStateError
	JSON404      *GetPlatformCompanyStateError
	JSON503      *GetPlatformCompanyStateError
}

// Status returns HTTPResponse.Status
func (r GetPlatformCompanyStateHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlatformCompanyStateHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlatformContractsHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetPlatformContractsResponse
	JSON400      *GetPlatformContractsError
	JSON401      *GetPlatformContractsError
	JSON403      *GetPlatformContractsError
}

// Status returns HTTPResponse.Status
func (r GetPlatformContractsHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlatformContractsHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePlatformContractHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreatePlatformContractResponse
	JSON400      *CreatePlatformContractError
	JSON401      *CreatePlatformContractError
	JSON403      *CreatePlatformContractError
	JSON409      *CreatePlatformContractError
}

// Status returns HTTPResponse.Status
func (r CreatePlatformContractHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePlatformContractHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlatformContractHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PlatformContract
	JSON400      *GetPlatformContractError
	JSON401      *GetPlatformContractError
	JSON403      *GetPlatformContractError
	JSON404      *GetPlatformContractError
}

// Status returns HTTPResponse.Status
func (r GetPlatformContractHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlatformContractHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePlatformContractHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UpdatePlatformContractResponse
	JSON400      *UpdatePlatformContractError
	JSON401      *UpdatePlatformContractError
	JSON403      *UpdatePlatformContractError
	JSON404      *UpdatePlatformContractError
	JSON409      *UpdatePlatformContractError
}

// Status returns HTTPResponse.Status
func (r UpdatePlatformContractHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePlatformContractHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ArchivePlatformContractHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ArchivePlatformContractResponse
	JSON400      *ArchivePlatformContractError
	JSON401      *ArchivePlatformContractError
	JSON403      *ArchivePlatformContractError
	JSON404      *ArchivePlatformContractError
	JSON409      *ArchivePlatformContractError
}

// Status returns HTTPResponse.Status
func (r ArchivePlatformContractHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ArchivePlatformContractHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RecoverPlatformContractHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RecoverPlatformContractResponse
	JSON400      *RecoverPlatformContractError
	JSON401      *RecoverPlatformContractError
	JSON403      *RecoverPlatformContractError
	JSON404      *RecoverPlatformContractError
}

// Status returns HTTPResponse.Status
func (r RecoverPlatformContractHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RecoverPlatformContractHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CancelPlatformContractScheduleHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CancelPlatformContractScheduleResponse
	JSON400      *CancelPlatformContractScheduleError
	JSON401      *CancelPlatformContractScheduleError
	JSON403      *CancelPlatformContractScheduleError
	JSON404      *CancelPlatformContractScheduleError
}

// Status returns HTTPResponse.Status
func (r CancelPlatformContractScheduleHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CancelPlatformContractScheduleHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlatformContractScheduleHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PlatformContract
	JSON400      *GetPlatformContractScheduleError
	JSON401      *GetPlatformContractScheduleError
	JSON403      *GetPlatformContractScheduleError
	JSON404      *GetPlatformContractScheduleError
}

// Status returns HTTPResponse.Status
func (r GetPlatformContractScheduleHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlatformContractScheduleHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ScheduleContractHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SchedulePlatformContractResponse
	JSON400      *ScheduleContractError
	JSON401      *ScheduleContractError
	JSON403      *ScheduleContractError
	JSON404      *ScheduleContractError
	JSON409      *ScheduleContractError
}

// Status returns HTTPResponse.Status
func (r ScheduleContractHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ScheduleContractHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RescheduleContractHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ReschedulePlatformContractResponse
	JSON400      *RescheduleContractError
	JSON401      *RescheduleContractError
	JSON403      *RescheduleContractError
	JSON404      *RescheduleContractError
}

// Status returns HTTPResponse.Status
func (r RescheduleContractHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RescheduleContractHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlatformDiscountSharePoliciesHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetPlatformDiscountSharePoliciesResponse
	JSON400      *GetPlatformDiscountSharePoliciesError
	JSON401      *GetPlatformDiscountSharePoliciesError
	JSON403      *GetPlatformDiscountSharePoliciesError
}

// Status returns HTTPResponse.Status
func (r GetPlatformDiscountSharePoliciesHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlatformDiscountSharePoliciesHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePlatformDiscountSharePolicyHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreatePlatformDiscountSharePolicyResponse
	JSON400      *CreatePlatformDiscountSharePolicyError
	JSON401      *CreatePlatformDiscountSharePolicyError
	JSON403      *CreatePlatformDiscountSharePolicyError
	JSON409      *CreatePlatformDiscountSharePolicyError
}

// Status returns HTTPResponse.Status
func (r CreatePlatformDiscountSharePolicyHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePlatformDiscountSharePolicyHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlatformDiscountSharePolicyHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PlatformDiscountSharePolicy
	JSON400      *GetPlatformDiscountSharePolicyError
	JSON401      *GetPlatformDiscountSharePolicyError
	JSON403      *GetPlatformDiscountSharePolicyError
	JSON404      *GetPlatformDiscountSharePolicyError
}

// Status returns HTTPResponse.Status
func (r GetPlatformDiscountSharePolicyHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlatformDiscountSharePolicyHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePlatformDiscountSharePolicyHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UpdatePlatformDiscountSharePolicyResponse
	JSON400      *UpdatePlatformDiscountSharePolicyError
	JSON401      *UpdatePlatformDiscountSharePolicyError
	JSON403      *UpdatePlatformDiscountSharePolicyError
	JSON404      *UpdatePlatformDiscountSharePolicyError
	JSON409      *UpdatePlatformDiscountSharePolicyError
}

// Status returns HTTPResponse.Status
func (r UpdatePlatformDiscountSharePolicyHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePlatformDiscountSharePolicyHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ArchivePlatformDiscountSharePolicyHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ArchivePlatformDiscountSharePolicyResponse
	JSON400      *ArchivePlatformDiscountSharePolicyError
	JSON401      *ArchivePlatformDiscountSharePolicyError
	JSON403      *ArchivePlatformDiscountSharePolicyError
	JSON404      *ArchivePlatformDiscountSharePolicyError
	JSON409      *ArchivePlatformDiscountSharePolicyError
}

// Status returns HTTPResponse.Status
func (r ArchivePlatformDiscountSharePolicyHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ArchivePlatformDiscountSharePolicyHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RecoverPlatformDiscountSharePolicyHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RecoverPlatformDiscountSharePolicyResponse
	JSON400      *RecoverPlatformDiscountSharePolicyError
	JSON401      *RecoverPlatformDiscountSharePolicyError
	JSON403      *RecoverPlatformDiscountSharePolicyError
	JSON404      *RecoverPlatformDiscountSharePolicyError
}

// Status returns HTTPResponse.Status
func (r RecoverPlatformDiscountSharePolicyHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RecoverPlatformDiscountSharePolicyHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CancelPlatformDiscountSharePolicyScheduleHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CancelPlatformDiscountSharePolicyScheduleResponse
	JSON400      *CancelPlatformDiscountSharePolicyScheduleError
	JSON401      *CancelPlatformDiscountSharePolicyScheduleError
	JSON403      *CancelPlatformDiscountSharePolicyScheduleError
	JSON404      *CancelPlatformDiscountSharePolicyScheduleError
}

// Status returns HTTPResponse.Status
func (r CancelPlatformDiscountSharePolicyScheduleHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CancelPlatformDiscountSharePolicyScheduleHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlatformDiscountSharePolicyScheduleHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PlatformDiscountSharePolicy
	JSON400      *GetPlatformDiscountSharePolicyScheduleError
	JSON401      *GetPlatformDiscountSharePolicyScheduleError
	JSON403      *GetPlatformDiscountSharePolicyScheduleError
	JSON404      *GetPlatformDiscountSharePolicyScheduleError
}

// Status returns HTTPResponse.Status
func (r GetPlatformDiscountSharePolicyScheduleHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlatformDiscountSharePolicyScheduleHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ScheduleDiscountSharePolicyHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SchedulePlatformDiscountSharePolicyResponse
	JSON400      *ScheduleDiscountSharePolicyError
	JSON401      *ScheduleDiscountSharePolicyError
	JSON403      *ScheduleDiscountSharePolicyError
	JSON404      *ScheduleDiscountSharePolicyError
	JSON409      *ScheduleDiscountSharePolicyError
}

// Status returns HTTPResponse.Status
func (r ScheduleDiscountSharePolicyHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ScheduleDiscountSharePolicyHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RescheduleDiscountSharePolicyHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ReschedulePlatformDiscountSharePolicyResponse
	JSON400      *RescheduleDiscountSharePolicyError
	JSON401      *RescheduleDiscountSharePolicyError
	JSON403      *RescheduleDiscountSharePolicyError
	JSON404      *RescheduleDiscountSharePolicyError
}

// Status returns HTTPResponse.Status
func (r RescheduleDiscountSharePolicyHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RescheduleDiscountSharePolicyHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlatformDiscountSharePolicyFilterOptionsHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PlatformDiscountSharePolicyFilterOptions
	JSON400      *GetPlatformDiscountSharePolicyFilterOptionsError
	JSON401      *GetPlatformDiscountSharePolicyFilterOptionsError
	JSON403      *GetPlatformDiscountSharePolicyFilterOptionsError
}

// Status returns HTTPResponse.Status
func (r GetPlatformDiscountSharePolicyFilterOptionsHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlatformDiscountSharePolicyFilterOptionsHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlatformPartnerFilterOptionsHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PlatformPartnerFilterOptions
	JSON400      *GetPlatformPartnerFilterOptionsError
	JSON401      *GetPlatformPartnerFilterOptionsError
	JSON403      *GetPlatformPartnerFilterOptionsError
}

// Status returns HTTPResponse.Status
func (r GetPlatformPartnerFilterOptionsHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlatformPartnerFilterOptionsHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlatformPartnerSettlementsHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetPlatformPartnerSettlementsResponse
	JSON400      *GetPlatformPartnerSettlementsError
	JSON401      *GetPlatformPartnerSettlementsError
	JSON403      *GetPlatformPartnerSettlementsError
}

// Status returns HTTPResponse.Status
func (r GetPlatformPartnerSettlementsHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlatformPartnerSettlementsHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlatformPartnersHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetPlatformPartnersResponse
	JSON400      *GetPlatformPartnersError
	JSON401      *GetPlatformPartnersError
	JSON403      *GetPlatformPartnersError
}

// Status returns HTTPResponse.Status
func (r GetPlatformPartnersHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlatformPartnersHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePlatformPartnerHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreatePlatformPartnerResponse
	JSON400      *CreatePlatformPartnerError
	JSON401      *CreatePlatformPartnerError
	JSON403      *CreatePlatformPartnerError
	JSON404      *CreatePlatformPartnerError
	JSON409      *CreatePlatformPartnerError
}

// Status returns HTTPResponse.Status
func (r CreatePlatformPartnerHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePlatformPartnerHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePlatformPartnersHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreatePlatformPartnersResponse
	JSON400      *CreatePlatformPartnersError
	JSON401      *CreatePlatformPartnersError
	JSON403      *CreatePlatformPartnersError
	JSON404      *CreatePlatformPartnersError
	JSON409      *CreatePlatformPartnersError
}

// Status returns HTTPResponse.Status
func (r CreatePlatformPartnersHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePlatformPartnersHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SchedulePlatformPartnersHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SchedulePlatformPartnersResponse
	JSON400      *SchedulePlatformPartnersError
	JSON401      *SchedulePlatformPartnersError
	JSON403      *SchedulePlatformPartnersError
	JSON404      *SchedulePlatformPartnersError
	JSON409      *SchedulePlatformPartnersError
}

// Status returns HTTPResponse.Status
func (r SchedulePlatformPartnersHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SchedulePlatformPartnersHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlatformPartnerHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PlatformPartner
	JSON400      *GetPlatformPartnerError
	JSON401      *GetPlatformPartnerError
	JSON403      *GetPlatformPartnerError
	JSON404      *GetPlatformPartnerError
}

// Status returns HTTPResponse.Status
func (r GetPlatformPartnerHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlatformPartnerHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePlatformPartnerHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UpdatePlatformPartnerResponse
	JSON400      *UpdatePlatformPartnerError
	JSON401      *UpdatePlatformPartnerError
	JSON403      *UpdatePlatformPartnerError
	JSON404      *UpdatePlatformPartnerError
	JSON409      *UpdatePlatformPartnerError
}

// Status returns HTTPResponse.Status
func (r UpdatePlatformPartnerHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePlatformPartnerHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ArchivePlatformPartnerHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ArchivePlatformPartnerResponse
	JSON400      *ArchivePlatformPartnerError
	JSON401      *ArchivePlatformPartnerError
	JSON403      *ArchivePlatformPartnerError
	JSON404      *ArchivePlatformPartnerError
	JSON409      *ArchivePlatformPartnerError
}

// Status returns HTTPResponse.Status
func (r ArchivePlatformPartnerHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ArchivePlatformPartnerHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RecoverPlatformPartnerHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RecoverPlatformPartnerResponse
	JSON400      *RecoverPlatformPartnerError
	JSON401      *RecoverPlatformPartnerError
	JSON403      *RecoverPlatformPartnerError
	JSON404      *RecoverPlatformPartnerError
}

// Status returns HTTPResponse.Status
func (r RecoverPlatformPartnerHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RecoverPlatformPartnerHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CancelPlatformPartnerScheduleHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CancelPlatformPartnerScheduleResponse
	JSON400      *CancelPlatformPartnerScheduleError
	JSON401      *CancelPlatformPartnerScheduleError
	JSON403      *CancelPlatformPartnerScheduleError
	JSON404      *CancelPlatformPartnerScheduleError
}

// Status returns HTTPResponse.Status
func (r CancelPlatformPartnerScheduleHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CancelPlatformPartnerScheduleHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlatformPartnerScheduleHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PlatformPartner
	JSON400      *GetPlatformPartnerScheduleError
	JSON401      *GetPlatformPartnerScheduleError
	JSON403      *GetPlatformPartnerScheduleError
	JSON404      *GetPlatformPartnerScheduleError
}

// Status returns HTTPResponse.Status
func (r GetPlatformPartnerScheduleHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlatformPartnerScheduleHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SchedulePartnerHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SchedulePlatformPartnerResponse
	JSON400      *SchedulePartnerError
	JSON401      *SchedulePartnerError
	JSON403      *SchedulePartnerError
	JSON404      *SchedulePartnerError
	JSON409      *SchedulePartnerError
}

// Status returns HTTPResponse.Status
func (r SchedulePartnerHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SchedulePartnerHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReschedulePartnerHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ReschedulePlatformPartnerResponse
	JSON400      *ReschedulePartnerError
	JSON401      *ReschedulePartnerError
	JSON403      *ReschedulePartnerError
	JSON404      *ReschedulePartnerError
	JSON409      *ReschedulePartnerError
}

// Status returns HTTPResponse.Status
func (r ReschedulePartnerHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReschedulePartnerHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlatformPayoutsHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetPlatformPayoutsResponse
	JSON400      *GetPlatformPayoutsError
	JSON401      *GetPlatformPayoutsError
	JSON403      *GetPlatformPayoutsError
}

// Status returns HTTPResponse.Status
func (r GetPlatformPayoutsHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlatformPayoutsHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlatformSettingHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PlatformSetting
	JSON400      *GetPlatformSettingError
	JSON401      *GetPlatformSettingError
	JSON403      *GetPlatformSettingError
}

// Status returns HTTPResponse.Status
func (r GetPlatformSettingHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlatformSettingHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePlatformSettingHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UpdatePlatformSettingResponse
	JSON400      *UpdatePlatformSettingError
	JSON401      *UpdatePlatformSettingError
	JSON403      *UpdatePlatformSettingError
}

// Status returns HTTPResponse.Status
func (r UpdatePlatformSettingHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePlatformSettingHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlatformTransferSummariesHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetPlatformTransferSummariesResponse
	JSON400      *GetPlatformTransferSummariesError
	JSON401      *GetPlatformTransferSummariesError
	JSON403      *GetPlatformTransferSummariesError
}

// Status returns HTTPResponse.Status
func (r GetPlatformTransferSummariesHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlatformTransferSummariesHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DownloadPlatformTransferSheetHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *DownloadPlatformTransferSheetError
	JSON401      *DownloadPlatformTransferSheetError
}

// Status returns HTTPResponse.Status
func (r DownloadPlatformTransferSheetHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DownloadPlatformTransferSheetHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePlatformManualTransferHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreateManualTransferResponse
	JSON400      *CreatePlatformManualTransferError
	JSON401      *CreatePlatformManualTransferError
	JSON403      *CreatePlatformManualTransferError
	JSON404      *CreatePlatformManualTransferError
}

// Status returns HTTPResponse.Status
func (r CreatePlatformManualTransferHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePlatformManualTransferHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePlatformOrderTransferHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreateOrderTransferResponse
	JSON400      *CreatePlatformOrderTransferError
	JSON401      *CreatePlatformOrderTransferError
	JSON403      *CreatePlatformOrderTransferError
	JSON404      *CreatePlatformOrderTransferError
	JSON409      *CreatePlatformOrderTransferError
}

// Status returns HTTPResponse.Status
func (r CreatePlatformOrderTransferHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePlatformOrderTransferHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePlatformOrderCancelTransferHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreateOrderCancelTransferResponse
	JSON400      *CreatePlatformOrderCancelTransferError
	JSON401      *CreatePlatformOrderCancelTransferError
	JSON403      *CreatePlatformOrderCancelTransferError
	JSON404      *CreatePlatformOrderCancelTransferError
	JSON409      *CreatePlatformOrderCancelTransferError
}

// Status returns HTTPResponse.Status
func (r CreatePlatformOrderCancelTransferHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePlatformOrderCancelTransferHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePlatformTransferHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeletePlatformTransferResponse
	JSON400      *DeletePlatformTransferError
	JSON401      *DeletePlatformTransferError
	JSON403      *DeletePlatformTransferError
	JSON404      *DeletePlatformTransferError
}

// Status returns HTTPResponse.Status
func (r DeletePlatformTransferHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePlatformTransferHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlatformTransferHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PlatformTransfer
	JSON400      *GetPlatformTransferError
	JSON401      *GetPlatformTransferError
	JSON403      *GetPlatformTransferError
	JSON404      *GetPlatformTransferError
}

// Status returns HTTPResponse.Status
func (r GetPlatformTransferHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlatformTransferHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPromotionHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Promotion
	JSON400      *GetPromotionError
	JSON401      *GetPromotionError
	JSON403      *GetPromotionError
	JSON404      *GetPromotionError
}

// Status returns HTTPResponse.Status
func (r GetPromotionHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPromotionHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RefreshTokenHTTPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RefreshTokenResponse
	JSON400      *RefreshTokenError
	JSON401      *RefreshTokenError
}

// Status returns HTTPResponse.Status
func (r RefreshTokenHTTPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RefreshTokenHTTPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetBankInfosWithResponse request returning *GetBankInfosHTTPResponse
func (c *ClientWithResponses) GetBankInfosWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetBankInfosHTTPResponse, error) {
	rsp, err := c.GetBankInfos(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBankInfosHTTPResponse(rsp)
}

// GetBillingKeyInfosWithResponse request returning *GetBillingKeyInfosHTTPResponse
func (c *ClientWithResponses) GetBillingKeyInfosWithResponse(ctx context.Context, params *GetBillingKeyInfosParams, reqEditors ...RequestEditorFn) (*GetBillingKeyInfosHTTPResponse, error) {
	rsp, err := c.GetBillingKeyInfos(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBillingKeyInfosHTTPResponse(rsp)
}

// IssueBillingKeyWithBodyWithResponse request with arbitrary body returning *IssueBillingKeyHTTPResponse
func (c *ClientWithResponses) IssueBillingKeyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*IssueBillingKeyHTTPResponse, error) {
	rsp, err := c.IssueBillingKeyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIssueBillingKeyHTTPResponse(rsp)
}

func (c *ClientWithResponses) IssueBillingKeyWithResponse(ctx context.Context, body IssueBillingKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*IssueBillingKeyHTTPResponse, error) {
	rsp, err := c.IssueBillingKey(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIssueBillingKeyHTTPResponse(rsp)
}

// DeleteBillingKeyWithResponse request returning *DeleteBillingKeyHTTPResponse
func (c *ClientWithResponses) DeleteBillingKeyWithResponse(ctx context.Context, billingKey string, params *DeleteBillingKeyParams, reqEditors ...RequestEditorFn) (*DeleteBillingKeyHTTPResponse, error) {
	rsp, err := c.DeleteBillingKey(ctx, billingKey, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteBillingKeyHTTPResponse(rsp)
}

// GetBillingKeyInfoWithResponse request returning *GetBillingKeyInfoHTTPResponse
func (c *ClientWithResponses) GetBillingKeyInfoWithResponse(ctx context.Context, billingKey string, params *GetBillingKeyInfoParams, reqEditors ...RequestEditorFn) (*GetBillingKeyInfoHTTPResponse, error) {
	rsp, err := c.GetBillingKeyInfo(ctx, billingKey, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBillingKeyInfoHTTPResponse(rsp)
}

// IssueCashReceiptWithBodyWithResponse request with arbitrary body returning *IssueCashReceiptHTTPResponse
func (c *ClientWithResponses) IssueCashReceiptWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*IssueCashReceiptHTTPResponse, error) {
	rsp, err := c.IssueCashReceiptWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIssueCashReceiptHTTPResponse(rsp)
}

func (c *ClientWithResponses) IssueCashReceiptWithResponse(ctx context.Context, body IssueCashReceiptJSONRequestBody, reqEditors ...RequestEditorFn) (*IssueCashReceiptHTTPResponse, error) {
	rsp, err := c.IssueCashReceipt(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIssueCashReceiptHTTPResponse(rsp)
}

// GetIdentityVerificationWithResponse request returning *GetIdentityVerificationHTTPResponse
func (c *ClientWithResponses) GetIdentityVerificationWithResponse(ctx context.Context, identityVerificationId string, params *GetIdentityVerificationParams, reqEditors ...RequestEditorFn) (*GetIdentityVerificationHTTPResponse, error) {
	rsp, err := c.GetIdentityVerification(ctx, identityVerificationId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIdentityVerificationHTTPResponse(rsp)
}

// ConfirmIdentityVerificationWithBodyWithResponse request with arbitrary body returning *ConfirmIdentityVerificationHTTPResponse
func (c *ClientWithResponses) ConfirmIdentityVerificationWithBodyWithResponse(ctx context.Context, identityVerificationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ConfirmIdentityVerificationHTTPResponse, error) {
	rsp, err := c.ConfirmIdentityVerificationWithBody(ctx, identityVerificationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConfirmIdentityVerificationHTTPResponse(rsp)
}

func (c *ClientWithResponses) ConfirmIdentityVerificationWithResponse(ctx context.Context, identityVerificationId string, body ConfirmIdentityVerificationJSONRequestBody, reqEditors ...RequestEditorFn) (*ConfirmIdentityVerificationHTTPResponse, error) {
	rsp, err := c.ConfirmIdentityVerification(ctx, identityVerificationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConfirmIdentityVerificationHTTPResponse(rsp)
}

// ResendIdentityVerificationWithResponse request returning *ResendIdentityVerificationHTTPResponse
func (c *ClientWithResponses) ResendIdentityVerificationWithResponse(ctx context.Context, identityVerificationId string, params *ResendIdentityVerificationParams, reqEditors ...RequestEditorFn) (*ResendIdentityVerificationHTTPResponse, error) {
	rsp, err := c.ResendIdentityVerification(ctx, identityVerificationId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResendIdentityVerificationHTTPResponse(rsp)
}

// SendIdentityVerificationWithBodyWithResponse request with arbitrary body returning *SendIdentityVerificationHTTPResponse
func (c *ClientWithResponses) SendIdentityVerificationWithBodyWithResponse(ctx context.Context, identityVerificationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SendIdentityVerificationHTTPResponse, error) {
	rsp, err := c.SendIdentityVerificationWithBody(ctx, identityVerificationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSendIdentityVerificationHTTPResponse(rsp)
}

func (c *ClientWithResponses) SendIdentityVerificationWithResponse(ctx context.Context, identityVerificationId string, body SendIdentityVerificationJSONRequestBody, reqEditors ...RequestEditorFn) (*SendIdentityVerificationHTTPResponse, error) {
	rsp, err := c.SendIdentityVerification(ctx, identityVerificationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSendIdentityVerificationHTTPResponse(rsp)
}

// GetKakaopayPaymentOrderWithResponse request returning *GetKakaopayPaymentOrderHTTPResponse
func (c *ClientWithResponses) GetKakaopayPaymentOrderWithResponse(ctx context.Context, params *GetKakaopayPaymentOrderParams, reqEditors ...RequestEditorFn) (*GetKakaopayPaymentOrderHTTPResponse, error) {
	rsp, err := c.GetKakaopayPaymentOrder(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetKakaopayPaymentOrderHTTPResponse(rsp)
}

// LoginViaApiSecretWithBodyWithResponse request with arbitrary body returning *LoginViaApiSecretHTTPResponse
func (c *ClientWithResponses) LoginViaApiSecretWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LoginViaApiSecretHTTPResponse, error) {
	rsp, err := c.LoginViaApiSecretWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLoginViaApiSecretHTTPResponse(rsp)
}

func (c *ClientWithResponses) LoginViaApiSecretWithResponse(ctx context.Context, body LoginViaApiSecretJSONRequestBody, reqEditors ...RequestEditorFn) (*LoginViaApiSecretHTTPResponse, error) {
	rsp, err := c.LoginViaApiSecret(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLoginViaApiSecretHTTPResponse(rsp)
}

// RevokePaymentSchedulesWithResponse request returning *RevokePaymentSchedulesHTTPResponse
func (c *ClientWithResponses) RevokePaymentSchedulesWithResponse(ctx context.Context, params *RevokePaymentSchedulesParams, reqEditors ...RequestEditorFn) (*RevokePaymentSchedulesHTTPResponse, error) {
	rsp, err := c.RevokePaymentSchedules(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRevokePaymentSchedulesHTTPResponse(rsp)
}

// GetPaymentSchedulesWithResponse request returning *GetPaymentSchedulesHTTPResponse
func (c *ClientWithResponses) GetPaymentSchedulesWithResponse(ctx context.Context, params *GetPaymentSchedulesParams, reqEditors ...RequestEditorFn) (*GetPaymentSchedulesHTTPResponse, error) {
	rsp, err := c.GetPaymentSchedules(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPaymentSchedulesHTTPResponse(rsp)
}

// GetPaymentScheduleWithResponse request returning *GetPaymentScheduleHTTPResponse
func (c *ClientWithResponses) GetPaymentScheduleWithResponse(ctx context.Context, paymentScheduleId string, params *GetPaymentScheduleParams, reqEditors ...RequestEditorFn) (*GetPaymentScheduleHTTPResponse, error) {
	rsp, err := c.GetPaymentSchedule(ctx, paymentScheduleId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPaymentScheduleHTTPResponse(rsp)
}

// GetPaymentsWithResponse request returning *GetPaymentsHTTPResponse
func (c *ClientWithResponses) GetPaymentsWithResponse(ctx context.Context, params *GetPaymentsParams, reqEditors ...RequestEditorFn) (*GetPaymentsHTTPResponse, error) {
	rsp, err := c.GetPayments(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPaymentsHTTPResponse(rsp)
}

// GetAllPaymentsByCursorWithResponse request returning *GetAllPaymentsByCursorHTTPResponse
func (c *ClientWithResponses) GetAllPaymentsByCursorWithResponse(ctx context.Context, params *GetAllPaymentsByCursorParams, reqEditors ...RequestEditorFn) (*GetAllPaymentsByCursorHTTPResponse, error) {
	rsp, err := c.GetAllPaymentsByCursor(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllPaymentsByCursorHTTPResponse(rsp)
}

// GetPaymentWithResponse request returning *GetPaymentHTTPResponse
func (c *ClientWithResponses) GetPaymentWithResponse(ctx context.Context, paymentId string, params *GetPaymentParams, reqEditors ...RequestEditorFn) (*GetPaymentHTTPResponse, error) {
	rsp, err := c.GetPayment(ctx, paymentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPaymentHTTPResponse(rsp)
}

// PayWithBillingKeyWithBodyWithResponse request with arbitrary body returning *PayWithBillingKeyHTTPResponse
func (c *ClientWithResponses) PayWithBillingKeyWithBodyWithResponse(ctx context.Context, paymentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PayWithBillingKeyHTTPResponse, error) {
	rsp, err := c.PayWithBillingKeyWithBody(ctx, paymentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePayWithBillingKeyHTTPResponse(rsp)
}

func (c *ClientWithResponses) PayWithBillingKeyWithResponse(ctx context.Context, paymentId string, body PayWithBillingKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PayWithBillingKeyHTTPResponse, error) {
	rsp, err := c.PayWithBillingKey(ctx, paymentId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePayWithBillingKeyHTTPResponse(rsp)
}

// CancelPaymentWithBodyWithResponse request with arbitrary body returning *CancelPaymentHTTPResponse
func (c *ClientWithResponses) CancelPaymentWithBodyWithResponse(ctx context.Context, paymentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CancelPaymentHTTPResponse, error) {
	rsp, err := c.CancelPaymentWithBody(ctx, paymentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCancelPaymentHTTPResponse(rsp)
}

func (c *ClientWithResponses) CancelPaymentWithResponse(ctx context.Context, paymentId string, body CancelPaymentJSONRequestBody, reqEditors ...RequestEditorFn) (*CancelPaymentHTTPResponse, error) {
	rsp, err := c.CancelPayment(ctx, paymentId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCancelPaymentHTTPResponse(rsp)
}

// GetCashReceiptByPaymentIdWithResponse request returning *GetCashReceiptByPaymentIdHTTPResponse
func (c *ClientWithResponses) GetCashReceiptByPaymentIdWithResponse(ctx context.Context, paymentId string, params *GetCashReceiptByPaymentIdParams, reqEditors ...RequestEditorFn) (*GetCashReceiptByPaymentIdHTTPResponse, error) {
	rsp, err := c.GetCashReceiptByPaymentId(ctx, paymentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCashReceiptByPaymentIdHTTPResponse(rsp)
}

// CancelCashReceiptByPaymentIdWithResponse request returning *CancelCashReceiptByPaymentIdHTTPResponse
func (c *ClientWithResponses) CancelCashReceiptByPaymentIdWithResponse(ctx context.Context, paymentId string, params *CancelCashReceiptByPaymentIdParams, reqEditors ...RequestEditorFn) (*CancelCashReceiptByPaymentIdHTTPResponse, error) {
	rsp, err := c.CancelCashReceiptByPaymentId(ctx, paymentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCancelCashReceiptByPaymentIdHTTPResponse(rsp)
}

// ConfirmEscrowWithBodyWithResponse request with arbitrary body returning *ConfirmEscrowHTTPResponse
func (c *ClientWithResponses) ConfirmEscrowWithBodyWithResponse(ctx context.Context, paymentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ConfirmEscrowHTTPResponse, error) {
	rsp, err := c.ConfirmEscrowWithBody(ctx, paymentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConfirmEscrowHTTPResponse(rsp)
}

func (c *ClientWithResponses) ConfirmEscrowWithResponse(ctx context.Context, paymentId string, body ConfirmEscrowJSONRequestBody, reqEditors ...RequestEditorFn) (*ConfirmEscrowHTTPResponse, error) {
	rsp, err := c.ConfirmEscrow(ctx, paymentId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConfirmEscrowHTTPResponse(rsp)
}

// ModifyEscrowLogisticsWithBodyWithResponse request with arbitrary body returning *ModifyEscrowLogisticsHTTPResponse
func (c *ClientWithResponses) ModifyEscrowLogisticsWithBodyWithResponse(ctx context.Context, paymentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ModifyEscrowLogisticsHTTPResponse, error) {
	rsp, err := c.ModifyEscrowLogisticsWithBody(ctx, paymentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModifyEscrowLogisticsHTTPResponse(rsp)
}

func (c *ClientWithResponses) ModifyEscrowLogisticsWithResponse(ctx context.Context, paymentId string, body ModifyEscrowLogisticsJSONRequestBody, reqEditors ...RequestEditorFn) (*ModifyEscrowLogisticsHTTPResponse, error) {
	rsp, err := c.ModifyEscrowLogistics(ctx, paymentId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModifyEscrowLogisticsHTTPResponse(rsp)
}

// ApplyEscrowLogisticsWithBodyWithResponse request with arbitrary body returning *ApplyEscrowLogisticsHTTPResponse
func (c *ClientWithResponses) ApplyEscrowLogisticsWithBodyWithResponse(ctx context.Context, paymentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ApplyEscrowLogisticsHTTPResponse, error) {
	rsp, err := c.ApplyEscrowLogisticsWithBody(ctx, paymentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApplyEscrowLogisticsHTTPResponse(rsp)
}

func (c *ClientWithResponses) ApplyEscrowLogisticsWithResponse(ctx context.Context, paymentId string, body ApplyEscrowLogisticsJSONRequestBody, reqEditors ...RequestEditorFn) (*ApplyEscrowLogisticsHTTPResponse, error) {
	rsp, err := c.ApplyEscrowLogistics(ctx, paymentId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApplyEscrowLogisticsHTTPResponse(rsp)
}

// PayInstantlyWithBodyWithResponse request with arbitrary body returning *PayInstantlyHTTPResponse
func (c *ClientWithResponses) PayInstantlyWithBodyWithResponse(ctx context.Context, paymentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PayInstantlyHTTPResponse, error) {
	rsp, err := c.PayInstantlyWithBody(ctx, paymentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePayInstantlyHTTPResponse(rsp)
}

func (c *ClientWithResponses) PayInstantlyWithResponse(ctx context.Context, paymentId string, body PayInstantlyJSONRequestBody, reqEditors ...RequestEditorFn) (*PayInstantlyHTTPResponse, error) {
	rsp, err := c.PayInstantly(ctx, paymentId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePayInstantlyHTTPResponse(rsp)
}

// PreRegisterPaymentWithBodyWithResponse request with arbitrary body returning *PreRegisterPaymentHTTPResponse
func (c *ClientWithResponses) PreRegisterPaymentWithBodyWithResponse(ctx context.Context, paymentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PreRegisterPaymentHTTPResponse, error) {
	rsp, err := c.PreRegisterPaymentWithBody(ctx, paymentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePreRegisterPaymentHTTPResponse(rsp)
}

func (c *ClientWithResponses) PreRegisterPaymentWithResponse(ctx context.Context, paymentId string, body PreRegisterPaymentJSONRequestBody, reqEditors ...RequestEditorFn) (*PreRegisterPaymentHTTPResponse, error) {
	rsp, err := c.PreRegisterPayment(ctx, paymentId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePreRegisterPaymentHTTPResponse(rsp)
}

// RegisterStoreReceiptWithBodyWithResponse request with arbitrary body returning *RegisterStoreReceiptHTTPResponse
func (c *ClientWithResponses) RegisterStoreReceiptWithBodyWithResponse(ctx context.Context, paymentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RegisterStoreReceiptHTTPResponse, error) {
	rsp, err := c.RegisterStoreReceiptWithBody(ctx, paymentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegisterStoreReceiptHTTPResponse(rsp)
}

func (c *ClientWithResponses) RegisterStoreReceiptWithResponse(ctx context.Context, paymentId string, body RegisterStoreReceiptJSONRequestBody, reqEditors ...RequestEditorFn) (*RegisterStoreReceiptHTTPResponse, error) {
	rsp, err := c.RegisterStoreReceipt(ctx, paymentId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegisterStoreReceiptHTTPResponse(rsp)
}

// ResendWebhookWithBodyWithResponse request with arbitrary body returning *ResendWebhookHTTPResponse
func (c *ClientWithResponses) ResendWebhookWithBodyWithResponse(ctx context.Context, paymentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ResendWebhookHTTPResponse, error) {
	rsp, err := c.ResendWebhookWithBody(ctx, paymentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResendWebhookHTTPResponse(rsp)
}

func (c *ClientWithResponses) ResendWebhookWithResponse(ctx context.Context, paymentId string, body ResendWebhookJSONRequestBody, reqEditors ...RequestEditorFn) (*ResendWebhookHTTPResponse, error) {
	rsp, err := c.ResendWebhook(ctx, paymentId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResendWebhookHTTPResponse(rsp)
}

// CreatePaymentScheduleWithBodyWithResponse request with arbitrary body returning *CreatePaymentScheduleHTTPResponse
func (c *ClientWithResponses) CreatePaymentScheduleWithBodyWithResponse(ctx context.Context, paymentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePaymentScheduleHTTPResponse, error) {
	rsp, err := c.CreatePaymentScheduleWithBody(ctx, paymentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePaymentScheduleHTTPResponse(rsp)
}

func (c *ClientWithResponses) CreatePaymentScheduleWithResponse(ctx context.Context, paymentId string, body CreatePaymentScheduleJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePaymentScheduleHTTPResponse, error) {
	rsp, err := c.CreatePaymentSchedule(ctx, paymentId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePaymentScheduleHTTPResponse(rsp)
}

// GetPaymentTransactionsWithResponse request returning *GetPaymentTransactionsHTTPResponse
func (c *ClientWithResponses) GetPaymentTransactionsWithResponse(ctx context.Context, paymentId string, params *GetPaymentTransactionsParams, reqEditors ...RequestEditorFn) (*GetPaymentTransactionsHTTPResponse, error) {
	rsp, err := c.GetPaymentTransactions(ctx, paymentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPaymentTransactionsHTTPResponse(rsp)
}

// CloseVirtualAccountWithResponse request returning *CloseVirtualAccountHTTPResponse
func (c *ClientWithResponses) CloseVirtualAccountWithResponse(ctx context.Context, paymentId string, params *CloseVirtualAccountParams, reqEditors ...RequestEditorFn) (*CloseVirtualAccountHTTPResponse, error) {
	rsp, err := c.CloseVirtualAccount(ctx, paymentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCloseVirtualAccountHTTPResponse(rsp)
}

// GetPlatformWithResponse request returning *GetPlatformHTTPResponse
func (c *ClientWithResponses) GetPlatformWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPlatformHTTPResponse, error) {
	rsp, err := c.GetPlatform(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlatformHTTPResponse(rsp)
}

// UpdatePlatformWithBodyWithResponse request with arbitrary body returning *UpdatePlatformHTTPResponse
func (c *ClientWithResponses) UpdatePlatformWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePlatformHTTPResponse, error) {
	rsp, err := c.UpdatePlatformWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePlatformHTTPResponse(rsp)
}

func (c *ClientWithResponses) UpdatePlatformWithResponse(ctx context.Context, body UpdatePlatformJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePlatformHTTPResponse, error) {
	rsp, err := c.UpdatePlatform(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePlatformHTTPResponse(rsp)
}

// GetPlatformAccountTransfersWithResponse request returning *GetPlatformAccountTransfersHTTPResponse
func (c *ClientWithResponses) GetPlatformAccountTransfersWithResponse(ctx context.Context, params *GetPlatformAccountTransfersParams, reqEditors ...RequestEditorFn) (*GetPlatformAccountTransfersHTTPResponse, error) {
	rsp, err := c.GetPlatformAccountTransfers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlatformAccountTransfersHTTPResponse(rsp)
}

// GetPlatformAdditionalFeePoliciesWithResponse request returning *GetPlatformAdditionalFeePoliciesHTTPResponse
func (c *ClientWithResponses) GetPlatformAdditionalFeePoliciesWithResponse(ctx context.Context, params *GetPlatformAdditionalFeePoliciesParams, reqEditors ...RequestEditorFn) (*GetPlatformAdditionalFeePoliciesHTTPResponse, error) {
	rsp, err := c.GetPlatformAdditionalFeePolicies(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlatformAdditionalFeePoliciesHTTPResponse(rsp)
}

// CreatePlatformAdditionalFeePolicyWithBodyWithResponse request with arbitrary body returning *CreatePlatformAdditionalFeePolicyHTTPResponse
func (c *ClientWithResponses) CreatePlatformAdditionalFeePolicyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePlatformAdditionalFeePolicyHTTPResponse, error) {
	rsp, err := c.CreatePlatformAdditionalFeePolicyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePlatformAdditionalFeePolicyHTTPResponse(rsp)
}

func (c *ClientWithResponses) CreatePlatformAdditionalFeePolicyWithResponse(ctx context.Context, body CreatePlatformAdditionalFeePolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePlatformAdditionalFeePolicyHTTPResponse, error) {
	rsp, err := c.CreatePlatformAdditionalFeePolicy(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePlatformAdditionalFeePolicyHTTPResponse(rsp)
}

// GetPlatformAdditionalFeePolicyWithResponse request returning *GetPlatformAdditionalFeePolicyHTTPResponse
func (c *ClientWithResponses) GetPlatformAdditionalFeePolicyWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetPlatformAdditionalFeePolicyHTTPResponse, error) {
	rsp, err := c.GetPlatformAdditionalFeePolicy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlatformAdditionalFeePolicyHTTPResponse(rsp)
}

// UpdatePlatformAdditionalFeePolicyWithBodyWithResponse request with arbitrary body returning *UpdatePlatformAdditionalFeePolicyHTTPResponse
func (c *ClientWithResponses) UpdatePlatformAdditionalFeePolicyWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePlatformAdditionalFeePolicyHTTPResponse, error) {
	rsp, err := c.UpdatePlatformAdditionalFeePolicyWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePlatformAdditionalFeePolicyHTTPResponse(rsp)
}

func (c *ClientWithResponses) UpdatePlatformAdditionalFeePolicyWithResponse(ctx context.Context, id string, body UpdatePlatformAdditionalFeePolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePlatformAdditionalFeePolicyHTTPResponse, error) {
	rsp, err := c.UpdatePlatformAdditionalFeePolicy(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePlatformAdditionalFeePolicyHTTPResponse(rsp)
}

// ArchivePlatformAdditionalFeePolicyWithResponse request returning *ArchivePlatformAdditionalFeePolicyHTTPResponse
func (c *ClientWithResponses) ArchivePlatformAdditionalFeePolicyWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ArchivePlatformAdditionalFeePolicyHTTPResponse, error) {
	rsp, err := c.ArchivePlatformAdditionalFeePolicy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseArchivePlatformAdditionalFeePolicyHTTPResponse(rsp)
}

// RecoverPlatformAdditionalFeePolicyWithResponse request returning *RecoverPlatformAdditionalFeePolicyHTTPResponse
func (c *ClientWithResponses) RecoverPlatformAdditionalFeePolicyWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*RecoverPlatformAdditionalFeePolicyHTTPResponse, error) {
	rsp, err := c.RecoverPlatformAdditionalFeePolicy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRecoverPlatformAdditionalFeePolicyHTTPResponse(rsp)
}

// CancelPlatformAdditionalFeePolicyScheduleWithResponse request returning *CancelPlatformAdditionalFeePolicyScheduleHTTPResponse
func (c *ClientWithResponses) CancelPlatformAdditionalFeePolicyScheduleWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*CancelPlatformAdditionalFeePolicyScheduleHTTPResponse, error) {
	rsp, err := c.CancelPlatformAdditionalFeePolicySchedule(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCancelPlatformAdditionalFeePolicyScheduleHTTPResponse(rsp)
}

// GetPlatformAdditionalFeePolicyScheduleWithResponse request returning *GetPlatformAdditionalFeePolicyScheduleHTTPResponse
func (c *ClientWithResponses) GetPlatformAdditionalFeePolicyScheduleWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetPlatformAdditionalFeePolicyScheduleHTTPResponse, error) {
	rsp, err := c.GetPlatformAdditionalFeePolicySchedule(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlatformAdditionalFeePolicyScheduleHTTPResponse(rsp)
}

// ScheduleAdditionalFeePolicyWithBodyWithResponse request with arbitrary body returning *ScheduleAdditionalFeePolicyHTTPResponse
func (c *ClientWithResponses) ScheduleAdditionalFeePolicyWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ScheduleAdditionalFeePolicyHTTPResponse, error) {
	rsp, err := c.ScheduleAdditionalFeePolicyWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseScheduleAdditionalFeePolicyHTTPResponse(rsp)
}

func (c *ClientWithResponses) ScheduleAdditionalFeePolicyWithResponse(ctx context.Context, id string, body ScheduleAdditionalFeePolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*ScheduleAdditionalFeePolicyHTTPResponse, error) {
	rsp, err := c.ScheduleAdditionalFeePolicy(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseScheduleAdditionalFeePolicyHTTPResponse(rsp)
}

// RescheduleAdditionalFeePolicyWithBodyWithResponse request with arbitrary body returning *RescheduleAdditionalFeePolicyHTTPResponse
func (c *ClientWithResponses) RescheduleAdditionalFeePolicyWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RescheduleAdditionalFeePolicyHTTPResponse, error) {
	rsp, err := c.RescheduleAdditionalFeePolicyWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRescheduleAdditionalFeePolicyHTTPResponse(rsp)
}

func (c *ClientWithResponses) RescheduleAdditionalFeePolicyWithResponse(ctx context.Context, id string, body RescheduleAdditionalFeePolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*RescheduleAdditionalFeePolicyHTTPResponse, error) {
	rsp, err := c.RescheduleAdditionalFeePolicy(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRescheduleAdditionalFeePolicyHTTPResponse(rsp)
}

// GetPlatformAccountHolderWithResponse request returning *GetPlatformAccountHolderHTTPResponse
func (c *ClientWithResponses) GetPlatformAccountHolderWithResponse(ctx context.Context, bank Bank, accountNumber string, params *GetPlatformAccountHolderParams, reqEditors ...RequestEditorFn) (*GetPlatformAccountHolderHTTPResponse, error) {
	rsp, err := c.GetPlatformAccountHolder(ctx, bank, accountNumber, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlatformAccountHolderHTTPResponse(rsp)
}

// GetPlatformBulkPayoutsWithResponse request returning *GetPlatformBulkPayoutsHTTPResponse
func (c *ClientWithResponses) GetPlatformBulkPayoutsWithResponse(ctx context.Context, params *GetPlatformBulkPayoutsParams, reqEditors ...RequestEditorFn) (*GetPlatformBulkPayoutsHTTPResponse, error) {
	rsp, err := c.GetPlatformBulkPayouts(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlatformBulkPayoutsHTTPResponse(rsp)
}

// GetPlatformCompanyStateWithResponse request returning *GetPlatformCompanyStateHTTPResponse
func (c *ClientWithResponses) GetPlatformCompanyStateWithResponse(ctx context.Context, businessRegistrationNumber string, reqEditors ...RequestEditorFn) (*GetPlatformCompanyStateHTTPResponse, error) {
	rsp, err := c.GetPlatformCompanyState(ctx, businessRegistrationNumber, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlatformCompanyStateHTTPResponse(rsp)
}

// GetPlatformContractsWithResponse request returning *GetPlatformContractsHTTPResponse
func (c *ClientWithResponses) GetPlatformContractsWithResponse(ctx context.Context, params *GetPlatformContractsParams, reqEditors ...RequestEditorFn) (*GetPlatformContractsHTTPResponse, error) {
	rsp, err := c.GetPlatformContracts(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlatformContractsHTTPResponse(rsp)
}

// CreatePlatformContractWithBodyWithResponse request with arbitrary body returning *CreatePlatformContractHTTPResponse
func (c *ClientWithResponses) CreatePlatformContractWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePlatformContractHTTPResponse, error) {
	rsp, err := c.CreatePlatformContractWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePlatformContractHTTPResponse(rsp)
}

func (c *ClientWithResponses) CreatePlatformContractWithResponse(ctx context.Context, body CreatePlatformContractJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePlatformContractHTTPResponse, error) {
	rsp, err := c.CreatePlatformContract(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePlatformContractHTTPResponse(rsp)
}

// GetPlatformContractWithResponse request returning *GetPlatformContractHTTPResponse
func (c *ClientWithResponses) GetPlatformContractWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetPlatformContractHTTPResponse, error) {
	rsp, err := c.GetPlatformContract(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlatformContractHTTPResponse(rsp)
}

// UpdatePlatformContractWithBodyWithResponse request with arbitrary body returning *UpdatePlatformContractHTTPResponse
func (c *ClientWithResponses) UpdatePlatformContractWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePlatformContractHTTPResponse, error) {
	rsp, err := c.UpdatePlatformContractWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePlatformContractHTTPResponse(rsp)
}

func (c *ClientWithResponses) UpdatePlatformContractWithResponse(ctx context.Context, id string, body UpdatePlatformContractJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePlatformContractHTTPResponse, error) {
	rsp, err := c.UpdatePlatformContract(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePlatformContractHTTPResponse(rsp)
}

// ArchivePlatformContractWithResponse request returning *ArchivePlatformContractHTTPResponse
func (c *ClientWithResponses) ArchivePlatformContractWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ArchivePlatformContractHTTPResponse, error) {
	rsp, err := c.ArchivePlatformContract(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseArchivePlatformContractHTTPResponse(rsp)
}

// RecoverPlatformContractWithResponse request returning *RecoverPlatformContractHTTPResponse
func (c *ClientWithResponses) RecoverPlatformContractWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*RecoverPlatformContractHTTPResponse, error) {
	rsp, err := c.RecoverPlatformContract(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRecoverPlatformContractHTTPResponse(rsp)
}

// CancelPlatformContractScheduleWithResponse request returning *CancelPlatformContractScheduleHTTPResponse
func (c *ClientWithResponses) CancelPlatformContractScheduleWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*CancelPlatformContractScheduleHTTPResponse, error) {
	rsp, err := c.CancelPlatformContractSchedule(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCancelPlatformContractScheduleHTTPResponse(rsp)
}

// GetPlatformContractScheduleWithResponse request returning *GetPlatformContractScheduleHTTPResponse
func (c *ClientWithResponses) GetPlatformContractScheduleWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetPlatformContractScheduleHTTPResponse, error) {
	rsp, err := c.GetPlatformContractSchedule(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlatformContractScheduleHTTPResponse(rsp)
}

// ScheduleContractWithBodyWithResponse request with arbitrary body returning *ScheduleContractHTTPResponse
func (c *ClientWithResponses) ScheduleContractWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ScheduleContractHTTPResponse, error) {
	rsp, err := c.ScheduleContractWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseScheduleContractHTTPResponse(rsp)
}

func (c *ClientWithResponses) ScheduleContractWithResponse(ctx context.Context, id string, body ScheduleContractJSONRequestBody, reqEditors ...RequestEditorFn) (*ScheduleContractHTTPResponse, error) {
	rsp, err := c.ScheduleContract(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseScheduleContractHTTPResponse(rsp)
}

// RescheduleContractWithBodyWithResponse request with arbitrary body returning *RescheduleContractHTTPResponse
func (c *ClientWithResponses) RescheduleContractWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RescheduleContractHTTPResponse, error) {
	rsp, err := c.RescheduleContractWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRescheduleContractHTTPResponse(rsp)
}

func (c *ClientWithResponses) RescheduleContractWithResponse(ctx context.Context, id string, body RescheduleContractJSONRequestBody, reqEditors ...RequestEditorFn) (*RescheduleContractHTTPResponse, error) {
	rsp, err := c.RescheduleContract(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRescheduleContractHTTPResponse(rsp)
}

// GetPlatformDiscountSharePoliciesWithResponse request returning *GetPlatformDiscountSharePoliciesHTTPResponse
func (c *ClientWithResponses) GetPlatformDiscountSharePoliciesWithResponse(ctx context.Context, params *GetPlatformDiscountSharePoliciesParams, reqEditors ...RequestEditorFn) (*GetPlatformDiscountSharePoliciesHTTPResponse, error) {
	rsp, err := c.GetPlatformDiscountSharePolicies(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlatformDiscountSharePoliciesHTTPResponse(rsp)
}

// CreatePlatformDiscountSharePolicyWithBodyWithResponse request with arbitrary body returning *CreatePlatformDiscountSharePolicyHTTPResponse
func (c *ClientWithResponses) CreatePlatformDiscountSharePolicyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePlatformDiscountSharePolicyHTTPResponse, error) {
	rsp, err := c.CreatePlatformDiscountSharePolicyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePlatformDiscountSharePolicyHTTPResponse(rsp)
}

func (c *ClientWithResponses) CreatePlatformDiscountSharePolicyWithResponse(ctx context.Context, body CreatePlatformDiscountSharePolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePlatformDiscountSharePolicyHTTPResponse, error) {
	rsp, err := c.CreatePlatformDiscountSharePolicy(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePlatformDiscountSharePolicyHTTPResponse(rsp)
}

// GetPlatformDiscountSharePolicyWithResponse request returning *GetPlatformDiscountSharePolicyHTTPResponse
func (c *ClientWithResponses) GetPlatformDiscountSharePolicyWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetPlatformDiscountSharePolicyHTTPResponse, error) {
	rsp, err := c.GetPlatformDiscountSharePolicy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlatformDiscountSharePolicyHTTPResponse(rsp)
}

// UpdatePlatformDiscountSharePolicyWithBodyWithResponse request with arbitrary body returning *UpdatePlatformDiscountSharePolicyHTTPResponse
func (c *ClientWithResponses) UpdatePlatformDiscountSharePolicyWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePlatformDiscountSharePolicyHTTPResponse, error) {
	rsp, err := c.UpdatePlatformDiscountSharePolicyWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePlatformDiscountSharePolicyHTTPResponse(rsp)
}

func (c *ClientWithResponses) UpdatePlatformDiscountSharePolicyWithResponse(ctx context.Context, id string, body UpdatePlatformDiscountSharePolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePlatformDiscountSharePolicyHTTPResponse, error) {
	rsp, err := c.UpdatePlatformDiscountSharePolicy(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePlatformDiscountSharePolicyHTTPResponse(rsp)
}

// ArchivePlatformDiscountSharePolicyWithResponse request returning *ArchivePlatformDiscountSharePolicyHTTPResponse
func (c *ClientWithResponses) ArchivePlatformDiscountSharePolicyWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ArchivePlatformDiscountSharePolicyHTTPResponse, error) {
	rsp, err := c.ArchivePlatformDiscountSharePolicy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseArchivePlatformDiscountSharePolicyHTTPResponse(rsp)
}

// RecoverPlatformDiscountSharePolicyWithResponse request returning *RecoverPlatformDiscountSharePolicyHTTPResponse
func (c *ClientWithResponses) RecoverPlatformDiscountSharePolicyWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*RecoverPlatformDiscountSharePolicyHTTPResponse, error) {
	rsp, err := c.RecoverPlatformDiscountSharePolicy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRecoverPlatformDiscountSharePolicyHTTPResponse(rsp)
}

// CancelPlatformDiscountSharePolicyScheduleWithResponse request returning *CancelPlatformDiscountSharePolicyScheduleHTTPResponse
func (c *ClientWithResponses) CancelPlatformDiscountSharePolicyScheduleWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*CancelPlatformDiscountSharePolicyScheduleHTTPResponse, error) {
	rsp, err := c.CancelPlatformDiscountSharePolicySchedule(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCancelPlatformDiscountSharePolicyScheduleHTTPResponse(rsp)
}

// GetPlatformDiscountSharePolicyScheduleWithResponse request returning *GetPlatformDiscountSharePolicyScheduleHTTPResponse
func (c *ClientWithResponses) GetPlatformDiscountSharePolicyScheduleWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetPlatformDiscountSharePolicyScheduleHTTPResponse, error) {
	rsp, err := c.GetPlatformDiscountSharePolicySchedule(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlatformDiscountSharePolicyScheduleHTTPResponse(rsp)
}

// ScheduleDiscountSharePolicyWithBodyWithResponse request with arbitrary body returning *ScheduleDiscountSharePolicyHTTPResponse
func (c *ClientWithResponses) ScheduleDiscountSharePolicyWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ScheduleDiscountSharePolicyHTTPResponse, error) {
	rsp, err := c.ScheduleDiscountSharePolicyWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseScheduleDiscountSharePolicyHTTPResponse(rsp)
}

func (c *ClientWithResponses) ScheduleDiscountSharePolicyWithResponse(ctx context.Context, id string, body ScheduleDiscountSharePolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*ScheduleDiscountSharePolicyHTTPResponse, error) {
	rsp, err := c.ScheduleDiscountSharePolicy(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseScheduleDiscountSharePolicyHTTPResponse(rsp)
}

// RescheduleDiscountSharePolicyWithBodyWithResponse request with arbitrary body returning *RescheduleDiscountSharePolicyHTTPResponse
func (c *ClientWithResponses) RescheduleDiscountSharePolicyWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RescheduleDiscountSharePolicyHTTPResponse, error) {
	rsp, err := c.RescheduleDiscountSharePolicyWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRescheduleDiscountSharePolicyHTTPResponse(rsp)
}

func (c *ClientWithResponses) RescheduleDiscountSharePolicyWithResponse(ctx context.Context, id string, body RescheduleDiscountSharePolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*RescheduleDiscountSharePolicyHTTPResponse, error) {
	rsp, err := c.RescheduleDiscountSharePolicy(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRescheduleDiscountSharePolicyHTTPResponse(rsp)
}

// GetPlatformDiscountSharePolicyFilterOptionsWithResponse request returning *GetPlatformDiscountSharePolicyFilterOptionsHTTPResponse
func (c *ClientWithResponses) GetPlatformDiscountSharePolicyFilterOptionsWithResponse(ctx context.Context, params *GetPlatformDiscountSharePolicyFilterOptionsParams, reqEditors ...RequestEditorFn) (*GetPlatformDiscountSharePolicyFilterOptionsHTTPResponse, error) {
	rsp, err := c.GetPlatformDiscountSharePolicyFilterOptions(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlatformDiscountSharePolicyFilterOptionsHTTPResponse(rsp)
}

// GetPlatformPartnerFilterOptionsWithResponse request returning *GetPlatformPartnerFilterOptionsHTTPResponse
func (c *ClientWithResponses) GetPlatformPartnerFilterOptionsWithResponse(ctx context.Context, params *GetPlatformPartnerFilterOptionsParams, reqEditors ...RequestEditorFn) (*GetPlatformPartnerFilterOptionsHTTPResponse, error) {
	rsp, err := c.GetPlatformPartnerFilterOptions(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlatformPartnerFilterOptionsHTTPResponse(rsp)
}

// GetPlatformPartnerSettlementsWithResponse request returning *GetPlatformPartnerSettlementsHTTPResponse
func (c *ClientWithResponses) GetPlatformPartnerSettlementsWithResponse(ctx context.Context, params *GetPlatformPartnerSettlementsParams, reqEditors ...RequestEditorFn) (*GetPlatformPartnerSettlementsHTTPResponse, error) {
	rsp, err := c.GetPlatformPartnerSettlements(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlatformPartnerSettlementsHTTPResponse(rsp)
}

// GetPlatformPartnersWithResponse request returning *GetPlatformPartnersHTTPResponse
func (c *ClientWithResponses) GetPlatformPartnersWithResponse(ctx context.Context, params *GetPlatformPartnersParams, reqEditors ...RequestEditorFn) (*GetPlatformPartnersHTTPResponse, error) {
	rsp, err := c.GetPlatformPartners(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlatformPartnersHTTPResponse(rsp)
}

// CreatePlatformPartnerWithBodyWithResponse request with arbitrary body returning *CreatePlatformPartnerHTTPResponse
func (c *ClientWithResponses) CreatePlatformPartnerWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePlatformPartnerHTTPResponse, error) {
	rsp, err := c.CreatePlatformPartnerWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePlatformPartnerHTTPResponse(rsp)
}

func (c *ClientWithResponses) CreatePlatformPartnerWithResponse(ctx context.Context, body CreatePlatformPartnerJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePlatformPartnerHTTPResponse, error) {
	rsp, err := c.CreatePlatformPartner(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePlatformPartnerHTTPResponse(rsp)
}

// CreatePlatformPartnersWithBodyWithResponse request with arbitrary body returning *CreatePlatformPartnersHTTPResponse
func (c *ClientWithResponses) CreatePlatformPartnersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePlatformPartnersHTTPResponse, error) {
	rsp, err := c.CreatePlatformPartnersWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePlatformPartnersHTTPResponse(rsp)
}

func (c *ClientWithResponses) CreatePlatformPartnersWithResponse(ctx context.Context, body CreatePlatformPartnersJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePlatformPartnersHTTPResponse, error) {
	rsp, err := c.CreatePlatformPartners(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePlatformPartnersHTTPResponse(rsp)
}

// SchedulePlatformPartnersWithBodyWithResponse request with arbitrary body returning *SchedulePlatformPartnersHTTPResponse
func (c *ClientWithResponses) SchedulePlatformPartnersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SchedulePlatformPartnersHTTPResponse, error) {
	rsp, err := c.SchedulePlatformPartnersWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSchedulePlatformPartnersHTTPResponse(rsp)
}

func (c *ClientWithResponses) SchedulePlatformPartnersWithResponse(ctx context.Context, body SchedulePlatformPartnersJSONRequestBody, reqEditors ...RequestEditorFn) (*SchedulePlatformPartnersHTTPResponse, error) {
	rsp, err := c.SchedulePlatformPartners(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSchedulePlatformPartnersHTTPResponse(rsp)
}

// GetPlatformPartnerWithResponse request returning *GetPlatformPartnerHTTPResponse
func (c *ClientWithResponses) GetPlatformPartnerWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetPlatformPartnerHTTPResponse, error) {
	rsp, err := c.GetPlatformPartner(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlatformPartnerHTTPResponse(rsp)
}

// UpdatePlatformPartnerWithBodyWithResponse request with arbitrary body returning *UpdatePlatformPartnerHTTPResponse
func (c *ClientWithResponses) UpdatePlatformPartnerWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePlatformPartnerHTTPResponse, error) {
	rsp, err := c.UpdatePlatformPartnerWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePlatformPartnerHTTPResponse(rsp)
}

func (c *ClientWithResponses) UpdatePlatformPartnerWithResponse(ctx context.Context, id string, body UpdatePlatformPartnerJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePlatformPartnerHTTPResponse, error) {
	rsp, err := c.UpdatePlatformPartner(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePlatformPartnerHTTPResponse(rsp)
}

// ArchivePlatformPartnerWithResponse request returning *ArchivePlatformPartnerHTTPResponse
func (c *ClientWithResponses) ArchivePlatformPartnerWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ArchivePlatformPartnerHTTPResponse, error) {
	rsp, err := c.ArchivePlatformPartner(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseArchivePlatformPartnerHTTPResponse(rsp)
}

// RecoverPlatformPartnerWithResponse request returning *RecoverPlatformPartnerHTTPResponse
func (c *ClientWithResponses) RecoverPlatformPartnerWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*RecoverPlatformPartnerHTTPResponse, error) {
	rsp, err := c.RecoverPlatformPartner(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRecoverPlatformPartnerHTTPResponse(rsp)
}

// CancelPlatformPartnerScheduleWithResponse request returning *CancelPlatformPartnerScheduleHTTPResponse
func (c *ClientWithResponses) CancelPlatformPartnerScheduleWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*CancelPlatformPartnerScheduleHTTPResponse, error) {
	rsp, err := c.CancelPlatformPartnerSchedule(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCancelPlatformPartnerScheduleHTTPResponse(rsp)
}

// GetPlatformPartnerScheduleWithResponse request returning *GetPlatformPartnerScheduleHTTPResponse
func (c *ClientWithResponses) GetPlatformPartnerScheduleWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetPlatformPartnerScheduleHTTPResponse, error) {
	rsp, err := c.GetPlatformPartnerSchedule(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlatformPartnerScheduleHTTPResponse(rsp)
}

// SchedulePartnerWithBodyWithResponse request with arbitrary body returning *SchedulePartnerHTTPResponse
func (c *ClientWithResponses) SchedulePartnerWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SchedulePartnerHTTPResponse, error) {
	rsp, err := c.SchedulePartnerWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSchedulePartnerHTTPResponse(rsp)
}

func (c *ClientWithResponses) SchedulePartnerWithResponse(ctx context.Context, id string, body SchedulePartnerJSONRequestBody, reqEditors ...RequestEditorFn) (*SchedulePartnerHTTPResponse, error) {
	rsp, err := c.SchedulePartner(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSchedulePartnerHTTPResponse(rsp)
}

// ReschedulePartnerWithBodyWithResponse request with arbitrary body returning *ReschedulePartnerHTTPResponse
func (c *ClientWithResponses) ReschedulePartnerWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReschedulePartnerHTTPResponse, error) {
	rsp, err := c.ReschedulePartnerWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReschedulePartnerHTTPResponse(rsp)
}

func (c *ClientWithResponses) ReschedulePartnerWithResponse(ctx context.Context, id string, body ReschedulePartnerJSONRequestBody, reqEditors ...RequestEditorFn) (*ReschedulePartnerHTTPResponse, error) {
	rsp, err := c.ReschedulePartner(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReschedulePartnerHTTPResponse(rsp)
}

// GetPlatformPayoutsWithResponse request returning *GetPlatformPayoutsHTTPResponse
func (c *ClientWithResponses) GetPlatformPayoutsWithResponse(ctx context.Context, params *GetPlatformPayoutsParams, reqEditors ...RequestEditorFn) (*GetPlatformPayoutsHTTPResponse, error) {
	rsp, err := c.GetPlatformPayouts(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlatformPayoutsHTTPResponse(rsp)
}

// GetPlatformSettingWithResponse request returning *GetPlatformSettingHTTPResponse
func (c *ClientWithResponses) GetPlatformSettingWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPlatformSettingHTTPResponse, error) {
	rsp, err := c.GetPlatformSetting(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlatformSettingHTTPResponse(rsp)
}

// UpdatePlatformSettingWithBodyWithResponse request with arbitrary body returning *UpdatePlatformSettingHTTPResponse
func (c *ClientWithResponses) UpdatePlatformSettingWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePlatformSettingHTTPResponse, error) {
	rsp, err := c.UpdatePlatformSettingWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePlatformSettingHTTPResponse(rsp)
}

func (c *ClientWithResponses) UpdatePlatformSettingWithResponse(ctx context.Context, body UpdatePlatformSettingJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePlatformSettingHTTPResponse, error) {
	rsp, err := c.UpdatePlatformSetting(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePlatformSettingHTTPResponse(rsp)
}

// GetPlatformTransferSummariesWithResponse request returning *GetPlatformTransferSummariesHTTPResponse
func (c *ClientWithResponses) GetPlatformTransferSummariesWithResponse(ctx context.Context, params *GetPlatformTransferSummariesParams, reqEditors ...RequestEditorFn) (*GetPlatformTransferSummariesHTTPResponse, error) {
	rsp, err := c.GetPlatformTransferSummaries(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlatformTransferSummariesHTTPResponse(rsp)
}

// DownloadPlatformTransferSheetWithResponse request returning *DownloadPlatformTransferSheetHTTPResponse
func (c *ClientWithResponses) DownloadPlatformTransferSheetWithResponse(ctx context.Context, params *DownloadPlatformTransferSheetParams, reqEditors ...RequestEditorFn) (*DownloadPlatformTransferSheetHTTPResponse, error) {
	rsp, err := c.DownloadPlatformTransferSheet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDownloadPlatformTransferSheetHTTPResponse(rsp)
}

// CreatePlatformManualTransferWithBodyWithResponse request with arbitrary body returning *CreatePlatformManualTransferHTTPResponse
func (c *ClientWithResponses) CreatePlatformManualTransferWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePlatformManualTransferHTTPResponse, error) {
	rsp, err := c.CreatePlatformManualTransferWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePlatformManualTransferHTTPResponse(rsp)
}

func (c *ClientWithResponses) CreatePlatformManualTransferWithResponse(ctx context.Context, body CreatePlatformManualTransferJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePlatformManualTransferHTTPResponse, error) {
	rsp, err := c.CreatePlatformManualTransfer(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePlatformManualTransferHTTPResponse(rsp)
}

// CreatePlatformOrderTransferWithBodyWithResponse request with arbitrary body returning *CreatePlatformOrderTransferHTTPResponse
func (c *ClientWithResponses) CreatePlatformOrderTransferWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePlatformOrderTransferHTTPResponse, error) {
	rsp, err := c.CreatePlatformOrderTransferWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePlatformOrderTransferHTTPResponse(rsp)
}

func (c *ClientWithResponses) CreatePlatformOrderTransferWithResponse(ctx context.Context, body CreatePlatformOrderTransferJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePlatformOrderTransferHTTPResponse, error) {
	rsp, err := c.CreatePlatformOrderTransfer(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePlatformOrderTransferHTTPResponse(rsp)
}

// CreatePlatformOrderCancelTransferWithBodyWithResponse request with arbitrary body returning *CreatePlatformOrderCancelTransferHTTPResponse
func (c *ClientWithResponses) CreatePlatformOrderCancelTransferWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePlatformOrderCancelTransferHTTPResponse, error) {
	rsp, err := c.CreatePlatformOrderCancelTransferWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePlatformOrderCancelTransferHTTPResponse(rsp)
}

func (c *ClientWithResponses) CreatePlatformOrderCancelTransferWithResponse(ctx context.Context, body CreatePlatformOrderCancelTransferJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePlatformOrderCancelTransferHTTPResponse, error) {
	rsp, err := c.CreatePlatformOrderCancelTransfer(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePlatformOrderCancelTransferHTTPResponse(rsp)
}

// DeletePlatformTransferWithResponse request returning *DeletePlatformTransferHTTPResponse
func (c *ClientWithResponses) DeletePlatformTransferWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeletePlatformTransferHTTPResponse, error) {
	rsp, err := c.DeletePlatformTransfer(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePlatformTransferHTTPResponse(rsp)
}

// GetPlatformTransferWithResponse request returning *GetPlatformTransferHTTPResponse
func (c *ClientWithResponses) GetPlatformTransferWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetPlatformTransferHTTPResponse, error) {
	rsp, err := c.GetPlatformTransfer(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlatformTransferHTTPResponse(rsp)
}

// GetPromotionWithResponse request returning *GetPromotionHTTPResponse
func (c *ClientWithResponses) GetPromotionWithResponse(ctx context.Context, promotionId string, reqEditors ...RequestEditorFn) (*GetPromotionHTTPResponse, error) {
	rsp, err := c.GetPromotion(ctx, promotionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPromotionHTTPResponse(rsp)
}

// RefreshTokenWithBodyWithResponse request with arbitrary body returning *RefreshTokenHTTPResponse
func (c *ClientWithResponses) RefreshTokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RefreshTokenHTTPResponse, error) {
	rsp, err := c.RefreshTokenWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRefreshTokenHTTPResponse(rsp)
}

func (c *ClientWithResponses) RefreshTokenWithResponse(ctx context.Context, body RefreshTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*RefreshTokenHTTPResponse, error) {
	rsp, err := c.RefreshToken(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRefreshTokenHTTPResponse(rsp)
}

// ParseGetBankInfosHTTPResponse parses an HTTP response from a GetBankInfosWithResponse call
func ParseGetBankInfosHTTPResponse(rsp *http.Response) (*GetBankInfosHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBankInfosHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetBankInfosResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GetBankInfosError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetBillingKeyInfosHTTPResponse parses an HTTP response from a GetBillingKeyInfosWithResponse call
func ParseGetBillingKeyInfosHTTPResponse(rsp *http.Response) (*GetBillingKeyInfosHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBillingKeyInfosHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetBillingKeyInfosResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GetBillingKeyInfosError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest GetBillingKeyInfosError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest GetBillingKeyInfosError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseIssueBillingKeyHTTPResponse parses an HTTP response from a IssueBillingKeyWithResponse call
func ParseIssueBillingKeyHTTPResponse(rsp *http.Response) (*IssueBillingKeyHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IssueBillingKeyHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IssueBillingKeyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest IssueBillingKeyError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest IssueBillingKeyError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest IssueBillingKeyError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest IssueBillingKeyError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest IssueBillingKeyError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	}

	return response, nil
}

// ParseDeleteBillingKeyHTTPResponse parses an HTTP response from a DeleteBillingKeyWithResponse call
func ParseDeleteBillingKeyHTTPResponse(rsp *http.Response) (*DeleteBillingKeyHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteBillingKeyHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeleteBillingKeyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest DeleteBillingKeyError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest DeleteBillingKeyError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest DeleteBillingKeyError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest DeleteBillingKeyError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest DeleteBillingKeyError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest DeleteBillingKeyError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	}

	return response, nil
}

// ParseGetBillingKeyInfoHTTPResponse parses an HTTP response from a GetBillingKeyInfoWithResponse call
func ParseGetBillingKeyInfoHTTPResponse(rsp *http.Response) (*GetBillingKeyInfoHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBillingKeyInfoHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BillingKeyInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GetBillingKeyInfoError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest GetBillingKeyInfoError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest GetBillingKeyInfoError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest GetBillingKeyInfoError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseIssueCashReceiptHTTPResponse parses an HTTP response from a IssueCashReceiptWithResponse call
func ParseIssueCashReceiptHTTPResponse(rsp *http.Response) (*IssueCashReceiptHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IssueCashReceiptHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IssueCashReceiptResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest IssueCashReceiptError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest IssueCashReceiptError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest IssueCashReceiptError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest IssueCashReceiptError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest IssueCashReceiptError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest IssueCashReceiptError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	}

	return response, nil
}

// ParseGetIdentityVerificationHTTPResponse parses an HTTP response from a GetIdentityVerificationWithResponse call
func ParseGetIdentityVerificationHTTPResponse(rsp *http.Response) (*GetIdentityVerificationHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIdentityVerificationHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IdentityVerification
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GetIdentityVerificationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest GetIdentityVerificationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest GetIdentityVerificationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest GetIdentityVerificationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseConfirmIdentityVerificationHTTPResponse parses an HTTP response from a ConfirmIdentityVerificationWithResponse call
func ParseConfirmIdentityVerificationHTTPResponse(rsp *http.Response) (*ConfirmIdentityVerificationHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ConfirmIdentityVerificationHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ConfirmIdentityVerificationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ConfirmIdentityVerificationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ConfirmIdentityVerificationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ConfirmIdentityVerificationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ConfirmIdentityVerificationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ConfirmIdentityVerificationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest ConfirmIdentityVerificationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	}

	return response, nil
}

// ParseResendIdentityVerificationHTTPResponse parses an HTTP response from a ResendIdentityVerificationWithResponse call
func ParseResendIdentityVerificationHTTPResponse(rsp *http.Response) (*ResendIdentityVerificationHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ResendIdentityVerificationHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResendIdentityVerificationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ResendIdentityVerificationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ResendIdentityVerificationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ResendIdentityVerificationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ResendIdentityVerificationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ResendIdentityVerificationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest ResendIdentityVerificationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	}

	return response, nil
}

// ParseSendIdentityVerificationHTTPResponse parses an HTTP response from a SendIdentityVerificationWithResponse call
func ParseSendIdentityVerificationHTTPResponse(rsp *http.Response) (*SendIdentityVerificationHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SendIdentityVerificationHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SendIdentityVerificationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SendIdentityVerificationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest SendIdentityVerificationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest SendIdentityVerificationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest SendIdentityVerificationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest SendIdentityVerificationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest SendIdentityVerificationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	}

	return response, nil
}

// ParseGetKakaopayPaymentOrderHTTPResponse parses an HTTP response from a GetKakaopayPaymentOrderWithResponse call
func ParseGetKakaopayPaymentOrderHTTPResponse(rsp *http.Response) (*GetKakaopayPaymentOrderHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetKakaopayPaymentOrderHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetKakaopayPaymentOrderResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GetKakaopayPaymentOrderError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest GetKakaopayPaymentOrderError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseLoginViaApiSecretHTTPResponse parses an HTTP response from a LoginViaApiSecretWithResponse call
func ParseLoginViaApiSecretHTTPResponse(rsp *http.Response) (*LoginViaApiSecretHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LoginViaApiSecretHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LoginViaApiSecretResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest LoginViaApiSecretError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest LoginViaApiSecretError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseRevokePaymentSchedulesHTTPResponse parses an HTTP response from a RevokePaymentSchedulesWithResponse call
func ParseRevokePaymentSchedulesHTTPResponse(rsp *http.Response) (*RevokePaymentSchedulesHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RevokePaymentSchedulesHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RevokePaymentSchedulesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RevokePaymentSchedulesError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RevokePaymentSchedulesError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest RevokePaymentSchedulesError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest RevokePaymentSchedulesError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest RevokePaymentSchedulesError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseGetPaymentSchedulesHTTPResponse parses an HTTP response from a GetPaymentSchedulesWithResponse call
func ParseGetPaymentSchedulesHTTPResponse(rsp *http.Response) (*GetPaymentSchedulesHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPaymentSchedulesHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetPaymentSchedulesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GetPaymentSchedulesError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest GetPaymentSchedulesError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest GetPaymentSchedulesError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseGetPaymentScheduleHTTPResponse parses an HTTP response from a GetPaymentScheduleWithResponse call
func ParseGetPaymentScheduleHTTPResponse(rsp *http.Response) (*GetPaymentScheduleHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPaymentScheduleHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaymentSchedule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GetPaymentScheduleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest GetPaymentScheduleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest GetPaymentScheduleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest GetPaymentScheduleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetPaymentsHTTPResponse parses an HTTP response from a GetPaymentsWithResponse call
func ParseGetPaymentsHTTPResponse(rsp *http.Response) (*GetPaymentsHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPaymentsHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetPaymentsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GetPaymentsError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest GetPaymentsError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest GetPaymentsError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseGetAllPaymentsByCursorHTTPResponse parses an HTTP response from a GetAllPaymentsByCursorWithResponse call
func ParseGetAllPaymentsByCursorHTTPResponse(rsp *http.Response) (*GetAllPaymentsByCursorHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllPaymentsByCursorHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetAllPaymentsByCursorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GetAllPaymentsError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest GetAllPaymentsError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest GetAllPaymentsError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseGetPaymentHTTPResponse parses an HTTP response from a GetPaymentWithResponse call
func ParseGetPaymentHTTPResponse(rsp *http.Response) (*GetPaymentHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPaymentHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Payment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GetPaymentError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest GetPaymentError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest GetPaymentError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest GetPaymentError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePayWithBillingKeyHTTPResponse parses an HTTP response from a PayWithBillingKeyWithResponse call
func ParsePayWithBillingKeyHTTPResponse(rsp *http.Response) (*PayWithBillingKeyHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PayWithBillingKeyHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PayWithBillingKeyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest PayWithBillingKeyError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest PayWithBillingKeyError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest PayWithBillingKeyError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest PayWithBillingKeyError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest PayWithBillingKeyError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest PayWithBillingKeyError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	}

	return response, nil
}

// ParseCancelPaymentHTTPResponse parses an HTTP response from a CancelPaymentWithResponse call
func ParseCancelPaymentHTTPResponse(rsp *http.Response) (*CancelPaymentHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CancelPaymentHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CancelPaymentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest CancelPaymentError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CancelPaymentError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest CancelPaymentError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest CancelPaymentError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest CancelPaymentError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest CancelPaymentError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	}

	return response, nil
}

// ParseGetCashReceiptByPaymentIdHTTPResponse parses an HTTP response from a GetCashReceiptByPaymentIdWithResponse call
func ParseGetCashReceiptByPaymentIdHTTPResponse(rsp *http.Response) (*GetCashReceiptByPaymentIdHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCashReceiptByPaymentIdHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CashReceipt
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GetCashReceiptError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest GetCashReceiptError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest GetCashReceiptError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest GetCashReceiptError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseCancelCashReceiptByPaymentIdHTTPResponse parses an HTTP response from a CancelCashReceiptByPaymentIdWithResponse call
func ParseCancelCashReceiptByPaymentIdHTTPResponse(rsp *http.Response) (*CancelCashReceiptByPaymentIdHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CancelCashReceiptByPaymentIdHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CancelCashReceiptResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest CancelCashReceiptError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CancelCashReceiptError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest CancelCashReceiptError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest CancelCashReceiptError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest CancelCashReceiptError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	}

	return response, nil
}

// ParseConfirmEscrowHTTPResponse parses an HTTP response from a ConfirmEscrowWithResponse call
func ParseConfirmEscrowHTTPResponse(rsp *http.Response) (*ConfirmEscrowHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ConfirmEscrowHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ConfirmEscrowResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ConfirmEscrowError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ConfirmEscrowError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ConfirmEscrowError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ConfirmEscrowError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ConfirmEscrowError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest ConfirmEscrowError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	}

	return response, nil
}

// ParseModifyEscrowLogisticsHTTPResponse parses an HTTP response from a ModifyEscrowLogisticsWithResponse call
func ParseModifyEscrowLogisticsHTTPResponse(rsp *http.Response) (*ModifyEscrowLogisticsHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ModifyEscrowLogisticsHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ModifyEscrowLogisticsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ModifyEscrowLogisticsError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ModifyEscrowLogisticsError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ModifyEscrowLogisticsError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ModifyEscrowLogisticsError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ModifyEscrowLogisticsError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest ModifyEscrowLogisticsError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	}

	return response, nil
}

// ParseApplyEscrowLogisticsHTTPResponse parses an HTTP response from a ApplyEscrowLogisticsWithResponse call
func ParseApplyEscrowLogisticsHTTPResponse(rsp *http.Response) (*ApplyEscrowLogisticsHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApplyEscrowLogisticsHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApplyEscrowLogisticsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApplyEscrowLogisticsError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApplyEscrowLogisticsError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApplyEscrowLogisticsError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApplyEscrowLogisticsError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ApplyEscrowLogisticsError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest ApplyEscrowLogisticsError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	}

	return response, nil
}

// ParsePayInstantlyHTTPResponse parses an HTTP response from a PayInstantlyWithResponse call
func ParsePayInstantlyHTTPResponse(rsp *http.Response) (*PayInstantlyHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PayInstantlyHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PayInstantlyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest PayInstantlyError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest PayInstantlyError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest PayInstantlyError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest PayInstantlyError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest PayInstantlyError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest PayInstantlyError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	}

	return response, nil
}

// ParsePreRegisterPaymentHTTPResponse parses an HTTP response from a PreRegisterPaymentWithResponse call
func ParsePreRegisterPaymentHTTPResponse(rsp *http.Response) (*PreRegisterPaymentHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PreRegisterPaymentHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PreRegisterPaymentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest PreRegisterPaymentError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest PreRegisterPaymentError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest PreRegisterPaymentError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest PreRegisterPaymentError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseRegisterStoreReceiptHTTPResponse parses an HTTP response from a RegisterStoreReceiptWithResponse call
func ParseRegisterStoreReceiptHTTPResponse(rsp *http.Response) (*RegisterStoreReceiptHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RegisterStoreReceiptHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RegisterStoreReceiptResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RegisterStoreReceiptError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RegisterStoreReceiptError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest RegisterStoreReceiptError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest RegisterStoreReceiptError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest RegisterStoreReceiptError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest RegisterStoreReceiptError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	}

	return response, nil
}

// ParseResendWebhookHTTPResponse parses an HTTP response from a ResendWebhookWithResponse call
func ParseResendWebhookHTTPResponse(rsp *http.Response) (*ResendWebhookHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ResendWebhookHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResendWebhookResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ResendWebhookError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ResendWebhookError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ResendWebhookError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ResendWebhookError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseCreatePaymentScheduleHTTPResponse parses an HTTP response from a CreatePaymentScheduleWithResponse call
func ParseCreatePaymentScheduleHTTPResponse(rsp *http.Response) (*CreatePaymentScheduleHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreatePaymentScheduleHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreatePaymentScheduleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest CreatePaymentScheduleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CreatePaymentScheduleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest CreatePaymentScheduleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest CreatePaymentScheduleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest CreatePaymentScheduleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseGetPaymentTransactionsHTTPResponse parses an HTTP response from a GetPaymentTransactionsWithResponse call
func ParseGetPaymentTransactionsHTTPResponse(rsp *http.Response) (*GetPaymentTransactionsHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPaymentTransactionsHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetPaymentTransactionsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GetPaymentTransactionsError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest GetPaymentTransactionsError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest GetPaymentTransactionsError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest GetPaymentTransactionsError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseCloseVirtualAccountHTTPResponse parses an HTTP response from a CloseVirtualAccountWithResponse call
func ParseCloseVirtualAccountHTTPResponse(rsp *http.Response) (*CloseVirtualAccountHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CloseVirtualAccountHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CloseVirtualAccountResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest CloseVirtualAccountError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CloseVirtualAccountError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest CloseVirtualAccountError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest CloseVirtualAccountError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest CloseVirtualAccountError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest CloseVirtualAccountError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	}

	return response, nil
}

// ParseGetPlatformHTTPResponse parses an HTTP response from a GetPlatformWithResponse call
func ParseGetPlatformHTTPResponse(rsp *http.Response) (*GetPlatformHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPlatformHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Platform
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GetPlatformError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest GetPlatformError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest GetPlatformError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseUpdatePlatformHTTPResponse parses an HTTP response from a UpdatePlatformWithResponse call
func ParseUpdatePlatformHTTPResponse(rsp *http.Response) (*UpdatePlatformHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdatePlatformHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UpdatePlatformResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest UpdatePlatformError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UpdatePlatformError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest UpdatePlatformError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseGetPlatformAccountTransfersHTTPResponse parses an HTTP response from a GetPlatformAccountTransfersWithResponse call
func ParseGetPlatformAccountTransfersHTTPResponse(rsp *http.Response) (*GetPlatformAccountTransfersHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPlatformAccountTransfersHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetPlatformAccountTransfersResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GetPlatformAccountTransfersError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest GetPlatformAccountTransfersError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest GetPlatformAccountTransfersError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseGetPlatformAdditionalFeePoliciesHTTPResponse parses an HTTP response from a GetPlatformAdditionalFeePoliciesWithResponse call
func ParseGetPlatformAdditionalFeePoliciesHTTPResponse(rsp *http.Response) (*GetPlatformAdditionalFeePoliciesHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPlatformAdditionalFeePoliciesHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetPlatformAdditionalFeePoliciesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GetPlatformAdditionalFeePoliciesError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest GetPlatformAdditionalFeePoliciesError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest GetPlatformAdditionalFeePoliciesError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseCreatePlatformAdditionalFeePolicyHTTPResponse parses an HTTP response from a CreatePlatformAdditionalFeePolicyWithResponse call
func ParseCreatePlatformAdditionalFeePolicyHTTPResponse(rsp *http.Response) (*CreatePlatformAdditionalFeePolicyHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreatePlatformAdditionalFeePolicyHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreatePlatformAdditionalFeePolicyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest CreatePlatformAdditionalFeePolicyError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CreatePlatformAdditionalFeePolicyError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest CreatePlatformAdditionalFeePolicyError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest CreatePlatformAdditionalFeePolicyError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseGetPlatformAdditionalFeePolicyHTTPResponse parses an HTTP response from a GetPlatformAdditionalFeePolicyWithResponse call
func ParseGetPlatformAdditionalFeePolicyHTTPResponse(rsp *http.Response) (*GetPlatformAdditionalFeePolicyHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPlatformAdditionalFeePolicyHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PlatformAdditionalFeePolicy
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GetPlatformAdditionalFeePolicyError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest GetPlatformAdditionalFeePolicyError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest GetPlatformAdditionalFeePolicyError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest GetPlatformAdditionalFeePolicyError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseUpdatePlatformAdditionalFeePolicyHTTPResponse parses an HTTP response from a UpdatePlatformAdditionalFeePolicyWithResponse call
func ParseUpdatePlatformAdditionalFeePolicyHTTPResponse(rsp *http.Response) (*UpdatePlatformAdditionalFeePolicyHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdatePlatformAdditionalFeePolicyHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UpdatePlatformAdditionalFeePolicyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest UpdatePlatformAdditionalFeePolicyError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UpdatePlatformAdditionalFeePolicyError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest UpdatePlatformAdditionalFeePolicyError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest UpdatePlatformAdditionalFeePolicyError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest UpdatePlatformAdditionalFeePolicyError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseArchivePlatformAdditionalFeePolicyHTTPResponse parses an HTTP response from a ArchivePlatformAdditionalFeePolicyWithResponse call
func ParseArchivePlatformAdditionalFeePolicyHTTPResponse(rsp *http.Response) (*ArchivePlatformAdditionalFeePolicyHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ArchivePlatformAdditionalFeePolicyHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArchivePlatformAdditionalFeePolicyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ArchivePlatformAdditionalFeePolicyError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ArchivePlatformAdditionalFeePolicyError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ArchivePlatformAdditionalFeePolicyError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ArchivePlatformAdditionalFeePolicyError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ArchivePlatformAdditionalFeePolicyError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseRecoverPlatformAdditionalFeePolicyHTTPResponse parses an HTTP response from a RecoverPlatformAdditionalFeePolicyWithResponse call
func ParseRecoverPlatformAdditionalFeePolicyHTTPResponse(rsp *http.Response) (*RecoverPlatformAdditionalFeePolicyHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RecoverPlatformAdditionalFeePolicyHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RecoverPlatformAdditionalFeePolicyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RecoverPlatformAdditionalFeePolicyError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RecoverPlatformAdditionalFeePolicyError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest RecoverPlatformAdditionalFeePolicyError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest RecoverPlatformAdditionalFeePolicyError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseCancelPlatformAdditionalFeePolicyScheduleHTTPResponse parses an HTTP response from a CancelPlatformAdditionalFeePolicyScheduleWithResponse call
func ParseCancelPlatformAdditionalFeePolicyScheduleHTTPResponse(rsp *http.Response) (*CancelPlatformAdditionalFeePolicyScheduleHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CancelPlatformAdditionalFeePolicyScheduleHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CancelPlatformAdditionalFeePolicyScheduleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest CancelPlatformAdditionalFeePolicyScheduleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CancelPlatformAdditionalFeePolicyScheduleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest CancelPlatformAdditionalFeePolicyScheduleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest CancelPlatformAdditionalFeePolicyScheduleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetPlatformAdditionalFeePolicyScheduleHTTPResponse parses an HTTP response from a GetPlatformAdditionalFeePolicyScheduleWithResponse call
func ParseGetPlatformAdditionalFeePolicyScheduleHTTPResponse(rsp *http.Response) (*GetPlatformAdditionalFeePolicyScheduleHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPlatformAdditionalFeePolicyScheduleHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PlatformAdditionalFeePolicy
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GetPlatformAdditionalFeePolicyScheduleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest GetPlatformAdditionalFeePolicyScheduleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest GetPlatformAdditionalFeePolicyScheduleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest GetPlatformAdditionalFeePolicyScheduleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseScheduleAdditionalFeePolicyHTTPResponse parses an HTTP response from a ScheduleAdditionalFeePolicyWithResponse call
func ParseScheduleAdditionalFeePolicyHTTPResponse(rsp *http.Response) (*ScheduleAdditionalFeePolicyHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ScheduleAdditionalFeePolicyHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SchedulePlatformAdditionalFeePolicyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ScheduleAdditionalFeePolicyError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ScheduleAdditionalFeePolicyError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ScheduleAdditionalFeePolicyError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ScheduleAdditionalFeePolicyError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ScheduleAdditionalFeePolicyError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseRescheduleAdditionalFeePolicyHTTPResponse parses an HTTP response from a RescheduleAdditionalFeePolicyWithResponse call
func ParseRescheduleAdditionalFeePolicyHTTPResponse(rsp *http.Response) (*RescheduleAdditionalFeePolicyHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RescheduleAdditionalFeePolicyHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ReschedulePlatformAdditionalFeePolicyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RescheduleAdditionalFeePolicyError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RescheduleAdditionalFeePolicyError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest RescheduleAdditionalFeePolicyError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest RescheduleAdditionalFeePolicyError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetPlatformAccountHolderHTTPResponse parses an HTTP response from a GetPlatformAccountHolderWithResponse call
func ParseGetPlatformAccountHolderHTTPResponse(rsp *http.Response) (*GetPlatformAccountHolderHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPlatformAccountHolderHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PlatformAccountHolder
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GetPlatformAccountHolderError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest GetPlatformAccountHolderError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest GetPlatformAccountHolderError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest GetPlatformAccountHolderError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetPlatformBulkPayoutsHTTPResponse parses an HTTP response from a GetPlatformBulkPayoutsWithResponse call
func ParseGetPlatformBulkPayoutsHTTPResponse(rsp *http.Response) (*GetPlatformBulkPayoutsHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPlatformBulkPayoutsHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetPlatformBulkPayoutsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GetPlatformBulkPayoutsError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest GetPlatformBulkPayoutsError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest GetPlatformBulkPayoutsError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseGetPlatformCompanyStateHTTPResponse parses an HTTP response from a GetPlatformCompanyStateWithResponse call
func ParseGetPlatformCompanyStateHTTPResponse(rsp *http.Response) (*GetPlatformCompanyStateHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPlatformCompanyStateHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetPlatformCompanyStatePayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GetPlatformCompanyStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest GetPlatformCompanyStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest GetPlatformCompanyStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest GetPlatformCompanyStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest GetPlatformCompanyStateError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetPlatformContractsHTTPResponse parses an HTTP response from a GetPlatformContractsWithResponse call
func ParseGetPlatformContractsHTTPResponse(rsp *http.Response) (*GetPlatformContractsHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPlatformContractsHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetPlatformContractsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GetPlatformContractsError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest GetPlatformContractsError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest GetPlatformContractsError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseCreatePlatformContractHTTPResponse parses an HTTP response from a CreatePlatformContractWithResponse call
func ParseCreatePlatformContractHTTPResponse(rsp *http.Response) (*CreatePlatformContractHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreatePlatformContractHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreatePlatformContractResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest CreatePlatformContractError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CreatePlatformContractError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest CreatePlatformContractError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest CreatePlatformContractError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseGetPlatformContractHTTPResponse parses an HTTP response from a GetPlatformContractWithResponse call
func ParseGetPlatformContractHTTPResponse(rsp *http.Response) (*GetPlatformContractHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPlatformContractHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PlatformContract
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GetPlatformContractError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest GetPlatformContractError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest GetPlatformContractError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest GetPlatformContractError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseUpdatePlatformContractHTTPResponse parses an HTTP response from a UpdatePlatformContractWithResponse call
func ParseUpdatePlatformContractHTTPResponse(rsp *http.Response) (*UpdatePlatformContractHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdatePlatformContractHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UpdatePlatformContractResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest UpdatePlatformContractError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UpdatePlatformContractError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest UpdatePlatformContractError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest UpdatePlatformContractError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest UpdatePlatformContractError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseArchivePlatformContractHTTPResponse parses an HTTP response from a ArchivePlatformContractWithResponse call
func ParseArchivePlatformContractHTTPResponse(rsp *http.Response) (*ArchivePlatformContractHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ArchivePlatformContractHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArchivePlatformContractResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ArchivePlatformContractError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ArchivePlatformContractError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ArchivePlatformContractError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ArchivePlatformContractError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ArchivePlatformContractError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseRecoverPlatformContractHTTPResponse parses an HTTP response from a RecoverPlatformContractWithResponse call
func ParseRecoverPlatformContractHTTPResponse(rsp *http.Response) (*RecoverPlatformContractHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RecoverPlatformContractHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RecoverPlatformContractResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RecoverPlatformContractError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RecoverPlatformContractError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest RecoverPlatformContractError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest RecoverPlatformContractError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseCancelPlatformContractScheduleHTTPResponse parses an HTTP response from a CancelPlatformContractScheduleWithResponse call
func ParseCancelPlatformContractScheduleHTTPResponse(rsp *http.Response) (*CancelPlatformContractScheduleHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CancelPlatformContractScheduleHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CancelPlatformContractScheduleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest CancelPlatformContractScheduleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CancelPlatformContractScheduleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest CancelPlatformContractScheduleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest CancelPlatformContractScheduleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetPlatformContractScheduleHTTPResponse parses an HTTP response from a GetPlatformContractScheduleWithResponse call
func ParseGetPlatformContractScheduleHTTPResponse(rsp *http.Response) (*GetPlatformContractScheduleHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPlatformContractScheduleHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PlatformContract
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GetPlatformContractScheduleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest GetPlatformContractScheduleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest GetPlatformContractScheduleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest GetPlatformContractScheduleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseScheduleContractHTTPResponse parses an HTTP response from a ScheduleContractWithResponse call
func ParseScheduleContractHTTPResponse(rsp *http.Response) (*ScheduleContractHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ScheduleContractHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SchedulePlatformContractResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ScheduleContractError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ScheduleContractError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ScheduleContractError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ScheduleContractError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ScheduleContractError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseRescheduleContractHTTPResponse parses an HTTP response from a RescheduleContractWithResponse call
func ParseRescheduleContractHTTPResponse(rsp *http.Response) (*RescheduleContractHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RescheduleContractHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ReschedulePlatformContractResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RescheduleContractError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RescheduleContractError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest RescheduleContractError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest RescheduleContractError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetPlatformDiscountSharePoliciesHTTPResponse parses an HTTP response from a GetPlatformDiscountSharePoliciesWithResponse call
func ParseGetPlatformDiscountSharePoliciesHTTPResponse(rsp *http.Response) (*GetPlatformDiscountSharePoliciesHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPlatformDiscountSharePoliciesHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetPlatformDiscountSharePoliciesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GetPlatformDiscountSharePoliciesError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest GetPlatformDiscountSharePoliciesError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest GetPlatformDiscountSharePoliciesError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseCreatePlatformDiscountSharePolicyHTTPResponse parses an HTTP response from a CreatePlatformDiscountSharePolicyWithResponse call
func ParseCreatePlatformDiscountSharePolicyHTTPResponse(rsp *http.Response) (*CreatePlatformDiscountSharePolicyHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreatePlatformDiscountSharePolicyHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreatePlatformDiscountSharePolicyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest CreatePlatformDiscountSharePolicyError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CreatePlatformDiscountSharePolicyError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest CreatePlatformDiscountSharePolicyError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest CreatePlatformDiscountSharePolicyError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseGetPlatformDiscountSharePolicyHTTPResponse parses an HTTP response from a GetPlatformDiscountSharePolicyWithResponse call
func ParseGetPlatformDiscountSharePolicyHTTPResponse(rsp *http.Response) (*GetPlatformDiscountSharePolicyHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPlatformDiscountSharePolicyHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PlatformDiscountSharePolicy
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GetPlatformDiscountSharePolicyError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest GetPlatformDiscountSharePolicyError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest GetPlatformDiscountSharePolicyError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest GetPlatformDiscountSharePolicyError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseUpdatePlatformDiscountSharePolicyHTTPResponse parses an HTTP response from a UpdatePlatformDiscountSharePolicyWithResponse call
func ParseUpdatePlatformDiscountSharePolicyHTTPResponse(rsp *http.Response) (*UpdatePlatformDiscountSharePolicyHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdatePlatformDiscountSharePolicyHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UpdatePlatformDiscountSharePolicyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest UpdatePlatformDiscountSharePolicyError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UpdatePlatformDiscountSharePolicyError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest UpdatePlatformDiscountSharePolicyError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest UpdatePlatformDiscountSharePolicyError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest UpdatePlatformDiscountSharePolicyError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseArchivePlatformDiscountSharePolicyHTTPResponse parses an HTTP response from a ArchivePlatformDiscountSharePolicyWithResponse call
func ParseArchivePlatformDiscountSharePolicyHTTPResponse(rsp *http.Response) (*ArchivePlatformDiscountSharePolicyHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ArchivePlatformDiscountSharePolicyHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArchivePlatformDiscountSharePolicyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ArchivePlatformDiscountSharePolicyError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ArchivePlatformDiscountSharePolicyError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ArchivePlatformDiscountSharePolicyError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ArchivePlatformDiscountSharePolicyError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ArchivePlatformDiscountSharePolicyError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseRecoverPlatformDiscountSharePolicyHTTPResponse parses an HTTP response from a RecoverPlatformDiscountSharePolicyWithResponse call
func ParseRecoverPlatformDiscountSharePolicyHTTPResponse(rsp *http.Response) (*RecoverPlatformDiscountSharePolicyHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RecoverPlatformDiscountSharePolicyHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RecoverPlatformDiscountSharePolicyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RecoverPlatformDiscountSharePolicyError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RecoverPlatformDiscountSharePolicyError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest RecoverPlatformDiscountSharePolicyError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest RecoverPlatformDiscountSharePolicyError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseCancelPlatformDiscountSharePolicyScheduleHTTPResponse parses an HTTP response from a CancelPlatformDiscountSharePolicyScheduleWithResponse call
func ParseCancelPlatformDiscountSharePolicyScheduleHTTPResponse(rsp *http.Response) (*CancelPlatformDiscountSharePolicyScheduleHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CancelPlatformDiscountSharePolicyScheduleHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CancelPlatformDiscountSharePolicyScheduleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest CancelPlatformDiscountSharePolicyScheduleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CancelPlatformDiscountSharePolicyScheduleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest CancelPlatformDiscountSharePolicyScheduleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest CancelPlatformDiscountSharePolicyScheduleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetPlatformDiscountSharePolicyScheduleHTTPResponse parses an HTTP response from a GetPlatformDiscountSharePolicyScheduleWithResponse call
func ParseGetPlatformDiscountSharePolicyScheduleHTTPResponse(rsp *http.Response) (*GetPlatformDiscountSharePolicyScheduleHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPlatformDiscountSharePolicyScheduleHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PlatformDiscountSharePolicy
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GetPlatformDiscountSharePolicyScheduleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest GetPlatformDiscountSharePolicyScheduleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest GetPlatformDiscountSharePolicyScheduleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest GetPlatformDiscountSharePolicyScheduleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseScheduleDiscountSharePolicyHTTPResponse parses an HTTP response from a ScheduleDiscountSharePolicyWithResponse call
func ParseScheduleDiscountSharePolicyHTTPResponse(rsp *http.Response) (*ScheduleDiscountSharePolicyHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ScheduleDiscountSharePolicyHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SchedulePlatformDiscountSharePolicyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ScheduleDiscountSharePolicyError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ScheduleDiscountSharePolicyError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ScheduleDiscountSharePolicyError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ScheduleDiscountSharePolicyError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ScheduleDiscountSharePolicyError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseRescheduleDiscountSharePolicyHTTPResponse parses an HTTP response from a RescheduleDiscountSharePolicyWithResponse call
func ParseRescheduleDiscountSharePolicyHTTPResponse(rsp *http.Response) (*RescheduleDiscountSharePolicyHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RescheduleDiscountSharePolicyHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ReschedulePlatformDiscountSharePolicyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RescheduleDiscountSharePolicyError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RescheduleDiscountSharePolicyError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest RescheduleDiscountSharePolicyError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest RescheduleDiscountSharePolicyError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetPlatformDiscountSharePolicyFilterOptionsHTTPResponse parses an HTTP response from a GetPlatformDiscountSharePolicyFilterOptionsWithResponse call
func ParseGetPlatformDiscountSharePolicyFilterOptionsHTTPResponse(rsp *http.Response) (*GetPlatformDiscountSharePolicyFilterOptionsHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPlatformDiscountSharePolicyFilterOptionsHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PlatformDiscountSharePolicyFilterOptions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GetPlatformDiscountSharePolicyFilterOptionsError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest GetPlatformDiscountSharePolicyFilterOptionsError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest GetPlatformDiscountSharePolicyFilterOptionsError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseGetPlatformPartnerFilterOptionsHTTPResponse parses an HTTP response from a GetPlatformPartnerFilterOptionsWithResponse call
func ParseGetPlatformPartnerFilterOptionsHTTPResponse(rsp *http.Response) (*GetPlatformPartnerFilterOptionsHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPlatformPartnerFilterOptionsHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PlatformPartnerFilterOptions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GetPlatformPartnerFilterOptionsError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest GetPlatformPartnerFilterOptionsError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest GetPlatformPartnerFilterOptionsError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseGetPlatformPartnerSettlementsHTTPResponse parses an HTTP response from a GetPlatformPartnerSettlementsWithResponse call
func ParseGetPlatformPartnerSettlementsHTTPResponse(rsp *http.Response) (*GetPlatformPartnerSettlementsHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPlatformPartnerSettlementsHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetPlatformPartnerSettlementsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GetPlatformPartnerSettlementsError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest GetPlatformPartnerSettlementsError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest GetPlatformPartnerSettlementsError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseGetPlatformPartnersHTTPResponse parses an HTTP response from a GetPlatformPartnersWithResponse call
func ParseGetPlatformPartnersHTTPResponse(rsp *http.Response) (*GetPlatformPartnersHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPlatformPartnersHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetPlatformPartnersResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GetPlatformPartnersError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest GetPlatformPartnersError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest GetPlatformPartnersError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseCreatePlatformPartnerHTTPResponse parses an HTTP response from a CreatePlatformPartnerWithResponse call
func ParseCreatePlatformPartnerHTTPResponse(rsp *http.Response) (*CreatePlatformPartnerHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreatePlatformPartnerHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreatePlatformPartnerResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest CreatePlatformPartnerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CreatePlatformPartnerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest CreatePlatformPartnerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest CreatePlatformPartnerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest CreatePlatformPartnerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseCreatePlatformPartnersHTTPResponse parses an HTTP response from a CreatePlatformPartnersWithResponse call
func ParseCreatePlatformPartnersHTTPResponse(rsp *http.Response) (*CreatePlatformPartnersHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreatePlatformPartnersHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreatePlatformPartnersResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest CreatePlatformPartnersError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CreatePlatformPartnersError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest CreatePlatformPartnersError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest CreatePlatformPartnersError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest CreatePlatformPartnersError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseSchedulePlatformPartnersHTTPResponse parses an HTTP response from a SchedulePlatformPartnersWithResponse call
func ParseSchedulePlatformPartnersHTTPResponse(rsp *http.Response) (*SchedulePlatformPartnersHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SchedulePlatformPartnersHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SchedulePlatformPartnersResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SchedulePlatformPartnersError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest SchedulePlatformPartnersError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest SchedulePlatformPartnersError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest SchedulePlatformPartnersError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest SchedulePlatformPartnersError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseGetPlatformPartnerHTTPResponse parses an HTTP response from a GetPlatformPartnerWithResponse call
func ParseGetPlatformPartnerHTTPResponse(rsp *http.Response) (*GetPlatformPartnerHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPlatformPartnerHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PlatformPartner
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GetPlatformPartnerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest GetPlatformPartnerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest GetPlatformPartnerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest GetPlatformPartnerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseUpdatePlatformPartnerHTTPResponse parses an HTTP response from a UpdatePlatformPartnerWithResponse call
func ParseUpdatePlatformPartnerHTTPResponse(rsp *http.Response) (*UpdatePlatformPartnerHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdatePlatformPartnerHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UpdatePlatformPartnerResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest UpdatePlatformPartnerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UpdatePlatformPartnerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest UpdatePlatformPartnerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest UpdatePlatformPartnerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest UpdatePlatformPartnerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseArchivePlatformPartnerHTTPResponse parses an HTTP response from a ArchivePlatformPartnerWithResponse call
func ParseArchivePlatformPartnerHTTPResponse(rsp *http.Response) (*ArchivePlatformPartnerHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ArchivePlatformPartnerHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArchivePlatformPartnerResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ArchivePlatformPartnerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ArchivePlatformPartnerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ArchivePlatformPartnerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ArchivePlatformPartnerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ArchivePlatformPartnerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseRecoverPlatformPartnerHTTPResponse parses an HTTP response from a RecoverPlatformPartnerWithResponse call
func ParseRecoverPlatformPartnerHTTPResponse(rsp *http.Response) (*RecoverPlatformPartnerHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RecoverPlatformPartnerHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RecoverPlatformPartnerResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RecoverPlatformPartnerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RecoverPlatformPartnerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest RecoverPlatformPartnerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest RecoverPlatformPartnerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseCancelPlatformPartnerScheduleHTTPResponse parses an HTTP response from a CancelPlatformPartnerScheduleWithResponse call
func ParseCancelPlatformPartnerScheduleHTTPResponse(rsp *http.Response) (*CancelPlatformPartnerScheduleHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CancelPlatformPartnerScheduleHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CancelPlatformPartnerScheduleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest CancelPlatformPartnerScheduleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CancelPlatformPartnerScheduleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest CancelPlatformPartnerScheduleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest CancelPlatformPartnerScheduleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetPlatformPartnerScheduleHTTPResponse parses an HTTP response from a GetPlatformPartnerScheduleWithResponse call
func ParseGetPlatformPartnerScheduleHTTPResponse(rsp *http.Response) (*GetPlatformPartnerScheduleHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPlatformPartnerScheduleHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PlatformPartner
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GetPlatformPartnerScheduleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest GetPlatformPartnerScheduleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest GetPlatformPartnerScheduleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest GetPlatformPartnerScheduleError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseSchedulePartnerHTTPResponse parses an HTTP response from a SchedulePartnerWithResponse call
func ParseSchedulePartnerHTTPResponse(rsp *http.Response) (*SchedulePartnerHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SchedulePartnerHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SchedulePlatformPartnerResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SchedulePartnerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest SchedulePartnerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest SchedulePartnerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest SchedulePartnerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest SchedulePartnerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseReschedulePartnerHTTPResponse parses an HTTP response from a ReschedulePartnerWithResponse call
func ParseReschedulePartnerHTTPResponse(rsp *http.Response) (*ReschedulePartnerHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReschedulePartnerHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ReschedulePlatformPartnerResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ReschedulePartnerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ReschedulePartnerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ReschedulePartnerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ReschedulePartnerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ReschedulePartnerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseGetPlatformPayoutsHTTPResponse parses an HTTP response from a GetPlatformPayoutsWithResponse call
func ParseGetPlatformPayoutsHTTPResponse(rsp *http.Response) (*GetPlatformPayoutsHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPlatformPayoutsHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetPlatformPayoutsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GetPlatformPayoutsError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest GetPlatformPayoutsError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest GetPlatformPayoutsError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseGetPlatformSettingHTTPResponse parses an HTTP response from a GetPlatformSettingWithResponse call
func ParseGetPlatformSettingHTTPResponse(rsp *http.Response) (*GetPlatformSettingHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPlatformSettingHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PlatformSetting
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GetPlatformSettingError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest GetPlatformSettingError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest GetPlatformSettingError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseUpdatePlatformSettingHTTPResponse parses an HTTP response from a UpdatePlatformSettingWithResponse call
func ParseUpdatePlatformSettingHTTPResponse(rsp *http.Response) (*UpdatePlatformSettingHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdatePlatformSettingHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UpdatePlatformSettingResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest UpdatePlatformSettingError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest UpdatePlatformSettingError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest UpdatePlatformSettingError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseGetPlatformTransferSummariesHTTPResponse parses an HTTP response from a GetPlatformTransferSummariesWithResponse call
func ParseGetPlatformTransferSummariesHTTPResponse(rsp *http.Response) (*GetPlatformTransferSummariesHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPlatformTransferSummariesHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetPlatformTransferSummariesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GetPlatformTransferSummariesError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest GetPlatformTransferSummariesError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest GetPlatformTransferSummariesError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseDownloadPlatformTransferSheetHTTPResponse parses an HTTP response from a DownloadPlatformTransferSheetWithResponse call
func ParseDownloadPlatformTransferSheetHTTPResponse(rsp *http.Response) (*DownloadPlatformTransferSheetHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DownloadPlatformTransferSheetHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest DownloadPlatformTransferSheetError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest DownloadPlatformTransferSheetError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseCreatePlatformManualTransferHTTPResponse parses an HTTP response from a CreatePlatformManualTransferWithResponse call
func ParseCreatePlatformManualTransferHTTPResponse(rsp *http.Response) (*CreatePlatformManualTransferHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreatePlatformManualTransferHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreateManualTransferResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest CreatePlatformManualTransferError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CreatePlatformManualTransferError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest CreatePlatformManualTransferError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest CreatePlatformManualTransferError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseCreatePlatformOrderTransferHTTPResponse parses an HTTP response from a CreatePlatformOrderTransferWithResponse call
func ParseCreatePlatformOrderTransferHTTPResponse(rsp *http.Response) (*CreatePlatformOrderTransferHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreatePlatformOrderTransferHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreateOrderTransferResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest CreatePlatformOrderTransferError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CreatePlatformOrderTransferError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest CreatePlatformOrderTransferError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest CreatePlatformOrderTransferError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest CreatePlatformOrderTransferError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseCreatePlatformOrderCancelTransferHTTPResponse parses an HTTP response from a CreatePlatformOrderCancelTransferWithResponse call
func ParseCreatePlatformOrderCancelTransferHTTPResponse(rsp *http.Response) (*CreatePlatformOrderCancelTransferHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreatePlatformOrderCancelTransferHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreateOrderCancelTransferResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest CreatePlatformOrderCancelTransferError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest CreatePlatformOrderCancelTransferError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest CreatePlatformOrderCancelTransferError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest CreatePlatformOrderCancelTransferError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest CreatePlatformOrderCancelTransferError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseDeletePlatformTransferHTTPResponse parses an HTTP response from a DeletePlatformTransferWithResponse call
func ParseDeletePlatformTransferHTTPResponse(rsp *http.Response) (*DeletePlatformTransferHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePlatformTransferHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeletePlatformTransferResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest DeletePlatformTransferError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest DeletePlatformTransferError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest DeletePlatformTransferError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest DeletePlatformTransferError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetPlatformTransferHTTPResponse parses an HTTP response from a GetPlatformTransferWithResponse call
func ParseGetPlatformTransferHTTPResponse(rsp *http.Response) (*GetPlatformTransferHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPlatformTransferHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PlatformTransfer
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GetPlatformTransferError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest GetPlatformTransferError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest GetPlatformTransferError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest GetPlatformTransferError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetPromotionHTTPResponse parses an HTTP response from a GetPromotionWithResponse call
func ParseGetPromotionHTTPResponse(rsp *http.Response) (*GetPromotionHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPromotionHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Promotion
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GetPromotionError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest GetPromotionError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest GetPromotionError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest GetPromotionError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseRefreshTokenHTTPResponse parses an HTTP response from a RefreshTokenWithResponse call
func ParseRefreshTokenHTTPResponse(rsp *http.Response) (*RefreshTokenHTTPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RefreshTokenHTTPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RefreshTokenResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest RefreshTokenError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest RefreshTokenError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}
